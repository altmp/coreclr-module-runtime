
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

#include "natives.h"
#include "../../c-api/data/types.h"
#include "../../c-api/data/function_table.h"
#include "../../c-api/client.h"
#include "Log.h"
#include <cstring>
#include <type_traits>
#include <stdlib.h>

std::shared_ptr<alt::INative::Context> ctx;

void InitNatives() {
	ctx = alt::ICore::Instance().CreateNativesContext();
}

const char* AllocateString(const char* str) {
	size_t stringSize = strlen(str);
	char* writable = new char[stringSize + 1];
	std::memcpy(writable, str, stringSize);
	writable[stringSize] = '\0';
	return writable;
}

static char* SaveString(const char* str) {
	if (str == nullptr) return nullptr;
	static char* stringValues[256] = { 0 };
	static int nextString = 0;
	if (stringValues[nextString]) free(stringValues[nextString]);
	char* _str = _strdup(str);
	stringValues[nextString] = _str;
	nextString = (nextString + 1) % 256;
	return _str;
}

void Native_wait(bool& success, int32_t _ms) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4EDE34FBADD967A6);
	ctx->Reset();
	ctx->Push(_ms);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_startNewScript(bool& success, const char* _scriptName, int32_t _stackSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE81651AD79516E48);
	ctx->Reset();
	ctx->Push(SaveString(_scriptName));
	ctx->Push(_stackSize);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_startNewScriptWithArgs(bool& success, const char* _scriptName, int32_t& _args, int32_t _argCount, int32_t _stackSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8BA7F44DF1575E1);
	ctx->Reset();
	ctx->Push(SaveString(_scriptName));
	auto ptr_args = _args;
	ctx->Push(&ptr_args);
	ctx->Push(_argCount);
	ctx->Push(_stackSize);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_args = ptr_args;
	return ctx->ResultInt();
}

int32_t Native_startNewScriptWithNameHash(bool& success, uint32_t _scriptHash, int32_t _stackSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB1C67C3A5333A92);
	ctx->Reset();
	ctx->Push(_scriptHash);
	ctx->Push(_stackSize);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_startNewScriptWithNameHashAndArgs(bool& success, uint32_t _scriptHash, int32_t& _args, int32_t _argCount, int32_t _stackSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC4BB298BD441BE78);
	ctx->Reset();
	ctx->Push(_scriptHash);
	auto ptr_args = _args;
	ctx->Push(&ptr_args);
	ctx->Push(_argCount);
	ctx->Push(_stackSize);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_args = ptr_args;
	return ctx->ResultInt();
}

int32_t Native_timera(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83666F9FB8FEBD4B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_timerb(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC9D9444186B5A374);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_settimera(bool& success, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC1B1E9A034A63A62);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_settimerb(bool& success, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5AE11BC36633DE4E);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_timestep(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0000000050597EE2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_sin(bool& success, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BADBFA3B172435F);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_cos(bool& success, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0FFB162F40A139C);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_sqrt(bool& success, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71D93B57D07F9804);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_pow(bool& success, float _base, float _exponent) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3621CC40F31FE2E);
	ctx->Reset();
	ctx->Push(_base);
	ctx->Push(_exponent);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_log10(bool& success, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE816E655DE37FE20);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_vmag(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x652D2EEEF1D3E62C);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_vmag2(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA8CEACB4F35AE058);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_vdist(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A488C176D52CCA5);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_vdist2(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB7A628320EFF8E47);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

int32_t Native_shiftLeft(bool& success, int32_t _value, int32_t _bitShift) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEDD95A39E5544DE8);
	ctx->Reset();
	ctx->Push(_value);
	ctx->Push(_bitShift);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_shiftRight(bool& success, int32_t _value, int32_t _bitShift) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97EF1E5BCE9DC075);
	ctx->Reset();
	ctx->Push(_value);
	ctx->Push(_bitShift);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_floor(bool& success, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF34EE736CF047844);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_ceil(bool& success, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11E019C8F43ACC8A);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_round(bool& success, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2DB717A73826179);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

float Native_toFloat(bool& success, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBBDA792448DB5A89);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setThisThreadPriority(bool& success, int32_t _priority) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42B65DEEF2EDF2A1);
	ctx->Reset();
	ctx->Push(_priority);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_appDataValid(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x846AA8E7D55EE5B6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_appGetInt(bool& success, const char* _property) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3A58A12C77D9D4B);
	ctx->Reset();
	ctx->Push(SaveString(_property));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

float Native_appGetFloat(bool& success, const char* _property) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1514FB24C02C2322);
	ctx->Reset();
	ctx->Push(SaveString(_property));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

const char* Native_appGetString(bool& success, const char* _property) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x749B023950D2311C);
	ctx->Reset();
	ctx->Push(SaveString(_property));
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

void Native_appSetInt(bool& success, const char* _property, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x607E8E3D3E4F9611);
	ctx->Reset();
	ctx->Push(SaveString(_property));
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_appSetFloat(bool& success, const char* _property, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25D7687C68E0DAA4);
	ctx->Reset();
	ctx->Push(SaveString(_property));
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_appSetString(bool& success, const char* _property, const char* _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3FF2FCEC4B7721B4);
	ctx->Reset();
	ctx->Push(SaveString(_property));
	ctx->Push(SaveString(_value));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_appSetApp(bool& success, const char* _appName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCFD0406ADAF90D2B);
	ctx->Reset();
	ctx->Push(SaveString(_appName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_appSetBlock(bool& success, const char* _blockName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x262AB456A3D21F93);
	ctx->Reset();
	ctx->Push(SaveString(_blockName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_appClearBlock(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FE1DF3342DB7DBA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_appCloseApp(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE41C65E07A5F05FC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_appCloseBlock(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE8E3FCF72EAC0EF8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_appHasLinkedSocialClubAccount(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71EEE69745088DA0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_appHasSyncedData(bool& success, const char* _appName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA52279A7271517F);
	ctx->Reset();
	ctx->Push(SaveString(_appName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_appSaveData(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95C5D356CDA6E85F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_appGetDeletedFileStatus(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC9853A2BE3DED1A6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_appDeleteAppData(bool& success, const char* _appName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44151AEA95C8A003);
	ctx->Reset();
	ctx->Push(SaveString(_appName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setDebugLinesAndSpheresDrawingActive(bool& success, uint8_t _enabled) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x175B6BFC15CDD0C5);
	ctx->Reset();
	ctx->Push((int32_t) _enabled);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawDebugLine(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _r, int32_t _g, int32_t _b, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FDFADE676AA3CB0);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawDebugLineWithTwoColours(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _r1, int32_t _g1, int32_t _b1, int32_t _r2, int32_t _g2, int32_t _b2, int32_t _alpha1, int32_t _alpha2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD8B9A8AC5608FF94);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_r1);
	ctx->Push(_g1);
	ctx->Push(_b1);
	ctx->Push(_r2);
	ctx->Push(_g2);
	ctx->Push(_b2);
	ctx->Push(_alpha1);
	ctx->Push(_alpha2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawDebugSphere(bool& success, float _x, float _y, float _z, float _radius, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAAD68E1AB39DA632);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawDebugBox(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _r, int32_t _g, int32_t _b, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x083A2CA4F2E573BD);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawDebugCross(bool& success, float _x, float _y, float _z, float _size, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x73B1189623049839);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_size);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawDebugText(bool& success, const char* _text, float _x, float _y, float _z, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3903E216620488E8);
	ctx->Reset();
	ctx->Push(SaveString(_text));
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawDebugText2d(bool& success, const char* _text, float _x, float _y, float _z, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA3BB2E9555C05A8F);
	ctx->Reset();
	ctx->Push(SaveString(_text));
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawLine(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B7256074AE34680);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawPoly(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _x3, float _y3, float _z3, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC26716048436851);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_x3);
	ctx->Push(_y3);
	ctx->Push(_z3);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawTexturedPoly(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _x3, float _y3, float _z3, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha, const char* _textureDict, const char* _textureName, float _u1, float _v1, float _w1, float _u2, float _v2, float _w2, float _u3, float _v3, float _w3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29280002282F1928);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_x3);
	ctx->Push(_y3);
	ctx->Push(_z3);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	ctx->Push(SaveString(_textureDict));
	ctx->Push(SaveString(_textureName));
	ctx->Push(_u1);
	ctx->Push(_v1);
	ctx->Push(_w1);
	ctx->Push(_u2);
	ctx->Push(_v2);
	ctx->Push(_w2);
	ctx->Push(_u3);
	ctx->Push(_v3);
	ctx->Push(_w3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawTexturedPolyWithThreeColours(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _x3, float _y3, float _z3, float _red1, float _green1, float _blue1, int32_t _alpha1, float _red2, float _green2, float _blue2, int32_t _alpha2, float _red3, float _green3, float _blue3, int32_t _alpha3, const char* _textureDict, const char* _textureName, float _u1, float _v1, float _w1, float _u2, float _v2, float _w2, float _u3, float _v3, float _w3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x736D7AA1B750856B);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_x3);
	ctx->Push(_y3);
	ctx->Push(_z3);
	ctx->Push(_red1);
	ctx->Push(_green1);
	ctx->Push(_blue1);
	ctx->Push(_alpha1);
	ctx->Push(_red2);
	ctx->Push(_green2);
	ctx->Push(_blue2);
	ctx->Push(_alpha2);
	ctx->Push(_red3);
	ctx->Push(_green3);
	ctx->Push(_blue3);
	ctx->Push(_alpha3);
	ctx->Push(SaveString(_textureDict));
	ctx->Push(SaveString(_textureName));
	ctx->Push(_u1);
	ctx->Push(_v1);
	ctx->Push(_w1);
	ctx->Push(_u2);
	ctx->Push(_v2);
	ctx->Push(_w2);
	ctx->Push(_u3);
	ctx->Push(_v3);
	ctx->Push(_w3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawBox(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3A9971CADAC7252);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBackfaceculling(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23BA6B0C2AD7B0D3);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDepthwriting(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5C8F970D4EDFF71);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_beginTakeMissionCreatorPhoto(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DD2139A9A20DCE8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getStatusOfTakeMissionCreatorPhoto(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90A78ECAA4E78453);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_freeMemoryForMissionCreatorPhoto(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A46AF8A78DC5E0A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_loadMissionCreatorPhoto(bool& success, int32_t& _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4862437A486F91B0);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

int32_t Native_getStatusOfLoadMissionCreatorPhoto(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1670F8D05056F257);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultInt();
}

uint8_t Native_beginCreateMissionCreatorPhotoPreview(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FA5D82B8F58EC06);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getStatusOfCreateMissionCreatorPhotoPreview(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B0316762AFD4A64);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_freeMemoryForMissionCreatorPhotoPreview(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x346EF3ECAAAB149E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_beginTakeHighQualityPhoto(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA67C35C56EB1BD9D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getStatusOfTakeHighQualityPhoto(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0D6CA79EEEBD8CA3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_freeMemoryForHighQualityPhoto(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD801CC02177FA3F1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTakenPhotoIsMugshot(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1BBC135A4D25EDDE);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setArenaThemeAndVariationForTakenPhoto(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3F776ADA161E47D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_saveHighQualityPhoto(bool& success, int32_t _unused) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3DEC726C25A11BAC);
	ctx->Reset();
	ctx->Push(_unused);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getStatusOfSaveHighQualityPhoto(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C0C4E81E1AC60A0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_beginCreateLowQualityCopyOfPhoto(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x759650634F07B6B4);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getStatusOfCreateLowQualityCopyOfPhoto(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB82A0BF0E3E3265);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_freeMemoryForLowQualityPhoto(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A12D88881435DCA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawLowQualityPhotoToPhone(bool& success, uint8_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1072F115DAB0717E);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getMaximumNumberOfPhotos(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34D23450F028B0BF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getMaximumNumberOfCloudPhotos(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC54A7AF8B3A14EF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getCurrentNumberOfCloudPhotos(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x473151EBC762C6DA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_queueOperationToCreateSortedListOfPhotos(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A893980E96B659A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getStatusOfSortedListOperation(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF5BED327CEA362B1);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_clearStatusOfSortedListOperation(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4AF92ACD3141D96C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesThisPhotoSlotContainAValidPhoto(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE791DF1F73ED2C8B);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_loadHighQualityPhoto(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC72C258667BE5EA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getLoadHighQualityPhotoStatus(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x40AFB081F8ADD4EE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_drawLightWithRangeex(bool& success, float _x, float _y, float _z, int32_t _r, int32_t _g, int32_t _b, float _range, float _intensity, float _shadow) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF49E9A9716A04595);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_range);
	ctx->Push(_intensity);
	ctx->Push(_shadow);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawLightWithRange(bool& success, float _posX, float _posY, float _posZ, int32_t _colorR, int32_t _colorG, int32_t _colorB, float _range, float _intensity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2A1B2771A01DBD4);
	ctx->Reset();
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_colorR);
	ctx->Push(_colorG);
	ctx->Push(_colorB);
	ctx->Push(_range);
	ctx->Push(_intensity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawSpotLight(bool& success, float _posX, float _posY, float _posZ, float _dirX, float _dirY, float _dirZ, int32_t _colorR, int32_t _colorG, int32_t _colorB, float _distance, float _brightness, float _hardness, float _radius, float _falloff) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0F64B265C8C8B33);
	ctx->Reset();
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_dirX);
	ctx->Push(_dirY);
	ctx->Push(_dirZ);
	ctx->Push(_colorR);
	ctx->Push(_colorG);
	ctx->Push(_colorB);
	ctx->Push(_distance);
	ctx->Push(_brightness);
	ctx->Push(_hardness);
	ctx->Push(_radius);
	ctx->Push(_falloff);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawShadowedSpotLight(bool& success, float _posX, float _posY, float _posZ, float _dirX, float _dirY, float _dirZ, int32_t _colorR, int32_t _colorG, int32_t _colorB, float _distance, float _brightness, float _roundness, float _radius, float _falloff, int32_t _shadowId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BCA583A583194DB);
	ctx->Reset();
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_dirX);
	ctx->Push(_dirY);
	ctx->Push(_dirZ);
	ctx->Push(_colorR);
	ctx->Push(_colorG);
	ctx->Push(_colorB);
	ctx->Push(_distance);
	ctx->Push(_brightness);
	ctx->Push(_roundness);
	ctx->Push(_radius);
	ctx->Push(_falloff);
	ctx->Push(_shadowId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_fadeUpPedLight(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC9B18B4619F48F7B);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_updateLightsOnEntity(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDEADC0DEDEADC0DE);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setLightOverrideMaxIntensityScale(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9641588DAB93B4B5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getLightOverrideMaxIntensityScale(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x393BD2275CEB7793);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_drawMarker(bool& success, int32_t _type, float _posX, float _posY, float _posZ, float _dirX, float _dirY, float _dirZ, float _rotX, float _rotY, float _rotZ, float _scaleX, float _scaleY, float _scaleZ, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha, uint8_t _bobUpAndDown, uint8_t _faceCamera, int32_t _p19, uint8_t _rotate, const char* _textureDict, const char* _textureName, uint8_t _drawOnEnts) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28477EC23D892089);
	ctx->Reset();
	ctx->Push(_type);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_dirX);
	ctx->Push(_dirY);
	ctx->Push(_dirZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_scaleX);
	ctx->Push(_scaleY);
	ctx->Push(_scaleZ);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	ctx->Push((int32_t) _bobUpAndDown);
	ctx->Push((int32_t) _faceCamera);
	ctx->Push(_p19);
	ctx->Push((int32_t) _rotate);
	ctx->Push(SaveString(_textureDict));
	ctx->Push(SaveString(_textureName));
	ctx->Push((int32_t) _drawOnEnts);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawMarkerEx(bool& success, int32_t _type, float _posX, float _posY, float _posZ, float _dirX, float _dirY, float _dirZ, float _rotX, float _rotY, float _rotZ, float _scaleX, float _scaleY, float _scaleZ, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha, uint8_t _bobUpAndDown, uint8_t _faceCamera, int32_t _p19, uint8_t _rotate, const char* _textureDict, const char* _textureName, uint8_t _drawOnEnts, uint8_t _p24, uint8_t _p25) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE82728F0DE75D13A);
	ctx->Reset();
	ctx->Push(_type);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_dirX);
	ctx->Push(_dirY);
	ctx->Push(_dirZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_scaleX);
	ctx->Push(_scaleY);
	ctx->Push(_scaleZ);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	ctx->Push((int32_t) _bobUpAndDown);
	ctx->Push((int32_t) _faceCamera);
	ctx->Push(_p19);
	ctx->Push((int32_t) _rotate);
	ctx->Push(SaveString(_textureDict));
	ctx->Push(SaveString(_textureName));
	ctx->Push((int32_t) _drawOnEnts);
	ctx->Push((int32_t) _p24);
	ctx->Push((int32_t) _p25);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawMarkerSphere(bool& success, float _x, float _y, float _z, float _radius, int32_t _red, int32_t _green, int32_t _blue, float _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x799017F9E3B10112);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_createCheckpoint(bool& success, int32_t _type, float _posX1, float _posY1, float _posZ1, float _posX2, float _posY2, float _posZ2, float _diameter, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha, int32_t _reserved) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0134F0835AB6BFCB);
	ctx->Reset();
	ctx->Push(_type);
	ctx->Push(_posX1);
	ctx->Push(_posY1);
	ctx->Push(_posZ1);
	ctx->Push(_posX2);
	ctx->Push(_posY2);
	ctx->Push(_posZ2);
	ctx->Push(_diameter);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	ctx->Push(_reserved);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setCheckpointInsideCylinderHeightScale(bool& success, int32_t _checkpoint, float _scale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4B5B4DA5D79F1943);
	ctx->Reset();
	ctx->Push(_checkpoint);
	ctx->Push(_scale);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCheckpointInsideCylinderScale(bool& success, int32_t _checkpoint, float _scale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44621483FF966526);
	ctx->Reset();
	ctx->Push(_checkpoint);
	ctx->Push(_scale);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCheckpointCylinderHeight(bool& success, int32_t _checkpoint, float _nearHeight, float _farHeight, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2707AAE9D9297D89);
	ctx->Reset();
	ctx->Push(_checkpoint);
	ctx->Push(_nearHeight);
	ctx->Push(_farHeight);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCheckpointRgba(bool& success, int32_t _checkpoint, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7167371E8AD747F7);
	ctx->Reset();
	ctx->Push(_checkpoint);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCheckpointRgba2(bool& success, int32_t _checkpoint, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9EA40907C680580);
	ctx->Reset();
	ctx->Push(_checkpoint);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCheckpointClipplaneWithPosNorm(bool& success, int32_t _checkpoint, float _posX, float _posY, float _posZ, float _unkX, float _unkY, float _unkZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF51D36185993515D);
	ctx->Reset();
	ctx->Push(_checkpoint);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_unkX);
	ctx->Push(_unkY);
	ctx->Push(_unkZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCheckpointForceOldArrowPointing(bool& success, int32_t _checkpoint) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFCF6788FC4860CD4);
	ctx->Reset();
	ctx->Push(_checkpoint);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCheckpointDecalRotAlignedToCameraRot(bool& success, int32_t _checkpoint) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x615D3925E87A3B26);
	ctx->Reset();
	ctx->Push(_checkpoint);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCheckpointForceDirection(bool& success, int32_t _checkpoint) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB1EA9411C8911EC);
	ctx->Reset();
	ctx->Push(_checkpoint);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCheckpointDirection(bool& success, int32_t _checkpoint, float _posX, float _posY, float _posZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C788E7F6438754D);
	ctx->Reset();
	ctx->Push(_checkpoint);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_deleteCheckpoint(bool& success, int32_t _checkpoint) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF5ED37F54CD4D52E);
	ctx->Reset();
	ctx->Push(_checkpoint);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_dontRenderInGameUi(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x22A249A53034450A);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceRenderInGameUi(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC459CFA0CCE245B);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_requestStreamedTextureDict(bool& success, const char* _textureDict, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFA2EF8E04127DD5);
	ctx->Reset();
	ctx->Push(SaveString(_textureDict));
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasStreamedTextureDictLoaded(bool& success, const char* _textureDict) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0145F696AAAAD2E4);
	ctx->Reset();
	ctx->Push(SaveString(_textureDict));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setStreamedTextureDictAsNoLongerNeeded(bool& success, const char* _textureDict) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE2CACCF5A8AA805);
	ctx->Reset();
	ctx->Push(SaveString(_textureDict));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawRect(bool& success, float _x, float _y, float _width, float _height, int32_t _r, int32_t _g, int32_t _b, int32_t _a, uint8_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A618A217E5154F0);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_width);
	ctx->Push(_height);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_a);
	ctx->Push((int32_t) _p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setScriptGfxDrawBehindPausemenu(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6372ECD45D73BCD);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setScriptGfxDrawOrder(bool& success, int32_t _drawOrder) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61BB1D9B3A95D802);
	ctx->Reset();
	ctx->Push(_drawOrder);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setScriptGfxAlign(bool& success, int32_t _horizontalAlign, int32_t _verticalAlign) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8A850F20A067EB6);
	ctx->Reset();
	ctx->Push(_horizontalAlign);
	ctx->Push(_verticalAlign);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetScriptGfxAlign(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3A3DB414A373DAB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setScriptGfxAlignParams(bool& success, float _x, float _y, float _w, float _h) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF5A2C681787E579D);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_w);
	ctx->Push(_h);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getScriptGfxAlignPosition(bool& success, float _x, float _y, float& _calculatedX, float& _calculatedY) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6DD8F5AA635EB4B2);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	auto ptr_calculatedX = _calculatedX;
	ctx->Push(&ptr_calculatedX);
	auto ptr_calculatedY = _calculatedY;
	ctx->Push(&ptr_calculatedY);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_calculatedX = ptr_calculatedX;
	_calculatedY = ptr_calculatedY;
}

float Native_getSafeZoneSize(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBAF107B6BB2C97F0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_drawSprite(bool& success, const char* _textureDict, const char* _textureName, float _screenX, float _screenY, float _width, float _height, float _heading, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha, uint8_t _p11, int32_t _p12) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE7FFAE5EBF23D890);
	ctx->Reset();
	ctx->Push(SaveString(_textureDict));
	ctx->Push(SaveString(_textureName));
	ctx->Push(_screenX);
	ctx->Push(_screenY);
	ctx->Push(_width);
	ctx->Push(_height);
	ctx->Push(_heading);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	ctx->Push((int32_t) _p11);
	ctx->Push(_p12);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawSpriteArx(bool& success, const char* _textureDict, const char* _textureName, float _x, float _y, float _width, float _height, float _p6, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha, int32_t _p11, int32_t _p12) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D3B147AFAD49DE0);
	ctx->Reset();
	ctx->Push(SaveString(_textureDict));
	ctx->Push(SaveString(_textureName));
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_width);
	ctx->Push(_height);
	ctx->Push(_p6);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	ctx->Push(_p11);
	ctx->Push(_p12);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawSpriteNamedRendertarget(bool& success, const char* _textureDict, const char* _textureName, float _screenX, float _screenY, float _width, float _height, float _heading, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha, int32_t _p11) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2BC54A8188768488);
	ctx->Reset();
	ctx->Push(SaveString(_textureDict));
	ctx->Push(SaveString(_textureName));
	ctx->Push(_screenX);
	ctx->Push(_screenY);
	ctx->Push(_width);
	ctx->Push(_height);
	ctx->Push(_heading);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	ctx->Push(_p11);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawSpriteArxWithUv(bool& success, const char* _textureDict, const char* _textureName, float _x, float _y, float _width, float _height, float _u1, float _v1, float _u2, float _v2, float _heading, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha, int32_t _p15) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95812F9B26074726);
	ctx->Reset();
	ctx->Push(SaveString(_textureDict));
	ctx->Push(SaveString(_textureName));
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_width);
	ctx->Push(_height);
	ctx->Push(_u1);
	ctx->Push(_v1);
	ctx->Push(_u2);
	ctx->Push(_v2);
	ctx->Push(_heading);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	ctx->Push(_p15);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_addEntityIcon(bool& success, int32_t _entity, const char* _icon) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9CD43EEE12BF4DD0);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(SaveString(_icon));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setEntityIconVisibility(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE0E8BEECCA96BA31);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityIconColor(bool& success, int32_t _entity, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D5F595CCAE2E238);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDrawOrigin(bool& success, float _x, float _y, float _z, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA0008F3BBB8F416);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearDrawOrigin(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF0B610F6BE0D7AF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_setBinkMovie(bool& success, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x338D9F609FD632DB);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_playBinkMovie(bool& success, int32_t _binkMovie) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70D2CC8A542A973C);
	ctx->Reset();
	ctx->Push(_binkMovie);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopBinkMovie(bool& success, int32_t _binkMovie) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x63606A61DE68898A);
	ctx->Reset();
	ctx->Push(_binkMovie);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_releaseBinkMovie(bool& success, int32_t _binkMovie) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x04D950EEFA4EED8C);
	ctx->Reset();
	ctx->Push(_binkMovie);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawBinkMovie(bool& success, int32_t _binkMovie, float _p1, float _p2, float _p3, float _p4, float _p5, int32_t _r, int32_t _g, int32_t _b, int32_t _a) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7118E83EEB9F7238);
	ctx->Reset();
	ctx->Push(_binkMovie);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_a);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBinkMovieTime(bool& success, int32_t _binkMovie, float _progress) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0CB6B3446855B57A);
	ctx->Reset();
	ctx->Push(_binkMovie);
	ctx->Push(_progress);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getBinkMovieTime(bool& success, int32_t _binkMovie) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8E17DDD6B9D5BF29);
	ctx->Reset();
	ctx->Push(_binkMovie);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setBinkMovieVolume(bool& success, int32_t _binkMovie, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAFF33B1178172223);
	ctx->Reset();
	ctx->Push(_binkMovie);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_attachTvAudioToEntity(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x845BAD77CC770633);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBinkMovieAudioFrontend(bool& success, int32_t _binkMovie, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF816F2933752322D);
	ctx->Reset();
	ctx->Push(_binkMovie);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTvAudioFrontend(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x113D2C5DC57E1774);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBinkShouldSkip(bool& success, int32_t _binkMovie, uint8_t _bShouldSkip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6805D58CAA427B72);
	ctx->Reset();
	ctx->Push(_binkMovie);
	ctx->Push((int32_t) _bShouldSkip);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_loadMovieMeshSet(bool& success, const char* _movieMeshSetName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB66064452270E8F1);
	ctx->Reset();
	ctx->Push(SaveString(_movieMeshSetName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_releaseMovieMeshSet(bool& success, int32_t _movieMeshSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB119AA014E89183);
	ctx->Reset();
	ctx->Push(_movieMeshSet);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_queryMovieMeshSetState(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B6E70C5CEEF4EEB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_getScreenResolution(bool& success, int32_t& _x, int32_t& _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x888D57E407E63624);
	ctx->Reset();
	auto ptr_x = _x;
	ctx->Push(&ptr_x);
	auto ptr_y = _y;
	ctx->Push(&ptr_y);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_x = ptr_x;
	_y = ptr_y;
}

void Native_getActualScreenResolution(bool& success, int32_t& _x, int32_t& _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x873C9F3104101DD3);
	ctx->Reset();
	auto ptr_x = _x;
	ctx->Push(&ptr_x);
	auto ptr_y = _y;
	ctx->Push(&ptr_y);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_x = ptr_x;
	_y = ptr_y;
}

float Native_getAspectRatio(bool& success, uint8_t _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1307EF624A80D87);
	ctx->Reset();
	ctx->Push((int32_t) _b);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getScreenAspectRatio(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2EBE8CBC58B90E9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

uint8_t Native_getIsWidescreen(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x30CF4BDA4FCB1905);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getIsHidef(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84ED31191CC5D2C9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_adjustNextPosSizeAsNormalized169(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEFABC7722293DA7C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setNightvision(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x18F621F7A5B1F85D);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getRequestingnightvision(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35FB78DC42B7BD21);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getUsingnightvision(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2202A3F42C8E5F79);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setExposuretweak(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF398BEEE4EF45F9);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceExposureReadback(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x814AF7DCAACC597B);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_overrideNightvisionLightRange(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43FA7CBE20DAB219);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setNoiseoveride(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE787BF1C5CF823C9);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setNoisinessoveride(bool& success, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB6A7C3BB17A0C67);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getScreenCoordFromWorldCoord(bool& success, float _worldX, float _worldY, float _worldZ, float& _screenX, float& _screenY) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34E82F05DF2974F5);
	ctx->Reset();
	ctx->Push(_worldX);
	ctx->Push(_worldY);
	ctx->Push(_worldZ);
	auto ptr_screenX = _screenX;
	ctx->Push(&ptr_screenX);
	auto ptr_screenY = _screenY;
	ctx->Push(&ptr_screenY);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_screenX = ptr_screenX;
	_screenY = ptr_screenY;
	return ctx->ResultBool();
}

vector3_t Native_getTextureResolution(bool& success, const char* _textureDict, const char* _textureName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35736EE65BD00C11);
	ctx->Reset();
	ctx->Push(SaveString(_textureDict));
	ctx->Push(SaveString(_textureName));
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

uint8_t Native_overridePedCrewLogoTexture(bool& success, int32_t _ped, const char* _txd, const char* _txn) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95EB5E34F821BABE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_txd));
	ctx->Push(SaveString(_txn));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setDistanceBlurStrengthOverride(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE2892E7E55D7073A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFlash(bool& success, float _p0, float _p1, float _fadeIn, float _duration, float _fadeOut) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0AB84296FED9CFC6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_fadeIn);
	ctx->Push(_duration);
	ctx->Push(_fadeOut);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableOcclusionThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3669F1B198DCAA4F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setArtificialLightsState(bool& success, uint8_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1268615ACE24D504);
	ctx->Reset();
	ctx->Push((int32_t) _state);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setArtificialVehicleLightsState(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE2B187C0939B3D32);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableHdtexThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC35A6D07C93802B2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_createTrackedPoint(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE2C9439ED45DEA60);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setTrackedPointInfo(bool& success, int32_t _point, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x164ECBB3CF750CB0);
	ctx->Reset();
	ctx->Push(_point);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isTrackedPointVisible(bool& success, int32_t _point) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC45CCDAAC9221CA8);
	ctx->Reset();
	ctx->Push(_point);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_destroyTrackedPoint(bool& success, int32_t _point) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB25DC90BAD56CA42);
	ctx->Reset();
	ctx->Push(_point);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_setGrassCullSphere(bool& success, float _p0, float _p1, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE197EAA669238F4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_removeGrassCullSphere(bool& success, int32_t _handle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61F95E5BB3E0A8C6);
	ctx->Reset();
	ctx->Push(_handle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_procgrassEnableCullsphere(bool& success, int32_t _handle, float _x, float _y, float _z, float _scale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE51BC858F32BA66);
	ctx->Reset();
	ctx->Push(_handle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_scale);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_procgrassDisableCullsphere(bool& success, int32_t _handle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x649C97D52332341A);
	ctx->Reset();
	ctx->Push(_handle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_procgrassIsCullsphereEnabled(bool& success, int32_t _handle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C42340F916C5930);
	ctx->Reset();
	ctx->Push(_handle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_procgrassEnableAmbscalescan(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14FC5833464340A8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_procgrassDisableAmbscalescan(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0218BA067D249DEA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableProcobjCreation(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1612C45F9E3E0D44);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_enableProcobjCreation(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5DEBD9C4DC995692);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_grassbatchEnableFlatteningExtInSphere(bool& success, float _x, float _y, float _z, int32_t _p3, float _p4, float _p5, float _p6, float _scale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAAE9BE70EC7C69AB);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_scale);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_grassbatchEnableFlatteningInSphere(bool& success, float _x, float _y, float _z, float _radius, float _p4, float _p5, float _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D955F6A9E0295B1);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_grassbatchDisableFlattening(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x302C91AB2D477F7E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cascadeShadowsInitSession(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x03FC694AE06C5A20);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cascadeShadowsSetCascadeBounds(bool& success, int32_t _p0, uint8_t _p1, float _p2, float _p3, float _p4, float _p5, uint8_t _p6, float _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2936CAB8B58FCBD);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push((int32_t) _p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cascadeShadowsSetCascadeBoundsScale(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F0F3F56635809EF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cascadeShadowsSetEntityTrackerScale(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E9DAF5A20F15908);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cascadeShadowsSetSplitZExpWeight(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36F6626459D91457);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cascadeShadowsSetBoundPosition(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x259BA6D4E6F808F1);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cascadeShadowsEnableEntityTracker(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80ECBC0C856D3B0B);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cascadeShadowsSetScreenSizeCheckEnabled(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25FC3E33A31AD0C9);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cascadeShadowsSetShadowSampleType(bool& success, const char* _type) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB11D94BC55F41932);
	ctx->Reset();
	ctx->Push(SaveString(_type));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cascadeShadowsClearShadowSampleType(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27CB772218215325);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cascadeShadowsSetAircraftMode(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6DDBF9DFFC4AC080);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cascadeShadowsSetDynamicDepthMode(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD39D13C9FEBF0511);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cascadeShadowsSetDynamicDepthValue(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02AC28F3A01FA04A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cascadeShadowsEnableFreezer(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0AE73D8DF3A762B2);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_waterReflectionSetScriptObjectVisibility(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA465D9CC0D231BA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_golfTrailSetEnabled(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA51C4B86B71652AE);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_golfTrailSetPath(bool& success, float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6, float _p7, uint8_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x312342E1A4874F3F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push((int32_t) _p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_golfTrailSetRadius(bool& success, float _p0, float _p1, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2485D34E50A22E84);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_golfTrailSetColour(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8, int32_t _p9, int32_t _p10, int32_t _p11) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x12995F2E53FFA601);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_golfTrailSetTessellation(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDBAA5EC848BA2D46);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_golfTrailSetFixedControlPointEnable(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0416B061F2B7E5E);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_golfTrailSetFixedControlPoint(bool& success, int32_t _type, float _xPos, float _yPos, float _zPos, float _p4, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1BB03742917A5D6);
	ctx->Reset();
	ctx->Push(_type);
	ctx->Push(_xPos);
	ctx->Push(_yPos);
	ctx->Push(_zPos);
	ctx->Push(_p4);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_golfTrailSetShaderParams(bool& success, float _p0, float _p1, float _p2, float _p3, float _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9CFDD90B2B844BF7);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_golfTrailSetFacing(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06F761EA47C1D3ED);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_golfTrailGetMaxHeight(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA4819F5E23E2FFAD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

vector3_t Native_golfTrailGetVisualControlPoint(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA4664972A9B8F8BA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

void Native_setSeethrough(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7E08924259E08CE0);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getUsingseethrough(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44B80ABAB9D80BD3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_seethroughReset(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70A64C0234EF522C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_seethroughSetFadeStartdistance(bool& success, float _distance) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA78DE25577300BA1);
	ctx->Reset();
	ctx->Push(_distance);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_seethroughSetFadeEnddistance(bool& success, float _distance) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D75795B9DC6EBBF);
	ctx->Reset();
	ctx->Push(_distance);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_seethroughGetMaxThickness(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43DBAE39626CE83F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_seethroughSetMaxThickness(bool& success, float _thickness) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C8FAC83902A62DF);
	ctx->Reset();
	ctx->Push(_thickness);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_seethroughSetNoiseMin(bool& success, float _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF5992E1C9E65D05);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_seethroughSetNoiseMax(bool& success, float _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFEBFBFDFB66039DE);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_seethroughSetHilightIntensity(bool& success, float _intensity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19E50EB6E33E1D28);
	ctx->Reset();
	ctx->Push(_intensity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_seethroughSetHighlightNoise(bool& success, float _noise) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1636D7FC127B10D2);
	ctx->Reset();
	ctx->Push(_noise);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_seethroughSetHeatscale(bool& success, int32_t _index, float _heatScale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7D0B00177485411);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push(_heatScale);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_seethroughSetColorNear(bool& success, int32_t _red, int32_t _green, int32_t _blue) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1086127B3A63505E);
	ctx->Reset();
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMotionblurMaxVelScaler(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3C641F3630BF6DA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getMotionblurMaxVelScaler(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE59343E9E96529E7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setForceMotionblur(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A51F78772175A51);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_togglePlayerDamageOverlay(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE63D7C6EECECB66B);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetAdaptation(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3E2C1B4C59DBC77);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_triggerScreenblurFadeIn(bool& success, float _transitionTime) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA328A24AAA6B7FDC);
	ctx->Reset();
	ctx->Push(_transitionTime);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_triggerScreenblurFadeOut(bool& success, float _transitionTime) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEFACC8AEF94430D5);
	ctx->Reset();
	ctx->Push(_transitionTime);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_disableScreenblurFade(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE81239437E8C5A8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getScreenblurFadeCurrentTime(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CCABFFCA31DDE33);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

uint8_t Native_isScreenblurFadeRunning(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7B226C785A52A0A9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_togglePausedRenderphases(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFC252D8A3E15AB7);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getTogglePausedRenderphasesStatus(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB3DAC2C86001E5E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_resetPausedRenderphases(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE1C8709406F2C41C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_grabPausemenuOwnership(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x851CD923176EBA7C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setHidofOverride(bool& success, uint8_t _p0, uint8_t _p1, float _nearplaneOut, float _nearplaneIn, float _farplaneOut, float _farplaneIn) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA3D65906822BED5);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push((int32_t) _p1);
	ctx->Push(_nearplaneOut);
	ctx->Push(_nearplaneIn);
	ctx->Push(_farplaneOut);
	ctx->Push(_farplaneIn);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setLockAdaptiveDofDistance(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB569F41F3E7E83A4);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_phonephotoeditorToggle(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7AC24EAB6D74118D);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_phonephotoeditorIsActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBCEDB009461DA156);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_phonephotoeditorSetFrameTxd(bool& success, const char* _textureDict, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27FEB5254759CDE3);
	ctx->Reset();
	ctx->Push(SaveString(_textureDict));
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_startParticleFxNonLoopedAtCoord(bool& success, const char* _effectName, float _xPos, float _yPos, float _zPos, float _xRot, float _yRot, float _zRot, float _scale, uint8_t _xAxis, uint8_t _yAxis, uint8_t _zAxis) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25129531F77B9ED3);
	ctx->Reset();
	ctx->Push(SaveString(_effectName));
	ctx->Push(_xPos);
	ctx->Push(_yPos);
	ctx->Push(_zPos);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_scale);
	ctx->Push((int32_t) _xAxis);
	ctx->Push((int32_t) _yAxis);
	ctx->Push((int32_t) _zAxis);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_startNetworkedParticleFxNonLoopedAtCoord(bool& success, const char* _effectName, float _xPos, float _yPos, float _zPos, float _xRot, float _yRot, float _zRot, float _scale, uint8_t _xAxis, uint8_t _yAxis, uint8_t _zAxis, uint8_t _p11) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF56B8137DF10135D);
	ctx->Reset();
	ctx->Push(SaveString(_effectName));
	ctx->Push(_xPos);
	ctx->Push(_yPos);
	ctx->Push(_zPos);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_scale);
	ctx->Push((int32_t) _xAxis);
	ctx->Push((int32_t) _yAxis);
	ctx->Push((int32_t) _zAxis);
	ctx->Push((int32_t) _p11);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_startParticleFxNonLoopedOnPedBone(bool& success, const char* _effectName, int32_t _ped, float _offsetX, float _offsetY, float _offsetZ, float _rotX, float _rotY, float _rotZ, int32_t _boneIndex, float _scale, uint8_t _axisX, uint8_t _axisY, uint8_t _axisZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0E7E72961BA18619);
	ctx->Reset();
	ctx->Push(SaveString(_effectName));
	ctx->Push(_ped);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_boneIndex);
	ctx->Push(_scale);
	ctx->Push((int32_t) _axisX);
	ctx->Push((int32_t) _axisY);
	ctx->Push((int32_t) _axisZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_startNetworkedParticleFxNonLoopedOnPedBone(bool& success, const char* _effectName, int32_t _ped, float _offsetX, float _offsetY, float _offsetZ, float _rotX, float _rotY, float _rotZ, int32_t _boneIndex, float _scale, uint8_t _axisX, uint8_t _axisY, uint8_t _axisZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA41B6A43642AC2CF);
	ctx->Reset();
	ctx->Push(SaveString(_effectName));
	ctx->Push(_ped);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_boneIndex);
	ctx->Push(_scale);
	ctx->Push((int32_t) _axisX);
	ctx->Push((int32_t) _axisY);
	ctx->Push((int32_t) _axisZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_startParticleFxNonLoopedOnEntity(bool& success, const char* _effectName, int32_t _entity, float _offsetX, float _offsetY, float _offsetZ, float _rotX, float _rotY, float _rotZ, float _scale, uint8_t _axisX, uint8_t _axisY, uint8_t _axisZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0D53A3B8DA0809D2);
	ctx->Reset();
	ctx->Push(SaveString(_effectName));
	ctx->Push(_entity);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_scale);
	ctx->Push((int32_t) _axisX);
	ctx->Push((int32_t) _axisY);
	ctx->Push((int32_t) _axisZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_startNetworkedParticleFxNonLoopedOnEntity(bool& success, const char* _effectName, int32_t _entity, float _offsetX, float _offsetY, float _offsetZ, float _rotX, float _rotY, float _rotZ, float _scale, uint8_t _axisX, uint8_t _axisY, uint8_t _axisZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC95EB1DB6E92113D);
	ctx->Reset();
	ctx->Push(SaveString(_effectName));
	ctx->Push(_entity);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_scale);
	ctx->Push((int32_t) _axisX);
	ctx->Push((int32_t) _axisY);
	ctx->Push((int32_t) _axisZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_startParticleFxNonLoopedOnEntityBone(bool& success, const char* _effectName, int32_t _entity, float _offsetX, float _offsetY, float _offsetZ, float _rotX, float _rotY, float _rotZ, int32_t _boneIndex, float _scale, uint8_t _axisX, uint8_t _axisY, uint8_t _axisZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02B1F2A72E0F5325);
	ctx->Reset();
	ctx->Push(SaveString(_effectName));
	ctx->Push(_entity);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_boneIndex);
	ctx->Push(_scale);
	ctx->Push((int32_t) _axisX);
	ctx->Push((int32_t) _axisY);
	ctx->Push((int32_t) _axisZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setParticleFxNonLoopedColour(bool& success, float _r, float _g, float _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26143A59EF48B262);
	ctx->Reset();
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setParticleFxNonLoopedAlpha(bool& success, float _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77168D722C58B2FC);
	ctx->Reset();
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setParticleFxNonLoopedEmitterSize(bool& success, float _p0, float _p1, float _scale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E2E01C00837D26E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_scale);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setParticleFxForceVehicleInterior(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8CDE909A0370BB3A);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_startParticleFxLoopedAtCoord(bool& success, const char* _effectName, float _x, float _y, float _z, float _xRot, float _yRot, float _zRot, float _scale, uint8_t _xAxis, uint8_t _yAxis, uint8_t _zAxis, uint8_t _p11) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE184F4F0DC5910E7);
	ctx->Reset();
	ctx->Push(SaveString(_effectName));
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_scale);
	ctx->Push((int32_t) _xAxis);
	ctx->Push((int32_t) _yAxis);
	ctx->Push((int32_t) _zAxis);
	ctx->Push((int32_t) _p11);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_startParticleFxLoopedOnPedBone(bool& success, const char* _effectName, int32_t _ped, float _xOffset, float _yOffset, float _zOffset, float _xRot, float _yRot, float _zRot, int32_t _boneIndex, float _scale, uint8_t _xAxis, uint8_t _yAxis, uint8_t _zAxis) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF28DA9F38CD1787C);
	ctx->Reset();
	ctx->Push(SaveString(_effectName));
	ctx->Push(_ped);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_boneIndex);
	ctx->Push(_scale);
	ctx->Push((int32_t) _xAxis);
	ctx->Push((int32_t) _yAxis);
	ctx->Push((int32_t) _zAxis);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_startParticleFxLoopedOnEntity(bool& success, const char* _effectName, int32_t _entity, float _xOffset, float _yOffset, float _zOffset, float _xRot, float _yRot, float _zRot, float _scale, uint8_t _xAxis, uint8_t _yAxis, uint8_t _zAxis) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1AE42C1660FD6517);
	ctx->Reset();
	ctx->Push(SaveString(_effectName));
	ctx->Push(_entity);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_scale);
	ctx->Push((int32_t) _xAxis);
	ctx->Push((int32_t) _yAxis);
	ctx->Push((int32_t) _zAxis);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_startParticleFxLoopedOnEntityBone(bool& success, const char* _effectName, int32_t _entity, float _xOffset, float _yOffset, float _zOffset, float _xRot, float _yRot, float _zRot, int32_t _boneIndex, float _scale, uint8_t _xAxis, uint8_t _yAxis, uint8_t _zAxis) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6EB449E33977F0B);
	ctx->Reset();
	ctx->Push(SaveString(_effectName));
	ctx->Push(_entity);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_boneIndex);
	ctx->Push(_scale);
	ctx->Push((int32_t) _xAxis);
	ctx->Push((int32_t) _yAxis);
	ctx->Push((int32_t) _zAxis);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_startNetworkedParticleFxLoopedOnEntity(bool& success, const char* _effectName, int32_t _entity, float _xOffset, float _yOffset, float _zOffset, float _xRot, float _yRot, float _zRot, float _scale, uint8_t _xAxis, uint8_t _yAxis, uint8_t _zAxis, float _r, float _g, float _b, float _a) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F60E89A7B64EE1D);
	ctx->Reset();
	ctx->Push(SaveString(_effectName));
	ctx->Push(_entity);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_scale);
	ctx->Push((int32_t) _xAxis);
	ctx->Push((int32_t) _yAxis);
	ctx->Push((int32_t) _zAxis);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_a);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_startNetworkedParticleFxLoopedOnEntityBone(bool& success, const char* _effectName, int32_t _entity, float _xOffset, float _yOffset, float _zOffset, float _xRot, float _yRot, float _zRot, int32_t _boneIndex, float _scale, uint8_t _xAxis, uint8_t _yAxis, uint8_t _zAxis, float _r, float _g, float _b, float _a) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDDE23F30CC5A0F03);
	ctx->Reset();
	ctx->Push(SaveString(_effectName));
	ctx->Push(_entity);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_boneIndex);
	ctx->Push(_scale);
	ctx->Push((int32_t) _xAxis);
	ctx->Push((int32_t) _yAxis);
	ctx->Push((int32_t) _zAxis);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_a);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_stopParticleFxLooped(bool& success, int32_t _ptfxHandle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F75998877616996);
	ctx->Reset();
	ctx->Push(_ptfxHandle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeParticleFx(bool& success, int32_t _ptfxHandle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC401503DFE8D53CF);
	ctx->Reset();
	ctx->Push(_ptfxHandle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeParticleFxFromEntity(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8FEAEEBCC127425);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeParticleFxInRange(bool& success, float _X, float _Y, float _Z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD19FA1C6D657305);
	ctx->Reset();
	ctx->Push(_X);
	ctx->Push(_Y);
	ctx->Push(_Z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceParticleFxInVehicleInterior(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA0127DA25FD54C9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesParticleFxLoopedExist(bool& success, int32_t _ptfxHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74AFEF0D2E1E409B);
	ctx->Reset();
	ctx->Push(_ptfxHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setParticleFxLoopedOffsets(bool& success, int32_t _ptfxHandle, float _x, float _y, float _z, float _rotX, float _rotY, float _rotZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF7DDEBEC43483C43);
	ctx->Reset();
	ctx->Push(_ptfxHandle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setParticleFxLoopedEvolution(bool& success, int32_t _ptfxHandle, const char* _propertyName, float _amount, uint8_t _noNetwork) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F0C4B5B1C393BE2);
	ctx->Reset();
	ctx->Push(_ptfxHandle);
	ctx->Push(SaveString(_propertyName));
	ctx->Push(_amount);
	ctx->Push((int32_t) _noNetwork);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setParticleFxLoopedColour(bool& success, int32_t _ptfxHandle, float _r, float _g, float _b, uint8_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F8F65877F88783B);
	ctx->Reset();
	ctx->Push(_ptfxHandle);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push((int32_t) _p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setParticleFxLoopedAlpha(bool& success, int32_t _ptfxHandle, float _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x726845132380142E);
	ctx->Reset();
	ctx->Push(_ptfxHandle);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setParticleFxLoopedScale(bool& success, int32_t _ptfxHandle, float _scale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB44250AAA456492D);
	ctx->Reset();
	ctx->Push(_ptfxHandle);
	ctx->Push(_scale);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setParticleFxLoopedFarClipDist(bool& success, int32_t _ptfxHandle, float _range) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCB194B85EF7B541);
	ctx->Reset();
	ctx->Push(_ptfxHandle);
	ctx->Push(_range);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setParticleFxCamInsideVehicle(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEEC4047028426510);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setParticleFxCamInsideNonplayerVehicle(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xACEE6F360FC1F6B6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setParticleFxShootoutBoat(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x96EF97DAEB89BEF5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearParticleFxShootoutBoat(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A251AA48B2B46DB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setParticleFxBloodScale(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x908311265D42A820);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableInWaterPtfx(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCFD16F0DB5A3535C);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableDownwashPtfx(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F6DF3D92271E8A1);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setParticleFxSlipstreamLodrangeScale(bool& success, float _scale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B40A97646381508);
	ctx->Reset();
	ctx->Push(_scale);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_enableClownBloodVfx(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD821490579791273);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_enableAlienBloodVfx(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DCE1F0F78260875);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setParticleFxBulletImpactScale(bool& success, float _scale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27E32866E9A5C416);
	ctx->Reset();
	ctx->Push(_scale);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setParticleFxBulletImpactLodrangeScale(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB90E12CAC1DAB25);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setParticleFxBulletTraceNoAngleReject(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA4AE345A153D573);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setParticleFxBangScrapeLodrangeScale(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x54E22EA2C1956A8D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setParticleFxFootLodrangeScale(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x949F397A288B28B3);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setParticleFxFootOverrideName(bool& success, const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA3D194057C79A7B);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSkidmarkRangeScale(bool& success, float _scale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5DBF05DB5926D089);
	ctx->Reset();
	ctx->Push(_scale);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPtfxForceVehicleInteriorFlag(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6730E0D14E50703);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forcePostfxBulletImpactsAfterHud(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B079E5221D984D3);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_useParticleFxAsset(bool& success, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C38AF3693A69A91);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setParticleFxOverride(bool& success, const char* _oldAsset, const char* _newAsset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA1E2D93F6F75ED9);
	ctx->Reset();
	ctx->Push(SaveString(_oldAsset));
	ctx->Push(SaveString(_newAsset));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetParticleFxOverride(bool& success, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x89C8553DD3274AAE);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setWeatherPtfxUseOverrideSettings(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA46B73FAA3460AE1);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setWeatherPtfxOverrideCurrLevel(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF78B803082D4386F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_washDecalsInRange(bool& success, float _x, float _y, float _z, float _range, float _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C30613D50A6ADEF);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_range);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_washDecalsFromVehicle(bool& success, int32_t _vehicle, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B712761429DBC14);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_fadeDecalsInRange(bool& success, float _x, float _y, float _z, float _p3, float _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD77EDADB0420E6E0);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeDecalsInRange(bool& success, float _x, float _y, float _z, float _range) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D6B2D4830A67C62);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_range);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeDecalsFromObject(bool& success, int32_t _obj) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCCF71CBDDF5B6CB9);
	ctx->Reset();
	ctx->Push(_obj);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeDecalsFromObjectFacing(bool& success, int32_t _obj, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6F6F70FDC6D144C);
	ctx->Reset();
	ctx->Push(_obj);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeDecalsFromVehicle(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE91F1B65F2B48D57);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_addDecal(bool& success, int32_t _decalType, float _posX, float _posY, float _posZ, float _p4, float _p5, float _p6, float _p7, float _p8, float _p9, float _width, float _height, float _rCoef, float _gCoef, float _bCoef, float _opacity, float _timeout, uint8_t _p17, uint8_t _p18, uint8_t _p19) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB302244A1839BDAD);
	ctx->Reset();
	ctx->Push(_decalType);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_width);
	ctx->Push(_height);
	ctx->Push(_rCoef);
	ctx->Push(_gCoef);
	ctx->Push(_bCoef);
	ctx->Push(_opacity);
	ctx->Push(_timeout);
	ctx->Push((int32_t) _p17);
	ctx->Push((int32_t) _p18);
	ctx->Push((int32_t) _p19);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_addPetrolDecal(bool& success, float _x, float _y, float _z, float _groundLvl, float _width, float _transparency) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F5212C7AD880DF8);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_groundLvl);
	ctx->Push(_width);
	ctx->Push(_transparency);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_addOilDecal(bool& success, float _x, float _y, float _z, float _groundLvl, float _width, float _transparency) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x126D7F89FE859A5E);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_groundLvl);
	ctx->Push(_width);
	ctx->Push(_transparency);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_startPetrolTrailDecals(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x99AC7F0D8B9C893D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addPetrolTrailDecalInfo(bool& success, float _x, float _y, float _z, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x967278682CB6967A);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_endPetrolTrailDecals(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A123435A26C36CD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeDecal(bool& success, int32_t _decal) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED3F346429CCD659);
	ctx->Reset();
	ctx->Push(_decal);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isDecalAlive(bool& success, int32_t _decal) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC694D74949CAFD0C);
	ctx->Reset();
	ctx->Push(_decal);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

float Native_getDecalWashLevel(bool& success, int32_t _decal) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x323F647679A09103);
	ctx->Reset();
	ctx->Push(_decal);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setDisablePetrolDecalsIgnitingThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9454B5752C857DC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDisablePetrolDecalsRecyclingThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27CFB1B1E078CB2D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDisableDecalRenderingThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4B5CFC83122DF602);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getIsPetrolDecalInRange(bool& success, float _xCoord, float _yCoord, float _zCoord, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F09F7976C512404);
	ctx->Reset();
	ctx->Push(_xCoord);
	ctx->Push(_yCoord);
	ctx->Push(_zCoord);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_patchDecalDiffuseMap(bool& success, int32_t _decalType, const char* _textureDict, const char* _textureName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A35C742130C6080);
	ctx->Reset();
	ctx->Push(_decalType);
	ctx->Push(SaveString(_textureDict));
	ctx->Push(SaveString(_textureName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_unpatchDecalDiffuseMap(bool& success, int32_t _decalType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB7ED70C49521A61D);
	ctx->Reset();
	ctx->Push(_decalType);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_moveVehicleDecals(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84C8D7C2D30D3280);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_addVehicleCrewEmblem(bool& success, int32_t _vehicle, int32_t _ped, int32_t _boneIndex, float _x1, float _x2, float _x3, float _y1, float _y2, float _y3, float _z1, float _z2, float _z3, float _scale, int32_t _p13, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x428BDCB9DA58DA53);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_ped);
	ctx->Push(_boneIndex);
	ctx->Push(_x1);
	ctx->Push(_x2);
	ctx->Push(_x3);
	ctx->Push(_y1);
	ctx->Push(_y2);
	ctx->Push(_y3);
	ctx->Push(_z1);
	ctx->Push(_z2);
	ctx->Push(_z3);
	ctx->Push(_scale);
	ctx->Push(_p13);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_abortVehicleCrewEmblemRequest(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x82ACC484FFA3B05F);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

void Native_removeVehicleCrewEmblem(bool& success, int32_t _vehicle, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2300034310557E4);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getVehicleCrewEmblemRequestState(bool& success, int32_t _vehicle, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFE26117A5841B2FF);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_doesVehicleHaveCrewEmblem(bool& success, int32_t _vehicle, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x060D935D3981A275);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_disableCompositeShotgunDecals(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0E4299C549F0D1F1);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableScuffDecals(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02369D5C8A51FDCF);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDecalBulletImpactRangeScale(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46D1A61A21F566FC);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_overrideInteriorSmokeName(bool& success, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A2A52824DB96700);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_overrideInteriorSmokeLevel(bool& success, float _level) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1600FD8CF72EBC12);
	ctx->Reset();
	ctx->Push(_level);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_overrideInteriorSmokeEnd(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEFB55E7C25D3B3BE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_registerNoirLensEffect(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA44FF770DFBC5DAE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableVehicleDistantlights(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC9F98AC1884E73A2);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_renderShadowedLightsWithNoShadows(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x03300B57FCAC6DDB);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_requestEarlyLightCheck(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x98EDF76A7271E4F2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_useSnowFootVfxWhenUnsheltered(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAEEDAD1420C65CC0);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_useSnowWheelVfxWhenUnsheltered(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4CC7F0FEA5283FE0);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableRegionVfx(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEFD97FF47B745B8D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_presetInteriorAmbientCache(bool& success, const char* _timecycleModifierName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7021272EB0A451E);
	ctx->Reset();
	ctx->Push(SaveString(_timecycleModifierName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTimecycleModifier(bool& success, const char* _modifierName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C933ABF17A1DF41);
	ctx->Reset();
	ctx->Push(SaveString(_modifierName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTimecycleModifierStrength(bool& success, float _strength) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x82E7FFCD5B2326B3);
	ctx->Reset();
	ctx->Push(_strength);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTransitionTimecycleModifier(bool& success, const char* _modifierName, float _transition) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3BCF567485E1971C);
	ctx->Reset();
	ctx->Push(SaveString(_modifierName));
	ctx->Push(_transition);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTransitionOutOfTimecycleModifier(bool& success, float _strength) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CBA05AE7BD7EE05);
	ctx->Reset();
	ctx->Push(_strength);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearTimecycleModifier(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F07E7745A236711);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getTimecycleModifierIndex(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFDF3D97C674AFB66);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getTimecycleTransitionModifierIndex(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x459FD2C8D0AB78BC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_getIsTimecycleTransitioningOut(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x98D18905BF723B99);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_pushTimecycleModifier(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58F735290861E6B4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_popTimecycleModifier(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C8938D7D872211E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCurrentPlayerTcmodifier(bool& success, const char* _modifierName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBBF327DED94E4DEB);
	ctx->Reset();
	ctx->Push(SaveString(_modifierName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerTcmodifierTransition(bool& success, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBDEB86F4D5809204);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setNextPlayerTcmodifier(bool& success, const char* _modifierName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF59707B3E5ED531);
	ctx->Reset();
	ctx->Push(SaveString(_modifierName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addTcmodifierOverride(bool& success, const char* _modifierName1, const char* _modifierName2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A8E2C8B9CF4549C);
	ctx->Reset();
	ctx->Push(SaveString(_modifierName1));
	ctx->Push(SaveString(_modifierName2));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearAllTcmodifierOverrides(bool& success, const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15E33297C3E8DC60);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setExtraTcmodifier(bool& success, const char* _modifierName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5096FD9CCB49056D);
	ctx->Reset();
	ctx->Push(SaveString(_modifierName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearExtraTcmodifier(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92CCC17A7A2285DA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getExtraTcmodifier(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB0527EC6341496D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_enableMoonCycleOverride(bool& success, float _strength) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C328AF17210F009);
	ctx->Reset();
	ctx->Push(_strength);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableMoonCycleOverride(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2BF72AD5B41AA739);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_requestScaleformMovie(bool& success, const char* _scaleformName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11FE353CF9733E6F);
	ctx->Reset();
	ctx->Push(SaveString(_scaleformName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_requestScaleformMovieInstance(bool& success, const char* _scaleformName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC514489CFB8AF806);
	ctx->Reset();
	ctx->Push(SaveString(_scaleformName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_requestScaleformMovieSkipRenderWhilePaused(bool& success, const char* _scaleformName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD06C611BB9048C2);
	ctx->Reset();
	ctx->Push(SaveString(_scaleformName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_hasScaleformMovieLoaded(bool& success, int32_t _scaleformHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85F01B8D5B90570E);
	ctx->Reset();
	ctx->Push(_scaleformHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isActiveScaleformMovieDeleting(bool& success, int32_t _val) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FCB133CA50A49EB);
	ctx->Reset();
	ctx->Push(_val);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isScaleformMovieDeleting(bool& success, int32_t _val) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x86255B1FC929E33E);
	ctx->Reset();
	ctx->Push(_val);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasScaleformMovieFilenameLoaded(bool& success, const char* _scaleformName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C1C5D756FB5F337);
	ctx->Reset();
	ctx->Push(SaveString(_scaleformName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasScaleformContainerMovieLoadedIntoParent(bool& success, int32_t _scaleformHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8217150E1217EBFD);
	ctx->Reset();
	ctx->Push(_scaleformHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setScaleformMovieAsNoLongerNeeded(bool& success, int32_t& _scaleformHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D132D614DD86811);
	ctx->Reset();
	auto ptr_scaleformHandle = _scaleformHandle;
	ctx->Push(&ptr_scaleformHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_scaleformHandle = ptr_scaleformHandle;
}

void Native_setScaleformMovieToUseSystemTime(bool& success, int32_t _scaleform, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D8EB211944DCE08);
	ctx->Reset();
	ctx->Push(_scaleform);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setScaleformMovieToUseLargeRt(bool& success, int32_t _scaleformHandle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x32F34FF7F617643B);
	ctx->Reset();
	ctx->Push(_scaleformHandle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setScaleformMovieToUseSuperLargeRt(bool& success, int32_t _scaleformHandle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6A9F00D4240B519);
	ctx->Reset();
	ctx->Push(_scaleformHandle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawScaleformMovie(bool& success, int32_t _scaleformHandle, float _x, float _y, float _width, float _height, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x54972ADAF0294A93);
	ctx->Reset();
	ctx->Push(_scaleformHandle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_width);
	ctx->Push(_height);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawScaleformMovieFullscreen(bool& success, int32_t _scaleform, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0DF606929C105BE1);
	ctx->Reset();
	ctx->Push(_scaleform);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawScaleformMovieFullscreenMasked(bool& success, int32_t _scaleform1, int32_t _scaleform2, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF537FDE4FBD4CE5);
	ctx->Reset();
	ctx->Push(_scaleform1);
	ctx->Push(_scaleform2);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawScaleformMovie3d(bool& success, int32_t _scaleform, float _posX, float _posY, float _posZ, float _rotX, float _rotY, float _rotZ, float _p7, float _p8, float _p9, float _scaleX, float _scaleY, float _scaleZ, int32_t _rotationOrder) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x87D51D72255D4E78);
	ctx->Reset();
	ctx->Push(_scaleform);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_scaleX);
	ctx->Push(_scaleY);
	ctx->Push(_scaleZ);
	ctx->Push(_rotationOrder);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawScaleformMovie3dSolid(bool& success, int32_t _scaleform, float _posX, float _posY, float _posZ, float _rotX, float _rotY, float _rotZ, float _p7, float _p8, float _p9, float _scaleX, float _scaleY, float _scaleZ, int32_t _rotationOrder) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CE592FDC749D6F5);
	ctx->Reset();
	ctx->Push(_scaleform);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_scaleX);
	ctx->Push(_scaleY);
	ctx->Push(_scaleZ);
	ctx->Push(_rotationOrder);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_callScaleformMovieMethod(bool& success, int32_t _scaleform, const char* _method) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFBD96D87AC96D533);
	ctx->Reset();
	ctx->Push(_scaleform);
	ctx->Push(SaveString(_method));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_callScaleformMovieMethodWithNumber(bool& success, int32_t _scaleform, const char* _methodName, float _param1, float _param2, float _param3, float _param4, float _param5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0837058AE2E4BEE);
	ctx->Reset();
	ctx->Push(_scaleform);
	ctx->Push(SaveString(_methodName));
	ctx->Push(_param1);
	ctx->Push(_param2);
	ctx->Push(_param3);
	ctx->Push(_param4);
	ctx->Push(_param5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_callScaleformMovieMethodWithString(bool& success, int32_t _scaleform, const char* _methodName, const char* _param1, const char* _param2, const char* _param3, const char* _param4, const char* _param5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x51BC1ED3CC44E8F7);
	ctx->Reset();
	ctx->Push(_scaleform);
	ctx->Push(SaveString(_methodName));
	ctx->Push(SaveString(_param1));
	ctx->Push(SaveString(_param2));
	ctx->Push(SaveString(_param3));
	ctx->Push(SaveString(_param4));
	ctx->Push(SaveString(_param5));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_callScaleformMovieMethodWithNumberAndString(bool& success, int32_t _scaleform, const char* _methodName, float _floatParam1, float _floatParam2, float _floatParam3, float _floatParam4, float _floatParam5, const char* _stringParam1, const char* _stringParam2, const char* _stringParam3, const char* _stringParam4, const char* _stringParam5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF662D8D57E290B1);
	ctx->Reset();
	ctx->Push(_scaleform);
	ctx->Push(SaveString(_methodName));
	ctx->Push(_floatParam1);
	ctx->Push(_floatParam2);
	ctx->Push(_floatParam3);
	ctx->Push(_floatParam4);
	ctx->Push(_floatParam5);
	ctx->Push(SaveString(_stringParam1));
	ctx->Push(SaveString(_stringParam2));
	ctx->Push(SaveString(_stringParam3));
	ctx->Push(SaveString(_stringParam4));
	ctx->Push(SaveString(_stringParam5));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_beginScaleformScriptHudMovieMethod(bool& success, int32_t _hudComponent, const char* _methodName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x98C494FD5BDFBFD5);
	ctx->Reset();
	ctx->Push(_hudComponent);
	ctx->Push(SaveString(_methodName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_beginScaleformMovieMethod(bool& success, int32_t _scaleform, const char* _methodName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6E48914C7A8694E);
	ctx->Reset();
	ctx->Push(_scaleform);
	ctx->Push(SaveString(_methodName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_beginScaleformMovieMethodOnFrontend(bool& success, const char* _methodName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAB58C27C2E6123C6);
	ctx->Reset();
	ctx->Push(SaveString(_methodName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_beginScaleformMovieMethodOnFrontendHeader(bool& success, const char* _methodName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9449845F73F5E9C);
	ctx->Reset();
	ctx->Push(SaveString(_methodName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_endScaleformMovieMethod(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6796A8FFA375E53);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_endScaleformMovieMethodReturnValue(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC50AA39A577AF886);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isScaleformMovieMethodReturnValueReady(bool& success, int32_t _methodReturn) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x768FF8961BA904D6);
	ctx->Reset();
	ctx->Push(_methodReturn);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getScaleformMovieMethodReturnValueInt(bool& success, int32_t _methodReturn) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DE7EFA66B906036);
	ctx->Reset();
	ctx->Push(_methodReturn);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_getScaleformMovieMethodReturnValueBool(bool& success, int32_t _methodReturn) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD80A80346A45D761);
	ctx->Reset();
	ctx->Push(_methodReturn);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

const char* Native_getScaleformMovieMethodReturnValueString(bool& success, int32_t _methodReturn) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE1E258829A885245);
	ctx->Reset();
	ctx->Push(_methodReturn);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

void Native_scaleformMovieMethodAddParamInt(bool& success, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3D0841A0CC546A6);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_scaleformMovieMethodAddParamFloat(bool& success, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD69736AAE04DB51A);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_scaleformMovieMethodAddParamBool(bool& success, uint8_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC58424BA936EB458);
	ctx->Reset();
	ctx->Push((int32_t) _value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_beginTextCommandScaleformString(bool& success, const char* _componentType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80338406F3475E55);
	ctx->Reset();
	ctx->Push(SaveString(_componentType));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_endTextCommandScaleformString(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x362E2D3FE93A9959);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_endTextCommandUnparsedScaleformString(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE4E8157D9ECF087);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_scaleformMovieMethodAddParamLiteralString(bool& success, const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77FE3402004CD1B0);
	ctx->Reset();
	ctx->Push(SaveString(_string));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_scaleformMovieMethodAddParamTextureNameString(bool& success, const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA7148484BD90365);
	ctx->Reset();
	ctx->Push(SaveString(_string));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_scaleformMovieMethodAddParamPlayerNameString(bool& success, const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE83A3E3557A56640);
	ctx->Reset();
	ctx->Push(SaveString(_string));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesLatestBriefStringExist(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E657EF1099EDD65);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_scaleformMovieMethodAddParamLatestBriefString(bool& success, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC52C631A1831C03);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_requestScaleformScriptHudMovie(bool& success, int32_t _hudComponent) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9304881D6F6537EA);
	ctx->Reset();
	ctx->Push(_hudComponent);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasScaleformScriptHudMovieLoaded(bool& success, int32_t _hudComponent) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF6E5987D2B4D140);
	ctx->Reset();
	ctx->Push(_hudComponent);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_removeScaleformScriptHudMovie(bool& success, int32_t _hudComponent) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF44A5456AC3F4F97);
	ctx->Reset();
	ctx->Push(_hudComponent);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_passKeyboardInputToScaleform(bool& success, int32_t _scaleformHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1C7CB175E012964);
	ctx->Reset();
	ctx->Push(_scaleformHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setTvChannel(bool& success, int32_t _channel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBAABBB23EB6E484E);
	ctx->Reset();
	ctx->Push(_channel);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getTvChannel(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC1E275A90D39995);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setTvVolume(bool& success, float _volume) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2982BF73F66E9DDC);
	ctx->Reset();
	ctx->Push(_volume);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getTvVolume(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2170813D3DD8661B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_drawTvChannel(bool& success, float _xPos, float _yPos, float _xScale, float _yScale, float _rotation, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFDDC2B4ED3C69DF0);
	ctx->Reset();
	ctx->Push(_xPos);
	ctx->Push(_yPos);
	ctx->Push(_xScale);
	ctx->Push(_yScale);
	ctx->Push(_rotation);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTvChannelPlaylist(bool& success, int32_t _tvChannel, const char* _playlistName, uint8_t _restart) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF7B38B8305F1FE8B);
	ctx->Reset();
	ctx->Push(_tvChannel);
	ctx->Push(SaveString(_playlistName));
	ctx->Push((int32_t) _restart);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTvChannelPlaylistAtHour(bool& success, int32_t _tvChannel, const char* _playlistName, int32_t _hour) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2201C576FACAEBE8);
	ctx->Reset();
	ctx->Push(_tvChannel);
	ctx->Push(SaveString(_playlistName));
	ctx->Push(_hour);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearTvChannelPlaylist(bool& success, int32_t _tvChannel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBEB3D46BB7F043C0);
	ctx->Reset();
	ctx->Push(_tvChannel);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPlaylistOnChannel(bool& success, int32_t _tvChannel, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F710BFF7DAE6261);
	ctx->Reset();
	ctx->Push(_tvChannel);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isTvshowCurrentlyPlaying(bool& success, uint32_t _videoCliphash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0AD973CA1E077B60);
	ctx->Reset();
	ctx->Push(_videoCliphash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_enableMovieKeyframeWait(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74C180030FDE4B69);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTvPlayerWatchingThisFrame(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1C55B110E4DF534);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint32_t Native_getCurrentTvClipNamehash(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x30432A0118736E00);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

void Native_enableMovieSubtitles(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x873FA65C778AD970);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_ui3dsceneIsAvailable(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3A10FC7FD8D98CD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ui3dscenePushPreset(bool& success, const char* _presetName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1CEA8A4198D8E9A);
	ctx->Reset();
	ctx->Push(SaveString(_presetName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ui3dsceneAssignPedToSlot(bool& success, const char* _presetName, int32_t _ped, int32_t _p2, float _posX, float _posY, float _posZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x98C4FE6EC34154CA);
	ctx->Reset();
	ctx->Push(SaveString(_presetName));
	ctx->Push(_ped);
	ctx->Push(_p2);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_ui3dsceneClearPatchedData(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A42B2E236E71415);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_ui3dsceneMakePushedPresetPersistent(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x108BE26959A9D9BB);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_terraingridActivate(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA356990E161C9E65);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_terraingridSetParams(bool& success, float _x, float _y, float _z, float _forwardX, float _forwardY, float _forwardZ, float _sizeX, float _sizeY, float _sizeZ, float _gridScale, float _glowIntensity, float _normalHeight, float _heightDiff) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C4FC5752BCD8E48);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_forwardX);
	ctx->Push(_forwardY);
	ctx->Push(_forwardZ);
	ctx->Push(_sizeX);
	ctx->Push(_sizeY);
	ctx->Push(_sizeZ);
	ctx->Push(_gridScale);
	ctx->Push(_glowIntensity);
	ctx->Push(_normalHeight);
	ctx->Push(_heightDiff);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_terraingridSetColours(bool& success, int32_t _lowR, int32_t _lowG, int32_t _lowB, int32_t _lowAlpha, int32_t _r, int32_t _g, int32_t _b, int32_t _alpha, int32_t _highR, int32_t _highG, int32_t _highB, int32_t _highAlpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CE62918F8D703C7);
	ctx->Reset();
	ctx->Push(_lowR);
	ctx->Push(_lowG);
	ctx->Push(_lowB);
	ctx->Push(_lowAlpha);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_alpha);
	ctx->Push(_highR);
	ctx->Push(_highG);
	ctx->Push(_highB);
	ctx->Push(_highAlpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_animpostfxPlay(bool& success, const char* _effectName, int32_t _duration, uint8_t _looped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2206BF9A37B7F724);
	ctx->Reset();
	ctx->Push(SaveString(_effectName));
	ctx->Push(_duration);
	ctx->Push((int32_t) _looped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_animpostfxStop(bool& success, const char* _effectName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x068E835A1D0DC0E3);
	ctx->Reset();
	ctx->Push(SaveString(_effectName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_animpostfxGetCurrentTime(bool& success, const char* _effectName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE35B38A27E8E7179);
	ctx->Reset();
	ctx->Push(SaveString(_effectName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

uint8_t Native_animpostfxIsRunning(bool& success, const char* _effectName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36AD3E690DA5ACEB);
	ctx->Reset();
	ctx->Push(SaveString(_effectName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_animpostfxStopAll(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4EDDC19532BFB85);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_animpostfxStopAndFlushRequests(bool& success, const char* _effectName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2209BE128B5418C);
	ctx->Reset();
	ctx->Push(SaveString(_effectName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playPedRingtone(bool& success, const char* _ringtoneName, int32_t _ped, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9E56683CA8E11A5);
	ctx->Reset();
	ctx->Push(SaveString(_ringtoneName));
	ctx->Push(_ped);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedRingtonePlaying(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E8E5E20937E3137);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_stopPedRingtone(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C5AE23EFA885092);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isMobilePhoneCallOngoing(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7497D2CE2C30D24C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isMobileInterferenceActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8B1B2425604CDD0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_createNewScriptedConversation(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2C91A0B572AAE56);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addLineToConversation(bool& success, int32_t _index, const char* _p1, const char* _p2, int32_t _p3, int32_t _p4, uint8_t _p5, uint8_t _p6, uint8_t _p7, uint8_t _p8, int32_t _p9, uint8_t _p10, uint8_t _p11, uint8_t _p12) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5EF963405593646);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push(SaveString(_p1));
	ctx->Push(SaveString(_p2));
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push((int32_t) _p5);
	ctx->Push((int32_t) _p6);
	ctx->Push((int32_t) _p7);
	ctx->Push((int32_t) _p8);
	ctx->Push(_p9);
	ctx->Push((int32_t) _p10);
	ctx->Push((int32_t) _p11);
	ctx->Push((int32_t) _p12);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addPedToConversation(bool& success, int32_t _index, int32_t _ped, const char* _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95D9F4BC443956E7);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push(_ped);
	ctx->Push(SaveString(_p2));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPositionForNullConvPed(bool& success, int32_t _p0, float _p1, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33E3C6C6F2F0B506);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityForNullConvPed(bool& success, int32_t _p0, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x892B6AB8F33606F5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMicrophonePosition(bool& success, uint8_t _toggle, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _x3, float _y3, float _z3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB6AE90EDDE95C762);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_x3);
	ctx->Push(_y3);
	ctx->Push(_z3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setConversationAudioControlledByAnim(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0B568201DD99F0EB);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setConversationAudioPlaceholder(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61631F5DF50D1C34);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_startScriptPhoneConversation(bool& success, uint8_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x252E5F915EABB675);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_preloadScriptPhoneConversation(bool& success, uint8_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6004BCB0E226AAEA);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_startScriptConversation(bool& success, uint8_t _p0, uint8_t _p1, uint8_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B17C62C9635D2DC);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_preloadScriptConversation(bool& success, uint8_t _p0, uint8_t _p1, uint8_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3B3CAD6166916D87);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_startPreloadedConversation(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23641AFE870AF385);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getIsPreloadedConversationReady(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE73364DB90778FFA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isScriptedConversationOngoing(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16754C556D2EDE3D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isScriptedConversationLoaded(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF0D54BE7A776737);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getCurrentScriptedConversationLine(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x480357EE890C295A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_pauseScriptedConversation(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8530AD776CD72B12);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_restartScriptedConversation(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9AEB285D1818C9AC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_stopScriptedConversation(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD79DEEFB53455EBA);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_skipToNextScriptedConversationLine(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9663FE6B7A61EB00);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_interruptConversation(bool& success, int32_t _ped, const char* _voiceline, const char* _speaker) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA018A12E5C5C2FA6);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_voiceline));
	ctx->Push(SaveString(_speaker));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_interruptConversationAndPause(bool& success, int32_t _ped, const char* _p1, const char* _speaker) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A694D7A68F8DC38);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_p1));
	ctx->Push(SaveString(_speaker));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getVariationChosenForScriptedLine(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA19F5572C38B564);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultInt();
}

void Native_setNoDuckingForConversation(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB542DE8C3D1CB210);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_registerScriptWithAudio(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6ED9D5092438D91);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_unregisterScriptWithAudio(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA8638BE228D4751A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_requestMissionAudioBank(bool& success, const char* _audioBank, uint8_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7345BDD95E62E0F2);
	ctx->Reset();
	ctx->Push(SaveString(_audioBank));
	ctx->Push((int32_t) _p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_requestAmbientAudioBank(bool& success, const char* _audioBank, uint8_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFE02FFBED8CA9D99);
	ctx->Reset();
	ctx->Push(SaveString(_audioBank));
	ctx->Push((int32_t) _p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_requestScriptAudioBank(bool& success, const char* _audioBank, uint8_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F844A8B08D76685);
	ctx->Reset();
	ctx->Push(SaveString(_audioBank));
	ctx->Push((int32_t) _p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hintMissionAudioBank(bool& success, const char* _audioBank, uint8_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x40763EA7B9B783E7);
	ctx->Reset();
	ctx->Push(SaveString(_audioBank));
	ctx->Push((int32_t) _p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hintAmbientAudioBank(bool& success, const char* _audioBank, uint8_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F8C0E370AE62F5C);
	ctx->Reset();
	ctx->Push(SaveString(_audioBank));
	ctx->Push((int32_t) _p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hintScriptAudioBank(bool& success, const char* _audioBank, uint8_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB380A29641EC31A);
	ctx->Reset();
	ctx->Push(SaveString(_audioBank));
	ctx->Push((int32_t) _p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_releaseMissionAudioBank(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0EC92A1BF0857187);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_releaseAmbientAudioBank(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x65475A218FFAA93D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_releaseNamedScriptAudioBank(bool& success, const char* _audioBank) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77ED170667F50170);
	ctx->Reset();
	ctx->Push(SaveString(_audioBank));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_releaseScriptAudioBank(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A2D8AD0A9EB9C3F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_unhintAmbientAudioBank(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19AF7ED9B9D23058);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_unhintScriptAudioBank(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9AC92EED5E4793AB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_unhintNamedScriptAudioBank(bool& success, const char* _audioBank) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11579D940949C49E);
	ctx->Reset();
	ctx->Push(SaveString(_audioBank));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getSoundId(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x430386FE9BF80B45);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_releaseSoundId(bool& success, int32_t _soundId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x353FC880830B88FA);
	ctx->Reset();
	ctx->Push(_soundId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playSound(bool& success, int32_t _soundId, const char* _audioName, const char* _audioRef, uint8_t _p3, int32_t _p4, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FF4944CC209192D);
	ctx->Reset();
	ctx->Push(_soundId);
	ctx->Push(SaveString(_audioName));
	ctx->Push(SaveString(_audioRef));
	ctx->Push((int32_t) _p3);
	ctx->Push(_p4);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playSoundFrontend(bool& success, int32_t _soundId, const char* _audioName, const char* _audioRef, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x67C540AA08E4A6F5);
	ctx->Reset();
	ctx->Push(_soundId);
	ctx->Push(SaveString(_audioName));
	ctx->Push(SaveString(_audioRef));
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playDeferredSoundFrontend(bool& success, const char* _soundName, const char* _soundsetName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCADA5A0D0702381E);
	ctx->Reset();
	ctx->Push(SaveString(_soundName));
	ctx->Push(SaveString(_soundsetName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playSoundFromEntity(bool& success, int32_t _soundId, const char* _audioName, int32_t _entity, const char* _audioRef, uint8_t _isNetwork, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE65F427EB70AB1ED);
	ctx->Reset();
	ctx->Push(_soundId);
	ctx->Push(SaveString(_audioName));
	ctx->Push(_entity);
	ctx->Push(SaveString(_audioRef));
	ctx->Push((int32_t) _isNetwork);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playSoundFromEntityHash(bool& success, int32_t _soundId, uint32_t _model, int32_t _entity, uint32_t _soundSetHash, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B9853296731E88D);
	ctx->Reset();
	ctx->Push(_soundId);
	ctx->Push(_model);
	ctx->Push(_entity);
	ctx->Push(_soundSetHash);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playSoundFromCoord(bool& success, int32_t _soundId, const char* _audioName, float _x, float _y, float _z, const char* _audioRef, uint8_t _isNetwork, int32_t _range, uint8_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D8686B622B88120);
	ctx->Reset();
	ctx->Push(_soundId);
	ctx->Push(SaveString(_audioName));
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(SaveString(_audioRef));
	ctx->Push((int32_t) _isNetwork);
	ctx->Push(_range);
	ctx->Push((int32_t) _p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_updateSoundCoord(bool& success, int32_t _soundId, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EC3C679D0E7E46B);
	ctx->Reset();
	ctx->Push(_soundId);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopSound(bool& success, int32_t _soundId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA3B0C41BA5CC0BB5);
	ctx->Reset();
	ctx->Push(_soundId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getNetworkIdFromSoundId(bool& success, int32_t _soundId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DE3F0A134FFBC0D);
	ctx->Reset();
	ctx->Push(_soundId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getSoundIdFromNetworkId(bool& success, int32_t _netId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75262FD12D0A1C84);
	ctx->Reset();
	ctx->Push(_netId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setVariableOnSound(bool& success, int32_t _soundId, const char* _unkVariable, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD6B3148A78AE9B6);
	ctx->Reset();
	ctx->Push(_soundId);
	ctx->Push(SaveString(_unkVariable));
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVariableOnStream(bool& success, const char* _unkVariable, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F9D3834AEB9EF79);
	ctx->Reset();
	ctx->Push(SaveString(_unkVariable));
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_overrideUnderwaterStream(bool& success, const char* _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2A9CDABCEA04BD6);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVariableOnUnderWaterStream(bool& success, const char* _unkVariableName, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x733ADF241531E5C2);
	ctx->Reset();
	ctx->Push(SaveString(_unkVariableName));
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasSoundFinished(bool& success, int32_t _soundId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFCBDCE714A7C88E5);
	ctx->Reset();
	ctx->Push(_soundId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_playPedAmbientSpeechNative(bool& success, int32_t _ped, const char* _speechName, const char* _speechParam, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8E04FEDD28D42462);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_speechName));
	ctx->Push(SaveString(_speechParam));
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playPedAmbientSpeechAndCloneNative(bool& success, int32_t _ped, const char* _speechName, const char* _speechParam, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6941B4A3A8FBBB9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_speechName));
	ctx->Push(SaveString(_speechParam));
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playPedAmbientSpeechWithVoiceNative(bool& success, int32_t _ped, const char* _speechName, const char* _voiceName, const char* _speechParam, uint8_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3523634255FC3318);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_speechName));
	ctx->Push(SaveString(_voiceName));
	ctx->Push(SaveString(_speechParam));
	ctx->Push((int32_t) _p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playAmbientSpeechFromPositionNative(bool& success, const char* _speechName, const char* _voiceName, float _x, float _y, float _z, const char* _speechParam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED640017ED337E45);
	ctx->Reset();
	ctx->Push(SaveString(_speechName));
	ctx->Push(SaveString(_voiceName));
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(SaveString(_speechParam));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_overrideTrevorRage(bool& success, const char* _voiceEffect) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13AD665062541A7E);
	ctx->Reset();
	ctx->Push(SaveString(_voiceEffect));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetTrevorRage(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE78503B10C4314E0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerAngry(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA241BB04110F091);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playPain(bool& success, int32_t _ped, int32_t _painID, int32_t _p1, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC9AE166038A5CEC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_painID);
	ctx->Push(_p1);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_releaseWeaponAudio(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE4AC0439F607045);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_activateAudioSlowmoMode(bool& success, const char* _mode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD01005D2BA2EB778);
	ctx->Reset();
	ctx->Push(SaveString(_mode));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_deactivateAudioSlowmoMode(bool& success, const char* _mode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDDC635D5B3262C56);
	ctx->Reset();
	ctx->Push(SaveString(_mode));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAmbientVoiceName(bool& success, int32_t _ped, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C8065A3B780185B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAmbientVoiceNameHash(bool& success, int32_t _ped, uint32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A53DED9921DE990);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint32_t Native_getAmbientVoiceNameHash(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E203DA2BA15D436);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

void Native_setPedVoiceFull(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x40CF0D12D142A9E8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedRaceAndVoiceGroup(bool& success, int32_t _ped, int32_t _p1, uint32_t _voiceGroup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B7ABE26CBCBF8C7);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_voiceGroup);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedVoiceGroup(bool& success, int32_t _ped, uint32_t _voiceGroupHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7CDC8C3B89F661B3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_voiceGroupHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedVoiceGroupFromRaceToPvg(bool& success, int32_t _ped, uint32_t _voiceGroupHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BABC1345ABBFB16);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_voiceGroupHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedGender(bool& success, int32_t _ped, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5342D390CDA41D6);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopCurrentPlayingSpeech(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A73D05A607734C7);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopCurrentPlayingAmbientSpeech(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8BEC0CA6F0EDB0F);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isAmbientSpeechPlaying(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9072C8B49907BFAD);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isScriptedSpeechPlaying(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCC9AA18DCC7084F4);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isAnySpeechPlaying(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x729072355FA39EC9);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isAnyPositionalSpeechPlaying(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x30CA2EF91D15ADF8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_doesContextExistForThisPed(bool& success, int32_t _ped, const char* _speechName, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x49B99BF3FDA89A7A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_speechName));
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedInCurrentConversation(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x049E937F18F4020C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedIsDrunk(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95D2D383D5396B8A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playAnimalVocalization(bool& success, int32_t _pedHandle, int32_t _p1, const char* _speechName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE066C7006C49C0A);
	ctx->Reset();
	ctx->Push(_pedHandle);
	ctx->Push(_p1);
	ctx->Push(SaveString(_speechName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isAnimalVocalizationPlaying(bool& success, int32_t _pedHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC265DF9FB44A9FBD);
	ctx->Reset();
	ctx->Push(_pedHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setAnimalMood(bool& success, int32_t _animal, int32_t _mood) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCC97B29285B1DC3B);
	ctx->Reset();
	ctx->Push(_animal);
	ctx->Push(_mood);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isMobilePhoneRadioActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB35CE999E8EF317E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setMobilePhoneRadioState(bool& success, uint8_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF286C554784F3DF);
	ctx->Reset();
	ctx->Push((int32_t) _state);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPlayerRadioStationIndex(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE8AF77C4C06ADC93);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

const char* Native_getPlayerRadioStationName(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6D733C32076AD03);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

const char* Native_getRadioStationName(bool& success, int32_t _radioStation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB28ECA15046CA8B9);
	ctx->Reset();
	ctx->Push(_radioStation);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

int32_t Native_getPlayerRadioStationGenre(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA571991A7FE6CCEB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isRadioRetuning(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA151A7394A214E65);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isRadioFadedOut(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0626A247D2405330);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setRadioRetuneUp(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF266D1D0EB1195D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRadioRetuneDown(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD6BCF9E94425DF9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRadioToStationName(bool& success, const char* _stationName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC69EDA28699D5107);
	ctx->Reset();
	ctx->Push(SaveString(_stationName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehRadioStation(bool& success, int32_t _vehicle, const char* _radioStation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B9C0099CB942AC6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(SaveString(_radioStation));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehHasNormalRadio(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E45765F3FBB582F);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isVehicleRadioOn(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BE4BE946463F917);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehForcedRadioThisFrame(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC1805D05E6D4FE10);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEmitterRadioStation(bool& success, const char* _emitterName, const char* _radioStation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xACF57305B12AF907);
	ctx->Reset();
	ctx->Push(SaveString(_emitterName));
	ctx->Push(SaveString(_radioStation));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setStaticEmitterEnabled(bool& success, const char* _emitterName, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x399D2D3B33F1B8EB);
	ctx->Reset();
	ctx->Push(SaveString(_emitterName));
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_linkStaticEmitterToEntity(bool& success, const char* _emitterName, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x651D3228960D08AF);
	ctx->Reset();
	ctx->Push(SaveString(_emitterName));
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRadioToStationIndex(bool& success, int32_t _radioStation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA619B168B8A8570F);
	ctx->Reset();
	ctx->Push(_radioStation);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFrontendRadioActive(bool& success, uint8_t _active) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF7F26C6E9CC9EBB8);
	ctx->Reset();
	ctx->Push((int32_t) _active);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_unlockMissionNewsStory(bool& success, int32_t _newsStory) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB165AB7C248B2DC1);
	ctx->Reset();
	ctx->Push(_newsStory);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isMissionNewsStoryUnlocked(bool& success, int32_t _newsStory) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66E49BF55B4B1874);
	ctx->Reset();
	ctx->Push(_newsStory);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getAudibleMusicTrackTextId(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50B196FC9ED6545B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_playEndCreditsMusic(bool& success, uint8_t _play) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD536C4D33DCC900);
	ctx->Reset();
	ctx->Push((int32_t) _play);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_skipRadioForward(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6DDBBDD98E2E9C25);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_freezeRadioStation(bool& success, const char* _radioStation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x344F393B027E38C3);
	ctx->Reset();
	ctx->Push(SaveString(_radioStation));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_unfreezeRadioStation(bool& success, const char* _radioStation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC00454CF60B91DD);
	ctx->Reset();
	ctx->Push(SaveString(_radioStation));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRadioAutoUnfreeze(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC1AA9F53CE982990);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setInitialPlayerStation(bool& success, const char* _radioStation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88795F13FACDA88D);
	ctx->Reset();
	ctx->Push(SaveString(_radioStation));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setUserRadioControlEnabled(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19F21E63AE6EAE4E);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRadioTrack(bool& success, const char* _radioStation, const char* _radioTrack) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB39786F201FEE30B);
	ctx->Reset();
	ctx->Push(SaveString(_radioStation));
	ctx->Push(SaveString(_radioTrack));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRadioTrackWithStartOffset(bool& success, const char* _radioStationName, const char* _mixName, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2CB0075110BE1E56);
	ctx->Reset();
	ctx->Push(SaveString(_radioStationName));
	ctx->Push(SaveString(_mixName));
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setNextRadioTrack(bool& success, const char* _radioName, const char* _radioTrack, const char* _p2, const char* _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55ECF4D13D9903B0);
	ctx->Reset();
	ctx->Push(SaveString(_radioName));
	ctx->Push(SaveString(_radioTrack));
	ctx->Push(SaveString(_p2));
	ctx->Push(SaveString(_p3));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleRadioLoud(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB6F1CAEC68B0BCE);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_canVehicleReceiveCbRadio(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x032A116663A4D5AC);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setMobileRadioEnabledDuringGameplay(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1098355A16064BB3);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesPlayerVehHaveRadio(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x109697E2FFBAC8A1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPlayerVehRadioEnable(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F43D83FD6738741);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleRadioEnabled(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3B988190C0AA6C0B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPositionedPlayerVehicleRadioEmitterEnabled(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA07819E452FFE8F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCustomRadioTrackList(bool& success, const char* _radioStation, const char* _trackListName, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E404A9361F75BB2);
	ctx->Reset();
	ctx->Push(SaveString(_radioStation));
	ctx->Push(SaveString(_trackListName));
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearCustomRadioTrackList(bool& success, const char* _radioStation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1654F24A88A8E3FE);
	ctx->Reset();
	ctx->Push(SaveString(_radioStation));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getNumUnlockedRadioStations(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1620ECB50E01DE7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_findRadioStationIndex(bool& success, uint32_t _stationNameHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D67489793FF428B);
	ctx->Reset();
	ctx->Push(_stationNameHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setRadioStationMusicOnly(bool& success, const char* _radioStation, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x774BD811F656A122);
	ctx->Reset();
	ctx->Push(SaveString(_radioStation));
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRadioFrontendFadeTime(bool& success, float _fadeTime) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C96CDB04FCA358E);
	ctx->Reset();
	ctx->Push(_fadeTime);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_unlockRadioStationTrackList(bool& success, const char* _radioStation, const char* _trackListName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x031ACB6ABA18C729);
	ctx->Reset();
	ctx->Push(SaveString(_radioStation));
	ctx->Push(SaveString(_trackListName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_lockRadioStationTrackList(bool& success, const char* _radioStation, const char* _trackListName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF5E5EA2DCEEACF3);
	ctx->Reset();
	ctx->Push(SaveString(_radioStation));
	ctx->Push(SaveString(_trackListName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_updateUnlockableDjRadioTracks(bool& success, uint8_t _enableMixes) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x47AED84213A47510);
	ctx->Reset();
	ctx->Push((int32_t) _enableMixes);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_lockRadioStation(bool& success, const char* _radioStationName, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x477D9DB48F889591);
	ctx->Reset();
	ctx->Push(SaveString(_radioStationName));
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRadioStationAsFavourite(bool& success, const char* _radioStation, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4CAFEBFA21EC188D);
	ctx->Reset();
	ctx->Push(SaveString(_radioStation));
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isRadioStationFavourited(bool& success, const char* _radioStation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B1784DB08AFEA79);
	ctx->Reset();
	ctx->Push(SaveString(_radioStation));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getNextAudibleBeat(bool& success, float& _out1, float& _out2, int32_t& _out3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC64A06D939F826F5);
	ctx->Reset();
	auto ptr_out1 = _out1;
	ctx->Push(&ptr_out1);
	auto ptr_out2 = _out2;
	ctx->Push(&ptr_out2);
	auto ptr_out3 = _out3;
	ctx->Push(&ptr_out3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_out1 = ptr_out1;
	_out2 = ptr_out2;
	_out3 = ptr_out3;
	return ctx->ResultBool();
}

void Native_forceMusicTrackList(bool& success, const char* _radioStation, const char* _trackListName, int32_t _milliseconds) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E0AF9114608257C);
	ctx->Reset();
	ctx->Push(SaveString(_radioStation));
	ctx->Push(SaveString(_trackListName));
	ctx->Push(_milliseconds);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getCurrentTrackPlayTime(bool& success, const char* _radioStationName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E65CDE5215832C1);
	ctx->Reset();
	ctx->Push(SaveString(_radioStationName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint32_t Native_getCurrentTrackSoundName(bool& success, const char* _radioStationName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34D66BC058019CE0);
	ctx->Reset();
	ctx->Push(SaveString(_radioStationName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

void Native_setVehicleMissileWarningEnabled(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3365489E0DD50F9);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAmbientZoneState(bool& success, const char* _zoneName, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBDA07E5950085E46);
	ctx->Reset();
	ctx->Push(SaveString(_zoneName));
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearAmbientZoneState(bool& success, const char* _zoneName, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x218DD44AAAC964FF);
	ctx->Reset();
	ctx->Push(SaveString(_zoneName));
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAmbientZoneListState(bool& success, const char* _ambientZone, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9748FA4DE50CCE3E);
	ctx->Reset();
	ctx->Push(SaveString(_ambientZone));
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearAmbientZoneListState(bool& success, const char* _ambientZone, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x120C48C614909FA4);
	ctx->Reset();
	ctx->Push(SaveString(_ambientZone));
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAmbientZoneStatePersistent(bool& success, const char* _ambientZone, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D6650420CEC9D3B);
	ctx->Reset();
	ctx->Push(SaveString(_ambientZone));
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAmbientZoneListStatePersistent(bool& success, const char* _ambientZone, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3638DAE8C4045E1);
	ctx->Reset();
	ctx->Push(SaveString(_ambientZone));
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isAmbientZoneEnabled(bool& success, const char* _ambientZone) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01E2817A479A7F9B);
	ctx->Reset();
	ctx->Push(SaveString(_ambientZone));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_refreshClosestOceanShoreline(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D2BFAAB8D956E0E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCutsceneAudioOverride(bool& success, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3B4BF5F0859204D9);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVariableOnSynchSceneAudio(bool& success, const char* _unkVariableName, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBCC29F935ED07688);
	ctx->Reset();
	ctx->Push(SaveString(_unkVariableName));
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_playPoliceReport(bool& success, const char* _name, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFEBD56D9BD1EB16);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_cancelAllPoliceReports(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4F90FAF7670B16F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_blipSiren(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B9025BDA76822B6);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_overrideVehHorn(bool& success, int32_t _vehicle, uint8_t _override, int32_t _hornHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3CDC1E622CCE0356);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _override);
	ctx->Push(_hornHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isHornActive(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D6BFC12B05C6121);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setAggressiveHorns(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x395BF71085D1B1D9);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRadioPositionAudioMute(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02E93C796ABD3A97);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleConversationsPersist(bool& success, uint8_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58BB377BEC7CD5F4);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleConversationsPersistNew(bool& success, uint8_t _p0, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9BD7BD55E4533183);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isStreamPlaying(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD11FA52EB849D978);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getStreamPlayTime(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E72BBDBCA58A3DB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_loadStream(bool& success, const char* _streamName, const char* _soundSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F1F957154EC51DF);
	ctx->Reset();
	ctx->Push(SaveString(_streamName));
	ctx->Push(SaveString(_soundSet));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_loadStreamWithStartOffset(bool& success, const char* _streamName, int32_t _startOffset, const char* _soundSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x59C16B79F53B3712);
	ctx->Reset();
	ctx->Push(SaveString(_streamName));
	ctx->Push(_startOffset);
	ctx->Push(SaveString(_soundSet));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_playStreamFromPed(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x89049DD63C08B5D1);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playStreamFromVehicle(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB70374A758007DFA);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playStreamFromObject(bool& success, int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEBAA9B64D76356FD);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playStreamFrontend(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58FCE43488F9F5F4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playStreamFromPosition(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21442F412E8DE56B);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopStream(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA4718A1419D18151);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopPedSpeaking(bool& success, int32_t _ped, uint8_t _shaking) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D64D7405520E3D3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _shaking);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_blockAllSpeechFromPed(bool& success, int32_t _ped, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF8AD2EED7C47E8FE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopPedSpeakingSynced(bool& success, int32_t _ped, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAB6781A5F3101470);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disablePedPainAudio(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9A41C1E940FB0E8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isAmbientSpeechDisabled(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x932C2D096A2C3FFF);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_blockSpeechContextGroup(bool& success, const char* _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA8A7D434AFB4B97B);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_unblockSpeechContextGroup(bool& success, const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2ACABED337622DF2);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSirenWithNoDriver(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1FEF0683B96EBCF2);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSirenBypassMpDriverCheck(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF584CF8529B51434);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_triggerSirenAudio(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66C3FB05206041BA);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setHornPermanentlyOn(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C11908013EA4715);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setHornEnabled(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x76D683C108594D0E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAudioVehiclePriority(bool& success, int32_t _vehicle, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE5564483E407F914);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setHornPermanentlyOnTime(bool& success, int32_t _vehicle, float _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D3AF56E94C9AE98);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_useSirenAsHorn(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA932DE350266EF8);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceUseAudioGameObject(bool& success, int32_t _vehicle, const char* _audioName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F0C413926060B38);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(SaveString(_audioName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_preloadVehicleAudioBank(bool& success, uint32_t _vehicleModel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA4CEA6AE0000A7E);
	ctx->Reset();
	ctx->Push(_vehicleModel);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleStartupRevSound(bool& success, int32_t _vehicle, const char* _p1, const char* _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1F8157B8C3F171C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(SaveString(_p1));
	ctx->Push(SaveString(_p2));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetVehicleStartupRevSound(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2DCCD8E16E20997);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleForceReverseWarning(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97FFB4ADEED08066);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isVehicleAudiblyDamaged(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5DB8010EE71FDEF2);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleAudioEngineDamageFactor(bool& success, int32_t _vehicle, float _damageFactor) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x59E7B488451F4D3A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_damageFactor);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleAudioBodyDamageFactor(bool& success, int32_t _vehicle, float _intensity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01BB4D577D38BD9E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_intensity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_enableVehicleFanbeltDamage(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C073274E065C6D2);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_enableVehicleExhaustPops(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2BE4BC731D039D5A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleBoostActive(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A04DE7CAB2739A1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerVehicleAlarmAudioActive(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6FDDAD856E36988A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setScriptUpdateDoorAudio(bool& success, uint32_t _doorHash, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06C0023BED16DD6B);
	ctx->Reset();
	ctx->Push(_doorHash);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playVehicleDoorOpenSound(bool& success, int32_t _vehicle, int32_t _doorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A539D52857EA82D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playVehicleDoorCloseSound(bool& success, int32_t _vehicle, int32_t _doorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62A456AA4769EF34);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_enableStallWarningSounds(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC15907D667F7CFB2);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isGameInControlOfMusic(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D28DC1671E334FD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setGpsActive(bool& success, uint8_t _active) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3BD3F52BA9B1E4E8);
	ctx->Reset();
	ctx->Push((int32_t) _active);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playMissionCompleteAudio(bool& success, const char* _audioName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB138AAB8A70D3C69);
	ctx->Reset();
	ctx->Push(SaveString(_audioName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isMissionCompletePlaying(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19A30C23F5827F8A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isMissionCompleteReadyForUi(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F259F82D873B8B8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_blockDeathJingle(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF154B8D1775B2DEC);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_startAudioScene(bool& success, const char* _scene) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x013A80FC08F6E4F2);
	ctx->Reset();
	ctx->Push(SaveString(_scene));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_stopAudioScene(bool& success, const char* _scene) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFE8422B3B94E688);
	ctx->Reset();
	ctx->Push(SaveString(_scene));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopAudioScenes(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBAC7FC81A75EC1A1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isAudioSceneActive(bool& success, const char* _scene) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB65B60556E2A9225);
	ctx->Reset();
	ctx->Push(SaveString(_scene));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setAudioSceneVariable(bool& success, const char* _scene, const char* _unkVariable, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF21A9EF089A2668);
	ctx->Reset();
	ctx->Push(SaveString(_scene));
	ctx->Push(SaveString(_unkVariable));
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAudioScriptCleanupTime(bool& success, int32_t _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5F377B175A699C5);
	ctx->Reset();
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addEntityToAudioMixGroup(bool& success, int32_t _entity, const char* _groupName, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x153973AB99FE8980);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(SaveString(_groupName));
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeEntityFromAudioMixGroup(bool& success, int32_t _entity, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x18EB48CFC41F2EA0);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_audioIsMusicPlaying(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x845FFC3A4FEEFA3E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_audioIsScriptedMusicPlaying(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DD39BF3E2F9C47F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_prepareMusicEvent(bool& success, const char* _eventName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E5185B72EF5158A);
	ctx->Reset();
	ctx->Push(SaveString(_eventName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_cancelMusicEvent(bool& success, const char* _eventName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B17A90291133DA5);
	ctx->Reset();
	ctx->Push(SaveString(_eventName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_triggerMusicEvent(bool& success, const char* _eventName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x706D57B0F50DA710);
	ctx->Reset();
	ctx->Push(SaveString(_eventName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isMusicOneshotPlaying(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA097AB275061FB21);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getMusicPlaytime(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE7A0D23DC414507B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setGlobalRadioSignalLevel(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x159B7318403A1CD8);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_recordBrokenGlass(bool& success, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFBE20329593DEC9D);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearAllBrokenGlass(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB32209EFFDC04913);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_scriptOverridesWindElevation(bool& success, uint8_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70B8EC8FC108A634);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedWallaDensity(bool& success, float _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x149AEE66F0CB3A99);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedInteriorWallaDensity(bool& success, float _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8BF907833BE275DE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forcePedPanicWalla(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x062D5EAD4DA2FA6A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_prepareAlarm(bool& success, const char* _alarmName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D74AE343DB65533);
	ctx->Reset();
	ctx->Push(SaveString(_alarmName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_startAlarm(bool& success, const char* _alarmName, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0355EF116C4C97B2);
	ctx->Reset();
	ctx->Push(SaveString(_alarmName));
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopAlarm(bool& success, const char* _alarmName, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1CADDCD98415A41);
	ctx->Reset();
	ctx->Push(SaveString(_alarmName));
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopAllAlarms(bool& success, uint8_t _stop) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F794A877ADD4C92);
	ctx->Reset();
	ctx->Push((int32_t) _stop);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isAlarmPlaying(bool& success, const char* _alarmName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x226435CB96CCFC8C);
	ctx->Reset();
	ctx->Push(SaveString(_alarmName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint32_t Native_getVehicleDefaultHorn(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02165D55000219AC);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint32_t Native_getVehicleDefaultHornIgnoreMods(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xACB5DCCA1EC76840);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

void Native_resetPedAudioFlags(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF54BB7B61036F335);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedFootstepsEventsEnabled(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0653B735BFBDFE87);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedClothEventsEnabled(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29DA3CA8D8B2692D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_overridePlayerGroundMaterial(bool& success, uint32_t _hash, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2CC78CD3D0B50F9);
	ctx->Reset();
	ctx->Push(_hash);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_useFootstepScriptSweeteners(bool& success, int32_t _ped, uint8_t _p1, uint32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF4DC1784BE94DFA);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_overrideMicrophoneSettings(bool& success, uint32_t _hash, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75773E11BA459E90);
	ctx->Reset();
	ctx->Push(_hash);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_freezeMicrophone(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD57AAAE0E2214D11);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_distantCopCarSirens(bool& success, uint8_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x552369F549563AD5);
	ctx->Reset();
	ctx->Push((int32_t) _value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSirenCanBeControlledByAudio(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43FA0DFC5DF87815);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_enableStuntJumpAudio(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB81CF134AEB56FFB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAudioFlag(bool& success, const char* _flagName, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9EFD5C25018725A);
	ctx->Reset();
	ctx->Push(SaveString(_flagName));
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_prepareSynchronizedAudioEvent(bool& success, const char* _audioEvent, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7ABCACA4985A766);
	ctx->Reset();
	ctx->Push(SaveString(_audioEvent));
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_prepareSynchronizedAudioEventForScene(bool& success, int32_t _sceneID, const char* _audioEvent) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x029FE7CD1B7E2E75);
	ctx->Reset();
	ctx->Push(_sceneID);
	ctx->Push(SaveString(_audioEvent));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_playSynchronizedAudioEvent(bool& success, int32_t _sceneID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B2FD4560E55DD2D);
	ctx->Reset();
	ctx->Push(_sceneID);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_stopSynchronizedAudioEvent(bool& success, int32_t _sceneID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92D6A88E64A94430);
	ctx->Reset();
	ctx->Push(_sceneID);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_initSynchSceneAudioWithPosition(bool& success, const char* _audioEvent, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8EDE9BDBCCBA6D4);
	ctx->Reset();
	ctx->Push(SaveString(_audioEvent));
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_initSynchSceneAudioWithEntity(bool& success, const char* _audioEvent, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x950A154B8DAB6185);
	ctx->Reset();
	ctx->Push(SaveString(_audioEvent));
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAudioSpecialEffectMode(bool& success, int32_t _mode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x12561FCBB62D5B9C);
	ctx->Reset();
	ctx->Push(_mode);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPortalSettingsOverride(bool& success, const char* _p0, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x044DBAD7A7FA2BE5);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	ctx->Push(SaveString(_p1));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removePortalSettingsOverride(bool& success, const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4BBFD9CD8B3922B);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopSmokeGrenadeExplosionSounds(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4E6DD5566D28C82);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getMusicVolSlider(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A48AB4445D499BE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_requestTennisBanks(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4ADA3F19BE4A6047);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_unrequestTennisBanks(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0150B6FF25A9E2E5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSkipMinigunSpinUpAudio(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBEF34B1D9624D5DD);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopCutsceneAudio(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x806058BBDC136E06);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasLoadedMpDataSet(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x544810ED9DB6BBE6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasLoadedSpDataSet(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B50ABB1FE3746F4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getVehicleHornSoundIndex(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD53F3A29BCE2580E);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setVehicleHornSoundIndex(bool& success, int32_t _vehicle, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0350E7E17BA767D0);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addScriptToRandomPed(bool& success, const char* _name, uint32_t _model, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4EE5367468A65CCC);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	ctx->Push(_model);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_registerObjectScriptBrain(bool& success, const char* _scriptName, uint32_t _modelHash, int32_t _p2, float _activationRange, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BE84C318BA6EC22);
	ctx->Reset();
	ctx->Push(SaveString(_scriptName));
	ctx->Push(_modelHash);
	ctx->Push(_p2);
	ctx->Push(_activationRange);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isObjectWithinBrainActivationRange(bool& success, int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCCBA154209823057);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_registerWorldPointScriptBrain(bool& success, const char* _scriptName, float _activationRange, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3CDC7136613284BD);
	ctx->Reset();
	ctx->Push(SaveString(_scriptName));
	ctx->Push(_activationRange);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isWorldPointWithinBrainActivationRange(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5042CC6F5E3D450);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_enableScriptBrainSet(bool& success, int32_t _brainSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x67AA4D73F0CFA86B);
	ctx->Reset();
	ctx->Push(_brainSet);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableScriptBrainSet(bool& success, int32_t _brainSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14D8518E9760F08F);
	ctx->Reset();
	ctx->Push(_brainSet);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_reactivateAllWorldBrainsThatAreWaitingTillOutOfRange(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0B40ED49D7D6FF84);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_reactivateAllObjectBrainsThatAreWaitingTillOutOfRange(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D953DF78EBF8158);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_reactivateNamedWorldBrainsWaitingTillOutOfRange(bool& success, const char* _scriptName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D6840CEE8845831);
	ctx->Reset();
	ctx->Push(SaveString(_scriptName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_reactivateNamedObjectBrainsWaitingTillOutOfRange(bool& success, const char* _scriptName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E91B04E08773030);
	ctx->Reset();
	ctx->Push(SaveString(_scriptName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_renderScriptCams(bool& success, uint8_t _render, uint8_t _ease, int32_t _easeTime, uint8_t _p3, uint8_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x07E5B515DB0636FC);
	ctx->Reset();
	ctx->Push((int32_t) _render);
	ctx->Push((int32_t) _ease);
	ctx->Push(_easeTime);
	ctx->Push((int32_t) _p3);
	ctx->Push((int32_t) _p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopRenderingScriptCamsUsingCatchUp(bool& success, uint8_t _render, float _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC819F3CBB62BF692);
	ctx->Reset();
	ctx->Push((int32_t) _render);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_createCam(bool& success, const char* _camName, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3981DCE61D9E13F);
	ctx->Reset();
	ctx->Push(SaveString(_camName));
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_createCamWithParams(bool& success, const char* _camName, float _posX, float _posY, float _posZ, float _rotX, float _rotY, float _rotZ, float _fov, uint8_t _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB51194800B257161);
	ctx->Reset();
	ctx->Push(SaveString(_camName));
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_fov);
	ctx->Push((int32_t) _p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_createCamera(bool& success, uint32_t _camHash, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E3CF89C6BCCA67D);
	ctx->Reset();
	ctx->Push(_camHash);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_createCameraWithParams(bool& success, uint32_t _camHash, float _posX, float _posY, float _posZ, float _rotX, float _rotY, float _rotZ, float _fov, uint8_t _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6ABFA3E16460F22D);
	ctx->Reset();
	ctx->Push(_camHash);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_fov);
	ctx->Push((int32_t) _p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_destroyCam(bool& success, int32_t _cam, uint8_t _bScriptHostCam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x865908C81A2C22E9);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push((int32_t) _bScriptHostCam);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_destroyAllCams(bool& success, uint8_t _bScriptHostCam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8E5FB15663F79120);
	ctx->Reset();
	ctx->Push((int32_t) _bScriptHostCam);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesCamExist(bool& success, int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7A932170592B50E);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setCamActive(bool& success, int32_t _cam, uint8_t _active) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x026FB97D0A425F84);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push((int32_t) _active);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isCamActive(bool& success, int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFB2B516207D3534);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isCamRendering(bool& success, int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02EC0AF5C5A49B7A);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getRenderingCam(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5234F9F10919EABA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

vector3_t Native_getCamCoord(bool& success, int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBAC038F7459AE5AE);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

vector3_t Native_getCamRot(bool& success, int32_t _cam, int32_t _rotationOrder) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D304C1C955E3E12);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_rotationOrder);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

float Native_getCamFov(bool& success, int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3330A45CCCDB26A);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getCamNearClip(bool& success, int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC520A34DAFBF24B1);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getCamFarClip(bool& success, int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB60A9CFEB21CA6AA);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getCamNearDof(bool& success, int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC2612D223D915A1C);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getCamFarDof(bool& success, int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x255F8DAFD540D397);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getCamDofStrength(bool& success, int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06D153C0B99B6128);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setCamParams(bool& success, int32_t _cam, float _posX, float _posY, float _posZ, float _rotX, float _rotY, float _rotZ, float _fieldOfView, int32_t _p8, int32_t _p9, int32_t _p10, int32_t _p11) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBFD8727AEA3CCEBA);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_fieldOfView);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamCoord(bool& success, int32_t _cam, float _posX, float _posY, float _posZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D41783FB745E42E);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamRot(bool& success, int32_t _cam, float _rotX, float _rotY, float _rotZ, int32_t _rotationOrder) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85973643155D0B07);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_rotationOrder);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamFov(bool& success, int32_t _cam, float _fieldOfView) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB13C14F66A00D047);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_fieldOfView);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamNearClip(bool& success, int32_t _cam, float _nearClip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7848EFCCC545182);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_nearClip);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamFarClip(bool& success, int32_t _cam, float _farClip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE306F2A904BF86E);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_farClip);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceCamFarClip(bool& success, int32_t _cam, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAABD62873FFB1A33);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamMotionBlurStrength(bool& success, int32_t _cam, float _strength) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F0F77FBA9A8F2E6);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_strength);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamNearDof(bool& success, int32_t _cam, float _nearDOF) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3FA4BF0A7AB7DE2C);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_nearDOF);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamFarDof(bool& success, int32_t _cam, float _farDOF) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEDD91296CD01AEE0);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_farDOF);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamDofStrength(bool& success, int32_t _cam, float _dofStrength) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5EE29B4D7D5DF897);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_dofStrength);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamDofPlanes(bool& success, int32_t _cam, float _p1, float _p2, float _p3, float _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3CF48F6F96E749DC);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamUseShallowDofMode(bool& success, int32_t _cam, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16A96863A17552BB);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setUseHiDof(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA13B0222F3D94A94);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setUseHiDofOnSyncedSceneThisUpdate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x731A880555DA3647);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamDofOverriddenFocusDistance(bool& success, int32_t _camera, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF55E4046F6F831DC);
	ctx->Reset();
	ctx->Push(_camera);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamDofOverriddenFocusDistanceBlendLevel(bool& success, int32_t _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE111A7C0D200CBC5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamDofFnumberOfLens(bool& success, int32_t _camera, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7DD234D6F3914C5B);
	ctx->Reset();
	ctx->Push(_camera);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamDofFocalLengthMultiplier(bool& success, int32_t _camera, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x47B595D60664CFFA);
	ctx->Reset();
	ctx->Push(_camera);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamDofFocusDistanceBias(bool& success, int32_t _camera, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC669EEA5D031B7DE);
	ctx->Reset();
	ctx->Push(_camera);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamDofMaxNearInFocusDistance(bool& success, int32_t _camera, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3654A441402562D);
	ctx->Reset();
	ctx->Push(_camera);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamDofMaxNearInFocusDistanceBlendLevel(bool& success, int32_t _camera, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C654B4943BDDF7C);
	ctx->Reset();
	ctx->Push(_camera);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_attachCamToEntity(bool& success, int32_t _cam, int32_t _entity, float _xOffset, float _yOffset, float _zOffset, uint8_t _isRelative) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFEDB7D269E8C60E3);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_entity);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push((int32_t) _isRelative);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_attachCamToPedBone(bool& success, int32_t _cam, int32_t _ped, int32_t _boneIndex, float _x, float _y, float _z, uint8_t _heading) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61A3DBA14AB7F411);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_ped);
	ctx->Push(_boneIndex);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _heading);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_hardAttachCamToPedBone(bool& success, int32_t _cam, int32_t _ped, int32_t _boneIndex, float _p3, float _p4, float _p5, float _p6, float _p7, float _p8, uint8_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x149916F50C34A40D);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_ped);
	ctx->Push(_boneIndex);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push((int32_t) _p9);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_hardAttachCamToEntity(bool& success, int32_t _cam, int32_t _entity, float _xRot, float _yRot, float _zRot, float _xOffset, float _yOffset, float _zOffset, uint8_t _isRelative) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x202A5ED9CE01D6E7);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_entity);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push((int32_t) _isRelative);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_attachCamToVehicleBone(bool& success, int32_t _cam, int32_t _vehicle, int32_t _boneIndex, uint8_t _relativeRotation, float _rotX, float _rotY, float _rotZ, float _offsetX, float _offsetY, float _offsetZ, uint8_t _fixedDirection) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8DB3F12A02CAEF72);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_vehicle);
	ctx->Push(_boneIndex);
	ctx->Push((int32_t) _relativeRotation);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	ctx->Push((int32_t) _fixedDirection);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_detachCam(bool& success, int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2FABBE87F4BAD82);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamInheritRollVehicle(bool& success, int32_t _cam, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45F1DE9C34B93AE6);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_pointCamAtCoord(bool& success, int32_t _cam, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF75497BB865F0803);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_pointCamAtEntity(bool& success, int32_t _cam, int32_t _entity, float _p2, float _p3, float _p4, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5640BFF86B16E8DC);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_entity);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_pointCamAtPedBone(bool& success, int32_t _cam, int32_t _ped, int32_t _boneIndex, float _x, float _y, float _z, uint8_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x68B2B5F33BA63C41);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_ped);
	ctx->Push(_boneIndex);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopCamPointing(bool& success, int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF33AB75780BA57DE);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamAffectsAiming(bool& success, int32_t _cam, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C1DC7770C51DC8D);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamControlsMiniMapHeading(bool& success, int32_t _cam, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x661B5C8654ADD825);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamIsInsideVehicle(bool& success, int32_t _cam, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2767257A320FC82);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_allowMotionBlurDecay(bool& success, int32_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x271017B9BA825366);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamDebugName(bool& success, int32_t _camera, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B93E0107865DD40);
	ctx->Reset();
	ctx->Push(_camera);
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getDebugCam(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77C3CEC46BE286F6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_addCamSplineNode(bool& success, int32_t _camera, float _x, float _y, float _z, float _xRot, float _yRot, float _zRot, int32_t _length, int32_t _smoothingStyle, int32_t _rotationOrder) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8609C75EC438FB3B);
	ctx->Reset();
	ctx->Push(_camera);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_length);
	ctx->Push(_smoothingStyle);
	ctx->Push(_rotationOrder);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addCamSplineNodeUsingCameraFrame(bool& success, int32_t _cam, int32_t _cam2, int32_t _length, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A9F2A468B328E74);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_cam2);
	ctx->Push(_length);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addCamSplineNodeUsingCamera(bool& success, int32_t _cam, int32_t _cam2, int32_t _length, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0FB82563989CF4FB);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_cam2);
	ctx->Push(_length);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addCamSplineNodeUsingGameplayFrame(bool& success, int32_t _cam, int32_t _length, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x609278246A29CA34);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_length);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamSplinePhase(bool& success, int32_t _cam, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x242B5874F0A4E052);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getCamSplinePhase(bool& success, int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5349E36C546509A);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getCamSplineNodePhase(bool& success, int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9D0E694C8282C96);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setCamSplineDuration(bool& success, int32_t _cam, int32_t _timeDuration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1381539FEE034CDA);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_timeDuration);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamSplineSmoothingStyle(bool& success, int32_t _cam, int32_t _smoothingStyle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1B0F412F109EA5D);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_smoothingStyle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getCamSplineNodeIndex(bool& success, int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB22B17DF858716A6);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setCamSplineNodeEase(bool& success, int32_t _cam, int32_t _easingFunction, int32_t _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83B8201ED82A9A2D);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_easingFunction);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamSplineNodeVelocityScale(bool& success, int32_t _cam, int32_t _p1, float _scale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6385DEB180F319F);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_p1);
	ctx->Push(_scale);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_overrideCamSplineVelocity(bool& success, int32_t _cam, int32_t _p1, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x40B62FA033EB0346);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_overrideCamSplineMotionBlur(bool& success, int32_t _cam, int32_t _p1, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7DCF7C708D292D55);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamSplineNodeExtraFlags(bool& success, int32_t _cam, int32_t _p1, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7BF1A54AE67AC070);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_p1);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isCamSplinePaused(bool& success, int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0290F35C0AD97864);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setCamActiveWithInterp(bool& success, int32_t _camTo, int32_t _camFrom, int32_t _duration, int32_t _easeLocation, int32_t _easeRotation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9FBDA379383A52A4);
	ctx->Reset();
	ctx->Push(_camTo);
	ctx->Push(_camFrom);
	ctx->Push(_duration);
	ctx->Push(_easeLocation);
	ctx->Push(_easeRotation);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isCamInterpolating(bool& success, int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x036F97C908C2B52C);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_shakeCam(bool& success, int32_t _cam, const char* _type, float _amplitude) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A25241C340D3822);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(SaveString(_type));
	ctx->Push(_amplitude);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_animatedShakeCam(bool& success, int32_t _cam, const char* _p1, const char* _p2, const char* _p3, float _amplitude) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2746EEAE3E577CD);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(SaveString(_p1));
	ctx->Push(SaveString(_p2));
	ctx->Push(SaveString(_p3));
	ctx->Push(_amplitude);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isCamShaking(bool& success, int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B24BFE83A2BE47B);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setCamShakeAmplitude(bool& success, int32_t _cam, float _amplitude) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD93DB43B82BC0D00);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_amplitude);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopCamShaking(bool& success, int32_t _cam, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBDECF64367884AC3);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_shakeScriptGlobal(bool& success, const char* _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF4C8CF9E353AFECA);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_animatedShakeScriptGlobal(bool& success, const char* _p0, const char* _p1, const char* _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC2EAE3FB8CDBED31);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	ctx->Push(SaveString(_p1));
	ctx->Push(SaveString(_p2));
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isScriptGlobalShaking(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC912AF078AF19212);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_stopScriptGlobalShaking(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C9D7949FA533490);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_triggerVehiclePartBrokenCameraShake(bool& success, int32_t _vehicle, int32_t _p1, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D96CFB59DA076A0);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_playCamAnim(bool& success, int32_t _cam, const char* _animName, const char* _animDictionary, float _x, float _y, float _z, float _xRot, float _yRot, float _zRot, uint8_t _p9, int32_t _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A2D0FB2E7852392);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(SaveString(_animName));
	ctx->Push(SaveString(_animDictionary));
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push((int32_t) _p9);
	ctx->Push(_p10);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isCamPlayingAnim(bool& success, int32_t _cam, const char* _animName, const char* _animDictionary) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC90621D8A0CEECF2);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(SaveString(_animName));
	ctx->Push(SaveString(_animDictionary));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setCamAnimCurrentPhase(bool& success, int32_t _cam, float _phase) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4145A4C44FF3B5A6);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_phase);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getCamAnimCurrentPhase(bool& success, int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA10B2DB49E92A6B0);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

uint8_t Native_playSynchronizedCamAnim(bool& success, int32_t _p0, int32_t _p1, const char* _animName, const char* _animDictionary) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE32EFE9AB4A9AA0C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(SaveString(_animName));
	ctx->Push(SaveString(_animDictionary));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setFlyCamHorizontalResponse(bool& success, int32_t _cam, float _p1, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x503F5920162365B2);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFlyCamVerticalResponse(bool& success, int32_t _cam, float _p1, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE827B9382CFB41BA);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFlyCamMaxHeight(bool& success, int32_t _cam, float _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9D02130ECDD1D77);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_height);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFlyCamCoordAndConstrain(bool& success, int32_t _cam, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC91C6C55199308CA);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFlyCamVerticalControlsThisUpdate(bool& success, int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8B5C4A79CC18B94);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_wasFlyCamConstrainedOnPreviousUdpate(bool& success, int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C48A1D6E3B33179);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isScreenFadedOut(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB16FCE9DDC7BA182);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isScreenFadedIn(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A859503B0C08678);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isScreenFadingOut(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x797AC7CB535BA28F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isScreenFadingIn(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C544BC6C57AC575);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_doScreenFadeIn(bool& success, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4E8E24955024033);
	ctx->Reset();
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_doScreenFadeOut(bool& success, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x891B5B39AC6302AF);
	ctx->Reset();
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setWidescreenBorders(bool& success, uint8_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCD4EA924F42D01A);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_areWidescreenBordersActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4879E4FE39074CDF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

vector3_t Native_getGameplayCamCoord(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14D6F5678D8F1B37);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

vector3_t Native_getGameplayCamRot(bool& success, int32_t _rotationOrder) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x837765A25378F0BB);
	ctx->Reset();
	ctx->Push(_rotationOrder);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

float Native_getGameplayCamFov(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x65019750A0324133);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setGameplayCamMotionBlurScalingThisUpdate(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x487A82C650EB7799);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGameplayCamMaxMotionBlurStrengthThisUpdate(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0225778816FDC28C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getGameplayCamRelativeHeading(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x743607648ADD4587);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setGameplayCamRelativeHeading(bool& success, float _heading) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4EC2312F4E5B1F1);
	ctx->Reset();
	ctx->Push(_heading);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getGameplayCamRelativePitch(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A6867B4845BEDA2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setGameplayCamRelativePitch(bool& success, float _angle, float _scalingFactor) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D0858B8EDFD2B7D);
	ctx->Reset();
	ctx->Push(_angle);
	ctx->Push(_scalingFactor);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetGameplayCamFullAttachParentTransformTimer(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7295C203DD659DFE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceCameraRelativeHeadingAndPitch(bool& success, float _roll, float _pitch, float _yaw) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48608C3464F58AB4);
	ctx->Reset();
	ctx->Push(_roll);
	ctx->Push(_pitch);
	ctx->Push(_yaw);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceBonnetCameraRelativeHeadingAndPitch(bool& success, float _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28B022A17B068A3A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFirstPersonShooterCameraHeading(bool& success, float _yaw) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x103991D4A307D472);
	ctx->Reset();
	ctx->Push(_yaw);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFirstPersonShooterCameraPitch(bool& success, float _pitch) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x759E13EBC1C15C5A);
	ctx->Reset();
	ctx->Push(_pitch);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setScriptedCameraIsFirstPersonThisFrame(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x469F2ECDEC046337);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_shakeGameplayCam(bool& success, const char* _shakeName, float _intensity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD55E49555E017CF);
	ctx->Reset();
	ctx->Push(SaveString(_shakeName));
	ctx->Push(_intensity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isGameplayCamShaking(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x016C090630DF1F89);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setGameplayCamShakeAmplitude(bool& success, float _amplitude) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA87E00932DB4D85D);
	ctx->Reset();
	ctx->Push(_amplitude);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopGameplayCamShaking(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0EF93E9F3D08C178);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGameplayCamFollowPedThisUpdate(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8BBACBF51DA047A8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isGameplayCamRendering(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39B5D1B10383F0C8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isInterpolatingFromScriptCams(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3044240D2E0FA842);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isInterpolatingToScriptCams(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x705A276EBFF3133D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setGameplayCamAltitudeFovScalingState(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB90C6CCA48940F1);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableGameplayCamAltitudeFovScalingThisUpdate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA7F0AD7E9BA676F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isGameplayCamLookingBehind(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70FDA869F3317EA9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setGameplayCamIgnoreEntityCollisionThisUpdate(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2AED6301F67007D5);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableCamCollisionForObject(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x49482F9FCD825AAA);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_bypassCameraCollisionBuoyancyTestThisUpdate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7092AFE81944852);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGameplayCamEntityToLimitFocusOverBoundingSphereThisUpdate(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD3151CD37EA2245);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableFirstPersonCameraWaterClippingTestThisUpdate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1381B97F70C7B30);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFollowCamIgnoreAttachParentMovementThisUpdate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD79DF9F4D26E1C9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isSphereVisible(bool& success, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE33D59DA70B58FDF);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isFollowPedCamActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6D3D26810C8E0F9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_setFollowPedCamThisUpdate(bool& success, const char* _camName, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44A113DD6FFC48D1);
	ctx->Reset();
	ctx->Push(SaveString(_camName));
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_useScriptCamForAmbientPopulationOriginThisFrame(bool& success, uint8_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x271401846BD26E92);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFollowPedCamLadderAlignThisUpdate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8391C309684595A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setThirdPersonCamRelativeHeadingLimitsThisUpdate(bool& success, float _minimum, float _maximum) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F993D26E0CA5E8E);
	ctx->Reset();
	ctx->Push(_minimum);
	ctx->Push(_maximum);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setThirdPersonCamRelativePitchLimitsThisUpdate(bool& success, float _minimum, float _maximum) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA516C198B7DCA1E1);
	ctx->Reset();
	ctx->Push(_minimum);
	ctx->Push(_maximum);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setThirdPersonCamOrbitDistanceLimitsThisUpdate(bool& success, float _p0, float _distance) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF2E1F7742402E81);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_distance);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setInVehicleCamStateThisUpdate(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE9EA16D6E54CDCA4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableOnFootFirstPersonViewThisUpdate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE2EF5DA284CC8DF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableFirstPersonFlashEffectThisUpdate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x59424BD75174C9B1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_blockFirstPersonOrientationResetThisUpdate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F97DA93681F87EA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getFollowPedCamZoomLevel(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33E6C8EFD0CD93E9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getFollowPedCamViewMode(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D4D46230B2C353A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setFollowPedCamViewMode(bool& success, int32_t _viewMode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A4F9EDF1673F704);
	ctx->Reset();
	ctx->Push(_viewMode);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isFollowVehicleCamActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCBBDE6D335D6D496);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setFollowVehicleCamHighAngleModeThisUpdate(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x91EF6EE6419E5B97);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFollowVehicleCamHighAngleModeEveryUpdate(bool& success, uint8_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DFE13ECDC1EC196);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_setTableGamesCameraThisUpdate(bool& success, uint32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x79C0E43EB9B944E2);
	ctx->Reset();
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getFollowVehicleCamZoomLevel(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE82280AB767B690);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setFollowVehicleCamZoomLevel(bool& success, int32_t _zoomLevel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19464CB6E4078C8A);
	ctx->Reset();
	ctx->Push(_zoomLevel);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getFollowVehicleCamViewMode(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA4FF579AC0E3AAAE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setFollowVehicleCamViewMode(bool& success, int32_t _viewMode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC253D7842768F48);
	ctx->Reset();
	ctx->Push(_viewMode);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getCamViewModeForContext(bool& success, int32_t _context) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE778F8C7E1142E2);
	ctx->Reset();
	ctx->Push(_context);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setCamViewModeForContext(bool& success, int32_t _context, int32_t _viewMode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A2173E46DAECD12);
	ctx->Reset();
	ctx->Push(_context);
	ctx->Push(_viewMode);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getCamActiveViewModeContext(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19CAFA3C87F7C2FF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_useVehicleCamStuntSettingsThisUpdate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6493CF69859B116A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_useDedicatedStuntCameraThisUpdate(bool& success, const char* _camName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x425A920FDB9A0DDA);
	ctx->Reset();
	ctx->Push(SaveString(_camName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceVehicleCamStuntSettingsThisUpdate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0AA27680A0BD43FA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFollowVehicleCamSeatThisUpdate(bool& success, int32_t _seatIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C90CAB09951A12F);
	ctx->Reset();
	ctx->Push(_seatIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isAimCamActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x68EDDA28A5976D07);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isAimCamActiveInAccurateMode(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74BD83EA840F6BC9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isFirstPersonAimCamActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E346D934122613F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_disableAimCamThisUpdate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A31FE0049E542F6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getFirstPersonAimCamZoomFactor(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EC52CC40597D170);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setFirstPersonAimCamZoomFactor(bool& success, float _zoomFactor) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70894BD0915C5BCA);
	ctx->Reset();
	ctx->Push(_zoomFactor);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFirstPersonAimCamZoomFactorLimitsThisUpdate(bool& success, float _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCED08CBE8EBB97C7);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFirstPersonAimCamRelativeHeadingLimitsThisUpdate(bool& success, float _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F7F2B26DD3F18EE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFirstPersonAimCamRelativePitchLimitsThisUpdate(bool& success, float _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBCFC632DB7673BF0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFirstPersonAimCamNearClipThisUpdate(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0AF7B437918103B3);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setThirdPersonAimCamNearClipThisUpdate(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42156508606DE65E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAllowCustomVehicleDriveByCamThisUpdate(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4008EDF7D6E48175);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceTightspaceCustomFramingThisUpdate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x380B4968D1E09E55);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

vector3_t Native_getFinalRenderedCamCoord(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA200EB1EE790F448);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

vector3_t Native_getFinalRenderedCamRot(bool& success, int32_t _rotationOrder) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B4E4C817FCC2DFB);
	ctx->Reset();
	ctx->Push(_rotationOrder);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

vector3_t Native_getFinalRenderedRemotePlayerCamRot(bool& success, int32_t _player, int32_t _rotationOrder) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26903D9CD1175F2C);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_rotationOrder);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

float Native_getFinalRenderedCamFov(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80EC114669DAEFF4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getFinalRenderedRemotePlayerCamFov(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F35F6732C3FBBA0);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getFinalRenderedCamNearClip(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0082607100D7193);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getFinalRenderedCamFarClip(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFC8CBC606FDB0FC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getFinalRenderedCamNearDof(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA03502FC581F7D9B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getFinalRenderedCamFarDof(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9780F32BCAF72431);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getFinalRenderedCamMotionBlurStrength(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x162F9D995753DC19);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setGameplayCoordHint(bool& success, float _x, float _y, float _z, int32_t _duration, int32_t _blendOutDuration, int32_t _blendInDuration, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD51ADCD2D8BC0FB3);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_duration);
	ctx->Push(_blendOutDuration);
	ctx->Push(_blendInDuration);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGameplayPedHint(bool& success, int32_t _ped, float _x1, float _y1, float _z1, uint8_t _p4, int32_t _duration, int32_t _blendOutDuration, int32_t _blendInDuration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B486269ACD548D3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push((int32_t) _p4);
	ctx->Push(_duration);
	ctx->Push(_blendOutDuration);
	ctx->Push(_blendInDuration);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGameplayVehicleHint(bool& success, int32_t _vehicle, float _offsetX, float _offsetY, float _offsetZ, uint8_t _p4, int32_t _time, int32_t _easeInTime, int32_t _easeOutTime) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2297E18F3E71C2E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	ctx->Push((int32_t) _p4);
	ctx->Push(_time);
	ctx->Push(_easeInTime);
	ctx->Push(_easeOutTime);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGameplayObjectHint(bool& success, int32_t _object, float _xOffset, float _yOffset, float _zOffset, uint8_t _p4, int32_t _time, int32_t _easeInTime, int32_t _easeOutTime) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83E87508A2CA2AC6);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push((int32_t) _p4);
	ctx->Push(_time);
	ctx->Push(_easeInTime);
	ctx->Push(_easeOutTime);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGameplayEntityHint(bool& success, int32_t _entity, float _xOffset, float _yOffset, float _zOffset, uint8_t _p4, int32_t _time, int32_t _easeInTime, int32_t _easeOutTime, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x189E955A8313E298);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push((int32_t) _p4);
	ctx->Push(_time);
	ctx->Push(_easeInTime);
	ctx->Push(_easeOutTime);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isGameplayHintActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE520FF1AD2785B40);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_stopGameplayHint(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF46C581C61718916);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopGameplayHintBeingCancelledThisUpdate(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCCD078C2665D2973);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopCodeGameplayHint(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x247ACBC4ABBC9D1C);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isCodeGameplayHintActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF72910D0F26F025);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setGameplayHintFov(bool& success, float _FOV) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x513403FB9C56211F);
	ctx->Reset();
	ctx->Push(_FOV);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGameplayHintFollowDistanceScalar(bool& success, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF8BDBF3D573049A1);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGameplayHintBaseOrbitPitchOffset(bool& success, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1F8363DFAD03848);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGameplayHintCameraRelativeSideOffset(bool& success, float _xOffset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D7B620DAE436138);
	ctx->Reset();
	ctx->Push(_xOffset);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGameplayHintCameraRelativeVerticalOffset(bool& success, float _yOffset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC92717EF615B6704);
	ctx->Reset();
	ctx->Push(_yOffset);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGameplayHintCameraBlendToFollowPedMediumViewMode(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3433EADAAF7EE40);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCinematicButtonActive(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x51669F7D1FB53D9F);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isCinematicCamRendering(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB15162CB5826E9E8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_shakeCinematicCam(bool& success, const char* _shakeType, float _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCE214D9ED58F3CF);
	ctx->Reset();
	ctx->Push(SaveString(_shakeType));
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isCinematicCamShaking(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBBC08F6B4CB8FF0A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setCinematicCamShakeAmplitude(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC724C701C30B2FE7);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopCinematicCamShaking(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2238E588E588A6D7);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableCinematicBonnetCameraThisUpdate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADFF1B2A555F5FBA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableCinematicVehicleIdleModeThisUpdate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62ECFCFDEE7885D6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_invalidateCinematicVehicleIdleMode(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9E4CFFF989258472);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_invalidateIdleCam(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF4F2C0D4EE209E20);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isCinematicIdleCamRendering(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA9D2AA3E326D720);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isCinematicFirstPersonVehicleInteriorCamRendering(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F32C0D5A90A9B40);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_createCinematicShot(bool& success, uint32_t _p0, int32_t _time, uint8_t _p2, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x741B0129D4560F31);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_time);
	ctx->Push((int32_t) _p2);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isCinematicShotActive(bool& success, uint32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCC9F3371A7C28BC9);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_stopCinematicShot(bool& success, uint32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7660C6E75D3A078E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceCinematicRenderingThisUpdate(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA41BCD7213805AAC);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCinematicNewsChannelActiveThisUpdate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC9DA9E8789F5246);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCinematicModeActive(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCF0754AC3D6FD4E);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isInVehicleMobilePhoneCameraRendering(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F2300CB7FA7B7F6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_disableCinematicSlowMoThisUpdate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17FCA7199A530203);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isBonnetCinematicCamRendering(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7360051C885628B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isCinematicCamInputActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF5F1E89A970B7796);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_ignoreMenuPreferenceForBonnetCameraThisUpdate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7B8A361C1813FBEF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_bypassCutsceneCamRenderingThisUpdate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB629FFD9285FA06);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopCutsceneCamShaking(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x324C5AA411DA7737);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCutsceneCamFarClipThisUpdate(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x12DED8CA53D47EA5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getFocusPedOnScreen(bool& success, float _p0, int32_t _p1, float _p2, float _p3, float _p4, float _p5, float _p6, int32_t _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x89215EC747DF244A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_disableNearClipScanThisUpdate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A43C76F7FC7BA5F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCamDeathFailEffectState(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80C8B1846639BB19);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFirstPersonFlashEffectType(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C41E6BABC9E2112);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFirstPersonFlashEffectVehicleModelName(bool& success, const char* _vehicleName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21E253A7F8DA5DFB);
	ctx->Reset();
	ctx->Push(SaveString(_vehicleName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFirstPersonFlashEffectVehicleModelHash(bool& success, uint32_t _vehicleModel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11FA5D3479C7DD47);
	ctx->Reset();
	ctx->Push(_vehicleModel);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isAllowedIndependentCameraModes(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEAF0FA793D05C592);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_cameraPreventCollisionSettingsForTripleheadInInteriorsThisUpdate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62374889A4D59F72);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_replayGetMaxDistanceAllowedFromPlayer(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8BFCEB5EA1B161B6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setClockTime(bool& success, int32_t _hour, int32_t _minute, int32_t _second) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x47C3B5848C3E45D8);
	ctx->Reset();
	ctx->Push(_hour);
	ctx->Push(_minute);
	ctx->Push(_second);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_pauseClock(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4055E40BD2DBEC1D);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_advanceClockTimeTo(bool& success, int32_t _hour, int32_t _minute, int32_t _second) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8CA9670B9D83B3B);
	ctx->Reset();
	ctx->Push(_hour);
	ctx->Push(_minute);
	ctx->Push(_second);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addToClockTime(bool& success, int32_t _hours, int32_t _minutes, int32_t _seconds) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD716F30D8C8980E2);
	ctx->Reset();
	ctx->Push(_hours);
	ctx->Push(_minutes);
	ctx->Push(_seconds);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getClockHours(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25223CA6B4D20B7F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getClockMinutes(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13D2B8ADD79640F2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getClockSeconds(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x494E97C2EF27C470);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setClockDate(bool& success, int32_t _day, int32_t _month, int32_t _year) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB096419DF0D06CE7);
	ctx->Reset();
	ctx->Push(_day);
	ctx->Push(_month);
	ctx->Push(_year);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getClockDayOfWeek(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD972E4BD7AEB235F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getClockDayOfMonth(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3D10BC92A4DB1D35);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getClockMonth(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBBC72712E80257A1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getClockYear(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x961777E64BDAF717);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getMillisecondsPerGameMinute(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F8B4D1C595B11DB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_getPosixTime(bool& success, int32_t& _year, int32_t& _month, int32_t& _day, int32_t& _hour, int32_t& _minute, int32_t& _second) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA488F299A5B164E);
	ctx->Reset();
	auto ptr_year = _year;
	ctx->Push(&ptr_year);
	auto ptr_month = _month;
	ctx->Push(&ptr_month);
	auto ptr_day = _day;
	ctx->Push(&ptr_day);
	auto ptr_hour = _hour;
	ctx->Push(&ptr_hour);
	auto ptr_minute = _minute;
	ctx->Push(&ptr_minute);
	auto ptr_second = _second;
	ctx->Push(&ptr_second);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_year = ptr_year;
	_month = ptr_month;
	_day = ptr_day;
	_hour = ptr_hour;
	_minute = ptr_minute;
	_second = ptr_second;
}

void Native_getUtcTime(bool& success, int32_t& _year, int32_t& _month, int32_t& _day, int32_t& _hour, int32_t& _minute, int32_t& _second) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8117E09A19EEF4D3);
	ctx->Reset();
	auto ptr_year = _year;
	ctx->Push(&ptr_year);
	auto ptr_month = _month;
	ctx->Push(&ptr_month);
	auto ptr_day = _day;
	ctx->Push(&ptr_day);
	auto ptr_hour = _hour;
	ctx->Push(&ptr_hour);
	auto ptr_minute = _minute;
	ctx->Push(&ptr_minute);
	auto ptr_second = _second;
	ctx->Push(&ptr_second);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_year = ptr_year;
	_month = ptr_month;
	_day = ptr_day;
	_hour = ptr_hour;
	_minute = ptr_minute;
	_second = ptr_second;
}

void Native_getLocalTime(bool& success, int32_t& _year, int32_t& _month, int32_t& _day, int32_t& _hour, int32_t& _minute, int32_t& _second) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50C7A99057A69748);
	ctx->Reset();
	auto ptr_year = _year;
	ctx->Push(&ptr_year);
	auto ptr_month = _month;
	ctx->Push(&ptr_month);
	auto ptr_day = _day;
	ctx->Push(&ptr_day);
	auto ptr_hour = _hour;
	ctx->Push(&ptr_hour);
	auto ptr_minute = _minute;
	ctx->Push(&ptr_minute);
	auto ptr_second = _second;
	ctx->Push(&ptr_second);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_year = ptr_year;
	_month = ptr_month;
	_day = ptr_day;
	_hour = ptr_hour;
	_minute = ptr_minute;
	_second = ptr_second;
}

void Native_requestCutscene(bool& success, const char* _cutsceneName, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A86743F475D9E09);
	ctx->Reset();
	ctx->Push(SaveString(_cutsceneName));
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_requestCutsceneWithPlaybackList(bool& success, const char* _cutsceneName, int32_t _playbackFlags, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC23DE0E91C30B58C);
	ctx->Reset();
	ctx->Push(SaveString(_cutsceneName));
	ctx->Push(_playbackFlags);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeCutscene(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x440AF51A3462B86F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasCutsceneLoaded(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC59F528E9AB9F339);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasThisCutsceneLoaded(bool& success, const char* _cutsceneName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x228D3D94F8A11C3C);
	ctx->Reset();
	ctx->Push(SaveString(_cutsceneName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setScriptCanStartCutscene(bool& success, int32_t _threadId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D9DF6ECA8768583);
	ctx->Reset();
	ctx->Push(_threadId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_canRequestAssetsForCutsceneEntity(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB56BBBCC2955D9CB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isCutscenePlaybackFlagSet(bool& success, int32_t _flag) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71B74D2AE19338D0);
	ctx->Reset();
	ctx->Push(_flag);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setCutsceneEntityStreamingFlags(bool& success, const char* _cutsceneEntName, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C61C75BEE8184C2);
	ctx->Reset();
	ctx->Push(SaveString(_cutsceneEntName));
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_requestCutFile(bool& success, const char* _cutsceneName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06A3524161C502BA);
	ctx->Reset();
	ctx->Push(SaveString(_cutsceneName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasCutFileLoaded(bool& success, const char* _cutsceneName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1C996C2A744262E);
	ctx->Reset();
	ctx->Push(SaveString(_cutsceneName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_removeCutFile(bool& success, const char* _cutsceneName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD00D76A7DFC9D852);
	ctx->Reset();
	ctx->Push(SaveString(_cutsceneName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getCutFileConcatCount(bool& success, const char* _cutsceneName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0ABC54DE641DC0FC);
	ctx->Reset();
	ctx->Push(SaveString(_cutsceneName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_startCutscene(bool& success, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x186D5CB5E7B0FF7B);
	ctx->Reset();
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_startCutsceneAtCoords(bool& success, float _x, float _y, float _z, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C9ADDA3244A1FBF);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopCutscene(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7272775B4DC786E);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopCutsceneImmediately(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD220BDD222AC4A1E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCutsceneOrigin(bool& success, float _x, float _y, float _z, float _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB812B3FD1C01CF27);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCutsceneOriginAndOrientation(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x011883F41211432A);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getCutsceneTime(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE625BEABBAFFDAB9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getCutsceneTotalDuration(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE53B14A19E480D4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getCutsceneEndTime(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x971D7B15BCDBEF99);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_wasCutsceneSkipped(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x40C8656EDAEDD569);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasCutsceneFinished(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C0A893088881D57);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isCutsceneActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x991251AFC3981F84);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isCutscenePlaying(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3C2E180A40F031E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getCutsceneSectionPlaying(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x49010A6A396553D8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getEntityIndexOfCutsceneEntity(bool& success, const char* _cutsceneEntName, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A2E9FDB9A8C62F6);
	ctx->Reset();
	ctx->Push(SaveString(_cutsceneEntName));
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getCutsceneConcatSectionPlaying(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x583DF8E3D4AFBD98);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isCutsceneAuthorized(bool& success, const char* _cutsceneName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4CEBC1ED31E8925E);
	ctx->Reset();
	ctx->Push(SaveString(_cutsceneName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_doesCutsceneHandleExist(bool& success, int32_t _cutsceneHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4FCD976DA686580C);
	ctx->Reset();
	ctx->Push(_cutsceneHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_registerEntityForCutscene(bool& success, int32_t _cutscenePed, const char* _cutsceneEntName, int32_t _p2, uint32_t _modelHash, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE40C1C56DF95C2E8);
	ctx->Reset();
	ctx->Push(_cutscenePed);
	ctx->Push(SaveString(_cutsceneEntName));
	ctx->Push(_p2);
	ctx->Push(_modelHash);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getEntityIndexOfRegisteredEntity(bool& success, const char* _cutsceneEntName, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0741A26499654CD);
	ctx->Reset();
	ctx->Push(SaveString(_cutsceneEntName));
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setVehicleModelPlayerWillExitScene(bool& success, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F96F23FA9B73327);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCutsceneTriggerArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9896CE4721BE84BA);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_canSetEnterStateForRegisteredEntity(bool& success, const char* _cutsceneEntName, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x645D0B458D8E17B5);
	ctx->Reset();
	ctx->Push(SaveString(_cutsceneEntName));
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_canSetExitStateForRegisteredEntity(bool& success, const char* _cutsceneEntName, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C6A6451C79E4662);
	ctx->Reset();
	ctx->Push(SaveString(_cutsceneEntName));
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_canSetExitStateForCamera(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2CBCD0930DFB420);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPadCanShakeDuringCutscene(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC61B86C9F61EB404);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCutsceneFadeValues(bool& success, uint8_t _p0, uint8_t _p1, uint8_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8093F23ABACCC7D4);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCutsceneMultiheadFade(bool& success, uint8_t _p0, uint8_t _p1, uint8_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20746F7B1032A3C7);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCutsceneMultiheadFadeManual(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06EE9048FD080382);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isMultiheadFadeUp(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0FE76168A189DDB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkSetMocapCutsceneCanBeSkipped(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F137B508DE238F2);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCarGeneratorsCanUpdateDuringCutscene(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE36A98D8AB3D3C66);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_canUseMobilePhoneDuringCutscene(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5EDEF0CF8C1DAB3C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setCutsceneCanBeSkipped(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x41FAA8FB2ECE8720);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCanDisplayMinimapDuringCutsceneThisUpdate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2131046957F31B04);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCutscenePedComponentVariation(bool& success, const char* _cutsceneEntName, int32_t _componentId, int32_t _drawableId, int32_t _textureId, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA01E7B6DEEFBBC9);
	ctx->Reset();
	ctx->Push(SaveString(_cutsceneEntName));
	ctx->Push(_componentId);
	ctx->Push(_drawableId);
	ctx->Push(_textureId);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCutscenePedComponentVariationFromPed(bool& success, const char* _cutsceneEntName, int32_t _ped, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A56C06EBEF2B0D9);
	ctx->Reset();
	ctx->Push(SaveString(_cutsceneEntName));
	ctx->Push(_ped);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesCutsceneEntityExist(bool& success, const char* _cutsceneEntName, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x499EF20C5DB25C59);
	ctx->Reset();
	ctx->Push(SaveString(_cutsceneEntName));
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setCutscenePedPropVariation(bool& success, const char* _cutsceneEntName, int32_t _componentId, int32_t _drawableId, int32_t _textureId, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0546524ADE2E9723);
	ctx->Reset();
	ctx->Push(SaveString(_cutsceneEntName));
	ctx->Push(_componentId);
	ctx->Push(_drawableId);
	ctx->Push(_textureId);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasCutsceneCutThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x708BDD8CD795B043);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_datafileWatchRequestId(bool& success, int32_t _requestId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD6875BBC0FC899C);
	ctx->Reset();
	ctx->Push(_requestId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_datafileClearWatchList(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6CC86E78358D5119);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_datafileIsValidRequestId(bool& success, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFCCAE5B92A830878);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_datafileHasLoadedFileData(bool& success, int32_t _requestId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15FF52B809DB2353);
	ctx->Reset();
	ctx->Push(_requestId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_datafileHasValidFileData(bool& success, int32_t _requestId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF8CC1EBE0B62E29F);
	ctx->Reset();
	ctx->Push(_requestId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_datafileSelectActiveFile(bool& success, int32_t _requestId, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x22DA66936E0FFF37);
	ctx->Reset();
	ctx->Push(_requestId);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_datafileDeleteRequestedFile(bool& success, int32_t _requestId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F5EA1C01D65A100);
	ctx->Reset();
	ctx->Push(_requestId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ugcCreateContent(bool& success, int32_t& _data, int32_t _dataCount, const char* _contentName, const char* _description, const char* _tagsCsv, const char* _contentTypeName, uint8_t _publish, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC84527E235FCA219);
	ctx->Reset();
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	ctx->Push(_dataCount);
	ctx->Push(SaveString(_contentName));
	ctx->Push(SaveString(_description));
	ctx->Push(SaveString(_tagsCsv));
	ctx->Push(SaveString(_contentTypeName));
	ctx->Push((int32_t) _publish);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_data = ptr_data;
	return ctx->ResultBool();
}

uint8_t Native_ugcCreateMission(bool& success, const char* _contentName, const char* _description, const char* _tagsCsv, const char* _contentTypeName, uint8_t _publish, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5EFC3E847D60507);
	ctx->Reset();
	ctx->Push(SaveString(_contentName));
	ctx->Push(SaveString(_description));
	ctx->Push(SaveString(_tagsCsv));
	ctx->Push(SaveString(_contentTypeName));
	ctx->Push((int32_t) _publish);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ugcUpdateContent(bool& success, const char* _contentId, int32_t& _data, int32_t _dataCount, const char* _contentName, const char* _description, const char* _tagsCsv, const char* _contentTypeName, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x648E7A5434AF7969);
	ctx->Reset();
	ctx->Push(SaveString(_contentId));
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	ctx->Push(_dataCount);
	ctx->Push(SaveString(_contentName));
	ctx->Push(SaveString(_description));
	ctx->Push(SaveString(_tagsCsv));
	ctx->Push(SaveString(_contentTypeName));
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_data = ptr_data;
	return ctx->ResultBool();
}

uint8_t Native_ugcUpdateMission(bool& success, const char* _contentId, const char* _contentName, const char* _description, const char* _tagsCsv, const char* _contentTypeName, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4645DE9980999E93);
	ctx->Reset();
	ctx->Push(SaveString(_contentId));
	ctx->Push(SaveString(_contentName));
	ctx->Push(SaveString(_description));
	ctx->Push(SaveString(_tagsCsv));
	ctx->Push(SaveString(_contentTypeName));
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ugcSetPlayerData(bool& success, const char* _contentId, float _rating, const char* _contentTypeName, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x692D808C34A82143);
	ctx->Reset();
	ctx->Push(SaveString(_contentId));
	ctx->Push(_rating);
	ctx->Push(SaveString(_contentTypeName));
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_datafileSelectUgcData(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA69AC4ADE82B57A4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_datafileSelectUgcStats(bool& success, int32_t _p0, uint8_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9CB0BFA7A9342C3D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_datafileSelectUgcPlayerData(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x52818819057F2B40);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_datafileSelectCreatorStats(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01095C95CD46B624);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_datafileLoadOfflineUgc(bool& success, const char* _filename, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5238C011AF405E4);
	ctx->Reset();
	ctx->Push(SaveString(_filename));
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_datafileCreate(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD27058A1CA2B13EE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_datafileDelete(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9AB9C1CFC8862DFB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_datafileStoreMissionHeader(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2ED61456317B8178);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_datafileFlushMissionHeader(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC55854C7D7274882);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_datafileGetFileDict(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x906B778CA1DC72B6);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_datafileStartSaveToCloud(bool& success, const char* _filename, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83BCCE3224735F05);
	ctx->Reset();
	ctx->Push(SaveString(_filename));
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_datafileUpdateSaveToCloud(bool& success, uint8_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4DFDD9EB705F8140);
	ctx->Reset();
	auto ptr_p0 = (int32_t) _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = (bool) ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_datafileIsSavePending(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBEDB96A7584AA8CF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_datafileLoadOfflineUgcForAdditionalDataFile(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6EEF01087181EDD);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_datafileDeleteForAdditionalDataFile(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6AD0BD5E087866CB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_datafileGetFileDictForAdditionalDataFile(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDBF860CF1DB8E599);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_datadictSetBool(bool& success, int32_t& _objectData, const char* _key, uint8_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35124302A556A325);
	ctx->Reset();
	auto ptr_objectData = _objectData;
	ctx->Push(&ptr_objectData);
	ctx->Push(SaveString(_key));
	ctx->Push((int32_t) _value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_objectData = ptr_objectData;
}

void Native_datadictSetInt(bool& success, int32_t& _objectData, const char* _key, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE7E035450A7948D5);
	ctx->Reset();
	auto ptr_objectData = _objectData;
	ctx->Push(&ptr_objectData);
	ctx->Push(SaveString(_key));
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_objectData = ptr_objectData;
}

void Native_datadictSetFloat(bool& success, int32_t& _objectData, const char* _key, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC27E1CC2D795105E);
	ctx->Reset();
	auto ptr_objectData = _objectData;
	ctx->Push(&ptr_objectData);
	ctx->Push(SaveString(_key));
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_objectData = ptr_objectData;
}

void Native_datadictSetString(bool& success, int32_t& _objectData, const char* _key, const char* _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8FF3847DADD8E30C);
	ctx->Reset();
	auto ptr_objectData = _objectData;
	ctx->Push(&ptr_objectData);
	ctx->Push(SaveString(_key));
	ctx->Push(SaveString(_value));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_objectData = ptr_objectData;
}

void Native_datadictSetVector(bool& success, int32_t& _objectData, const char* _key, float _valueX, float _valueY, float _valueZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4CD49B76338C7DEE);
	ctx->Reset();
	auto ptr_objectData = _objectData;
	ctx->Push(&ptr_objectData);
	ctx->Push(SaveString(_key));
	ctx->Push(_valueX);
	ctx->Push(_valueY);
	ctx->Push(_valueZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_objectData = ptr_objectData;
}

int32_t Native_datadictCreateDict(bool& success, int32_t& _objectData, const char* _key) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA358F56F10732EE1);
	ctx->Reset();
	auto ptr_objectData = _objectData;
	ctx->Push(&ptr_objectData);
	ctx->Push(SaveString(_key));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_objectData = ptr_objectData;
	return ctx->ResultInt();
}

int32_t Native_datadictCreateArray(bool& success, int32_t& _objectData, const char* _key) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B11728527CA6E5F);
	ctx->Reset();
	auto ptr_objectData = _objectData;
	ctx->Push(&ptr_objectData);
	ctx->Push(SaveString(_key));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_objectData = ptr_objectData;
	return ctx->ResultInt();
}

uint8_t Native_datadictGetBool(bool& success, int32_t& _objectData, const char* _key) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1186940ED72FFEEC);
	ctx->Reset();
	auto ptr_objectData = _objectData;
	ctx->Push(&ptr_objectData);
	ctx->Push(SaveString(_key));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_objectData = ptr_objectData;
	return ctx->ResultBool();
}

int32_t Native_datadictGetInt(bool& success, int32_t& _objectData, const char* _key) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78F06F6B1FB5A80C);
	ctx->Reset();
	auto ptr_objectData = _objectData;
	ctx->Push(&ptr_objectData);
	ctx->Push(SaveString(_key));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_objectData = ptr_objectData;
	return ctx->ResultInt();
}

float Native_datadictGetFloat(bool& success, int32_t& _objectData, const char* _key) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06610343E73B9727);
	ctx->Reset();
	auto ptr_objectData = _objectData;
	ctx->Push(&ptr_objectData);
	ctx->Push(SaveString(_key));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	_objectData = ptr_objectData;
	return ctx->ResultFloat();
}

const char* Native_datadictGetString(bool& success, int32_t& _objectData, const char* _key) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3D2FD9E763B24472);
	ctx->Reset();
	auto ptr_objectData = _objectData;
	ctx->Push(&ptr_objectData);
	ctx->Push(SaveString(_key));
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	_objectData = ptr_objectData;
	return AllocateString(ctx->ResultString());
}

vector3_t Native_datadictGetVector(bool& success, int32_t& _objectData, const char* _key) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46CD3CB66E0825CC);
	ctx->Reset();
	auto ptr_objectData = _objectData;
	ctx->Push(&ptr_objectData);
	ctx->Push(SaveString(_key));
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	_objectData = ptr_objectData;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

int32_t Native_datadictGetDict(bool& success, int32_t& _objectData, const char* _key) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB6B9DDC412FCEEE2);
	ctx->Reset();
	auto ptr_objectData = _objectData;
	ctx->Push(&ptr_objectData);
	ctx->Push(SaveString(_key));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_objectData = ptr_objectData;
	return ctx->ResultInt();
}

int32_t Native_datadictGetArray(bool& success, int32_t& _objectData, const char* _key) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A983AA9DA2659ED);
	ctx->Reset();
	auto ptr_objectData = _objectData;
	ctx->Push(&ptr_objectData);
	ctx->Push(SaveString(_key));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_objectData = ptr_objectData;
	return ctx->ResultInt();
}

int32_t Native_datadictGetType(bool& success, int32_t& _objectData, const char* _key) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x031C55ED33227371);
	ctx->Reset();
	auto ptr_objectData = _objectData;
	ctx->Push(&ptr_objectData);
	ctx->Push(SaveString(_key));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_objectData = ptr_objectData;
	return ctx->ResultInt();
}

void Native_dataarrayAddBool(bool& success, int32_t& _arrayData, uint8_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF8B0F5A43E928C76);
	ctx->Reset();
	auto ptr_arrayData = _arrayData;
	ctx->Push(&ptr_arrayData);
	ctx->Push((int32_t) _value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_arrayData = ptr_arrayData;
}

void Native_dataarrayAddInt(bool& success, int32_t& _arrayData, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCABDB751D86FE93B);
	ctx->Reset();
	auto ptr_arrayData = _arrayData;
	ctx->Push(&ptr_arrayData);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_arrayData = ptr_arrayData;
}

void Native_dataarrayAddFloat(bool& success, int32_t& _arrayData, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57A995FD75D37F56);
	ctx->Reset();
	auto ptr_arrayData = _arrayData;
	ctx->Push(&ptr_arrayData);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_arrayData = ptr_arrayData;
}

void Native_dataarrayAddString(bool& success, int32_t& _arrayData, const char* _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F0661C155AEEEAA);
	ctx->Reset();
	auto ptr_arrayData = _arrayData;
	ctx->Push(&ptr_arrayData);
	ctx->Push(SaveString(_value));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_arrayData = ptr_arrayData;
}

void Native_dataarrayAddVector(bool& success, int32_t& _arrayData, float _valueX, float _valueY, float _valueZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x407F8D034F70F0C2);
	ctx->Reset();
	auto ptr_arrayData = _arrayData;
	ctx->Push(&ptr_arrayData);
	ctx->Push(_valueX);
	ctx->Push(_valueY);
	ctx->Push(_valueZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_arrayData = ptr_arrayData;
}

int32_t Native_dataarrayAddDict(bool& success, int32_t& _arrayData) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6889498B3E19C797);
	ctx->Reset();
	auto ptr_arrayData = _arrayData;
	ctx->Push(&ptr_arrayData);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_arrayData = ptr_arrayData;
	return ctx->ResultInt();
}

uint8_t Native_dataarrayGetBool(bool& success, int32_t& _arrayData, int32_t _arrayIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50C1B2874E50C114);
	ctx->Reset();
	auto ptr_arrayData = _arrayData;
	ctx->Push(&ptr_arrayData);
	ctx->Push(_arrayIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_arrayData = ptr_arrayData;
	return ctx->ResultBool();
}

int32_t Native_dataarrayGetInt(bool& success, int32_t& _arrayData, int32_t _arrayIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E5AE19425CD74BE);
	ctx->Reset();
	auto ptr_arrayData = _arrayData;
	ctx->Push(&ptr_arrayData);
	ctx->Push(_arrayIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_arrayData = ptr_arrayData;
	return ctx->ResultInt();
}

float Native_dataarrayGetFloat(bool& success, int32_t& _arrayData, int32_t _arrayIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0C527B525D7CFB5);
	ctx->Reset();
	auto ptr_arrayData = _arrayData;
	ctx->Push(&ptr_arrayData);
	ctx->Push(_arrayIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	_arrayData = ptr_arrayData;
	return ctx->ResultFloat();
}

const char* Native_dataarrayGetString(bool& success, int32_t& _arrayData, int32_t _arrayIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3F2FFEB8D836F52);
	ctx->Reset();
	auto ptr_arrayData = _arrayData;
	ctx->Push(&ptr_arrayData);
	ctx->Push(_arrayIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	_arrayData = ptr_arrayData;
	return AllocateString(ctx->ResultString());
}

vector3_t Native_dataarrayGetVector(bool& success, int32_t& _arrayData, int32_t _arrayIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D2064E5B64A628A);
	ctx->Reset();
	auto ptr_arrayData = _arrayData;
	ctx->Push(&ptr_arrayData);
	ctx->Push(_arrayIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	_arrayData = ptr_arrayData;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

int32_t Native_dataarrayGetDict(bool& success, int32_t& _arrayData, int32_t _arrayIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B5FADCC4E3A145F);
	ctx->Reset();
	auto ptr_arrayData = _arrayData;
	ctx->Push(&ptr_arrayData);
	ctx->Push(_arrayIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_arrayData = ptr_arrayData;
	return ctx->ResultInt();
}

int32_t Native_dataarrayGetCount(bool& success, int32_t& _arrayData) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x065DB281590CEA2D);
	ctx->Reset();
	auto ptr_arrayData = _arrayData;
	ctx->Push(&ptr_arrayData);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_arrayData = ptr_arrayData;
	return ctx->ResultInt();
}

int32_t Native_dataarrayGetType(bool& success, int32_t& _arrayData, int32_t _arrayIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A0014ADB172A3C5);
	ctx->Reset();
	auto ptr_arrayData = _arrayData;
	ctx->Push(&ptr_arrayData);
	ctx->Push(_arrayIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_arrayData = ptr_arrayData;
	return ctx->ResultInt();
}

uint8_t Native_decorSetTime(bool& success, int32_t _entity, const char* _propertyName, int32_t _timestamp) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95AED7B8E39ECAA4);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(SaveString(_propertyName));
	ctx->Push(_timestamp);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_decorSetBool(bool& success, int32_t _entity, const char* _propertyName, uint8_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B1E8E2ED1335B71);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(SaveString(_propertyName));
	ctx->Push((int32_t) _value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_decorSetFloat(bool& success, int32_t _entity, const char* _propertyName, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x211AB1DD8D0F363A);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(SaveString(_propertyName));
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_decorSetInt(bool& success, int32_t _entity, const char* _propertyName, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0CE3AA5E1CA19E10);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(SaveString(_propertyName));
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_decorGetBool(bool& success, int32_t _entity, const char* _propertyName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDACE671663F2F5DB);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(SaveString(_propertyName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

float Native_decorGetFloat(bool& success, int32_t _entity, const char* _propertyName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6524A2F114706F43);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(SaveString(_propertyName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

int32_t Native_decorGetInt(bool& success, int32_t _entity, const char* _propertyName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA06C969B02A97298);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(SaveString(_propertyName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_decorExistOn(bool& success, int32_t _entity, const char* _propertyName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x05661B80A8C9165F);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(SaveString(_propertyName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_decorRemove(bool& success, int32_t _entity, const char* _propertyName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x00EE9F297C738720);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(SaveString(_propertyName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_decorRegister(bool& success, const char* _propertyName, int32_t _type) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9FD90732F56403CE);
	ctx->Reset();
	ctx->Push(SaveString(_propertyName));
	ctx->Push(_type);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_decorIsRegisteredAsType(bool& success, const char* _propertyName, int32_t _type) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F14F9F870D6FBC8);
	ctx->Reset();
	ctx->Push(SaveString(_propertyName));
	ctx->Push(_type);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_decorRegisterLock(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9D14EEA259F9248);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_areAnyCcsPending(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x241FCA5B1AA14F75);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isDlcPresent(bool& success, uint32_t _dlcHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x812595A0644CE1DE);
	ctx->Reset();
	ctx->Push(_dlcHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_dlcCheckCloudDataCorrect(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2E07819EF1A5289);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getExtracontentCloudResult(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9489659372A81585);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_dlcCheckCompatPackConfiguration(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA213B11DFF526300);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getEverHadBadPackOrder(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D30F648014A92B5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getIsLoadingScreenActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x10D0A8F259E93EC9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getIsInitialLoadingScreenActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC4637A6D03C24CC3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasCloudRequestsFinished(bool& success, uint8_t& _p0, int32_t _unused) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46E2B844905BC5F0);
	ctx->Reset();
	auto ptr_p0 = (int32_t) _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(_unused);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = (bool) ptr_p0;
	return ctx->ResultBool();
}

void Native_onEnterSp(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7C10C4A637992C9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_onEnterMp(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0888C3502DBBEEF5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesEntityExist(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7239B21A38F536BA);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_doesEntityBelongToThisScript(bool& success, int32_t _entity, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDDE6DF5AE89981D2);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_doesEntityHaveDrawable(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x060D6E96F8B8E48D);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_doesEntityHavePhysics(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA95EA3317CC5064);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_doesEntityHaveSkeleton(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x764EB96874EFFDC1);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_doesEntityHaveAnimDirector(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2158E81A6AF65EA9);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasEntityAnimFinished(bool& success, int32_t _entity, const char* _animDict, const char* _animName, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20B711662962B472);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(SaveString(_animDict));
	ctx->Push(SaveString(_animName));
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasEntityBeenDamagedByAnyObject(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95EB9964FF5C5C65);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasEntityBeenDamagedByAnyPed(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x605F5A140F202491);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasEntityBeenDamagedByAnyVehicle(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFD5033FDBA0A9C8);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasEntityBeenDamagedByEntity(bool& success, int32_t _entity1, int32_t _entity2, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC86D67D52A707CF8);
	ctx->Reset();
	ctx->Push(_entity1);
	ctx->Push(_entity2);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasEntityClearLosToEntity(bool& success, int32_t _entity1, int32_t _entity2, int32_t _traceType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFCDFF7B72D23A1AC);
	ctx->Reset();
	ctx->Push(_entity1);
	ctx->Push(_entity2);
	ctx->Push(_traceType);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasEntityClearLosToEntityAdjustForCover(bool& success, int32_t _entity1, int32_t _entity2, int32_t _traceType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x394BDE2A7BBA031E);
	ctx->Reset();
	ctx->Push(_entity1);
	ctx->Push(_entity2);
	ctx->Push(_traceType);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasEntityClearLosToEntityInFront(bool& success, int32_t _entity1, int32_t _entity2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0267D00AF114F17A);
	ctx->Reset();
	ctx->Push(_entity1);
	ctx->Push(_entity2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasEntityCollidedWithAnything(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8BAD02F0368D9E14);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint32_t Native_getLastMaterialHitByEntity(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C3D0A935F535C4C);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

vector3_t Native_getCollisionNormalOfLastHitForEntity(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE465D4AB7CA6AE72);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

void Native_forceEntityAiAndAnimationUpdate(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x40FDEDB72F8293B2);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getEntityAnimCurrentTime(bool& success, int32_t _entity, const char* _animDict, const char* _animName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x346D81500D088F42);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(SaveString(_animDict));
	ctx->Push(SaveString(_animName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getEntityAnimTotalTime(bool& success, int32_t _entity, const char* _animDict, const char* _animName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50BD2730B191E360);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(SaveString(_animDict));
	ctx->Push(SaveString(_animName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getAnimDuration(bool& success, const char* _animDict, const char* _animName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFEDDF04D62B8D790);
	ctx->Reset();
	ctx->Push(SaveString(_animDict));
	ctx->Push(SaveString(_animName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

int32_t Native_getEntityAttachedTo(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48C2BED9180FE123);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

vector3_t Native_getEntityCoords(bool& success, int32_t _entity, uint8_t _alive) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3FEF770D40960D5A);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _alive);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

vector3_t Native_getEntityForwardVector(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A794A5A57F8DF91);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

float Native_getEntityForwardX(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8BB4EF4214E0E6D5);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getEntityForwardY(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x866A4A5FAE349510);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getEntityHeading(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE83D4F9BA2A38914);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getEntityHeadingFromEulers(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x846BF6291198A71E);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

int32_t Native_getEntityHealth(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEEF059FAD016D209);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getEntityMaxHealth(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15D757606D170C3C);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setEntityMaxHealth(bool& success, int32_t _entity, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x166E7CF68597D8B5);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getEntityHeight(bool& success, int32_t _entity, float _X, float _Y, float _Z, uint8_t _atTop, uint8_t _inWorldCoords) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A504562485944DD);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_X);
	ctx->Push(_Y);
	ctx->Push(_Z);
	ctx->Push((int32_t) _atTop);
	ctx->Push((int32_t) _inWorldCoords);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getEntityHeightAboveGround(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DD55701034110E5);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_getEntityMatrix(bool& success, int32_t _entity, vector3_t& _forwardVector, vector3_t& _rightVector, vector3_t& _upVector, vector3_t& _position) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xECB2FC7235A7D137);
	ctx->Reset();
	ctx->Push(_entity);
	alt::INative::Vector3 converted_forwardVector { _forwardVector.x, 0, _forwardVector.y, 0, _forwardVector.z };
	ctx->Push(&converted_forwardVector);
	alt::INative::Vector3 converted_rightVector { _rightVector.x, 0, _rightVector.y, 0, _rightVector.z };
	ctx->Push(&converted_rightVector);
	alt::INative::Vector3 converted_upVector { _upVector.x, 0, _upVector.y, 0, _upVector.z };
	ctx->Push(&converted_upVector);
	alt::INative::Vector3 converted_position { _position.x, 0, _position.y, 0, _position.z };
	ctx->Push(&converted_position);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_forwardVector.x = converted_forwardVector.x;
	_forwardVector.y = converted_forwardVector.y;
	_forwardVector.z = converted_forwardVector.z;
	_rightVector.x = converted_rightVector.x;
	_rightVector.y = converted_rightVector.y;
	_rightVector.z = converted_rightVector.z;
	_upVector.x = converted_upVector.x;
	_upVector.y = converted_upVector.y;
	_upVector.z = converted_upVector.z;
	_position.x = converted_position.x;
	_position.y = converted_position.y;
	_position.z = converted_position.z;
}

uint32_t Native_getEntityModel(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F47B058362C84B5);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

vector3_t Native_getOffsetFromEntityGivenWorldCoords(bool& success, int32_t _entity, float _posX, float _posY, float _posZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2274BC1C4885E333);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

vector3_t Native_getOffsetFromEntityInWorldCoords(bool& success, int32_t _entity, float _offsetX, float _offsetY, float _offsetZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1899F328B0E12848);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

float Native_getEntityPitch(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD45DC2893621E1FE);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_getEntityQuaternion(bool& success, int32_t _entity, float& _x, float& _y, float& _z, float& _w) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7B3703D2D32DFA18);
	ctx->Reset();
	ctx->Push(_entity);
	auto ptr_x = _x;
	ctx->Push(&ptr_x);
	auto ptr_y = _y;
	ctx->Push(&ptr_y);
	auto ptr_z = _z;
	ctx->Push(&ptr_z);
	auto ptr_w = _w;
	ctx->Push(&ptr_w);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_x = ptr_x;
	_y = ptr_y;
	_z = ptr_z;
	_w = ptr_w;
}

float Native_getEntityRoll(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x831E0242595560DF);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

vector3_t Native_getEntityRotation(bool& success, int32_t _entity, int32_t _rotationOrder) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAFBD61CC738D9EB9);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_rotationOrder);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

vector3_t Native_getEntityRotationVelocity(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x213B91045D09B983);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

const char* Native_getEntityScript(bool& success, int32_t _entity, int32_t& _script) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6E9C38DB51D7748);
	ctx->Reset();
	ctx->Push(_entity);
	auto ptr_script = _script;
	ctx->Push(&ptr_script);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	_script = ptr_script;
	return AllocateString(ctx->ResultString());
}

float Native_getEntitySpeed(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD5037BA82E12416F);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

vector3_t Native_getEntitySpeedVector(bool& success, int32_t _entity, uint8_t _relative) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A8D700A51CB7B0D);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _relative);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

float Native_getEntityUprightValue(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95EED5A694951F9F);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

vector3_t Native_getEntityVelocity(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4805D2B1D8CF94A9);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

int32_t Native_getObjectIndexFromEntityIndex(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7E3B9735C0F89D6);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getPedIndexFromEntityIndex(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x04A2A40C73395041);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getVehicleIndexFromEntityIndex(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4B53F92932ADFAC0);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

vector3_t Native_getWorldPositionOfEntityBone(bool& success, int32_t _entity, int32_t _boneIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44A8FCB8ED227738);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_boneIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

int32_t Native_getNearestPlayerToEntity(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7196842CB375CDB3);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getNearestPlayerToEntityOnTeam(bool& success, int32_t _entity, int32_t _team) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4DC9A62F844D9337);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_team);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getEntityType(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8ACD366038D14505);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getEntityPopulationType(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6F5161F4534EDFF);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isAnEntity(bool& success, int32_t _handle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x731EC8A916BD11A1);
	ctx->Reset();
	ctx->Push(_handle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityAPed(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x524AC5ECEA15343E);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityAMissionEntity(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A7B270912999B3C);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityAVehicle(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6AC7003FA6E5575E);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityAnObject(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D68C8FD0FACA94E);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityAtCoord(bool& success, int32_t _entity, float _xPos, float _yPos, float _zPos, float _xSize, float _ySize, float _zSize, uint8_t _p7, uint8_t _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20B60995556D004F);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_xPos);
	ctx->Push(_yPos);
	ctx->Push(_zPos);
	ctx->Push(_xSize);
	ctx->Push(_ySize);
	ctx->Push(_zSize);
	ctx->Push((int32_t) _p7);
	ctx->Push((int32_t) _p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityAtEntity(bool& success, int32_t _entity1, int32_t _entity2, float _xSize, float _ySize, float _zSize, uint8_t _p5, uint8_t _p6, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x751B70C3D034E187);
	ctx->Reset();
	ctx->Push(_entity1);
	ctx->Push(_entity2);
	ctx->Push(_xSize);
	ctx->Push(_ySize);
	ctx->Push(_zSize);
	ctx->Push((int32_t) _p5);
	ctx->Push((int32_t) _p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityAttached(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB346476EF1A64897);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityAttachedToAnyObject(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF511840CEEDE0CC);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityAttachedToAnyPed(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1632E9A5F988D11);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityAttachedToAnyVehicle(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26AA915AD89BFB4B);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityAttachedToEntity(bool& success, int32_t _from, int32_t _to) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEFBE71898A993728);
	ctx->Reset();
	ctx->Push(_from);
	ctx->Push(_to);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityDead(bool& success, int32_t _entity, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F9532F3B5CC2551);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityInAir(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x886E37EC497200B6);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityInAngledArea(bool& success, int32_t _entity, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _width, uint8_t _debug, uint8_t _includeZ, int32_t _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x51210CED3DA1C78A);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_width);
	ctx->Push((int32_t) _debug);
	ctx->Push((int32_t) _includeZ);
	ctx->Push(_p10);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityInArea(bool& success, int32_t _entity, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, uint8_t _p7, uint8_t _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x54736AA40E271165);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push((int32_t) _p7);
	ctx->Push((int32_t) _p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityInZone(bool& success, int32_t _entity, const char* _zone) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB6463CF6AF527071);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(SaveString(_zone));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityInWater(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCFB0A0D8EDD145A3);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

float Native_getEntitySubmergedLevel(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE81AFC1BC4CC41CE);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setEntityRequiresMoreExpensiveRiverCheck(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x694E00132F2823ED);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isEntityOnScreen(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE659E47AF827484B);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityPlayingAnim(bool& success, int32_t _entity, const char* _animDict, const char* _animName, int32_t _taskFlag) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F0B79228E461EC9);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(SaveString(_animDict));
	ctx->Push(SaveString(_animName));
	ctx->Push(_taskFlag);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityStatic(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1218E6886D3D8327);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityTouchingEntity(bool& success, int32_t _entity, int32_t _targetEntity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17FFC1B2BA35A494);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_targetEntity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityTouchingModel(bool& success, int32_t _entity, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F42323798A58C8C);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityUpright(bool& success, int32_t _entity, float _angle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5333F526F6AB19AA);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_angle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityUpsidedown(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DBD58820FA61D71);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityVisible(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x47D6F43D77935C75);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityVisibleToScript(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD796CB5BA8F20E32);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityOccluded(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE31C2C72B8692B64);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_wouldEntityBeOccluded(bool& success, uint32_t _entityModelHash, float _x, float _y, float _z, uint8_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE5D2A122E09EC42);
	ctx->Reset();
	ctx->Push(_entityModelHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntityWaitingForWorldCollision(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD05BFF0C0A12C68F);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_applyForceToEntityCenterOfMass(bool& success, int32_t _entity, int32_t _forceType, float _x, float _y, float _z, uint8_t _p5, uint8_t _isDirectionRel, uint8_t _isForceRel, uint8_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x18FF00FC7EFF559E);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_forceType);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _p5);
	ctx->Push((int32_t) _isDirectionRel);
	ctx->Push((int32_t) _isForceRel);
	ctx->Push((int32_t) _p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_applyForceToEntity(bool& success, int32_t _entity, int32_t _forceFlags, float _x, float _y, float _z, float _offX, float _offY, float _offZ, int32_t _boneIndex, uint8_t _isDirectionRel, uint8_t _ignoreUpVec, uint8_t _isForceRel, uint8_t _p12, uint8_t _p13) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5F68BE9613E2D18);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_forceFlags);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_offX);
	ctx->Push(_offY);
	ctx->Push(_offZ);
	ctx->Push(_boneIndex);
	ctx->Push((int32_t) _isDirectionRel);
	ctx->Push((int32_t) _ignoreUpVec);
	ctx->Push((int32_t) _isForceRel);
	ctx->Push((int32_t) _p12);
	ctx->Push((int32_t) _p13);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_attachEntityToEntity(bool& success, int32_t _entity1, int32_t _entity2, int32_t _boneIndex, float _xPos, float _yPos, float _zPos, float _xRot, float _yRot, float _zRot, uint8_t _p9, uint8_t _useSoftPinning, uint8_t _collision, uint8_t _isPed, int32_t _vertexIndex, uint8_t _fixedRot, int32_t _p15) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B9BBD38AB0796DF);
	ctx->Reset();
	ctx->Push(_entity1);
	ctx->Push(_entity2);
	ctx->Push(_boneIndex);
	ctx->Push(_xPos);
	ctx->Push(_yPos);
	ctx->Push(_zPos);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push((int32_t) _p9);
	ctx->Push((int32_t) _useSoftPinning);
	ctx->Push((int32_t) _collision);
	ctx->Push((int32_t) _isPed);
	ctx->Push(_vertexIndex);
	ctx->Push((int32_t) _fixedRot);
	ctx->Push(_p15);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_attachEntityBoneToEntityBone(bool& success, int32_t _entity1, int32_t _entity2, int32_t _boneIndex1, int32_t _boneIndex2, uint8_t _p4, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C48B75732C8456C);
	ctx->Reset();
	ctx->Push(_entity1);
	ctx->Push(_entity2);
	ctx->Push(_boneIndex1);
	ctx->Push(_boneIndex2);
	ctx->Push((int32_t) _p4);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_attachEntityBoneToEntityBoneYForward(bool& success, int32_t _entity1, int32_t _entity2, int32_t _boneIndex1, int32_t _boneIndex2, uint8_t _p4, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD1695C5D3B05439);
	ctx->Reset();
	ctx->Push(_entity1);
	ctx->Push(_entity2);
	ctx->Push(_boneIndex1);
	ctx->Push(_boneIndex2);
	ctx->Push((int32_t) _p4);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_attachEntityToEntityPhysically(bool& success, int32_t _entity1, int32_t _entity2, int32_t _boneIndex1, int32_t _boneIndex2, float _xPos1, float _yPos1, float _zPos1, float _xPos2, float _yPos2, float _zPos2, float _xRot, float _yRot, float _zRot, float _breakForce, uint8_t _fixedRot, uint8_t _p15, uint8_t _collision, uint8_t _p17, int32_t _p18) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3675780C92F90F9);
	ctx->Reset();
	ctx->Push(_entity1);
	ctx->Push(_entity2);
	ctx->Push(_boneIndex1);
	ctx->Push(_boneIndex2);
	ctx->Push(_xPos1);
	ctx->Push(_yPos1);
	ctx->Push(_zPos1);
	ctx->Push(_xPos2);
	ctx->Push(_yPos2);
	ctx->Push(_zPos2);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_breakForce);
	ctx->Push((int32_t) _fixedRot);
	ctx->Push((int32_t) _p15);
	ctx->Push((int32_t) _collision);
	ctx->Push((int32_t) _p17);
	ctx->Push(_p18);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_processEntityAttachments(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF4080490ADC51C6F);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getEntityBoneIndexByName(bool& success, int32_t _entity, const char* _boneName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB71170B7E76ACBA);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(SaveString(_boneName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_clearEntityLastDamageEntity(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA72CD9CA74A5ECBA);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_deleteEntity(bool& success, int32_t& _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE3CBE5BF394C9C9);
	ctx->Reset();
	auto ptr_entity = _entity;
	ctx->Push(&ptr_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_entity = ptr_entity;
}

void Native_detachEntity(bool& success, int32_t _entity, uint8_t _dynamic, uint8_t _collision) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x961AC54BF0613F5D);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _dynamic);
	ctx->Push((int32_t) _collision);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_freezeEntityPosition(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x428CA6DBD1094446);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityShouldFreezeWaitingOnCollision(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3910051CCECDB00C);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_playEntityAnim(bool& success, int32_t _entity, const char* _animName, const char* _animDict, float _p3, uint8_t _loop, uint8_t _stayInAnim, uint8_t _p6, float _delta, int32_t _bitset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FB218262B810701);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(SaveString(_animName));
	ctx->Push(SaveString(_animDict));
	ctx->Push(_p3);
	ctx->Push((int32_t) _loop);
	ctx->Push((int32_t) _stayInAnim);
	ctx->Push((int32_t) _p6);
	ctx->Push(_delta);
	ctx->Push(_bitset);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_playSynchronizedEntityAnim(bool& success, int32_t _entity, int32_t _syncedScene, const char* _animation, const char* _propName, float _p4, float _p5, int32_t _p6, float _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC77720A12FE14A86);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_syncedScene);
	ctx->Push(SaveString(_animation));
	ctx->Push(SaveString(_propName));
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_playSynchronizedMapEntityAnim(bool& success, float _x1, float _y1, float _z1, float _x2, int32_t _y2, float _z2, const char* _p6, const char* _p7, float _p8, float _p9, int32_t _p10, float _p11) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9C54555ED30FBC4);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(SaveString(_p6));
	ctx->Push(SaveString(_p7));
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_stopSynchronizedMapEntityAnim(bool& success, float _x1, float _y1, float _z1, float _x2, int32_t _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11E79CAB7183B6F5);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_stopEntityAnim(bool& success, int32_t _entity, const char* _animation, const char* _animGroup, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28004F88151E03E0);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(SaveString(_animation));
	ctx->Push(SaveString(_animGroup));
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_stopSynchronizedEntityAnim(bool& success, int32_t _entity, float _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43D3807C077261E3);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasAnimEventFired(bool& success, int32_t _entity, uint32_t _actionHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEAF4CD9EA3E7E922);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_actionHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_findAnimEventPhase(bool& success, const char* _animDictionary, const char* _animName, const char* _p2, int32_t& _p3, int32_t& _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x07F1BE2BCCAA27A7);
	ctx->Reset();
	ctx->Push(SaveString(_animDictionary));
	ctx->Push(SaveString(_animName));
	ctx->Push(SaveString(_p2));
	auto ptr_p3 = _p3;
	ctx->Push(&ptr_p3);
	auto ptr_p4 = _p4;
	ctx->Push(&ptr_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p3 = ptr_p3;
	_p4 = ptr_p4;
	return ctx->ResultBool();
}

void Native_setEntityAnimCurrentTime(bool& success, int32_t _entity, const char* _animDictionary, const char* _animName, float _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4487C259F0F70977);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(SaveString(_animDictionary));
	ctx->Push(SaveString(_animName));
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityAnimSpeed(bool& success, int32_t _entity, const char* _animDictionary, const char* _animName, float _speedMultiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28D1A16553C51776);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(SaveString(_animDictionary));
	ctx->Push(SaveString(_animName));
	ctx->Push(_speedMultiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityAsMissionEntity(bool& success, int32_t _entity, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD738C3085FE7E11);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityAsNoLongerNeeded(bool& success, int32_t& _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB736A491E64A32CF);
	ctx->Reset();
	auto ptr_entity = _entity;
	ctx->Push(&ptr_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_entity = ptr_entity;
}

void Native_setPedAsNoLongerNeeded(bool& success, int32_t& _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2595DD4236549CE3);
	ctx->Reset();
	auto ptr_ped = _ped;
	ctx->Push(&ptr_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_ped = ptr_ped;
}

void Native_setVehicleAsNoLongerNeeded(bool& success, int32_t& _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x629BFA74418D6239);
	ctx->Reset();
	auto ptr_vehicle = _vehicle;
	ctx->Push(&ptr_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_vehicle = ptr_vehicle;
}

void Native_setObjectAsNoLongerNeeded(bool& success, int32_t& _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3AE22DEB5BA5A3E6);
	ctx->Reset();
	auto ptr_object = _object;
	ctx->Push(&ptr_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_object = ptr_object;
}

void Native_setEntityCanBeDamaged(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1760FFA8AB074D66);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getEntityCanBeDamaged(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD95CC5D2AB15A09F);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setEntityCanBeDamagedByRelationshipGroup(bool& success, int32_t _entity, uint8_t _bCanBeDamaged, int32_t _relGroup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE22D8FDE858B8119);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _bCanBeDamaged);
	ctx->Push(_relGroup);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityCanOnlyBeDamagedByScriptParticipants(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x352E2B5CF420BF3B);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityCanBeTargetedWithoutLos(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3997889736FD899);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityCollision(bool& success, int32_t _entity, uint8_t _toggle, uint8_t _keepPhysics) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A9205C1B9EE827F);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	ctx->Push((int32_t) _keepPhysics);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getEntityCollisionDisabled(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCCF1E97BEFDAE480);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setEntityCompletelyDisableCollision(bool& success, int32_t _entity, uint8_t _toggle, uint8_t _keepPhysics) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9EBC85ED0FFFE51C);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	ctx->Push((int32_t) _keepPhysics);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityCoords(bool& success, int32_t _entity, float _xPos, float _yPos, float _zPos, uint8_t _xAxis, uint8_t _yAxis, uint8_t _zAxis, uint8_t _clearArea) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06843DA7060A026B);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_xPos);
	ctx->Push(_yPos);
	ctx->Push(_zPos);
	ctx->Push((int32_t) _xAxis);
	ctx->Push((int32_t) _yAxis);
	ctx->Push((int32_t) _zAxis);
	ctx->Push((int32_t) _clearArea);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityCoordsWithoutPlantsReset(bool& success, int32_t _entity, float _xPos, float _yPos, float _zPos, uint8_t _alive, uint8_t _deadFlag, uint8_t _ragdollFlag, uint8_t _clearArea) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x621873ECE1178967);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_xPos);
	ctx->Push(_yPos);
	ctx->Push(_zPos);
	ctx->Push((int32_t) _alive);
	ctx->Push((int32_t) _deadFlag);
	ctx->Push((int32_t) _ragdollFlag);
	ctx->Push((int32_t) _clearArea);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityCoordsNoOffset(bool& success, int32_t _entity, float _xPos, float _yPos, float _zPos, uint8_t _xAxis, uint8_t _yAxis, uint8_t _zAxis) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x239A3351AC1DA385);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_xPos);
	ctx->Push(_yPos);
	ctx->Push(_zPos);
	ctx->Push((int32_t) _xAxis);
	ctx->Push((int32_t) _yAxis);
	ctx->Push((int32_t) _zAxis);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityDynamic(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1718DE8E3F2823CA);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityHeading(bool& success, int32_t _entity, float _heading) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8E2530AA8ADA980E);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_heading);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityHealth(bool& success, int32_t _entity, int32_t _health, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B76DC1F3AE6E6A3);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_health);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityInvincible(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3882114BDE571AD4);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityIsTargetPriority(bool& success, int32_t _entity, uint8_t _p1, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA02E132F5C68722);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityLights(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7CFBA6A80BDF3874);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityLoadCollisionFlag(bool& success, int32_t _entity, uint8_t _toggle, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0DC7CABAB1E9B67E);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasCollisionLoadedAroundEntity(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE9676F61BC0B3321);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setEntityMaxSpeed(bool& success, int32_t _entity, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0E46A3FCBDE2A1B1);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityOnlyDamagedByPlayer(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x79F020FF9EDC0748);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityOnlyDamagedByRelationshipGroup(bool& success, int32_t _entity, uint8_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7022BD828FA0B082);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityProofs(bool& success, int32_t _entity, uint8_t _bulletProof, uint8_t _fireProof, uint8_t _explosionProof, uint8_t _collisionProof, uint8_t _meleeProof, uint8_t _steamProof, uint8_t _p7, uint8_t _waterProof) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFAEE099C6F890BB8);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _bulletProof);
	ctx->Push((int32_t) _fireProof);
	ctx->Push((int32_t) _explosionProof);
	ctx->Push((int32_t) _collisionProof);
	ctx->Push((int32_t) _meleeProof);
	ctx->Push((int32_t) _steamProof);
	ctx->Push((int32_t) _p7);
	ctx->Push((int32_t) _waterProof);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getEntityProofs(bool& success, int32_t _entity, uint8_t& _bulletProof, uint8_t& _fireProof, uint8_t& _explosionProof, uint8_t& _collisionProof, uint8_t& _meleeProof, uint8_t& _steamProof, uint8_t& _p7, uint8_t& _drownProof) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE8CD9BE829BBEBF);
	ctx->Reset();
	ctx->Push(_entity);
	auto ptr_bulletProof = (int32_t) _bulletProof;
	ctx->Push(&ptr_bulletProof);
	auto ptr_fireProof = (int32_t) _fireProof;
	ctx->Push(&ptr_fireProof);
	auto ptr_explosionProof = (int32_t) _explosionProof;
	ctx->Push(&ptr_explosionProof);
	auto ptr_collisionProof = (int32_t) _collisionProof;
	ctx->Push(&ptr_collisionProof);
	auto ptr_meleeProof = (int32_t) _meleeProof;
	ctx->Push(&ptr_meleeProof);
	auto ptr_steamProof = (int32_t) _steamProof;
	ctx->Push(&ptr_steamProof);
	auto ptr_p7 = (int32_t) _p7;
	ctx->Push(&ptr_p7);
	auto ptr_drownProof = (int32_t) _drownProof;
	ctx->Push(&ptr_drownProof);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_bulletProof = (bool) ptr_bulletProof;
	_fireProof = (bool) ptr_fireProof;
	_explosionProof = (bool) ptr_explosionProof;
	_collisionProof = (bool) ptr_collisionProof;
	_meleeProof = (bool) ptr_meleeProof;
	_steamProof = (bool) ptr_steamProof;
	_p7 = (bool) ptr_p7;
	_drownProof = (bool) ptr_drownProof;
	return ctx->ResultBool();
}

void Native_setEntityQuaternion(bool& success, int32_t _entity, float _x, float _y, float _z, float _w) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77B21BE7AC540F07);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_w);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityRecordsCollisions(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A50A1EEDAD01E65);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityRotation(bool& success, int32_t _entity, float _pitch, float _roll, float _yaw, int32_t _rotationOrder, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8524A8B0171D5E07);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_pitch);
	ctx->Push(_roll);
	ctx->Push(_yaw);
	ctx->Push(_rotationOrder);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityVisible(bool& success, int32_t _entity, uint8_t _toggle, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA1C610A04DB6BBB);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityWaterReflectionFlag(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC34BC448DA29F5E9);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityMirrorReflectionFlag(bool& success, int32_t _entity, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE66377CDDADA4810);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityVelocity(bool& success, int32_t _entity, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C99BB7B6E96D16F);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityAngularVelocity(bool& success, int32_t _entity, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8339643499D1222E);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityHasGravity(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A4722448F18EEF5);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityLodDist(bool& success, int32_t _entity, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5927F96A78577363);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getEntityLodDist(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4159C2762B5791D6);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setEntityAlpha(bool& success, int32_t _entity, int32_t _alphaLevel, uint8_t _skin) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44A0870B7E92D7C0);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_alphaLevel);
	ctx->Push((int32_t) _skin);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getEntityAlpha(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A47B3B5E63E94C6);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_resetEntityAlpha(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B1E824FFBB7027A);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetPickupEntityGlow(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x490861B88F4FD846);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPickupCollidesWithProjectiles(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCEA7C8E1B48FF68C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntitySortBias(bool& success, int32_t _entity, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C3B791D580E0BC2);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityAlwaysPrerender(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xACAD101E1FB66689);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityRenderScorched(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x730F5F8D3F0F2050);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityTrafficlightOverride(bool& success, int32_t _entity, int32_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57C5DB656185EAC4);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityIsInVehicle(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78E8E3A640178255);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_createModelSwap(bool& success, float _x, float _y, float _z, float _radius, uint32_t _originalModel, uint32_t _newModel, uint8_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92C47782FDA8B2A3);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_originalModel);
	ctx->Push(_newModel);
	ctx->Push((int32_t) _p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeModelSwap(bool& success, float _x, float _y, float _z, float _radius, uint32_t _originalModel, uint32_t _newModel, uint8_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x033C0F9A64E229AE);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_originalModel);
	ctx->Push(_newModel);
	ctx->Push((int32_t) _p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_createModelHide(bool& success, float _x, float _y, float _z, float _radius, uint32_t _modelHash, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A97BCA30A0CE478);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_modelHash);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_createModelHideExcludingScriptObjects(bool& success, float _x, float _y, float _z, float _radius, uint32_t _modelHash, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A52AE588830BF7F);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_modelHash);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeModelHide(bool& success, float _x, float _y, float _z, float _radius, uint32_t _modelHash, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9E3006FB3CBD765);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_modelHash);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_createForcedObject(bool& success, float _x, float _y, float _z, int32_t _p3, uint32_t _modelHash, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x150E808B375A385A);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	ctx->Push(_modelHash);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeForcedObject(bool& success, float _x, float _y, float _z, float _p3, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61B6775E83C0DB6F);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityNoCollisionEntity(bool& success, int32_t _entity1, int32_t _entity2, uint8_t _thisFrameOnly) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA53ED5520C07654A);
	ctx->Reset();
	ctx->Push(_entity1);
	ctx->Push(_entity2);
	ctx->Push((int32_t) _thisFrameOnly);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityMotionBlur(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x295D82A8559F9150);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCanAutoVaultOnEntity(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE12ABE5E3A389A6C);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCanClimbOnEntity(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA80AE305E0A3044F);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setWaitForCollisionsBeforeProbe(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC6F8601FAF2E893);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityNoweapondecals(bool& success, int32_t _entity, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C2E3DC128F44309);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityUseMaxDistanceForWaterReflection(bool& success, int32_t _entity, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A092BB0C3808B96);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

vector3_t Native_getEntityBoneRotation(bool& success, int32_t _entity, int32_t _boneIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE6294A232D03786);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_boneIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

vector3_t Native_getEntityBonePostion(bool& success, int32_t _entity, int32_t _boneIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46F8696933A63C9B);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_boneIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

vector3_t Native_getEntityBoneObjectRotation(bool& success, int32_t _entity, int32_t _boneIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD8D32550E5CEBFE);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_boneIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

int32_t Native_getEntityBoneCount(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB328DCC3A3AA401B);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_enableEntityBulletCollision(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6CE177D014502E8A);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityCanOnlyBeDamagedByEntity(bool& success, int32_t _entity1, int32_t _entity2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB17BC6453F6CF5AC);
	ctx->Reset();
	ctx->Push(_entity1);
	ctx->Push(_entity2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityCantCauseCollisionDamagedEntity(bool& success, int32_t _entity1, int32_t _entity2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x68B562E124CC0AEF);
	ctx->Reset();
	ctx->Push(_entity1);
	ctx->Push(_entity2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAllowMigrateToSpectator(bool& success, int32_t _entity, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36F32DE87082343E);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getEntityOfTypeAttachedToEntity(bool& success, int32_t _entity, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F922734E259BD26);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPickUpByCargobobDisabled(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7B80E7C3BEFC396);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDecisionMaker(bool& success, int32_t _ped, uint32_t _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB604A2942ADED0EE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearDecisionMakerEventResponse(bool& success, uint32_t _name, int32_t _eventType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4FC9381A7AEE8968);
	ctx->Reset();
	ctx->Push(_name);
	ctx->Push(_eventType);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_blockDecisionMakerEvent(bool& success, uint32_t _name, int32_t _eventType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE42FCDFD0E4196F7);
	ctx->Reset();
	ctx->Push(_name);
	ctx->Push(_eventType);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_unblockDecisionMakerEvent(bool& success, uint32_t _name, int32_t _eventType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7CD9CF34F2C99E8);
	ctx->Reset();
	ctx->Push(_name);
	ctx->Push(_eventType);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_addShockingEventAtPosition(bool& success, int32_t _eventType, float _x, float _y, float _z, float _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9F8455409B525E9);
	ctx->Reset();
	ctx->Push(_eventType);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_addShockingEventForEntity(bool& success, int32_t _eventType, int32_t _entity, float _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FD8F3BE76F89422);
	ctx->Reset();
	ctx->Push(_eventType);
	ctx->Push(_entity);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isShockingEventInSphere(bool& success, int32_t _eventType, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1374ABB7C15BAB92);
	ctx->Reset();
	ctx->Push(_eventType);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_removeShockingEvent(bool& success, int32_t _event) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2CDA538C44C6CCE5);
	ctx->Reset();
	ctx->Push(_event);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_removeAllShockingEvents(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEAABE8FDFA21274C);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeShockingEventSpawnBlockingAreas(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x340F1415B68AEADE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_suppressShockingEventsNextFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F9A292AD0A3BD89);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_suppressShockingEventTypeNextFrame(bool& success, int32_t _eventType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3FD2EC8BF1F1CF30);
	ctx->Reset();
	ctx->Push(_eventType);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_suppressAgitationEventsNextFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F3B7749C112D552);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getNumTattooShopDlcItems(bool& success, int32_t _character) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x278F76C3B0A8F109);
	ctx->Reset();
	ctx->Push(_character);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_getTattooShopDlcItemData(bool& success, int32_t _characterType, int32_t _decorationIndex, int32_t& _outComponent) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF56381874F82086);
	ctx->Reset();
	ctx->Push(_characterType);
	ctx->Push(_decorationIndex);
	auto ptr_outComponent = _outComponent;
	ctx->Push(&ptr_outComponent);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outComponent = ptr_outComponent;
	return ctx->ResultBool();
}

int32_t Native_getTattooShopDlcItemIndex(bool& success, uint32_t _overlayHash, int32_t _p1, int32_t _character) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x10144267DD22866C);
	ctx->Reset();
	ctx->Push(_overlayHash);
	ctx->Push(_p1);
	ctx->Push(_character);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_initShopPedComponent(bool& success, int32_t& _outComponent) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E8C308FD312C036);
	ctx->Reset();
	auto ptr_outComponent = _outComponent;
	ctx->Push(&ptr_outComponent);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_outComponent = ptr_outComponent;
}

void Native_initShopPedProp(bool& success, int32_t& _outProp) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB0A2B758F7B850F);
	ctx->Reset();
	auto ptr_outProp = _outProp;
	ctx->Push(&ptr_outProp);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_outProp = ptr_outProp;
}

int32_t Native_setupShopPedApparelQuery(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50F457823CE6EB5F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_setupShopPedApparelQueryTu(bool& success, int32_t _character, int32_t _p1, int32_t _p2, uint8_t _p3, int32_t _p4, int32_t _componentId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9BDF59818B1E38C1);
	ctx->Reset();
	ctx->Push(_character);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push((int32_t) _p3);
	ctx->Push(_p4);
	ctx->Push(_componentId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_getShopPedQueryComponent(bool& success, int32_t _componentId, int32_t& _outComponent) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x249E310B2D920699);
	ctx->Reset();
	ctx->Push(_componentId);
	auto ptr_outComponent = _outComponent;
	ctx->Push(&ptr_outComponent);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_outComponent = ptr_outComponent;
}

int32_t Native_getShopPedQueryComponentIndex(bool& success, uint32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x96E2929292A4DB77);
	ctx->Reset();
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_getShopPedComponent(bool& success, uint32_t _componentHash, int32_t& _outComponent) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74C0E2A57EC66760);
	ctx->Reset();
	ctx->Push(_componentHash);
	auto ptr_outComponent = _outComponent;
	ctx->Push(&ptr_outComponent);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_outComponent = ptr_outComponent;
}

void Native_getShopPedQueryProp(bool& success, int32_t _componentId, int32_t& _outProp) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE44A00999B2837D);
	ctx->Reset();
	ctx->Push(_componentId);
	auto ptr_outProp = _outProp;
	ctx->Push(&ptr_outProp);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_outProp = ptr_outProp;
}

int32_t Native_getShopPedQueryPropIndex(bool& success, uint32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6CEBE002E58DEE97);
	ctx->Reset();
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_getShopPedProp(bool& success, uint32_t _componentHash, int32_t& _outProp) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D5CAFF661DDF6FC);
	ctx->Reset();
	ctx->Push(_componentHash);
	auto ptr_outProp = _outProp;
	ctx->Push(&ptr_outProp);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_outProp = ptr_outProp;
}

uint32_t Native_getHashNameForComponent(bool& success, int32_t _entity, int32_t _componentId, int32_t _drawableVariant, int32_t _textureVariant) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0368B3A838070348);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_componentId);
	ctx->Push(_drawableVariant);
	ctx->Push(_textureVariant);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint32_t Native_getHashNameForProp(bool& success, int32_t _entity, int32_t _componentId, int32_t _propIndex, int32_t _propTextureIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D6160275CAEC8DD);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_componentId);
	ctx->Push(_propIndex);
	ctx->Push(_propTextureIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

int32_t Native_getItemVariantsCount(bool& success, uint32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC17AD0E5752BECDA);
	ctx->Reset();
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getShopPedApparelVariantPropCount(bool& success, uint32_t _propHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD40AAC51E8E4C663);
	ctx->Reset();
	ctx->Push(_propHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_getVariantComponent(bool& success, uint32_t _componentHash, int32_t _unkVariantComponentIndex, uint32_t& _nameHash, int32_t& _enumValue, int32_t& _componentType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E11F282F11863B6);
	ctx->Reset();
	ctx->Push(_componentHash);
	ctx->Push(_unkVariantComponentIndex);
	auto ptr_nameHash = _nameHash;
	ctx->Push(&ptr_nameHash);
	auto ptr_enumValue = _enumValue;
	ctx->Push(&ptr_enumValue);
	auto ptr_componentType = _componentType;
	ctx->Push(&ptr_componentType);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_nameHash = ptr_nameHash;
	_enumValue = ptr_enumValue;
	_componentType = ptr_componentType;
}

void Native_getVariantProp(bool& success, uint32_t _componentHash, int32_t _unkVariantPropIndex, uint32_t& _nameHash, int32_t& _enumValue, int32_t& _anchorPoint) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD81B7F27BC773E66);
	ctx->Reset();
	ctx->Push(_componentHash);
	ctx->Push(_unkVariantPropIndex);
	auto ptr_nameHash = _nameHash;
	ctx->Push(&ptr_nameHash);
	auto ptr_enumValue = _enumValue;
	ctx->Push(&ptr_enumValue);
	auto ptr_anchorPoint = _anchorPoint;
	ctx->Push(&ptr_anchorPoint);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_nameHash = ptr_nameHash;
	_enumValue = ptr_enumValue;
	_anchorPoint = ptr_anchorPoint;
}

int32_t Native_getShopPedApparelForcedComponentCount(bool& success, uint32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6B9DB42C04DD8C3);
	ctx->Reset();
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getShopPedApparelForcedPropCount(bool& success, uint32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x017568A8182D98A6);
	ctx->Reset();
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_getForcedComponent(bool& success, uint32_t _componentHash, int32_t _forcedComponentIndex, uint32_t& _nameHash, int32_t& _enumValue, int32_t& _componentType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C93ED8C2F74859B);
	ctx->Reset();
	ctx->Push(_componentHash);
	ctx->Push(_forcedComponentIndex);
	auto ptr_nameHash = _nameHash;
	ctx->Push(&ptr_nameHash);
	auto ptr_enumValue = _enumValue;
	ctx->Push(&ptr_enumValue);
	auto ptr_componentType = _componentType;
	ctx->Push(&ptr_componentType);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_nameHash = ptr_nameHash;
	_enumValue = ptr_enumValue;
	_componentType = ptr_componentType;
}

void Native_getForcedProp(bool& success, uint32_t _componentHash, int32_t _forcedPropIndex, uint32_t& _nameHash, int32_t& _enumValue, int32_t& _anchorPoint) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE1CA84EBF72E691D);
	ctx->Reset();
	ctx->Push(_componentHash);
	ctx->Push(_forcedPropIndex);
	auto ptr_nameHash = _nameHash;
	ctx->Push(&ptr_nameHash);
	auto ptr_enumValue = _enumValue;
	ctx->Push(&ptr_enumValue);
	auto ptr_anchorPoint = _anchorPoint;
	ctx->Push(&ptr_anchorPoint);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_nameHash = ptr_nameHash;
	_enumValue = ptr_enumValue;
	_anchorPoint = ptr_anchorPoint;
}

uint8_t Native_isTagRestricted(bool& success, uint32_t _componentHash, uint32_t _restrictionTagHash, int32_t _componentId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x341DE7ED1D2A1BFD);
	ctx->Reset();
	ctx->Push(_componentHash);
	ctx->Push(_restrictionTagHash);
	ctx->Push(_componentId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_doesCurrentPedComponentHaveRestrictionTag(bool& success, int32_t _ped, int32_t _componentId, uint32_t _restrictionTagHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7796B21B76221BC5);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	ctx->Push(_restrictionTagHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_doesCurrentPedPropHaveRestrictionTag(bool& success, int32_t _ped, int32_t _componentId, uint32_t _restrictionTagHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD726BAB4554DA580);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	ctx->Push(_restrictionTagHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_setupShopPedOutfitQuery(bool& success, int32_t _character, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3FBE2D50A6A8C28);
	ctx->Reset();
	ctx->Push(_character);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_getShopPedQueryOutfit(bool& success, int32_t _outfitIndex, int32_t& _outfit) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D793F03A631FE56);
	ctx->Reset();
	ctx->Push(_outfitIndex);
	auto ptr_outfit = _outfit;
	ctx->Push(&ptr_outfit);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_outfit = ptr_outfit;
}

void Native_getShopPedOutfit(bool& success, int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB7952076E444979D);
	ctx->Reset();
	ctx->Push(_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p1 = ptr_p1;
}

int32_t Native_getShopPedOutfitLocate(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x073CA26B079F956E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_getShopPedOutfitPropVariant(bool& success, uint32_t _outfitHash, int32_t _unkVariantIndex, int32_t& _outPropVariant) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9F9C2E0FDE11CBB);
	ctx->Reset();
	ctx->Push(_outfitHash);
	ctx->Push(_unkVariantIndex);
	auto ptr_outPropVariant = _outPropVariant;
	ctx->Push(&ptr_outPropVariant);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outPropVariant = ptr_outPropVariant;
	return ctx->ResultBool();
}

uint8_t Native_getShopPedOutfitComponentVariant(bool& success, uint32_t _outfitHash, int32_t _unkVariantIndex, int32_t& _outComponentVariant) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19F2A026EDF0013F);
	ctx->Reset();
	ctx->Push(_outfitHash);
	ctx->Push(_unkVariantIndex);
	auto ptr_outComponentVariant = _outComponentVariant;
	ctx->Push(&ptr_outComponentVariant);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outComponentVariant = ptr_outComponentVariant;
	return ctx->ResultBool();
}

int32_t Native_getNumDlcVehicles(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7A866D21CD2329B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint32_t Native_getDlcVehicleModel(bool& success, int32_t _dlcVehicleIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xECC01B7C5763333C);
	ctx->Reset();
	ctx->Push(_dlcVehicleIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint8_t Native_getDlcVehicleData(bool& success, int32_t _dlcVehicleIndex, int32_t& _outData) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33468EDC08E371F6);
	ctx->Reset();
	ctx->Push(_dlcVehicleIndex);
	auto ptr_outData = _outData;
	ctx->Push(&ptr_outData);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outData = ptr_outData;
	return ctx->ResultBool();
}

int32_t Native_getDlcVehicleFlags(bool& success, int32_t _dlcVehicleIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5549EE11FA22FCF2);
	ctx->Reset();
	ctx->Push(_dlcVehicleIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getNumDlcWeapons(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE47635F352DA367);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getNumDlcWeaponsSp(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4160B65AE085B5A9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_getDlcWeaponData(bool& success, int32_t _dlcWeaponIndex, int32_t& _outData) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x79923CD21BECE14E);
	ctx->Reset();
	ctx->Push(_dlcWeaponIndex);
	auto ptr_outData = _outData;
	ctx->Push(&ptr_outData);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outData = ptr_outData;
	return ctx->ResultBool();
}

uint8_t Native_getDlcWeaponDataSp(bool& success, int32_t _dlcWeaponIndex, int32_t& _outData) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x310836EE7129BA33);
	ctx->Reset();
	ctx->Push(_dlcWeaponIndex);
	auto ptr_outData = _outData;
	ctx->Push(&ptr_outData);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outData = ptr_outData;
	return ctx->ResultBool();
}

int32_t Native_getNumDlcWeaponComponents(bool& success, int32_t _dlcWeaponIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x405425358A7D61FE);
	ctx->Reset();
	ctx->Push(_dlcWeaponIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getNumDlcWeaponComponentsSp(bool& success, int32_t _dlcWeaponIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD2A7A6DFF55841B);
	ctx->Reset();
	ctx->Push(_dlcWeaponIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_getDlcWeaponComponentData(bool& success, int32_t _dlcWeaponIndex, int32_t _dlcWeapCompIndex, int32_t& _ComponentDataPtr) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6CF598A2957C2BF8);
	ctx->Reset();
	ctx->Push(_dlcWeaponIndex);
	ctx->Push(_dlcWeapCompIndex);
	auto ptr_ComponentDataPtr = _ComponentDataPtr;
	ctx->Push(&ptr_ComponentDataPtr);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_ComponentDataPtr = ptr_ComponentDataPtr;
	return ctx->ResultBool();
}

uint8_t Native_getDlcWeaponComponentDataSp(bool& success, int32_t _dlcWeaponIndex, int32_t _dlcWeapCompIndex, int32_t& _ComponentDataPtr) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x31D5E073B6F93CDC);
	ctx->Reset();
	ctx->Push(_dlcWeaponIndex);
	ctx->Push(_dlcWeapCompIndex);
	auto ptr_ComponentDataPtr = _ComponentDataPtr;
	ctx->Push(&ptr_ComponentDataPtr);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_ComponentDataPtr = ptr_ComponentDataPtr;
	return ctx->ResultBool();
}

uint8_t Native_isContentItemLocked(bool& success, uint32_t _itemHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4D7B033C3AA243C);
	ctx->Reset();
	ctx->Push(_itemHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isDlcVehicleMod(bool& success, uint32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0564B9FF9631B82C);
	ctx->Reset();
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint32_t Native_getDlcVehicleModLockHash(bool& success, uint32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC098810437312FFF);
	ctx->Reset();
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

void Native_executeContentChangesetGroupForAll(bool& success, uint32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6BEDF5769AC2DC07);
	ctx->Reset();
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_revertContentChangesetGroupForAll(bool& success, uint32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C1978285B036B25);
	ctx->Reset();
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_startScriptFire(bool& success, float _X, float _Y, float _Z, int32_t _maxChildren, uint8_t _isGasFire) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B83617E04503888);
	ctx->Reset();
	ctx->Push(_X);
	ctx->Push(_Y);
	ctx->Push(_Z);
	ctx->Push(_maxChildren);
	ctx->Push((int32_t) _isGasFire);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_removeScriptFire(bool& success, int32_t _fireHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FF548385680673F);
	ctx->Reset();
	ctx->Push(_fireHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_startEntityFire(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6A9D9708F6F23DF);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_stopEntityFire(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F0DD2EBBB651AFF);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isEntityOnFire(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28D3FED7190D3A0B);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getNumberOfFiresInRange(bool& success, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50CAD495A460B305);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setFlammabilityMultiplier(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F390AC4155099BA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopFireInRange(bool& success, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x056A8A219B8E829F);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getClosestFirePos(bool& success, vector3_t& _outPosition, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x352A9F6BCF90081F);
	ctx->Reset();
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
	return ctx->ResultBool();
}

void Native_addExplosion(bool& success, float _x, float _y, float _z, int32_t _explosionType, float _damageScale, uint8_t _isAudible, uint8_t _isInvisible, float _cameraShake, uint8_t _noDamage) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3AD2BDBAEE269AC);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_explosionType);
	ctx->Push(_damageScale);
	ctx->Push((int32_t) _isAudible);
	ctx->Push((int32_t) _isInvisible);
	ctx->Push(_cameraShake);
	ctx->Push((int32_t) _noDamage);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addOwnedExplosion(bool& success, int32_t _ped, float _x, float _y, float _z, int32_t _explosionType, float _damageScale, uint8_t _isAudible, uint8_t _isInvisible, float _cameraShake) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x172AA1B624FA1013);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_explosionType);
	ctx->Push(_damageScale);
	ctx->Push((int32_t) _isAudible);
	ctx->Push((int32_t) _isInvisible);
	ctx->Push(_cameraShake);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addExplosionWithUserVfx(bool& success, float _x, float _y, float _z, int32_t _explosionType, uint32_t _explosionFx, float _damageScale, uint8_t _isAudible, uint8_t _isInvisible, float _cameraShake) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36DD3FE58B5E5212);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_explosionType);
	ctx->Push(_explosionFx);
	ctx->Push(_damageScale);
	ctx->Push((int32_t) _isAudible);
	ctx->Push((int32_t) _isInvisible);
	ctx->Push(_cameraShake);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isExplosionInArea(bool& success, int32_t _explosionType, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E2EBA0EE7CED0E0);
	ctx->Reset();
	ctx->Push(_explosionType);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isExplosionActiveInArea(bool& success, int32_t _explosionType, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6070104B699B2EF4);
	ctx->Reset();
	ctx->Push(_explosionType);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isExplosionInSphere(bool& success, int32_t _explosionType, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAB0F816885B0E483);
	ctx->Reset();
	ctx->Push(_explosionType);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getOwnerOfExplosionInSphere(bool& success, int32_t _explosionType, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3CD51E3DB86F176);
	ctx->Reset();
	ctx->Push(_explosionType);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isExplosionInAngledArea(bool& success, int32_t _explosionType, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _width) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA079A6C51525DC4B);
	ctx->Reset();
	ctx->Push(_explosionType);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_width);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getOwnerOfExplosionInAngledArea(bool& success, int32_t _explosionType, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14BA4BA137AF6CEC);
	ctx->Reset();
	ctx->Push(_explosionType);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_beginTextCommandBusyspinnerOn(bool& success, const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xABA17D7CE615ADBF);
	ctx->Reset();
	ctx->Push(SaveString(_string));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_endTextCommandBusyspinnerOn(bool& success, int32_t _busySpinnerType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD12F8228410D9B4);
	ctx->Reset();
	ctx->Push(_busySpinnerType);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_busyspinnerOff(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x10D373323E5B9C0D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_preloadBusyspinner(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC65AB383CD91DF98);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_busyspinnerIsOn(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD422FCC5F239A915);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_busyspinnerIsDisplaying(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2A592B04648A9CB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_disablePausemenuSpinner(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9245E81072704B8A);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMouseCursorThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAAE7CE1D63167423);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMouseCursorStyle(bool& success, int32_t _spriteId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8DB8CFFD58B62552);
	ctx->Reset();
	ctx->Push(_spriteId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMouseCursorVisible(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x98215325A695E78A);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isMouseRolledOverInstructionalButtons(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3D9ACB1EB139E702);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getMouseEvent(bool& success, int32_t _scaleformHandle, int32_t& _p1, int32_t& _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x632B2940C67F4EA9);
	ctx->Reset();
	ctx->Push(_scaleformHandle);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	auto ptr_p3 = _p3;
	ctx->Push(&ptr_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p1 = ptr_p1;
	_p2 = ptr_p2;
	_p3 = ptr_p3;
	return ctx->ResultBool();
}

void Native_thefeedOnlyShowTooltips(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F1554B0CC2089FA);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_thefeedSetScriptedMenuHeight(bool& success, float _pos) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55598D21339CB998);
	ctx->Reset();
	ctx->Push(_pos);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_thefeedHide(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x32888337579A5970);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_thefeedHideThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25F87B30C382FCA7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_thefeedShow(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15CFA549788D35EF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_thefeedFlushQueue(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA8FDB297A8D25FBA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_thefeedRemoveItem(bool& success, int32_t _notificationId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE4390CB40B3E627);
	ctx->Reset();
	ctx->Push(_notificationId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_thefeedForceRenderOn(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA13C11E1B5C06BFC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_thefeedForceRenderOff(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x583049884A2EEE3C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_thefeedPause(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFDB423997FA30340);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_thefeedResume(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE1CD1E48E025E661);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_thefeedIsPaused(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9CBFD40B3FA3010);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_thefeedReportLogoOn(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4438C0564490E63);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_thefeedReportLogoOff(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB695E2CD0A2DA9EE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_thefeedGetLastShownPhoneActivatableFeedId(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x82352748437638CA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_thefeedAutoPostGametipsOn(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x56C8B608CFD49854);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_thefeedAutoPostGametipsOff(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADED7F5748ACAFE6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_thefeedSetBackgroundColorForNextPost(bool& success, int32_t _hudColorIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92F0DA1E27DB96DC);
	ctx->Reset();
	ctx->Push(_hudColorIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_thefeedSetRgbaParameterForNextMessage(bool& success, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17430B918701C342);
	ctx->Reset();
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_thefeedSetFlashDurationParameterForNextMessage(bool& success, int32_t _count) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17AD8C9706BDD88A);
	ctx->Reset();
	ctx->Push(_count);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_thefeedSetVibrateParameterForNextMessage(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A0C7C9BB10ABB36);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_thefeedResetAllParameters(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFDD85225B2DEA55E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_thefeedFreezeNextPost(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFDEC055AB549E328);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_thefeedClearFrozenPost(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80FE4F3AB4E1B62A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_thefeedSetSnapFeedItemPositions(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBAE4F9B97CD43B30);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_thefeedUpdateItemTexture(bool& success, const char* _txdString1, const char* _txnString1, const char* _txdString2, const char* _txnString2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x317EBA71D7543F52);
	ctx->Reset();
	ctx->Push(SaveString(_txdString1));
	ctx->Push(SaveString(_txnString1));
	ctx->Push(SaveString(_txdString2));
	ctx->Push(SaveString(_txnString2));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_beginTextCommandThefeedPost(bool& success, const char* _text) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x202709F4C58A0424);
	ctx->Reset();
	ctx->Push(SaveString(_text));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_endTextCommandThefeedPostStats(bool& success, const char* _statTitle, int32_t _iconEnum, uint8_t _stepVal, int32_t _barValue, uint8_t _isImportant, const char* _pictureTextureDict, const char* _pictureTextureName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B7E9A4EAAA93C89);
	ctx->Reset();
	ctx->Push(SaveString(_statTitle));
	ctx->Push(_iconEnum);
	ctx->Push((int32_t) _stepVal);
	ctx->Push(_barValue);
	ctx->Push((int32_t) _isImportant);
	ctx->Push(SaveString(_pictureTextureDict));
	ctx->Push(SaveString(_pictureTextureName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_endTextCommandThefeedPostMessagetext(bool& success, const char* _txdName, const char* _textureName, uint8_t _flash, int32_t _iconType, const char* _sender, const char* _subject) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CCD9A37359072CF);
	ctx->Reset();
	ctx->Push(SaveString(_txdName));
	ctx->Push(SaveString(_textureName));
	ctx->Push((int32_t) _flash);
	ctx->Push(_iconType);
	ctx->Push(SaveString(_sender));
	ctx->Push(SaveString(_subject));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_endTextCommandThefeedPostMessagetextSubtitleLabel(bool& success, const char* _txdName, const char* _textureName, uint8_t _flash, int32_t _iconType, const char* _sender, const char* _subject) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6F580E4C94926AC);
	ctx->Reset();
	ctx->Push(SaveString(_txdName));
	ctx->Push(SaveString(_textureName));
	ctx->Push((int32_t) _flash);
	ctx->Push(_iconType);
	ctx->Push(SaveString(_sender));
	ctx->Push(SaveString(_subject));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_endTextCommandThefeedPostMessagetextTu(bool& success, const char* _txdName, const char* _textureName, uint8_t _flash, int32_t _iconType, const char* _sender, const char* _subject, float _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E6611149DB3DB6B);
	ctx->Reset();
	ctx->Push(SaveString(_txdName));
	ctx->Push(SaveString(_textureName));
	ctx->Push((int32_t) _flash);
	ctx->Push(_iconType);
	ctx->Push(SaveString(_sender));
	ctx->Push(SaveString(_subject));
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_endTextCommandThefeedPostMessagetextWithCrewTag(bool& success, const char* _txdName, const char* _textureName, uint8_t _flash, int32_t _iconType, const char* _sender, const char* _subject, float _duration, const char* _clanTag) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CBF7BADE20DB93E);
	ctx->Reset();
	ctx->Push(SaveString(_txdName));
	ctx->Push(SaveString(_textureName));
	ctx->Push((int32_t) _flash);
	ctx->Push(_iconType);
	ctx->Push(SaveString(_sender));
	ctx->Push(SaveString(_subject));
	ctx->Push(_duration);
	ctx->Push(SaveString(_clanTag));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon(bool& success, const char* _txdName, const char* _textureName, uint8_t _flash, int32_t _iconType1, const char* _sender, const char* _subject, float _duration, const char* _clanTag, int32_t _iconType2, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x531B84E7DA981FB6);
	ctx->Reset();
	ctx->Push(SaveString(_txdName));
	ctx->Push(SaveString(_textureName));
	ctx->Push((int32_t) _flash);
	ctx->Push(_iconType1);
	ctx->Push(SaveString(_sender));
	ctx->Push(SaveString(_subject));
	ctx->Push(_duration);
	ctx->Push(SaveString(_clanTag));
	ctx->Push(_iconType2);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_endTextCommandThefeedPostTicker(bool& success, uint8_t _blink, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2ED7843F8F801023);
	ctx->Reset();
	ctx->Push((int32_t) _blink);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_endTextCommandThefeedPostTickerForced(bool& success, uint8_t _blink, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44FA03975424A0EE);
	ctx->Reset();
	ctx->Push((int32_t) _blink);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_endTextCommandThefeedPostTickerWithTokens(bool& success, uint8_t _blink, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x378E809BF61EC840);
	ctx->Reset();
	ctx->Push((int32_t) _blink);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_endTextCommandThefeedPostAward(bool& success, const char* _textureDict, const char* _textureName, int32_t _rpBonus, int32_t _colorOverlay, const char* _titleLabel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA295B6F28BD587D);
	ctx->Reset();
	ctx->Push(SaveString(_textureDict));
	ctx->Push(SaveString(_textureName));
	ctx->Push(_rpBonus);
	ctx->Push(_colorOverlay);
	ctx->Push(SaveString(_titleLabel));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_endTextCommandThefeedPostCrewtag(bool& success, uint8_t _p0, uint8_t _p1, int32_t& _p2, int32_t _p3, uint8_t _isLeader, uint8_t _unk0, int32_t _clanDesc, int32_t _R, int32_t _G, int32_t _B) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97C9E4E7024A8F2C);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push((int32_t) _p1);
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	ctx->Push(_p3);
	ctx->Push((int32_t) _isLeader);
	ctx->Push((int32_t) _unk0);
	ctx->Push(_clanDesc);
	ctx->Push(_R);
	ctx->Push(_G);
	ctx->Push(_B);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p2 = ptr_p2;
	return ctx->ResultInt();
}

int32_t Native_endTextCommandThefeedPostCrewtagWithGameName(bool& success, uint8_t _p0, uint8_t _p1, int32_t& _p2, int32_t _p3, uint8_t _isLeader, uint8_t _unk0, int32_t _clanDesc, const char* _playerName, int32_t _R, int32_t _G, int32_t _B) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x137BC35589E34E1E);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push((int32_t) _p1);
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	ctx->Push(_p3);
	ctx->Push((int32_t) _isLeader);
	ctx->Push((int32_t) _unk0);
	ctx->Push(_clanDesc);
	ctx->Push(SaveString(_playerName));
	ctx->Push(_R);
	ctx->Push(_G);
	ctx->Push(_B);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p2 = ptr_p2;
	return ctx->ResultInt();
}

int32_t Native_endTextCommandThefeedPostUnlock(bool& success, const char* _gxtLabel1, int32_t _p1, const char* _gxtLabel2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33EE12743CCD6343);
	ctx->Reset();
	ctx->Push(SaveString(_gxtLabel1));
	ctx->Push(_p1);
	ctx->Push(SaveString(_gxtLabel2));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_endTextCommandThefeedPostUnlockTu(bool& success, const char* _gxtLabel1, int32_t _p1, const char* _gxtLabel2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8F3AAF93D0600BF);
	ctx->Reset();
	ctx->Push(SaveString(_gxtLabel1));
	ctx->Push(_p1);
	ctx->Push(SaveString(_gxtLabel2));
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_endTextCommandThefeedPostUnlockTuWithColor(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7AE0589093A2E088);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_endTextCommandThefeedPostMpticker(bool& success, uint8_t _blink, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF020C96915705B3A);
	ctx->Reset();
	ctx->Push((int32_t) _blink);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_endTextCommandThefeedPostCrewRankupWithLiteralFlag(bool& success, const char* _p0, const char* _p1, const char* _p2, uint8_t _p3, uint8_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8EFCCF6EC66D85E4);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	ctx->Push(SaveString(_p1));
	ctx->Push(SaveString(_p2));
	ctx->Push((int32_t) _p3);
	ctx->Push((int32_t) _p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_endTextCommandThefeedPostVersusTu(bool& success, const char* _txdName1, const char* _textureName1, int32_t _count1, const char* _txdName2, const char* _textureName2, int32_t _count2, int32_t _hudColor1, int32_t _hudColor2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB6871B0555B02996);
	ctx->Reset();
	ctx->Push(SaveString(_txdName1));
	ctx->Push(SaveString(_textureName1));
	ctx->Push(_count1);
	ctx->Push(SaveString(_txdName2));
	ctx->Push(SaveString(_textureName2));
	ctx->Push(_count2);
	ctx->Push(_hudColor1);
	ctx->Push(_hudColor2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_endTextCommandThefeedPostReplay(bool& success, int32_t _type, int32_t _image, const char* _text) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD202B92CBF1D816F);
	ctx->Reset();
	ctx->Push(_type);
	ctx->Push(_image);
	ctx->Push(SaveString(_text));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_endTextCommandThefeedPostReplayInput(bool& success, int32_t _type, const char* _button, const char* _text) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD6CB2CCE7C2735C);
	ctx->Reset();
	ctx->Push(_type);
	ctx->Push(SaveString(_button));
	ctx->Push(SaveString(_text));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_beginTextCommandPrint(bool& success, const char* _GxtEntry) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB87A37EEB7FAA67D);
	ctx->Reset();
	ctx->Push(SaveString(_GxtEntry));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_endTextCommandPrint(bool& success, int32_t _duration, uint8_t _drawImmediately) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D77056A530643F6);
	ctx->Reset();
	ctx->Push(_duration);
	ctx->Push((int32_t) _drawImmediately);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_beginTextCommandIsMessageDisplayed(bool& success, const char* _text) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x853648FD1063A213);
	ctx->Reset();
	ctx->Push(SaveString(_text));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_endTextCommandIsMessageDisplayed(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A9BA1AB3E237613);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_beginTextCommandDisplayText(bool& success, const char* _text) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25FBB336DF1804CB);
	ctx->Reset();
	ctx->Push(SaveString(_text));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_endTextCommandDisplayText(bool& success, float _x, float _y, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD015E5BB0D96A57);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_beginTextCommandGetScreenWidthOfDisplayText(bool& success, const char* _text) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x54CE8AC98E120CAB);
	ctx->Reset();
	ctx->Push(SaveString(_text));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_endTextCommandGetScreenWidthOfDisplayText(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85F061DA64ED2F67);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_beginTextCommandGetNumberOfLinesForString(bool& success, const char* _entry) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x521FB041D93DD0E4);
	ctx->Reset();
	ctx->Push(SaveString(_entry));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_endTextCommandGetNumberOfLinesForString(bool& success, float _x, float _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9040DFB09BE75706);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_beginTextCommandDisplayHelp(bool& success, const char* _inputType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8509B634FBE7DA11);
	ctx->Reset();
	ctx->Push(SaveString(_inputType));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_endTextCommandDisplayHelp(bool& success, int32_t _p0, uint8_t _loop, uint8_t _beep, int32_t _shape) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x238FFE5C7B0498A6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _loop);
	ctx->Push((int32_t) _beep);
	ctx->Push(_shape);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_beginTextCommandIsThisHelpMessageBeingDisplayed(bool& success, const char* _labelName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A24DA3A41B718F5);
	ctx->Reset();
	ctx->Push(SaveString(_labelName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_endTextCommandIsThisHelpMessageBeingDisplayed(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x10BDDBFC529428DD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_beginTextCommandSetBlipName(bool& success, const char* _textLabel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9113A30DE5C6670);
	ctx->Reset();
	ctx->Push(SaveString(_textLabel));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_endTextCommandSetBlipName(bool& success, int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC38B49BCB83BC9B);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_beginTextCommandAddDirectlyToPreviousBriefs(bool& success, const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23D69E0465570028);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_endTextCommandAddDirectlyToPreviousBriefs(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCFDBDF5AE59BA0F4);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_beginTextCommandClearPrint(bool& success, const char* _text) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE124FA80A759019C);
	ctx->Reset();
	ctx->Push(SaveString(_text));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_endTextCommandClearPrint(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFCC75460ABA29378);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_beginTextCommandOverrideButtonText(bool& success, const char* _gxtEntry) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F9EE5687F8EECCD);
	ctx->Reset();
	ctx->Push(SaveString(_gxtEntry));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_endTextCommandOverrideButtonText(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA86911979638106F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addTextComponentInteger(bool& success, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x03B504CF259931BC);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addTextComponentFloat(bool& success, float _value, int32_t _decimalPlaces) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE7DCB5B874BCD96E);
	ctx->Reset();
	ctx->Push(_value);
	ctx->Push(_decimalPlaces);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addTextComponentSubstringTextLabel(bool& success, const char* _labelName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC63CD5D2920ACBE7);
	ctx->Reset();
	ctx->Push(SaveString(_labelName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addTextComponentSubstringTextLabelHashKey(bool& success, uint32_t _gxtEntryHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17299B63C7683A2B);
	ctx->Reset();
	ctx->Push(_gxtEntryHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addTextComponentSubstringBlipName(bool& success, int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80EAD8E2E1D5D52E);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addTextComponentSubstringPlayerName(bool& success, const char* _text) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C188BE134E074AA);
	ctx->Reset();
	ctx->Push(SaveString(_text));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addTextComponentSubstringTime(bool& success, int32_t _timestamp, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1115F16B8AB9E8BF);
	ctx->Reset();
	ctx->Push(_timestamp);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addTextComponentFormattedInteger(bool& success, int32_t _value, uint8_t _commaSeparated) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0E4C749FF9DE9CC4);
	ctx->Reset();
	ctx->Push(_value);
	ctx->Push((int32_t) _commaSeparated);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addTextComponentSubstringPhoneNumber(bool& success, const char* _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x761B77454205A61D);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addTextComponentSubstringWebsite(bool& success, const char* _website) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x94CF4AC034C9C986);
	ctx->Reset();
	ctx->Push(SaveString(_website));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addTextComponentSubstringKeyboardDisplay(bool& success, const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F68520888E69014);
	ctx->Reset();
	ctx->Push(SaveString(_string));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setColourOfNextTextComponent(bool& success, int32_t _hudColor) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39BBF623FC803EAC);
	ctx->Reset();
	ctx->Push(_hudColor);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

const char* Native_getCharacterFromAudioConversationFilename(bool& success, const char* _text, int32_t _position, int32_t _length) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x169BD9382084C8C0);
	ctx->Reset();
	ctx->Push(SaveString(_text));
	ctx->Push(_position);
	ctx->Push(_length);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

const char* Native_getCharacterFromAudioConversationFilenameWithByteLimit(bool& success, const char* _text, int32_t _position, int32_t _length, int32_t _maxLength) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2798643312205C5);
	ctx->Reset();
	ctx->Push(SaveString(_text));
	ctx->Push(_position);
	ctx->Push(_length);
	ctx->Push(_maxLength);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

const char* Native_getCharacterFromAudioConversationFilenameBytes(bool& success, const char* _text, int32_t _startPosition, int32_t _endPosition) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE94AEBA5D82908A);
	ctx->Reset();
	ctx->Push(SaveString(_text));
	ctx->Push(_startPosition);
	ctx->Push(_endPosition);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

const char* Native_getFilenameForAudioConversation(bool& success, const char* _labelName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7B5280EBA9840C72);
	ctx->Reset();
	ctx->Push(SaveString(_labelName));
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

void Native_clearPrints(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCC33FA791322B9D9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearBrief(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D292F73ADBD9313);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearAllHelpMessages(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6178F68A87A4D3A0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearThisPrint(bool& success, const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF708001E1E536DD);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearSmallPrints(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2CEA2839313C09AC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesTextBlockExist(bool& success, const char* _gxt) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C7302E725259789);
	ctx->Reset();
	ctx->Push(SaveString(_gxt));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_requestAdditionalText(bool& success, const char* _gxt, int32_t _slot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71A78003C8E71424);
	ctx->Reset();
	ctx->Push(SaveString(_gxt));
	ctx->Push(_slot);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_requestAdditionalTextForDlc(bool& success, const char* _gxt, int32_t _slot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6009F9F1AE90D8A6);
	ctx->Reset();
	ctx->Push(SaveString(_gxt));
	ctx->Push(_slot);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasAdditionalTextLoaded(bool& success, int32_t _slot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02245FE4BED318B8);
	ctx->Reset();
	ctx->Push(_slot);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_clearAdditionalText(bool& success, int32_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A179DF17CCF04CD);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isStreamingAdditionalText(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B6817B71B85EBF0);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasThisAdditionalTextLoaded(bool& success, const char* _gxt, int32_t _slot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADBF060E2B30C5BC);
	ctx->Reset();
	ctx->Push(SaveString(_gxt));
	ctx->Push(_slot);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isMessageBeingDisplayed(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7984C03AA5CC2F41);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_doesTextLabelExist(bool& success, const char* _gxt) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC09CA973C564252);
	ctx->Reset();
	ctx->Push(SaveString(_gxt));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

const char* Native_getFirstNCharactersOfLiteralString(bool& success, const char* _string, int32_t _length) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x98C3CF913D895111);
	ctx->Reset();
	ctx->Push(SaveString(_string));
	ctx->Push(_length);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

int32_t Native_getLengthOfStringWithThisTextLabel(bool& success, const char* _gxt) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x801BD273D3A23F74);
	ctx->Reset();
	ctx->Push(SaveString(_gxt));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getLengthOfLiteralString(bool& success, const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF030907CCBB8A9FD);
	ctx->Reset();
	ctx->Push(SaveString(_string));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getLengthOfLiteralStringInBytes(bool& success, const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43E4111189E54F0E);
	ctx->Reset();
	ctx->Push(SaveString(_string));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

const char* Native_getStreetNameFromHashKey(bool& success, uint32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0EF8A959B8A4CB9);
	ctx->Reset();
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

uint8_t Native_isHudPreferenceSwitchedOn(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1930DFA731813EC4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isRadarPreferenceSwitchedOn(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9EB6522EA68F22FE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isSubtitlePreferenceSwitchedOn(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD6DACA4BA53E0A4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_displayHud(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6294919E56FF02A);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_displayHudWhenNotInStateOfPlayThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7669F9E39DC17063);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_displayHudWhenPausedThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x402F9ED62087E898);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_displayRadar(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0EBB943C300E693);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFakeSpectatorMode(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD74233600C4EA6B);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getFakeSpectatorMode(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC2D2AD9EAAE265B8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isHudHidden(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA86478C6958735C5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isRadarHidden(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x157F93B036700462);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isMinimapRendering(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF754F20EB5CD51A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_useVehicleTargetingReticule(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C698D8F099174C7);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addValidVehicleHitHash(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4C3B169876D33D7);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearValidVehicleHitHashes(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB81A3DADD503187);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipRoute(bool& success, int32_t _blip, uint8_t _enabled) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F7D8A9BFB0B43E9);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push((int32_t) _enabled);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearAllBlipRoutes(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD12882D3FF82BF11);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipRouteColour(bool& success, int32_t _blip, int32_t _colour) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x837155CD2F63DA09);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_colour);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setForceShowGps(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2790F4B17D098E26);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setUseSetDestinationInPauseMap(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6CDD58146A436083);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlockWantedFlash(bool& success, uint8_t _disabled) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1942374085C8469);
	ctx->Reset();
	ctx->Push((int32_t) _disabled);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addNextMessageToPreviousBriefs(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x60296AF4BA14ABC5);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceNextMessageToPreviousBriefsList(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57D760D55F54E071);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRadarZoomPrecise(bool& success, float _zoom) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD12C5EEE184C337);
	ctx->Reset();
	ctx->Push(_zoom);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRadarZoom(bool& success, int32_t _zoomLevel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x096EF57A0C999BBA);
	ctx->Reset();
	ctx->Push(_zoomLevel);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRadarZoomToBlip(bool& success, int32_t _blip, float _zoom) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF98E4B3E56AFC7B1);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_zoom);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRadarZoomToDistance(bool& success, float _zoom) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB7CC0D58405AD41);
	ctx->Reset();
	ctx->Push(_zoom);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_updateRadarZoomToBlip(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2049635DEB9C375);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getHudColour(bool& success, int32_t _hudColorIndex, int32_t& _r, int32_t& _g, int32_t& _b, int32_t& _a) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C9C91AB74A0360F);
	ctx->Reset();
	ctx->Push(_hudColorIndex);
	auto ptr_r = _r;
	ctx->Push(&ptr_r);
	auto ptr_g = _g;
	ctx->Push(&ptr_g);
	auto ptr_b = _b;
	ctx->Push(&ptr_b);
	auto ptr_a = _a;
	ctx->Push(&ptr_a);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_r = ptr_r;
	_g = ptr_g;
	_b = ptr_b;
	_a = ptr_a;
}

void Native_setScriptVariableHudColour(bool& success, int32_t _r, int32_t _g, int32_t _b, int32_t _a) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD68A5FF8A3A89874);
	ctx->Reset();
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_a);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSecondScriptVariableHudColour(bool& success, int32_t _r, int32_t _g, int32_t _b, int32_t _a) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16A304E6CB2BFAB9);
	ctx->Reset();
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_a);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_replaceHudColour(bool& success, int32_t _hudColorIndex, int32_t _hudColorIndex2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CCC708F0F850613);
	ctx->Reset();
	ctx->Push(_hudColorIndex);
	ctx->Push(_hudColorIndex2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_replaceHudColourWithRgba(bool& success, int32_t _hudColorIndex, int32_t _r, int32_t _g, int32_t _b, int32_t _a) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF314CF4F0211894E);
	ctx->Reset();
	ctx->Push(_hudColorIndex);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_a);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAbilityBarVisibility(bool& success, uint8_t _visible) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DFEDD15019315A9);
	ctx->Reset();
	ctx->Push((int32_t) _visible);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAllowAbilityBar(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x889329C80FE5963C);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_flashAbilityBar(bool& success, int32_t _millisecondsToFlash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02CFBA0C9E9275CE);
	ctx->Reset();
	ctx->Push(_millisecondsToFlash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAbilityBarValue(bool& success, float _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9969599CCFF5D85E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_flashWantedDisplay(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA18AFB39081B6A1F);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceOffWantedStarFlash(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA8D65C1C65702E5);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCustomMpHudColor(bool& success, int32_t _hudColorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2ACCB195F3CCD9DE);
	ctx->Reset();
	ctx->Push(_hudColorId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getRenderedCharacterHeight(bool& success, float _size, int32_t _font) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB88A37483346780);
	ctx->Reset();
	ctx->Push(_size);
	ctx->Push(_font);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setTextScale(bool& success, float _scale, float _size) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x07C837F9A01C34C9);
	ctx->Reset();
	ctx->Push(_scale);
	ctx->Push(_size);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTextColour(bool& success, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE6B23FFA53FB442);
	ctx->Reset();
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTextCentre(bool& success, uint8_t _align) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC02F4DBFB51D988B);
	ctx->Reset();
	ctx->Push((int32_t) _align);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTextRightJustify(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B3C4650BC8BEE47);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTextJustification(bool& success, int32_t _justifyType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E096588B13FFECA);
	ctx->Reset();
	ctx->Push(_justifyType);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTextWrap(bool& success, float _start, float _end) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x63145D9C883A1A70);
	ctx->Reset();
	ctx->Push(_start);
	ctx->Push(_end);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTextLeading(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA50ABC31E3CDFAFF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTextProportional(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x038C1F517D7FDCF8);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTextFont(bool& success, int32_t _fontType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66E0276CC5F6B9DA);
	ctx->Reset();
	ctx->Push(_fontType);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTextDropShadow(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CA3E9EAC9D93E5E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTextDropshadow(bool& success, int32_t _distance, int32_t _r, int32_t _g, int32_t _b, int32_t _a) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x465C84BC39F1C351);
	ctx->Reset();
	ctx->Push(_distance);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_a);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTextOutline(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2513DFB0FB8400FE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTextEdge(bool& success, int32_t _p0, int32_t _r, int32_t _g, int32_t _b, int32_t _a) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x441603240D202FA6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_a);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTextRenderId(bool& success, int32_t _renderId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F15302936E07111);
	ctx->Reset();
	ctx->Push(_renderId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getDefaultScriptRendertargetRenderId(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x52F0982D7FD156B6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_registerNamedRendertarget(bool& success, const char* _name, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57D9C12635E25CE3);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isNamedRendertargetRegistered(bool& success, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78DCDC15C9F116B4);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_releaseNamedRendertarget(bool& success, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE9F6FFE837354DD4);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_linkNamedRendertarget(bool& success, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6C09E276AEB3F2D);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getNamedRendertargetRenderId(bool& success, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A6478B61C6BDC3B);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isNamedRendertargetLinked(bool& success, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x113750538FA31298);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_clearHelp(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8DFCED7A656F8802);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isHelpMessageOnScreen(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDAD37F45428801AE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasScriptHiddenHelpThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x214CD562A939246A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isHelpMessageBeingDisplayed(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D79439A6B55AC67);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isHelpMessageFadingOut(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x327EDEEEAC55C369);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setHelpMessageStyle(bool& success, int32_t _style, int32_t _hudColor, int32_t _alpha, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9C362BABECDDC7A);
	ctx->Reset();
	ctx->Push(_style);
	ctx->Push(_hudColor);
	ctx->Push(_alpha);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getStandardBlipEnumId(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A9923385BDB9DAD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getWaypointBlipEnumId(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x186E5D252FA50E7D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getNumberOfActiveBlips(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A3FF3DE163034E8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getNextBlipInfoId(bool& success, int32_t _blipSprite) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14F96AA50D6FBEA7);
	ctx->Reset();
	ctx->Push(_blipSprite);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getFirstBlipInfoId(bool& success, int32_t _blipSprite) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1BEDE233E6CD2A1F);
	ctx->Reset();
	ctx->Push(_blipSprite);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getClosestBlipInfoId(bool& success, int32_t _blipSprite) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD484BF71050CA1EE);
	ctx->Reset();
	ctx->Push(_blipSprite);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

vector3_t Native_getBlipInfoIdCoord(bool& success, int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA7C7F0AADF25D09);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

int32_t Native_getBlipInfoIdDisplay(bool& success, int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E314167F701DC3B);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getBlipInfoIdType(bool& success, int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE9B0959FFD0779B);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getBlipInfoIdEntityIndex(bool& success, int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4BA4E2553AFEDC2C);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getBlipInfoIdPickupIndex(bool& success, int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B6786E4C03DD382);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getBlipFromEntity(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC8DBDCA2436F7E8);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_addBlipForRadius(bool& success, float _posX, float _posY, float _posZ, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46818D79B1F7499A);
	ctx->Reset();
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_addBlipForArea(bool& success, float _x, float _y, float _z, float _width, float _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE5D0E5E315DB238);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_width);
	ctx->Push(_height);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_addBlipForEntity(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CDE92C702A8FCE7);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_addBlipForPickup(bool& success, int32_t _pickup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE339365C863BD36);
	ctx->Reset();
	ctx->Push(_pickup);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_addBlipForCoord(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A039BB0BCA604B6);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_triggerSonarBlip(bool& success, float _posX, float _posY, float _posZ, float _radius, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x72DD432F3CDFC0EE);
	ctx->Reset();
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_radius);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_allowSonarBlips(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x60734CC207C9833C);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipCoords(bool& success, int32_t _blip, float _posX, float _posY, float _posZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE2AF67E9D9AF65D);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

vector3_t Native_getBlipCoords(bool& success, int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x586AFE3FF72D996E);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

void Native_setBlipSprite(bool& success, int32_t _blip, int32_t _spriteId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF735600A4696DAF);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_spriteId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getBlipSprite(bool& success, int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1FC877464A04FC4F);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setCopBlipSprite(bool& success, int32_t _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9FCB3CBFB3EAD69A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCopBlipSpriteAsStandard(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB7B873520C84C118);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipNameFromTextFile(bool& success, int32_t _blip, const char* _gxtEntry) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEAA0FFE120D92784);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(SaveString(_gxtEntry));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipNameToPlayerName(bool& success, int32_t _blip, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x127DE7B20C60A6A3);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipAlpha(bool& success, int32_t _blip, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45FF974EEE1C8734);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getBlipAlpha(bool& success, int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x970F608F0EE6C885);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setBlipFade(bool& success, int32_t _blip, int32_t _opacity, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2AEE8F8390D2298C);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_opacity);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getBlipFadeDirection(bool& success, int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C173AE2BDB9385E);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setBlipRotation(bool& success, int32_t _blip, int32_t _rotation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF87683CDF73C3F6E);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_rotation);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipRotationWithFloat(bool& success, int32_t _blip, float _heading) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA8B6AFDAC320AC87);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_heading);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getBlipRotation(bool& success, int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x003E92BA477F9D7F);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setBlipFlashTimer(bool& success, int32_t _blip, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3CD6FD297AE87CC);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipFlashInterval(bool& success, int32_t _blip, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA51DB313C010A7E);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipColour(bool& success, int32_t _blip, int32_t _color) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x03D7FB09E75D6B7E);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_color);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipSecondaryColour(bool& success, int32_t _blip, int32_t _r, int32_t _g, int32_t _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14892474891E09EB);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getBlipColour(bool& success, int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF729E8D20CF7327);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getBlipHudColour(bool& success, int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x729B5F1EFBC0AAEE);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isBlipShortRange(bool& success, int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA5F8727EB75B926);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isBlipOnMinimap(bool& success, int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE41CA53051197A27);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_doesBlipHaveGpsRoute(bool& success, int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD2238F57B977751);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setBlipHiddenOnLegend(bool& success, int32_t _blip, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x54318C915D27E4CE);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipHighDetail(bool& success, int32_t _blip, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE2590BC29220CEBB);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipAsMissionCreatorBlip(bool& success, int32_t _blip, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x24AC0137444F9FD5);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isMissionCreatorBlip(bool& success, int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26F49BF3381D933D);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getNewSelectedMissionCreatorBlip(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C90988E7C8E1AF4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isHoveringOverMissionCreatorBlip(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4167EFE0527D706E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_showStartMissionInstructionalButton(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1A6C18B35BCADE6);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_showContactInstructionalButton(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC772A904CDE1186F);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_reloadMapMenu(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2916A928514C9827);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipMarkerLongDistance(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB552929B85FC27EC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipFlashes(bool& success, int32_t _blip, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB14552383D39CE3E);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipFlashesAlternate(bool& success, int32_t _blip, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E8D9498C56DD0D1);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isBlipFlashing(bool& success, int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5E41FD83AD6CEF0);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setBlipAsShortRange(bool& success, int32_t _blip, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE8BE4FE60E27B72);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipScale(bool& success, int32_t _blip, float _scale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD38744167B2FA257);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_scale);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipScale2d(bool& success, int32_t _blip, float _xScale, float _yScale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD6524439909C979);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_xScale);
	ctx->Push(_yScale);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipPriority(bool& success, int32_t _blip, int32_t _priority) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE9FC9EF6A9FAC79);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_priority);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipDisplay(bool& success, int32_t _blip, int32_t _displayId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9029B2F3DA924928);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_displayId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipCategory(bool& success, int32_t _blip, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x234CDD44D996FD9A);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeBlip(bool& success, int32_t& _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x86A652570E5F25DD);
	ctx->Reset();
	auto ptr_blip = _blip;
	ctx->Push(&ptr_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_blip = ptr_blip;
}

void Native_setBlipAsFriendly(bool& success, int32_t _blip, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F6F290102C02AB4);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_pulseBlip(bool& success, int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x742D6FD43115AF73);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_showNumberOnBlip(bool& success, int32_t _blip, int32_t _number) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA3C0B359DCB848B6);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_number);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_hideNumberOnBlip(bool& success, int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x532CFF637EF80148);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_showHeightOnBlip(bool& success, int32_t _blip, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75A16C3DA34F1245);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_showTickOnBlip(bool& success, int32_t _blip, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74513EA3E505181E);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_showGoldTickOnBlip(bool& success, int32_t _blip, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCAC2031EBF79B1A8);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_showHeadingIndicatorOnBlip(bool& success, int32_t _blip, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FBCA48327B914DF);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_showOutlineIndicatorOnBlip(bool& success, int32_t _blip, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB81656BC81FE24D1);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_showFriendIndicatorOnBlip(bool& success, int32_t _blip, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23C3EB807312F01A);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_showCrewIndicatorOnBlip(bool& success, int32_t _blip, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCFB5D4DB8BF367E);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipExtendedHeightThreshold(bool& success, int32_t _blip, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC4278F70131BAA6D);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipShortHeightThreshold(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4B5B620C9B59ED34);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipUseHeightIndicatorOnEdge(bool& success, int32_t _blip, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C9F302398E13141);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipAsMinimalOnEdge(bool& success, int32_t _blip, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B6D467DAB714E8D);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRadiusBlipEdge(bool& success, int32_t _blip, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25615540D894B814);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesBlipExist(bool& success, int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6DB27D19ECBB7DA);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setWaypointOff(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7E4E2D361C2627F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_deleteWaypointsFromThisPlayer(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD8E694757BCEA8E9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_refreshWaypoint(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x81FA173F170560D1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isWaypointActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DD1F58F493F1DA5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setNewWaypoint(bool& success, float _x, float _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFE43368D2AA4F2FC);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipBright(bool& success, int32_t _blip, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB203913733F27884);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlipShowCone(bool& success, int32_t _blip, uint8_t _toggle, int32_t _hudColorIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13127EC3665E8EE1);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push((int32_t) _toggle);
	ctx->Push(_hudColorIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeCopBlipFromPed(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC594B315EDF2D4AF);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setupFakeConeData(bool& success, int32_t _blip, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6, int32_t _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF83D0FEBE75E62C9);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeFakeConeData(bool& success, int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35A3CD97B2C0A6D2);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearFakeConeArray(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8410C5E0CD847B9D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_setMinimapComponent(bool& success, int32_t _componentId, uint8_t _toggle, int32_t _overrideColor) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75A9A10948D1DEA6);
	ctx->Reset();
	ctx->Push(_componentId);
	ctx->Push((int32_t) _toggle);
	ctx->Push(_overrideColor);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setMinimapSonarSweep(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B50FC8749632EC1);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_showAccountPicker(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x60E892BA4F5BDCA4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getMainPlayerBlipId(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCD4EC3F419D02FA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPmWarningscreenActive(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x41350B4FC28E3941);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_hideLoadingOnFadeThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4B0311D3CDC4648F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRadarAsInteriorThisFrame(bool& success, uint32_t _interior, float _x, float _y, int32_t _z, int32_t _zoom) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x59E727A1C9D3E31A);
	ctx->Reset();
	ctx->Push(_interior);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_zoom);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setInsideVerySmallInterior(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x504DFE62A1692296);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setInsideVeryLargeInterior(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EC8ABA5E74B3D7A);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRadarAsExteriorThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE81B7D2A3DAB2D81);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFakePausemapPlayerPositionThisFrame(bool& success, float _x, float _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77E2DD177910E1CF);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFakeGpsPlayerPositionThisFrame(bool& success, float _x, float _y, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA17784FCA9548D15);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPausemapInInteriorMode(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9049FE339D5F6F6F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_hideMinimapExteriorMapThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FBAE526203990C9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_hideMinimapInteriorMapThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20FE7FDFEEAD38C0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setUseIslandMap(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E1460624D194A38);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_dontTiltMinimapThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D14BFDC33B34F55);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_dontZoomMinimapWhenSnipingThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55F5A5F07134DE60);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setWidescreenFormat(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3B07BA00A83B0F1);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_displayAreaName(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x276B6CE369C33678);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_displayCash(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x96DEC8D5430208B7);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_useFakeMpCash(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x170F541E1CADD1DE);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_changeFakeMpCash(bool& success, int32_t _cash, int32_t _bank) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0772DF77852C2E30);
	ctx->Reset();
	ctx->Push(_cash);
	ctx->Push(_bank);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_displayAmmoThisFrame(bool& success, uint8_t _display) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5E78BA2B1331C55);
	ctx->Reset();
	ctx->Push((int32_t) _display);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_displaySniperScopeThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x73115226F4814E62);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_hideHudAndRadarThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x719FF505F097FD20);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_allowDisplayOfMultiplayerCashText(bool& success, uint8_t _allow) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE67C6DFD386EA5E7);
	ctx->Reset();
	ctx->Push((int32_t) _allow);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMultiplayerWalletCash(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC2D15BEF167E27BC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeMultiplayerWalletCash(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95CF81BD06EE1887);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMultiplayerBankCash(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD21B55DF695CD0A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeMultiplayerBankCash(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7C6789AA1CFEDD0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMultiplayerHudCash(bool& success, int32_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD1D220394BCB824);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeMultiplayerHudCash(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x968F270E39141ECA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_hideHelpTextThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD46923FC481CA285);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isImeInProgress(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x801879A9B4F4B2FB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_displayHelpTextThisFrame(bool& success, const char* _message, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x960C9FF8F616E41C);
	ctx->Reset();
	ctx->Push(SaveString(_message));
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_hudForceWeaponWheel(bool& success, uint8_t _show) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB354E5376BC81A7);
	ctx->Reset();
	ctx->Push((int32_t) _show);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_hudForceSpecialVehicleWeaponWheel(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x488043841BBE156F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_blockWeaponWheelThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0AFC4AF510774B47);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint32_t Native_hudGetWeaponWheelCurrentlyHighlighted(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA48931185F0536FE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

void Native_hudSetWeaponWheelTopSlot(bool& success, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x72C1056D678BB7D8);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint32_t Native_hudGetWeaponWheelTopSlot(bool& success, int32_t _weaponTypeIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA13E93403F26C812);
	ctx->Reset();
	ctx->Push(_weaponTypeIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

void Native_hudShowingCharacterSwitchSelection(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14C9FDCC41F81F63);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGpsFlags(bool& success, int32_t _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B440763A4C8D15B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearGpsFlags(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21986729D6A3A830);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRaceTrackRender(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1EAC5F91BCBC5073);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearGpsRaceTrack(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7AA5B4CE533C858B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_startGpsCustomRoute(bool& success, int32_t _hudColor, uint8_t _displayOnFoot, uint8_t _followPlayer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB34E8D56FC13B08);
	ctx->Reset();
	ctx->Push(_hudColor);
	ctx->Push((int32_t) _displayOnFoot);
	ctx->Push((int32_t) _followPlayer);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addPointToGpsCustomRoute(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x311438A071DD9B1A);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGpsCustomRouteRender(bool& success, uint8_t _toggle, int32_t _radarThickness, int32_t _mapThickness) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x900086F371220B6F);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	ctx->Push(_radarThickness);
	ctx->Push(_mapThickness);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearGpsCustomRoute(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6DE0561D9232A64);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_startGpsMultiRoute(bool& success, int32_t _hudColor, uint8_t _routeFromPlayer, uint8_t _displayOnFoot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3D3D15AF7BCAAF83);
	ctx->Reset();
	ctx->Push(_hudColor);
	ctx->Push((int32_t) _routeFromPlayer);
	ctx->Push((int32_t) _displayOnFoot);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addPointToGpsMultiRoute(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA905192A6781C41B);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGpsMultiRouteRender(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3DDA37128DD1ACA8);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearGpsMultiRoute(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x67EEDEA1B9BAFD94);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearGpsPlayerWaypoint(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF4FB7C8CDFA3DA7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGpsFlashes(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x320D0E0D936A0E9B);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerIconColour(bool& success, int32_t _color) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7B21E0BB01E8224A);
	ctx->Reset();
	ctx->Push(_color);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_flashMinimapDisplay(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2DD778C22B15BDA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_flashMinimapDisplayWithColor(bool& success, int32_t _hudColorIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B1DE27EE78E6A19);
	ctx->Reset();
	ctx->Push(_hudColorIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_toggleStealthRadar(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6AFDFB93754950C7);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMinimapInSpectatorMode(bool& success, uint8_t _toggle, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A5CD7752DD28CD3);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMissionName(bool& success, uint8_t _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F28ECF5FC84772F);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMissionNameForUgcMission(bool& success, uint8_t _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE45087D85F468BC2);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDescriptionForUgcMissionEightStrings(bool& success, uint8_t _p0, const char* _p1, const char* _p2, const char* _p3, const char* _p4, const char* _p5, const char* _p6, const char* _p7, const char* _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x817B86108EB94E51);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push(SaveString(_p1));
	ctx->Push(SaveString(_p2));
	ctx->Push(SaveString(_p3));
	ctx->Push(SaveString(_p4));
	ctx->Push(SaveString(_p5));
	ctx->Push(SaveString(_p6));
	ctx->Push(SaveString(_p7));
	ctx->Push(SaveString(_p8));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMinimapBlockWaypoint(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58FADDED207897DC);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMinimapInPrologue(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9133955F1A2DA957);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMinimapHideFow(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF8DEE0A5600CBB93);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getMinimapFowDiscoveryRatio(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE0130B41D3CF4574);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

uint8_t Native_getMinimapFowCoordinateIsRevealed(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E31B91145873922);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setMinimapFowDoNotUpdate(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62E849B7EB28E770);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMinimapFowRevealCoordinate(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0923DBF87DFF735E);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMinimapGolfCourse(bool& success, int32_t _hole) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71BDB63DBAF8DA59);
	ctx->Reset();
	ctx->Push(_hole);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMinimapGolfCourseOff(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35EDD5B2E3FF01C0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_lockMinimapAngle(bool& success, int32_t _angle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x299FAEBB108AE05B);
	ctx->Reset();
	ctx->Push(_angle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_unlockMinimapAngle(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8183455E16C42E3A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_lockMinimapPosition(bool& success, float _x, float _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1279E861A329E73F);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_unlockMinimapPosition(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E93E06DB8EF1F30);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFakeMinimapMaxAltimeterHeight(bool& success, float _altitude, uint8_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD201F3FF917A506D);
	ctx->Reset();
	ctx->Push(_altitude);
	ctx->Push((int32_t) _p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setHealthHudDisplayValues(bool& success, int32_t _health, int32_t _capacity, uint8_t _wasAdded) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F5CC444DCAAA8F2);
	ctx->Reset();
	ctx->Push(_health);
	ctx->Push(_capacity);
	ctx->Push((int32_t) _wasAdded);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMaxHealthHudDisplay(bool& success, int32_t _maximumValue) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x975D66A0BC17064C);
	ctx->Reset();
	ctx->Push(_maximumValue);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMaxArmourHudDisplay(bool& success, int32_t _maximumValue) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06A320535F5F0248);
	ctx->Reset();
	ctx->Push(_maximumValue);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBigmapActive(bool& success, uint8_t _toggleBigMap, uint8_t _showFullMap) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x231C8F89D0539D8F);
	ctx->Reset();
	ctx->Push((int32_t) _toggleBigMap);
	ctx->Push((int32_t) _showFullMap);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isHudComponentActive(bool& success, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC4C9EA5391ECC0D);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isScriptedHudComponentActive(bool& success, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD100EB17A94FF65);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_hideScriptedHudComponentThisFrame(bool& success, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE374C498D8BADC14);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_showScriptedHudComponentThisFrame(bool& success, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F38DCA127DAAEA2);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isScriptedHudComponentHiddenThisFrame(bool& success, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x09C0403ED9A751C2);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_hideHudComponentThisFrame(bool& success, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6806C51AD12B83B8);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_showHudComponentThisFrame(bool& success, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0B4DF1FA60C0E664);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_hideStreetAndCarNamesThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA4DEDE28B1814289);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetReticuleValues(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x12782CE0A636E9F0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetHudComponentValues(bool& success, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x450930E616475D0D);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setHudComponentPosition(bool& success, int32_t _id, float _x, float _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAABB1F56E2A17CED);
	ctx->Reset();
	ctx->Push(_id);
	ctx->Push(_x);
	ctx->Push(_y);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

vector3_t Native_getHudComponentPosition(bool& success, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x223CA69A8C4417FD);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

void Native_clearReminderMessage(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB57D8DD645CFA2CF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getScreenCoordFromWorldCoord2(bool& success, float _worldX, float _worldY, float _worldZ, float& _screenX, float& _screenY) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9904D11F1ACBEC3);
	ctx->Reset();
	ctx->Push(_worldX);
	ctx->Push(_worldY);
	ctx->Push(_worldZ);
	auto ptr_screenX = _screenX;
	ctx->Push(&ptr_screenX);
	auto ptr_screenY = _screenY;
	ctx->Push(&ptr_screenY);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_screenX = ptr_screenX;
	_screenY = ptr_screenY;
	return ctx->ResultInt();
}

void Native_openReportugcMenu(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x523A590C1A3CC0D3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceCloseReportugcMenu(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE4C0E6DBC6F2C6F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isReportugcMenuOpen(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9135584D09A3437E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isFloatingHelpTextOnScreen(bool& success, int32_t _hudIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2432784ACA090DA4);
	ctx->Reset();
	ctx->Push(_hudIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setFloatingHelpTextScreenPosition(bool& success, int32_t _hudIndex, float _x, float _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7679CC1BCEBE3D4C);
	ctx->Reset();
	ctx->Push(_hudIndex);
	ctx->Push(_x);
	ctx->Push(_y);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFloatingHelpTextWorldPosition(bool& success, int32_t _hudIndex, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x784BA7E0ECEB4178);
	ctx->Reset();
	ctx->Push(_hudIndex);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFloatingHelpTextToEntity(bool& success, int32_t _hudIndex, int32_t _entity, float _offsetX, float _offsetY) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB094BC1DB4018240);
	ctx->Reset();
	ctx->Push(_hudIndex);
	ctx->Push(_entity);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFloatingHelpTextStyle(bool& success, int32_t _hudIndex, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x788E7FD431BD67F1);
	ctx->Reset();
	ctx->Push(_hudIndex);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearFloatingHelp(bool& success, int32_t _hudIndex, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50085246ABD3FEFA);
	ctx->Reset();
	ctx->Push(_hudIndex);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_createMpGamerTagWithCrewColor(bool& success, int32_t _player, const char* _username, uint8_t _pointedClanTag, uint8_t _isRockstarClan, const char* _clanTag, int32_t _clanFlag, int32_t _r, int32_t _g, int32_t _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6DD05E9D83EFA4C9);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(SaveString(_username));
	ctx->Push((int32_t) _pointedClanTag);
	ctx->Push((int32_t) _isRockstarClan);
	ctx->Push(SaveString(_clanTag));
	ctx->Push(_clanFlag);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isMpGamerTagMovieActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E0EB3EB47C8D7AA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_createFakeMpGamerTag(bool& success, int32_t _ped, const char* _username, uint8_t _pointedClanTag, uint8_t _isRockstarClan, const char* _clanTag, int32_t _clanFlag) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBFEFE3321A3F5015);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_username));
	ctx->Push((int32_t) _pointedClanTag);
	ctx->Push((int32_t) _isRockstarClan);
	ctx->Push(SaveString(_clanTag));
	ctx->Push(_clanFlag);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_removeMpGamerTag(bool& success, int32_t _gamerTagId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x31698AA80E0223F8);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isMpGamerTagActive(bool& success, int32_t _gamerTagId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E929E7A5796FD26);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isMpGamerTagFree(bool& success, int32_t _gamerTagId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x595B5178E412E199);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setMpGamerTagVisibility(bool& success, int32_t _gamerTagId, int32_t _component, uint8_t _toggle, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x63BB75ABEDC1F6A0);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push(_component);
	ctx->Push((int32_t) _toggle);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAllMpGamerTagsVisibility(bool& success, int32_t _gamerTagId, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE76FF7E6A0166B0);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMpGamerTagsShouldUseVehicleHealth(bool& success, int32_t _gamerTagId, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA67F9C46D612B6F1);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMpGamerTagsShouldUsePointsHealth(bool& success, int32_t _gamerTagId, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD29EC58C2F6B5014);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMpGamerTagsPointHealth(bool& success, int32_t _gamerTagId, int32_t _value, int32_t _maximumValue) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1563FE35E9928E67);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push(_value);
	ctx->Push(_maximumValue);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMpGamerTagColour(bool& success, int32_t _gamerTagId, int32_t _component, int32_t _hudColorIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x613ED644950626AE);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push(_component);
	ctx->Push(_hudColorIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMpGamerTagHealthBarColour(bool& success, int32_t _gamerTagId, int32_t _hudColorIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3158C77A7E888AB4);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push(_hudColorIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMpGamerTagAlpha(bool& success, int32_t _gamerTagId, int32_t _component, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD48FE545CD46F857);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push(_component);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMpGamerTagWantedLevel(bool& success, int32_t _gamerTagId, int32_t _wantedlvl) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF228E2AA03099C3);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push(_wantedlvl);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMpGamerTagNumPackages(bool& success, int32_t _gamerTagId, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C16459B2324B2CF);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMpGamerTagName(bool& success, int32_t _gamerTagId, const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDEA2B8283BAA3944);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push(SaveString(_string));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isUpdatingMpGamerTagNameAndCrewDetails(bool& success, int32_t _gamerTagId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB709A36958ABE0D);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setMpGamerTagBigText(bool& success, int32_t _gamerTagId, const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7B7723747CCB55B6);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push(SaveString(_string));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getCurrentWebpageId(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01A358D9128B7A86);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getCurrentWebsiteId(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97D47996FC48CBAD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getGlobalActionscriptFlag(bool& success, int32_t _flagIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3B05614DCE1D014);
	ctx->Reset();
	ctx->Push(_flagIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_resetGlobalActionscriptFlag(bool& success, int32_t _flagIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB99C4E4D9499DF29);
	ctx->Reset();
	ctx->Push(_flagIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isWarningMessageReadyForControl(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF42195A42C63BBA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setWarningMessage(bool& success, const char* _titleMsg, int32_t _flags, const char* _promptMsg, uint8_t _p3, int32_t _p4, const char* _p5, const char* _p6, uint8_t _showBackground, int32_t _errorCode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7B1776B3B53F8D74);
	ctx->Reset();
	ctx->Push(SaveString(_titleMsg));
	ctx->Push(_flags);
	ctx->Push(SaveString(_promptMsg));
	ctx->Push((int32_t) _p3);
	ctx->Push(_p4);
	ctx->Push(SaveString(_p5));
	ctx->Push(SaveString(_p6));
	ctx->Push((int32_t) _showBackground);
	ctx->Push(_errorCode);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setWarningMessageWithHeader(bool& success, const char* _entryHeader, const char* _entryLine1, int32_t _instructionalKey, const char* _entryLine2, uint8_t _p4, int32_t _p5, int32_t& _showBackground, int32_t& _p7, uint8_t _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC38CC1E35B6A5D7);
	ctx->Reset();
	ctx->Push(SaveString(_entryHeader));
	ctx->Push(SaveString(_entryLine1));
	ctx->Push(_instructionalKey);
	ctx->Push(SaveString(_entryLine2));
	ctx->Push((int32_t) _p4);
	ctx->Push(_p5);
	auto ptr_showBackground = _showBackground;
	ctx->Push(&ptr_showBackground);
	auto ptr_p7 = _p7;
	ctx->Push(&ptr_p7);
	ctx->Push((int32_t) _p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_showBackground = ptr_showBackground;
	_p7 = ptr_p7;
}

void Native_setWarningMessageWithHeaderAndSubstringFlags(bool& success, const char* _entryHeader, const char* _entryLine1, int32_t _instructionalKey, const char* _entryLine2, uint8_t _p4, int32_t _p5, int32_t _additionalIntInfo, const char* _additionalTextInfoLine1, const char* _additionalTextInfoLine2, uint8_t _showBackground, int32_t _errorCode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x701919482C74B5AB);
	ctx->Reset();
	ctx->Push(SaveString(_entryHeader));
	ctx->Push(SaveString(_entryLine1));
	ctx->Push(_instructionalKey);
	ctx->Push(SaveString(_entryLine2));
	ctx->Push((int32_t) _p4);
	ctx->Push(_p5);
	ctx->Push(_additionalIntInfo);
	ctx->Push(SaveString(_additionalTextInfoLine1));
	ctx->Push(SaveString(_additionalTextInfoLine2));
	ctx->Push((int32_t) _showBackground);
	ctx->Push(_errorCode);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setWarningMessageWithHeaderExtended(bool& success, const char* _entryHeader, const char* _entryLine1, int32_t _flags, const char* _entryLine2, uint8_t _p4, int32_t _p5, int32_t& _p6, int32_t& _p7, uint8_t _showBg, int32_t _p9, int32_t _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x38B55259C2E078ED);
	ctx->Reset();
	ctx->Push(SaveString(_entryHeader));
	ctx->Push(SaveString(_entryLine1));
	ctx->Push(_flags);
	ctx->Push(SaveString(_entryLine2));
	ctx->Push((int32_t) _p4);
	ctx->Push(_p5);
	auto ptr_p6 = _p6;
	ctx->Push(&ptr_p6);
	auto ptr_p7 = _p7;
	ctx->Push(&ptr_p7);
	ctx->Push((int32_t) _showBg);
	ctx->Push(_p9);
	ctx->Push(_p10);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p6 = ptr_p6;
	_p7 = ptr_p7;
}

void Native_setWarningMessageWithHeaderAndSubstringFlagsExtended(bool& success, const char* _labelTitle, const char* _labelMessage, int32_t _p2, int32_t _p3, const char* _labelMessage2, uint8_t _p5, int32_t _p6, int32_t _p7, const char* _p8, const char* _p9, uint8_t _background, int32_t _errorCode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15803FEC3B9A872B);
	ctx->Reset();
	ctx->Push(SaveString(_labelTitle));
	ctx->Push(SaveString(_labelMessage));
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(SaveString(_labelMessage2));
	ctx->Push((int32_t) _p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(SaveString(_p8));
	ctx->Push(SaveString(_p9));
	ctx->Push((int32_t) _background);
	ctx->Push(_errorCode);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint32_t Native_getWarningScreenMessageHash(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x81DF9ABA6C83DFF9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint8_t Native_setWarningMessageOptionItems(bool& success, int32_t _index, const char* _name, int32_t _cash, int32_t _rp, int32_t _lvl, int32_t _colour) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C5A80A9E096D529);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push(SaveString(_name));
	ctx->Push(_cash);
	ctx->Push(_rp);
	ctx->Push(_lvl);
	ctx->Push(_colour);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_setWarningMessageOptionHighlight(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDAF87174BE7454FF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_removeWarningMessageOptionItems(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6EF54AB721DC6242);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isWarningMessageActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE18B138FABC53103);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_clearDynamicPauseMenuErrorMessage(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7792424AA0EAC32E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_customMinimapSetActive(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5354C5BA2EA868A4);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_customMinimapSetBlipObject(bool& success, int32_t _spriteId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1EAE6DD17B7A5EFA);
	ctx->Reset();
	ctx->Push(_spriteId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_customMinimapCreateBlip(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x551DF99658DB6EE8);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_customMinimapClearBlips(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2708FC083123F9FF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_forceSonarBlipsThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1121BFA1A1A522A8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getNorthBlidIndex(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F0CF9CB7E589B88);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_displayPlayerNameTagsOnBlips(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x82CEDC33687E1F50);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawFrontendBackgroundThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x211C4EF450086857);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_drawHudOverFadeThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF4F34A85CA2970C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_activateFrontendMenu(bool& success, uint32_t _menuhash, uint8_t _togglePause, int32_t _component) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF01D36B9C9D0C7B);
	ctx->Reset();
	ctx->Push(_menuhash);
	ctx->Push((int32_t) _togglePause);
	ctx->Push(_component);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_restartFrontendMenu(bool& success, uint32_t _menuHash, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x10706DC6AD2D49C0);
	ctx->Reset();
	ctx->Push(_menuHash);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint32_t Native_getCurrentFrontendMenuVersion(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2309595AD6145265);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

void Native_setPauseMenuActive(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF47FC56C71569CF);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableFrontendThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D3465A73092F0E6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_suppressFrontendRenderingThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA751764F0821256);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_allowPauseWhenNotInStateOfPlayThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCC3FDDED67BCFC63);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFrontendActive(bool& success, uint8_t _active) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x745711A75AB09277);
	ctx->Reset();
	ctx->Push((int32_t) _active);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPauseMenuActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB0034A223497FFCB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isStorePendingNetworkShutdownToOpen(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F057596F2BD0061);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getPauseMenuState(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x272ACD84970869C5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

vector3_t Native_getPauseMenuPosition(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BFF36D6ED83E0AE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

uint8_t Native_isPauseMenuRestarting(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C491717107431C7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_forceScriptedGfxWhenFrontendActive(bool& success, const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2162C446DFDF38FD);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_pauseMenuceptionGoDeeper(bool& success, int32_t _page) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77F16B447824DA6C);
	ctx->Reset();
	ctx->Push(_page);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_pauseMenuceptionTheKick(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCDCA26E80FAECB8F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_pauseToggleFullscreenMap(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DE6C5E2E996F178);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_pauseMenuActivateContext(bool& success, uint32_t _contextHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD564BDD0472C936);
	ctx->Reset();
	ctx->Push(_contextHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_pauseMenuDeactivateContext(bool& success, uint32_t _contextHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x444D8CF241EC25C5);
	ctx->Reset();
	ctx->Push(_contextHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_pauseMenuIsContextActive(bool& success, uint32_t _contextHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84698AB38D0C6636);
	ctx->Reset();
	ctx->Push(_contextHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_pauseMenuIsContextMenuActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A25ADC48F87841F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_pauseMenuGetHairColourIndex(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE03620F8703A9DF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_pauseMenuGetMouseHoverIndex(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x359AF31A4B52F5ED);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_pauseMenuGetMouseHoverUniqueId(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13C4B962653A5280);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_pauseMenuGetMouseClickEvent(bool& success, int32_t& _p0, int32_t& _p1, int32_t& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8E1071177A23BE5);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	_p1 = ptr_p1;
	_p2 = ptr_p2;
	return ctx->ResultBool();
}

void Native_pauseMenuRedrawInstructionalButtons(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4895BDEA16E7C080);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_pauseMenuSetBusySpinner(bool& success, uint8_t _p0, int32_t _position, int32_t _spinnerIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC78E239AC5B2DDB9);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push(_position);
	ctx->Push(_spinnerIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_pauseMenuSetWarnOnTabChange(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF06EBB91A81E09E3);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isFrontendReadyForControl(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3BAB9A4E4F2FF5C7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_takeControlOfFrontend(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC9264727EEC0F28);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_releaseControlOfFrontend(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14621BB1DF14E2B2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_codeWantsScriptToTakeControl(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66E7CB63C97B7D20);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getScreenCodeWantsScriptToControl(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x593FEAE1F73392D4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isNavigatingMenuContent(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E3CD0EF8A489541);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasMenuTriggerEventOccurred(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF284AC67940C6812);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasMenuLayoutChangedEventOccurred(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E22FEFA0100275E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setSavegameListUniqueId(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0CF54F20DE43879C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getMenuTriggerEventDetails(bool& success, int32_t& _lastItemMenuId, int32_t& _selectedItemUniqueId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36C1451A88A09630);
	ctx->Reset();
	auto ptr_lastItemMenuId = _lastItemMenuId;
	ctx->Push(&ptr_lastItemMenuId);
	auto ptr_selectedItemUniqueId = _selectedItemUniqueId;
	ctx->Push(&ptr_selectedItemUniqueId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_lastItemMenuId = ptr_lastItemMenuId;
	_selectedItemUniqueId = ptr_selectedItemUniqueId;
}

void Native_getMenuLayoutChangedEventDetails(bool& success, int32_t& _lastItemMenuId, int32_t& _selectedItemMenuId, int32_t& _selectedItemUniqueId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7E17BE53E1AAABAF);
	ctx->Reset();
	auto ptr_lastItemMenuId = _lastItemMenuId;
	ctx->Push(&ptr_lastItemMenuId);
	auto ptr_selectedItemMenuId = _selectedItemMenuId;
	ctx->Push(&ptr_selectedItemMenuId);
	auto ptr_selectedItemUniqueId = _selectedItemUniqueId;
	ctx->Push(&ptr_selectedItemUniqueId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_lastItemMenuId = ptr_lastItemMenuId;
	_selectedItemMenuId = ptr_selectedItemMenuId;
	_selectedItemUniqueId = ptr_selectedItemUniqueId;
}

uint8_t Native_getPmPlayerCrewColor(bool& success, int32_t& _r, int32_t& _g, int32_t& _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA238192F33110615);
	ctx->Reset();
	auto ptr_r = _r;
	ctx->Push(&ptr_r);
	auto ptr_g = _g;
	ctx->Push(&ptr_g);
	auto ptr_b = _b;
	ctx->Push(&ptr_b);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_r = ptr_r;
	_g = ptr_g;
	_b = ptr_b;
	return ctx->ResultBool();
}

uint8_t Native_getMenuPedIntStat(bool& success, int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF4CED81CEBEDC6D);
	ctx->Reset();
	ctx->Push(_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

uint8_t Native_getCharacterMenuPedIntStat(bool& success, int32_t _p0, int32_t& _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA6B2F7CE32AB653);
	ctx->Reset();
	ctx->Push(_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

uint8_t Native_getMenuPedMaskedIntStat(bool& success, uint32_t _statHash, int32_t& _outValue, int32_t _mask, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90A6526CF0381030);
	ctx->Reset();
	ctx->Push(_statHash);
	auto ptr_outValue = _outValue;
	ctx->Push(&ptr_outValue);
	ctx->Push(_mask);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outValue = ptr_outValue;
	return ctx->ResultBool();
}

uint8_t Native_getCharacterMenuPedMaskedIntStat(bool& success, uint32_t _statHash, int32_t& _outValue, int32_t _p2, int32_t _mask, uint8_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x24A49BEAF468DC90);
	ctx->Reset();
	ctx->Push(_statHash);
	auto ptr_outValue = _outValue;
	ctx->Push(&ptr_outValue);
	ctx->Push(_p2);
	ctx->Push(_mask);
	ctx->Push((int32_t) _p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outValue = ptr_outValue;
	return ctx->ResultBool();
}

uint8_t Native_getMenuPedFloatStat(bool& success, uint32_t _statHash, float& _outValue) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FBD7095FE7AE57F);
	ctx->Reset();
	ctx->Push(_statHash);
	auto ptr_outValue = _outValue;
	ctx->Push(&ptr_outValue);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outValue = ptr_outValue;
	return ctx->ResultBool();
}

uint8_t Native_getCharacterMenuPedFloatStat(bool& success, float _statHash, float& _outValue, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F08017F9D7C47BD);
	ctx->Reset();
	ctx->Push(_statHash);
	auto ptr_outValue = _outValue;
	ctx->Push(&ptr_outValue);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outValue = ptr_outValue;
	return ctx->ResultBool();
}

uint8_t Native_getMenuPedBoolStat(bool& success, uint32_t _statHash, uint8_t& _outValue) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x052991E59076E4E4);
	ctx->Reset();
	ctx->Push(_statHash);
	auto ptr_outValue = (int32_t) _outValue;
	ctx->Push(&ptr_outValue);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outValue = (bool) ptr_outValue;
	return ctx->ResultBool();
}

void Native_clearPedInPauseMenu(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E62BE5DC58E9E06);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_givePedToPauseMenu(bool& success, int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC0BFBDC3BE00E14);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPauseMenuPedLighting(bool& success, uint8_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3CA6050692BC61B0);
	ctx->Reset();
	ctx->Push((int32_t) _state);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPauseMenuPedSleepState(bool& success, uint8_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xECF128344E9FF9F1);
	ctx->Reset();
	ctx->Push((int32_t) _state);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_openOnlinePoliciesMenu(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x805D7CBB36FD6C4C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_areOnlinePoliciesUpToDate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF13FE2A80C05C561);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isOnlinePoliciesMenuActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F72CD94F7B5B68C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_openSocialClubMenu(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75D3691713C3B05A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_closeSocialClubMenu(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2B32BE3FC1626C6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSocialClubTour(bool& success, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9E778248D6685FE0);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isSocialClubActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC406BE343FC4B9AF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setTextInputBoxEnabled(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1185A8087587322C);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceCloseTextInputBox(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8817605C2BA76200);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAllowCommaOnTextInput(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x577599CCED639CA2);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_overrideMpTextChatTeamString(bool& success, uint32_t _gxtEntryHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A1738B4323FE2D9);
	ctx->Reset();
	ctx->Push(_gxtEntryHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isMpTextChatTyping(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB118AF58B5F332A1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_closeMpTextChat(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1AC8F4AD40E22127);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_mpTextChatIsTeamJob(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C226D5346D4D10A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_overrideMpTextChatColor(bool& success, int32_t _p0, int32_t _hudColor) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF47E567B3630DD12);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_hudColor);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_mpTextChatDisable(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DB21A44B09E8BA3);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_flagPlayerContextInTournament(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCEF214315D276FD1);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedHasAiBlip(bool& success, int32_t _ped, uint8_t _hasCone) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD30C50DF888D58B5);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _hasCone);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedHasAiBlipWithColour(bool& success, int32_t _ped, uint8_t _hasCone, int32_t _color) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB13DCB4C6FAAD238);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _hasCone);
	ctx->Push(_color);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesPedHaveAiBlip(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15B8ECF844EE67ED);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedAiBlipGangId(bool& success, int32_t _ped, int32_t _gangId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE52B8E7F85D39A08);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_gangId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedAiBlipHasCone(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3EED80DFF7325CAA);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedAiBlipForcedOn(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C4BBF625CA98C4E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedAiBlipNoticeRange(bool& success, int32_t _ped, float _range) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97C65887D4B37FA9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_range);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedAiBlipSprite(bool& success, int32_t _ped, int32_t _spriteId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFCFACD0DB9D7A57D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_spriteId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getAiPedPedBlipIndex(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7CD934010E115C2C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getAiPedVehicleBlipIndex(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x56176892826A4FE8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_hasDirectorModeBeenLaunchedByCode(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA277800A9EAE340E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setDirectorModeLaunchedByScript(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2632482FD6B9AB87);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerIsInDirectorMode(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x808519373FD336A3);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDirectorModeAvailable(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x04655F9D075D0AE5);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_hideHudmarkersThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x243296A510B562B6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getInteriorHeading(bool& success, int32_t _interior) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF49B58631D9E22D9);
	ctx->Reset();
	ctx->Push(_interior);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_getInteriorLocationAndNamehash(bool& success, int32_t _interior, vector3_t& _position, uint32_t& _nameHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x252BDC06B73FA6EA);
	ctx->Reset();
	ctx->Push(_interior);
	alt::INative::Vector3 converted_position { _position.x, 0, _position.y, 0, _position.z };
	ctx->Push(&converted_position);
	auto ptr_nameHash = _nameHash;
	ctx->Push(&ptr_nameHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_position.x = converted_position.x;
	_position.y = converted_position.y;
	_position.z = converted_position.z;
	_nameHash = ptr_nameHash;
}

int32_t Native_getInteriorGroupId(bool& success, int32_t _interior) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4A84ABF135EF91A);
	ctx->Reset();
	ctx->Push(_interior);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

vector3_t Native_getOffsetFromInteriorInWorldCoords(bool& success, int32_t _interior, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9E3B3E6D66F6E22F);
	ctx->Reset();
	ctx->Push(_interior);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

uint8_t Native_isInteriorScene(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC72B5D7A1CBD54D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isValidInterior(bool& success, int32_t _interior) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26B0E73D7EAAF4D3);
	ctx->Reset();
	ctx->Push(_interior);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_clearRoomForEntity(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB365FC0C4E27FFA7);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceRoomForEntity(bool& success, int32_t _entity, int32_t _interior, uint32_t _roomHashKey) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x52923C4710DD9907);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_interior);
	ctx->Push(_roomHashKey);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint32_t Native_getRoomKeyFromEntity(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x47C2A06D4F5F424B);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint32_t Native_getKeyForEntityInRoom(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x399685DB942336BC);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

int32_t Native_getInteriorFromEntity(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2107BA504071A6BB);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_retainEntityInInterior(bool& success, int32_t _entity, int32_t _interior) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x82EBB79E258FA2B7);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_interior);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearInteriorStateOfEntity(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85D5422B2039A70D);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceActivatingTrackingOnEntity(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x38C1CB1CB119A016);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceRoomForGameViewport(bool& success, int32_t _interiorID, uint32_t _roomHashKey) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x920D853F3E17F1DA);
	ctx->Reset();
	ctx->Push(_interiorID);
	ctx->Push(_roomHashKey);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRoomForGameViewportByName(bool& success, const char* _roomName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF348AFCB575A441);
	ctx->Reset();
	ctx->Push(SaveString(_roomName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRoomForGameViewportByKey(bool& success, uint32_t _roomHashKey) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x405DC2AEF6AF95B9);
	ctx->Reset();
	ctx->Push(_roomHashKey);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint32_t Native_getRoomKeyForGameViewport(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6575914D2A0B450);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

void Native_clearRoomForGameViewport(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23B59D8912F94246);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getInteriorFromPrimaryView(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE7D267EC6CA966C3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getInteriorAtCoords(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB0F7F8663821D9C3);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_addPickupToInteriorRoomByName(bool& success, int32_t _pickup, const char* _roomName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F6167F351168730);
	ctx->Reset();
	ctx->Push(_pickup);
	ctx->Push(SaveString(_roomName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_pinInteriorInMemory(bool& success, int32_t _interior) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2CA429C029CCF247);
	ctx->Reset();
	ctx->Push(_interior);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_unpinInterior(bool& success, int32_t _interior) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x261CCE7EED010641);
	ctx->Reset();
	ctx->Push(_interior);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isInteriorReady(bool& success, int32_t _interior) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6726BDCCC1932F0E);
	ctx->Reset();
	ctx->Push(_interior);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_setInteriorInUse(bool& success, int32_t _interior) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C2330E61D3DEB56);
	ctx->Reset();
	ctx->Push(_interior);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getInteriorAtCoordsWithType(bool& success, float _x, float _y, float _z, const char* _interiorType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x05B7A89BD78797FC);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(SaveString(_interiorType));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getInteriorAtCoordsWithTypehash(bool& success, float _x, float _y, float _z, uint32_t _typeHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0F77ADB9F67E79D);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_typeHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_activateInteriorGroupsUsingCamera(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x483ACA1176CA93F1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isCollisionMarkedOutside(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEEA5AC2EDA7C33E8);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getInteriorFromCollision(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC4CF9FCB29A4424);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_enableStadiumProbesThisFrame(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7ECDF98587E92DEC);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_activateInteriorEntitySet(bool& success, int32_t _interior, const char* _entitySetName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55E86AF2712B36A1);
	ctx->Reset();
	ctx->Push(_interior);
	ctx->Push(SaveString(_entitySetName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_deactivateInteriorEntitySet(bool& success, int32_t _interior, const char* _entitySetName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x420BD37289EEE162);
	ctx->Reset();
	ctx->Push(_interior);
	ctx->Push(SaveString(_entitySetName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isInteriorEntitySetActive(bool& success, int32_t _interior, const char* _entitySetName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35F7DD45E8C0A16D);
	ctx->Reset();
	ctx->Push(_interior);
	ctx->Push(SaveString(_entitySetName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setInteriorEntitySetTintIndex(bool& success, int32_t _interior, const char* _entitySetName, int32_t _color) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC1F1920BAF281317);
	ctx->Reset();
	ctx->Push(_interior);
	ctx->Push(SaveString(_entitySetName));
	ctx->Push(_color);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_refreshInterior(bool& success, int32_t _interior) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x41F37C3427C75AE0);
	ctx->Reset();
	ctx->Push(_interior);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_enableExteriorCullModelThisFrame(bool& success, uint32_t _mapObjectHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA97F257D0151A6AB);
	ctx->Reset();
	ctx->Push(_mapObjectHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_enableShadowCullModelThisFrame(bool& success, uint32_t _mapObjectHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50C375537449F369);
	ctx->Reset();
	ctx->Push(_mapObjectHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableInterior(bool& success, int32_t _interior, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6170941419D7D8EC);
	ctx->Reset();
	ctx->Push(_interior);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isInteriorDisabled(bool& success, int32_t _interior) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC5115A5A939DD15);
	ctx->Reset();
	ctx->Push(_interior);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_capInterior(bool& success, int32_t _interior, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9175F941610DB54);
	ctx->Reset();
	ctx->Push(_interior);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isInteriorCapped(bool& success, int32_t _interior) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92BAC8ACF88CEC26);
	ctx->Reset();
	ctx->Push(_interior);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_disableMetroSystem(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9E6542F0CE8E70A3);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setIsExteriorOnly(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7241CCB7D020DB69);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_createItemset(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35AD299F50D91B24);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_destroyItemset(bool& success, int32_t _itemset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE18220B1C183EDA);
	ctx->Reset();
	ctx->Push(_itemset);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isItemsetValid(bool& success, int32_t _itemset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1B1EA596344DFAB);
	ctx->Reset();
	ctx->Push(_itemset);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_addToItemset(bool& success, int32_t _item, int32_t _itemset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3945201F14637DD);
	ctx->Reset();
	ctx->Push(_item);
	ctx->Push(_itemset);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_removeFromItemset(bool& success, int32_t _item, int32_t _itemset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25E68244B0177686);
	ctx->Reset();
	ctx->Push(_item);
	ctx->Push(_itemset);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getItemsetSize(bool& success, int32_t _itemset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9127E83ABF7C631);
	ctx->Reset();
	ctx->Push(_itemset);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getIndexedItemInItemset(bool& success, int32_t _index, int32_t _itemset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A197E2521EE2BAB);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push(_itemset);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isInItemset(bool& success, int32_t _item, int32_t _itemset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D0FC594D1E9C107);
	ctx->Reset();
	ctx->Push(_item);
	ctx->Push(_itemset);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_cleanItemset(bool& success, int32_t _itemset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x41BC0D722FC04221);
	ctx->Reset();
	ctx->Push(_itemset);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_lobbyAutoMultiplayerMenu(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2CA003F167E21D2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_lobbyAutoMultiplayerFreemode(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF7D17BC6C85264C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_lobbySetAutoMultiplayer(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB0C56BD3D808D863);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_lobbyAutoMultiplayerEvent(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8AA464D4E0F6ACCD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_lobbySetAutoMultiplayerEvent(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC309E94546FCDB5);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_lobbyAutoMultiplayerRandomJob(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6DC823253FBB366);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_lobbySetAutoMpRandomJob(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7E7181C09F33B69);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_shutdownSessionClearsAutoMultiplayer(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA1E0E893D915215);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_localizationGetSystemLanguage(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x497420E022796B3F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getCurrentLanguage(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2BDD44CC428A7EAE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_localizationGetSystemDateType(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA8AE43AEC1A61314);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getAllocatedStackSize(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B3CA62B1EF19B62);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getNumberOfFreeStacksOfThisSize(bool& success, int32_t _stackSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFEAD16FC8F9DFC0F);
	ctx->Reset();
	ctx->Push(_stackSize);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setRandomSeed(bool& success, int32_t _seed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x444D98F98C11F3EC);
	ctx->Reset();
	ctx->Push(_seed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTimeScale(bool& success, float _timeScale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D408577D440E81E);
	ctx->Reset();
	ctx->Push(_timeScale);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMissionFlag(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC4301E5121A0ED73);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getMissionFlag(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA33CDCCDA663159E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setRandomEventFlag(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x971927086CFD2158);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getRandomEventFlag(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2D57F1D764117B1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

const char* Native_getContentToLoad(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x24DA7D7667FD7B09);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

void Native_activityFeedCreate(bool& success, const char* _p0, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4DCDF92BF64236CD);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	ctx->Push(SaveString(_p1));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_activityFeedAddSubstringToCaption(bool& success, const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x31125FD509D9043F);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_activityFeedAddLiteralSubstringToCaption(bool& success, const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEBD3205A207939ED);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_activityFeedAddIntToCaption(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97E7E2C04245115B);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_activityFeedLargeImageUrl(bool& success, const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x916CA67D26FD1E37);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_activityFeedActionStartWithCommandLine(bool& success, const char* _p0, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB078CA2B5E82ADD);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	ctx->Push(SaveString(_p1));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_activityFeedActionStartWithCommandLineAdd(bool& success, const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x703CC7F60CBB2B57);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_activityFeedPost(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8951EB9C6906D3C8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_activityFeedOnlinePlayedWithPost(bool& success, const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA4B8D83BDC75551);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasResumedFromSuspend(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE8B9C0EC9E183F35);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setScriptHighPrio(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x65D2EBB47E1CEC21);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setThisIsATriggerScript(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F2135B6129620C1);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_informCodeOfContentIdOfCurrentUgcMission(bool& success, const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D74E26F54B4E5C3);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getBaseElementLocationFromMetadataBlock(bool& success, int32_t& _p0, int32_t& _p1, int32_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB335F761606DB47C);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	ctx->Push(_p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

uint32_t Native_getPrevWeatherTypeHashName(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x564B884A05EC45A3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint32_t Native_getNextWeatherTypeHashName(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x711327CD09C8F162);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint8_t Native_isPrevWeatherType(bool& success, const char* _weatherType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44F28F86433B10A9);
	ctx->Reset();
	ctx->Push(SaveString(_weatherType));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isNextWeatherType(bool& success, const char* _weatherType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FAA3A30BEC0F25D);
	ctx->Reset();
	ctx->Push(SaveString(_weatherType));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setWeatherTypePersist(bool& success, const char* _weatherType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x704983DF373B198F);
	ctx->Reset();
	ctx->Push(SaveString(_weatherType));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setWeatherTypeNowPersist(bool& success, const char* _weatherType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED712CA327900C8A);
	ctx->Reset();
	ctx->Push(SaveString(_weatherType));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setWeatherTypeNow(bool& success, const char* _weatherType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29B487C359E19889);
	ctx->Reset();
	ctx->Push(SaveString(_weatherType));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setWeatherTypeOvertimePersist(bool& success, const char* _weatherType, float _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB5045B7C42B75BF);
	ctx->Reset();
	ctx->Push(SaveString(_weatherType));
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRandomWeatherType(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B05F884CF7E8020);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearWeatherTypePersist(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCCC39339BEF76CF5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearWeatherTypeNowPersistNetwork(bool& success, int32_t _milliseconds) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0CF97F497FE7D048);
	ctx->Reset();
	ctx->Push(_milliseconds);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getCurrWeatherState(bool& success, uint32_t& _weatherType1, uint32_t& _weatherType2, float& _percentWeather2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3BBE884A14BB413);
	ctx->Reset();
	auto ptr_weatherType1 = _weatherType1;
	ctx->Push(&ptr_weatherType1);
	auto ptr_weatherType2 = _weatherType2;
	ctx->Push(&ptr_weatherType2);
	auto ptr_percentWeather2 = _percentWeather2;
	ctx->Push(&ptr_percentWeather2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_weatherType1 = ptr_weatherType1;
	_weatherType2 = ptr_weatherType2;
	_percentWeather2 = ptr_percentWeather2;
}

void Native_setCurrWeatherState(bool& success, uint32_t _weatherType1, uint32_t _weatherType2, float _percentWeather2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x578C752848ECFA0C);
	ctx->Reset();
	ctx->Push(_weatherType1);
	ctx->Push(_weatherType2);
	ctx->Push(_percentWeather2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setOverrideWeather(bool& success, const char* _weatherType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA43D5C6FE51ADBEF);
	ctx->Reset();
	ctx->Push(SaveString(_weatherType));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setOverrideWeatherex(bool& success, const char* _weatherType, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1178E104409FE58C);
	ctx->Reset();
	ctx->Push(SaveString(_weatherType));
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearOverrideWeather(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x338D2E3477711050);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_waterOverrideSetShorewaveamplitude(bool& success, float _amplitude) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8F87EAD7533B176);
	ctx->Reset();
	ctx->Push(_amplitude);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_waterOverrideSetShorewaveminamplitude(bool& success, float _minAmplitude) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3EAD29AB273ECE8);
	ctx->Reset();
	ctx->Push(_minAmplitude);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_waterOverrideSetShorewavemaxamplitude(bool& success, float _maxAmplitude) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7A1127490312C36);
	ctx->Reset();
	ctx->Push(_maxAmplitude);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_waterOverrideSetOceannoiseminamplitude(bool& success, float _minAmplitude) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x31727907B2C43C55);
	ctx->Reset();
	ctx->Push(_minAmplitude);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_waterOverrideSetOceanwaveamplitude(bool& success, float _amplitude) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x405591EC8FD9096D);
	ctx->Reset();
	ctx->Push(_amplitude);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_waterOverrideSetOceanwaveminamplitude(bool& success, float _minAmplitude) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF751B16FB32ABC1D);
	ctx->Reset();
	ctx->Push(_minAmplitude);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_waterOverrideSetOceanwavemaxamplitude(bool& success, float _maxAmplitude) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3E6360DDE733E82);
	ctx->Reset();
	ctx->Push(_maxAmplitude);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_waterOverrideSetRipplebumpiness(bool& success, float _bumpiness) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C9C0B1EEB1F9072);
	ctx->Reset();
	ctx->Push(_bumpiness);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_waterOverrideSetRippleminbumpiness(bool& success, float _minBumpiness) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6216B116083A7CB4);
	ctx->Reset();
	ctx->Push(_minBumpiness);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_waterOverrideSetRipplemaxbumpiness(bool& success, float _maxBumpiness) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F5E6BB6B34540DA);
	ctx->Reset();
	ctx->Push(_maxBumpiness);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_waterOverrideSetRippledisturb(bool& success, float _disturb) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9854DFDE0D833D6);
	ctx->Reset();
	ctx->Push(_disturb);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_waterOverrideSetStrength(bool& success, float _strength) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC54A08C85AE4D410);
	ctx->Reset();
	ctx->Push(_strength);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_waterOverrideFadeIn(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA8434F1DFF41D6E7);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_waterOverrideFadeOut(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3C221ADDDE31A11);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setWind(bool& success, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC3A74E8384A9919);
	ctx->Reset();
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setWindSpeed(bool& success, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE09ECEDBABE47FC);
	ctx->Reset();
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getWindSpeed(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA8CF1CC0AFCD3F12);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setWindDirection(bool& success, float _direction) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB0F4468467B4528);
	ctx->Reset();
	ctx->Push(_direction);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

vector3_t Native_getWindDirection(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F400FEF721170DA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

void Native_setRain(bool& success, float _intensity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x643E26EA6E024D92);
	ctx->Reset();
	ctx->Push(_intensity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getRainLevel(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x96695E368AD855F3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setSnow(bool& success, float _level) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F06937B0CDCBC1A);
	ctx->Reset();
	ctx->Push(_level);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getSnowLevel(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5868A966E5BE3AE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_forceLightningFlash(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6062E089251C898);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCloudSettingsOverride(bool& success, const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02DEAAC8F8EA7FE7);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_preloadCloudHat(bool& success, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11B56FBBF7224868);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_loadCloudHat(bool& success, const char* _name, float _transitionTime) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC4842A34657BFCB);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	ctx->Push(_transitionTime);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_unloadCloudHat(bool& success, const char* _name, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA74802FB8D0B7814);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_unloadAllCloudHats(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x957E790EA1727B64);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCloudsAlpha(bool& success, float _opacity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF36199225D6D8C86);
	ctx->Reset();
	ctx->Push(_opacity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getCloudsAlpha(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20AC25E781AE4A84);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

int32_t Native_getGameTimer(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9CD27B0045628463);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

float Native_getFrameTime(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15C40837039FFAF7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getSystemTimeStep(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE599A503B3837E1B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

int32_t Native_getFrameCount(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC8202EFC642E6F2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

float Native_getRandomFloatInRange(bool& success, float _startRange, float _endRange) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x313CE5879CEB6FCD);
	ctx->Reset();
	ctx->Push(_startRange);
	ctx->Push(_endRange);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

int32_t Native_getRandomIntInRange(bool& success, int32_t _startRange, int32_t _endRange) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD53343AA4FB7DD28);
	ctx->Reset();
	ctx->Push(_startRange);
	ctx->Push(_endRange);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getRandomMwcIntInRange(bool& success, int32_t _startRange, int32_t _endRange) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2D49816A804D134);
	ctx->Reset();
	ctx->Push(_startRange);
	ctx->Push(_endRange);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_getGroundZFor3dCoord(bool& success, float _x, float _y, float _z, float& _groundZ, uint8_t _ignoreWater, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC906A7DAB05C8D2B);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	auto ptr_groundZ = _groundZ;
	ctx->Push(&ptr_groundZ);
	ctx->Push((int32_t) _ignoreWater);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_groundZ = ptr_groundZ;
	return ctx->ResultBool();
}

uint8_t Native_getGroundZAndNormalFor3dCoord(bool& success, float _x, float _y, float _z, float& _groundZ, vector3_t& _normal) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8BDC7BFC57A81E76);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	auto ptr_groundZ = _groundZ;
	ctx->Push(&ptr_groundZ);
	alt::INative::Vector3 converted_normal { _normal.x, 0, _normal.y, 0, _normal.z };
	ctx->Push(&converted_normal);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_groundZ = ptr_groundZ;
	_normal.x = converted_normal.x;
	_normal.y = converted_normal.y;
	_normal.z = converted_normal.z;
	return ctx->ResultBool();
}

uint8_t Native_getGroundZExcludingObjectsFor3dCoord(bool& success, float _x, float _y, float _z, float& _groundZ, uint8_t _p4, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9E82F0F362881B29);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	auto ptr_groundZ = _groundZ;
	ctx->Push(&ptr_groundZ);
	ctx->Push((int32_t) _p4);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_groundZ = ptr_groundZ;
	return ctx->ResultBool();
}

float Native_asin(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC843060B5765DCE7);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_acos(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D08B970013C34B6);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_tan(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x632106CC96E82E91);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_atan(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9D1795CD5043663);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_atan2(bool& success, float _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8927CBF9D22261A4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getDistanceBetweenCoords(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, uint8_t _useZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1B760881820C952);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push((int32_t) _useZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getAngleBetween2dVectors(bool& success, float _x1, float _y1, float _x2, float _y2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x186FC4BE848E1C92);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getHeadingFromVector2d(bool& success, float _dx, float _dy) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FFB6B224F4B2926);
	ctx->Reset();
	ctx->Push(_dx);
	ctx->Push(_dy);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getRatioOfClosestPointOnLine(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _x3, float _y3, float _z3, uint8_t _clamp) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F8F6405F4777AF6);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_x3);
	ctx->Push(_y3);
	ctx->Push(_z3);
	ctx->Push((int32_t) _clamp);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

vector3_t Native_getClosestPointOnLine(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _x3, float _y3, float _z3, uint8_t _clamp) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21C235BC64831E5A);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_x3);
	ctx->Push(_y3);
	ctx->Push(_z3);
	ctx->Push((int32_t) _clamp);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

uint8_t Native_getLinePlaneIntersection(bool& success, float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6, float _p7, float _p8, float _p9, float _p10, float _p11, float& _p12) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF56DFB7B61BE7276);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	auto ptr_p12 = _p12;
	ctx->Push(&ptr_p12);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p12 = ptr_p12;
	return ctx->ResultBool();
}

uint8_t Native_getPointAreaOverlap(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8, int32_t _p9, int32_t _p10, int32_t _p11, int32_t _p12, int32_t _p13) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0AD167E4B39D9A2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	ctx->Push(_p12);
	ctx->Push(_p13);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setBit(bool& success, int32_t& _address, int32_t _offset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x933D6A9EEC1BACD0);
	ctx->Reset();
	auto ptr_address = _address;
	ctx->Push(&ptr_address);
	ctx->Push(_offset);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_address = ptr_address;
}

void Native_clearBit(bool& success, int32_t& _address, int32_t _offset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE80492A9AC099A93);
	ctx->Reset();
	auto ptr_address = _address;
	ctx->Push(&ptr_address);
	ctx->Push(_offset);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_address = ptr_address;
}

uint32_t Native_getHashKey(bool& success, const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD24D37CC275948CC);
	ctx->Reset();
	ctx->Push(SaveString(_string));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

void Native_slerpNearQuaternion(bool& success, float _t, float _x, float _y, float _z, float _w, float _x1, float _y1, float _z1, float _w1, float& _outX, float& _outY, float& _outZ, float& _outW) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2F6A2FA49278625);
	ctx->Reset();
	ctx->Push(_t);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_w);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_w1);
	auto ptr_outX = _outX;
	ctx->Push(&ptr_outX);
	auto ptr_outY = _outY;
	ctx->Push(&ptr_outY);
	auto ptr_outZ = _outZ;
	ctx->Push(&ptr_outZ);
	auto ptr_outW = _outW;
	ctx->Push(&ptr_outW);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_outX = ptr_outX;
	_outY = ptr_outY;
	_outZ = ptr_outZ;
	_outW = ptr_outW;
}

uint8_t Native_isAreaOccupied(bool& success, float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, uint8_t _p6, uint8_t _p7, uint8_t _p8, uint8_t _p9, uint8_t _p10, int32_t _p11, uint8_t _p12) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA61B4DF533DCB56E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push((int32_t) _p6);
	ctx->Push((int32_t) _p7);
	ctx->Push((int32_t) _p8);
	ctx->Push((int32_t) _p9);
	ctx->Push((int32_t) _p10);
	ctx->Push(_p11);
	ctx->Push((int32_t) _p12);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isAreaOccupiedSlow(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8, int32_t _p9, int32_t _p10, int32_t _p11, int32_t _p12) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39455BF4F4F55186);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	ctx->Push(_p12);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPositionOccupied(bool& success, float _x, float _y, float _z, float _range, uint8_t _p4, uint8_t _checkVehicles, uint8_t _checkPeds, uint8_t _p7, uint8_t _p8, int32_t _ignoreEntity, uint8_t _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADCDE75E1C60F32D);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_range);
	ctx->Push((int32_t) _p4);
	ctx->Push((int32_t) _checkVehicles);
	ctx->Push((int32_t) _checkPeds);
	ctx->Push((int32_t) _p7);
	ctx->Push((int32_t) _p8);
	ctx->Push(_ignoreEntity);
	ctx->Push((int32_t) _p10);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPointObscuredByAMissionEntity(bool& success, float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE54E209C35FFA18D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_clearArea(bool& success, float _X, float _Y, float _Z, float _radius, uint8_t _p4, uint8_t _ignoreCopCars, uint8_t _ignoreObjects, uint8_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA56F01F3765B93A0);
	ctx->Reset();
	ctx->Push(_X);
	ctx->Push(_Y);
	ctx->Push(_Z);
	ctx->Push(_radius);
	ctx->Push((int32_t) _p4);
	ctx->Push((int32_t) _ignoreCopCars);
	ctx->Push((int32_t) _ignoreObjects);
	ctx->Push((int32_t) _p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearAreaLeaveVehicleHealth(bool& success, float _x, float _y, float _z, float _radius, uint8_t _p4, uint8_t _p5, uint8_t _p6, uint8_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x957838AAF91BD12D);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push((int32_t) _p4);
	ctx->Push((int32_t) _p5);
	ctx->Push((int32_t) _p6);
	ctx->Push((int32_t) _p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearAreaOfVehicles(bool& success, float _x, float _y, float _z, float _radius, uint8_t _p4, uint8_t _p5, uint8_t _p6, uint8_t _p7, uint8_t _p8, uint8_t _p9, int32_t _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01C7B9B38428AEB6);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push((int32_t) _p4);
	ctx->Push((int32_t) _p5);
	ctx->Push((int32_t) _p6);
	ctx->Push((int32_t) _p7);
	ctx->Push((int32_t) _p8);
	ctx->Push((int32_t) _p9);
	ctx->Push(_p10);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearAngledAreaOfVehicles(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _width, uint8_t _p7, uint8_t _p8, uint8_t _p9, uint8_t _p10, uint8_t _p11, int32_t _p12, int32_t _p13) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11DB3500F042A8AA);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_width);
	ctx->Push((int32_t) _p7);
	ctx->Push((int32_t) _p8);
	ctx->Push((int32_t) _p9);
	ctx->Push((int32_t) _p10);
	ctx->Push((int32_t) _p11);
	ctx->Push(_p12);
	ctx->Push(_p13);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearAreaOfObjects(bool& success, float _x, float _y, float _z, float _radius, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD9B9B385AAC7F5B);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearAreaOfPeds(bool& success, float _x, float _y, float _z, float _radius, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE31FD6CE464AC59);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearAreaOfCops(bool& success, float _x, float _y, float _z, float _radius, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x04F8FC8FCF58F88D);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearAreaOfProjectiles(bool& success, float _x, float _y, float _z, float _radius, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A1CB9094635D1A6);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearScenarioSpawnHistory(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EC6F9A478A6A512);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSaveMenuActive(bool& success, uint8_t _ignoreVehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC9BF75D28165FF77);
	ctx->Reset();
	ctx->Push((int32_t) _ignoreVehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getStatusOfManualSave(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x397BAA01068BAA96);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setCreditsActive(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB938B7E6D3C0620C);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCreditsFadeOutWithScreen(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB51B9AB9EF81868C);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_haveCreditsReachedEnd(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x075F1D57402C93BA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_terminateAllScriptsWithThisName(bool& success, const char* _scriptName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DC711BC69C548DF);
	ctx->Reset();
	ctx->Push(SaveString(_scriptName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetScriptIsSafeForNetworkGame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9243BAC96D64C050);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_addHospitalRestart(bool& success, float _x, float _y, float _z, float _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F464EF988465A81);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_disableHospitalRestart(bool& success, int32_t _hospitalIndex, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8535819C450EBA8);
	ctx->Reset();
	ctx->Push(_hospitalIndex);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_addPoliceRestart(bool& success, float _p0, float _p1, float _p2, float _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x452736765B31FC4B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_disablePoliceRestart(bool& success, int32_t _policeIndex, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23285DED6EBD7EA3);
	ctx->Reset();
	ctx->Push(_policeIndex);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRestartCoordOverride(bool& success, float _x, float _y, float _z, float _heading) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x706B5EDCAA7FA663);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearRestartCoordOverride(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2716D40842EAF79);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_pauseDeathArrestRestart(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C2B3493FBF51C71);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_ignoreNextRestart(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21FFB63D8C615361);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFadeOutAfterDeath(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A18E01DF2C87B86);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFadeOutAfterArrest(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E0B4DC0D990A4E7);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFadeInAfterDeathArrest(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA66D2796BA33F12);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFadeInAfterLoad(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3D78F59DFE18D79);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_registerSaveHouse(bool& success, float _x, float _y, float _z, float _p3, const char* _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0714D0A7EEECA54);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	ctx->Push(SaveString(_p4));
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setSaveHouse(bool& success, int32_t _savehouseHandle, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F548CABEAE553BC);
	ctx->Reset();
	ctx->Push(_savehouseHandle);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_overrideSaveHouse(bool& success, uint8_t _p0, float _p1, float _p2, float _p3, float _p4, uint8_t _p5, float _p6, float _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1162EA8AE9D24EEA);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push((int32_t) _p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getSaveHouseDetailsAfterSuccessfulLoad(bool& success, vector3_t& _p0, float& _p1, uint8_t& _fadeInAfterLoad, uint8_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA4A0065E39C9F25C);
	ctx->Reset();
	alt::INative::Vector3 converted_p0 { _p0.x, 0, _p0.y, 0, _p0.z };
	ctx->Push(&converted_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	auto ptr_fadeInAfterLoad = (int32_t) _fadeInAfterLoad;
	ctx->Push(&ptr_fadeInAfterLoad);
	auto ptr_p3 = (int32_t) _p3;
	ctx->Push(&ptr_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0.x = converted_p0.x;
	_p0.y = converted_p0.y;
	_p0.z = converted_p0.z;
	_p1 = ptr_p1;
	_fadeInAfterLoad = (bool) ptr_fadeInAfterLoad;
	_p3 = (bool) ptr_p3;
	return ctx->ResultBool();
}

void Native_doAutoSave(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50EEAAD86232EE55);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getIsAutoSaveOff(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E04F06094C87047);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isAutoSaveInProgress(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x69240733738C19A0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasCodeRequestedAutosave(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2107A3773771186D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_clearCodeRequestedAutosave(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06462A961E94B67C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_beginReplayStats(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE0E500246FF73D66);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addReplayStatValue(bool& success, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x69FE6DC87BD2A5E9);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_endReplayStats(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA23E821FBDF8A5F2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_haveReplayStatsBeenStored(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD642319C54AADEB6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getReplayStatMissionId(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B1F2E327B6B6FE1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getReplayStatMissionType(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B626A0150E4D449);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getReplayStatCount(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC9274A7EF6B2867);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getReplayStatAtIndex(bool& success, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8098C8D6597AAE18);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_clearReplayStats(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B1AB132A16FDA55);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_queueMissionRepeatLoad(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x72DE52178C291CB5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_queueMissionRepeatSave(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44A0BDC559B35F6E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_queueMissionRepeatSaveForBenchmarkTest(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB2104E905C6F2E9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getStatusOfMissionRepeatSave(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B5E102E4A42F2BF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isMemoryCardInUse(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A75CE2956274ADD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_shootSingleBulletBetweenCoords(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _damage, uint8_t _p7, uint32_t _weaponHash, int32_t _ownerPed, uint8_t _isAudible, uint8_t _isInvisible, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x867654CBC7606F2C);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_damage);
	ctx->Push((int32_t) _p7);
	ctx->Push(_weaponHash);
	ctx->Push(_ownerPed);
	ctx->Push((int32_t) _isAudible);
	ctx->Push((int32_t) _isInvisible);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_shootSingleBulletBetweenCoordsIgnoreEntity(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _damage, uint8_t _p7, uint32_t _weaponHash, int32_t _ownerPed, uint8_t _isAudible, uint8_t _isInvisible, float _speed, int32_t _entity, int32_t _p14) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3A7742E0B7A2F8B);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_damage);
	ctx->Push((int32_t) _p7);
	ctx->Push(_weaponHash);
	ctx->Push(_ownerPed);
	ctx->Push((int32_t) _isAudible);
	ctx->Push((int32_t) _isInvisible);
	ctx->Push(_speed);
	ctx->Push(_entity);
	ctx->Push(_p14);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_shootSingleBulletBetweenCoordsIgnoreEntityNew(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _damage, uint8_t _p7, uint32_t _weaponHash, int32_t _ownerPed, uint8_t _isAudible, uint8_t _isInvisible, float _speed, int32_t _entity, uint8_t _p14, uint8_t _p15, int32_t _targetEntity, uint8_t _p17, int32_t _p18, int32_t _p19, int32_t _p20) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBFE5756E7407064A);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_damage);
	ctx->Push((int32_t) _p7);
	ctx->Push(_weaponHash);
	ctx->Push(_ownerPed);
	ctx->Push((int32_t) _isAudible);
	ctx->Push((int32_t) _isInvisible);
	ctx->Push(_speed);
	ctx->Push(_entity);
	ctx->Push((int32_t) _p14);
	ctx->Push((int32_t) _p15);
	ctx->Push(_targetEntity);
	ctx->Push((int32_t) _p17);
	ctx->Push(_p18);
	ctx->Push(_p19);
	ctx->Push(_p20);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getModelDimensions(bool& success, uint32_t _modelHash, vector3_t& _minimum, vector3_t& _maximum) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x03E8D3D5F549087A);
	ctx->Reset();
	ctx->Push(_modelHash);
	alt::INative::Vector3 converted_minimum { _minimum.x, 0, _minimum.y, 0, _minimum.z };
	ctx->Push(&converted_minimum);
	alt::INative::Vector3 converted_maximum { _maximum.x, 0, _maximum.y, 0, _maximum.z };
	ctx->Push(&converted_maximum);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_minimum.x = converted_minimum.x;
	_minimum.y = converted_minimum.y;
	_minimum.z = converted_minimum.z;
	_maximum.x = converted_maximum.x;
	_maximum.y = converted_maximum.y;
	_maximum.z = converted_maximum.z;
}

void Native_setFakeWantedLevel(bool& success, int32_t _fakeWantedLevel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1454F2448DE30163);
	ctx->Reset();
	ctx->Push(_fakeWantedLevel);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getFakeWantedLevel(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C9296CBCD1B971E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_usingMissionCreator(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF14878FC50BEC6EE);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_allowMissionCreatorWarp(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDEA36202FC3382DF);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMinigameInProgress(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19E00D7322C6F85B);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isMinigameInProgress(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B4A15E44DE0F478);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isThisAMinigameScript(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7B30F65D7B710098);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isSniperInverted(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61A23B7EDA9BDA24);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_shouldUseMetricMeasurements(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3D15555431AB793);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getProfileSetting(bool& success, int32_t _profileSetting) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC488FF2356EA7791);
	ctx->Reset();
	ctx->Push(_profileSetting);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_areStringsEqual(bool& success, const char* _string1, const char* _string2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C515FAB3FF9EA92);
	ctx->Reset();
	ctx->Push(SaveString(_string1));
	ctx->Push(SaveString(_string2));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_compareStrings(bool& success, const char* _str1, const char* _str2, uint8_t _matchCase, int32_t _maxLength) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E34710ECD4AB0EB);
	ctx->Reset();
	ctx->Push(SaveString(_str1));
	ctx->Push(SaveString(_str2));
	ctx->Push((int32_t) _matchCase);
	ctx->Push(_maxLength);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_absi(bool& success, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0D31AD191A74F87);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

float Native_absf(bool& success, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x73D57CFFDD12C355);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

uint8_t Native_isSniperBulletInArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFEFCF11B01287125);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isProjectileInArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, uint8_t _ownedByPlayer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5270A8FBC098C3F8);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push((int32_t) _ownedByPlayer);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isProjectileTypeInArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _type, uint8_t _ownedByPlayer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E0DC353342C4A6D);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_type);
	ctx->Push((int32_t) _ownedByPlayer);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isProjectileTypeInAngledArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _width, int32_t _p7, uint8_t _ownedByPlayer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0BC12401061DEA0);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_width);
	ctx->Push(_p7);
	ctx->Push((int32_t) _ownedByPlayer);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isProjectileTypeWithinDistance(bool& success, float _x, float _y, float _z, uint32_t _projectileHash, float _radius, uint8_t _ownedByPlayer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34318593248C8FB2);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_projectileHash);
	ctx->Push(_radius);
	ctx->Push((int32_t) _ownedByPlayer);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getCoordsOfProjectileTypeInArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, uint32_t _projectileHash, vector3_t& _projectilePos, uint8_t _ownedByPlayer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D7A43EC6A5FEA45);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_projectileHash);
	alt::INative::Vector3 converted_projectilePos { _projectilePos.x, 0, _projectilePos.y, 0, _projectilePos.z };
	ctx->Push(&converted_projectilePos);
	ctx->Push((int32_t) _ownedByPlayer);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_projectilePos.x = converted_projectilePos.x;
	_projectilePos.y = converted_projectilePos.y;
	_projectilePos.z = converted_projectilePos.z;
	return ctx->ResultBool();
}

uint8_t Native_getCoordsOfProjectileTypeWithinDistance(bool& success, int32_t _ped, uint32_t _weaponHash, float _distance, vector3_t& _outCoords, uint8_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFB4138EEFED7B81);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_distance);
	alt::INative::Vector3 converted_outCoords { _outCoords.x, 0, _outCoords.y, 0, _outCoords.z };
	ctx->Push(&converted_outCoords);
	ctx->Push((int32_t) _p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outCoords.x = converted_outCoords.x;
	_outCoords.y = converted_outCoords.y;
	_outCoords.z = converted_outCoords.z;
	return ctx->ResultBool();
}

uint8_t Native_getProjectileOfProjectileTypeWithinDistance(bool& success, int32_t _ped, uint32_t _weaponHash, float _distance, vector3_t& _outCoords, int32_t& _outProjectile, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x82FDE6A57EE4EE44);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_distance);
	alt::INative::Vector3 converted_outCoords { _outCoords.x, 0, _outCoords.y, 0, _outCoords.z };
	ctx->Push(&converted_outCoords);
	auto ptr_outProjectile = _outProjectile;
	ctx->Push(&ptr_outProjectile);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outCoords.x = converted_outCoords.x;
	_outCoords.y = converted_outCoords.y;
	_outCoords.z = converted_outCoords.z;
	_outProjectile = ptr_outProjectile;
	return ctx->ResultBool();
}

uint8_t Native_isBulletInAngledArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _width, uint8_t _ownedByPlayer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A8B5F3C01E2B477);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_width);
	ctx->Push((int32_t) _ownedByPlayer);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isBulletInArea(bool& success, float _x, float _y, float _z, float _radius, uint8_t _ownedByPlayer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F2023999AD51C1F);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push((int32_t) _ownedByPlayer);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isBulletInBox(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, uint8_t _ownedByPlayer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE0F6D7450D37351);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push((int32_t) _ownedByPlayer);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasBulletImpactedInArea(bool& success, float _x, float _y, float _z, float _p3, uint8_t _p4, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9870ACFB89A90995);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	ctx->Push((int32_t) _p4);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasBulletImpactedInBox(bool& success, float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, uint8_t _p6, uint8_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC8C5D7CFEAB8394);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push((int32_t) _p6);
	ctx->Push((int32_t) _p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isOrbisVersion(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA72BC0B675B1519E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isDurangoVersion(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D982ADB1978442D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isXbox360Version(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6201B4DAF662A9D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPs3Version(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCCA1072C29D096C2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPcVersion(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48AF36444B965238);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isSteamVersion(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A27B2B6282F7169);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isAussieVersion(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F1935CA1F724008);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isJapaneseVersion(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8C0BB75D8A77DB3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isXboxPlatform(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x138679CA01E21F53);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isScarlettVersion(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC545AB1CF97ABB34);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isScePlatform(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF911E695C1EB8518);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isProsperoVersion(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x807ABE1AB65C24D2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isStringNull(bool& success, const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF22B6C47C6EAB066);
	ctx->Reset();
	ctx->Push(SaveString(_string));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isStringNullOrEmpty(bool& success, const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA042B6957743895);
	ctx->Reset();
	ctx->Push(SaveString(_string));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_stringToInt(bool& success, const char* _string, int32_t& _outInteger) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A5F40FE637EB584);
	ctx->Reset();
	ctx->Push(SaveString(_string));
	auto ptr_outInteger = _outInteger;
	ctx->Push(&ptr_outInteger);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outInteger = ptr_outInteger;
	return ctx->ResultBool();
}

void Native_setBitsInRange(bool& success, int32_t& _unkVar, int32_t _rangeStart, int32_t _rangeEnd, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8EF07E15701D61ED);
	ctx->Reset();
	auto ptr_unkVar = _unkVar;
	ctx->Push(&ptr_unkVar);
	ctx->Push(_rangeStart);
	ctx->Push(_rangeEnd);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_unkVar = ptr_unkVar;
}

int32_t Native_getBitsInRange(bool& success, int32_t _unkVar, int32_t _rangeStart, int32_t _rangeEnd) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53158863FCC0893A);
	ctx->Reset();
	ctx->Push(_unkVar);
	ctx->Push(_rangeStart);
	ctx->Push(_rangeEnd);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_addStuntJump(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _x3, float _y3, float _z3, float _x4, float _y4, float _z4, float _camX, float _camY, float _camZ, int32_t _p15, int32_t _p16, int32_t _p17) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A992DA297A4630C);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_x3);
	ctx->Push(_y3);
	ctx->Push(_z3);
	ctx->Push(_x4);
	ctx->Push(_y4);
	ctx->Push(_z4);
	ctx->Push(_camX);
	ctx->Push(_camY);
	ctx->Push(_camZ);
	ctx->Push(_p15);
	ctx->Push(_p16);
	ctx->Push(_p17);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_addStuntJumpAngled(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _radius1, float _x3, float _y3, float _z3, float _x4, float _y4, float _z4, float _radius2, float _camX, float _camY, float _camZ, int32_t _p17, int32_t _p18, int32_t _p19) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBBE5D803A5360CBF);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_radius1);
	ctx->Push(_x3);
	ctx->Push(_y3);
	ctx->Push(_z3);
	ctx->Push(_x4);
	ctx->Push(_y4);
	ctx->Push(_z4);
	ctx->Push(_radius2);
	ctx->Push(_camX);
	ctx->Push(_camY);
	ctx->Push(_camZ);
	ctx->Push(_p17);
	ctx->Push(_p18);
	ctx->Push(_p19);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_toggleShowOptionalStuntJumpCamera(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB80AB299D2EE1BD);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_deleteStuntJump(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC518000E39DAE1F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_enableStuntJumpSet(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE369A5783B866016);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableStuntJumpSet(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5272EBEDD4747F6);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setStuntJumpsCanTrigger(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD79185689F8FD5DF);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isStuntJumpInProgress(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A3F19700A4D0525);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isStuntJumpMessageShowing(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2272B0A1343129F4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getNumSuccessfulStuntJumps(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x996DD1E1E02F1008);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getTotalSuccessfulStuntJumps(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6856EC3D35C81EA4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_cancelStuntJump(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6B7B0ACD4E4B75E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGamePaused(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x577D1284D6873711);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setThisScriptCanBePaused(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA391C728106F7AF);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setThisScriptCanRemoveBlipsCreatedByAnyScript(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB98236CAAECEF897);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasCheatWithHashBeenActivated(bool& success, uint32_t _hash, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x071E2A839DE82D90);
	ctx->Reset();
	ctx->Push(_hash);
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasPcCheatWithHashBeenActivated(bool& success, uint32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x557E43C447E700A8);
	ctx->Reset();
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_overrideFreezeFlags(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA3FFB0EEBC288A3);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setInstancePriorityMode(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9BAE5AD2508DF078);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setInstancePriorityHint(bool& success, int32_t _flag) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5F0A8EBD3F361CE);
	ctx->Reset();
	ctx->Push(_flag);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isFrontendFading(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EA2B6AF97ECA6ED);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_populateNow(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7472BB270D7B4F3E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getIndexOfCurrentLevel(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCBAD6729F7B1F4FC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setGravityLevel(bool& success, int32_t _level) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x740E14FAD5842351);
	ctx->Reset();
	ctx->Push(_level);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_startSaveData(bool& success, int32_t& _p0, int32_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9575F812C6A7997);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
}

void Native_stopSaveData(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74E20C9145FB66FD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getSizeOfSaveData(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA09F896CE912481F);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_registerIntToSave(bool& success, int32_t& _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34C9EE5986258415);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
}

void Native_registerInt64ToSave(bool& success, int32_t& _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA735353C77334EA0);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
}

void Native_registerEnumToSave(bool& success, int32_t& _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x10C2FA78D0E128A1);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
}

void Native_registerFloatToSave(bool& success, int32_t& _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7CAEC29ECB5DFEBB);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
}

void Native_registerBoolToSave(bool& success, int32_t& _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8F4131414C835A1);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
}

void Native_registerTextLabelToSave(bool& success, int32_t& _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEDB1232C5BEAE62F);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
}

void Native_registerTextLabel15ToSave(bool& success, int32_t& _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F7794F28C6B2535);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
}

void Native_registerTextLabel23ToSave(bool& success, int32_t& _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48F069265A0E4BEC);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
}

void Native_registerTextLabel31ToSave(bool& success, int32_t& _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8269816F6CFD40F8);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
}

void Native_registerTextLabel63ToSave(bool& success, int32_t& _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFAA457EF263E8763);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
}

void Native_startSaveStructWithSize(bool& success, int32_t& _p0, int32_t _size, const char* _structName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF737600CDDBEADD);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(_size);
	ctx->Push(SaveString(_structName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
}

void Native_stopSaveStruct(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB1774DF12BB9F12);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_startSaveArrayWithSize(bool& success, int32_t& _p0, int32_t _size, const char* _arrayName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x60FE567DF1B1AF9D);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(_size);
	ctx->Push(SaveString(_arrayName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
}

void Native_stopSaveArray(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x04456F95153C6BE4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_copyScriptStruct(bool& success, int32_t& _dst, int32_t& _src, int32_t _size) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x213AEB2B90CBA7AC);
	ctx->Reset();
	auto ptr_dst = _dst;
	ctx->Push(&ptr_dst);
	auto ptr_src = _src;
	ctx->Push(&ptr_src);
	ctx->Push(_size);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_dst = ptr_dst;
	_src = ptr_src;
}

void Native_enableDispatchService(bool& success, int32_t _dispatchService, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC0F817884CDD856);
	ctx->Reset();
	ctx->Push(_dispatchService);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_blockDispatchServiceResourceCreation(bool& success, int32_t _dispatchService, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B2BD3773123EA2F);
	ctx->Reset();
	ctx->Push(_dispatchService);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getNumberResourcesAllocatedToWantedLevel(bool& success, int32_t _dispatchService) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB4A0C2D56441717);
	ctx->Reset();
	ctx->Push(_dispatchService);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_createIncident(bool& success, int32_t _dispatchService, float _x, float _y, float _z, int32_t _numUnits, float _radius, int32_t& _outIncidentID, int32_t _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F892CAF67444AE7);
	ctx->Reset();
	ctx->Push(_dispatchService);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_numUnits);
	ctx->Push(_radius);
	auto ptr_outIncidentID = _outIncidentID;
	ctx->Push(&ptr_outIncidentID);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outIncidentID = ptr_outIncidentID;
	return ctx->ResultBool();
}

uint8_t Native_createIncidentWithEntity(bool& success, int32_t _dispatchService, int32_t _ped, int32_t _numUnits, float _radius, int32_t& _outIncidentID, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x05983472F0494E60);
	ctx->Reset();
	ctx->Push(_dispatchService);
	ctx->Push(_ped);
	ctx->Push(_numUnits);
	ctx->Push(_radius);
	auto ptr_outIncidentID = _outIncidentID;
	ctx->Push(&ptr_outIncidentID);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outIncidentID = ptr_outIncidentID;
	return ctx->ResultBool();
}

void Native_deleteIncident(bool& success, int32_t _incidentId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x556C1AA270D5A207);
	ctx->Reset();
	ctx->Push(_incidentId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isIncidentValid(bool& success, int32_t _incidentId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8BC6461E629BEAA);
	ctx->Reset();
	ctx->Push(_incidentId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setIncidentRequestedUnits(bool& success, int32_t _incidentId, int32_t _dispatchService, int32_t _numUnits) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB08B85D860E7BA3C);
	ctx->Reset();
	ctx->Push(_incidentId);
	ctx->Push(_dispatchService);
	ctx->Push(_numUnits);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setIdealSpawnDistanceForIncident(bool& success, int32_t _incidentId, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD261BA3E7E998072);
	ctx->Reset();
	ctx->Push(_incidentId);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_findSpawnPointInDirection(bool& success, float _posX, float _posY, float _posZ, float _fwdVecX, float _fwdVecY, float _fwdVecZ, float _distance, vector3_t& _spawnPoint) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6874E2190B0C1972);
	ctx->Reset();
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_fwdVecX);
	ctx->Push(_fwdVecY);
	ctx->Push(_fwdVecZ);
	ctx->Push(_distance);
	alt::INative::Vector3 converted_spawnPoint { _spawnPoint.x, 0, _spawnPoint.y, 0, _spawnPoint.z };
	ctx->Push(&converted_spawnPoint);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_spawnPoint.x = converted_spawnPoint.x;
	_spawnPoint.y = converted_spawnPoint.y;
	_spawnPoint.z = converted_spawnPoint.z;
	return ctx->ResultBool();
}

int32_t Native_addPopMultiplierArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _p6, float _p7, uint8_t _p8, uint8_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x67F6413D3220E18D);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push((int32_t) _p8);
	ctx->Push((int32_t) _p9);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_doesPopMultiplierAreaExist(bool& success, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1327E2FE9746BAEE);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_removePopMultiplierArea(bool& success, int32_t _id, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB129E447A2EDA4BF);
	ctx->Reset();
	ctx->Push(_id);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPopMultiplierAreaNetworked(bool& success, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1312F4B242609CE3);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_addPopMultiplierSphere(bool& success, float _x, float _y, float _z, float _radius, float _pedMultiplier, float _vehicleMultiplier, uint8_t _p6, uint8_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x32C7A7E8C43A1F80);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_pedMultiplier);
	ctx->Push(_vehicleMultiplier);
	ctx->Push((int32_t) _p6);
	ctx->Push((int32_t) _p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_doesPopMultiplierSphereExist(bool& success, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x171BAFB3C60389F4);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_removePopMultiplierSphere(bool& success, int32_t _id, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6869BECDD8F2403);
	ctx->Reset();
	ctx->Push(_id);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_enableTennisMode(bool& success, int32_t _ped, uint8_t _toggle, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28A04B411933F8A6);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isTennisMode(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D5479D115290C3F);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_playTennisSwingAnim(bool& success, int32_t _ped, const char* _animDict, const char* _animName, float _p3, float _p4, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE266ED23311F24D4);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_animDict));
	ctx->Push(SaveString(_animName));
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getTennisSwingAnimComplete(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17DF68D720AA77F8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getTennisSwingAnimCanBeInterrupted(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19BFED045C647C49);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getTennisSwingAnimSwung(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE95B0C7D5BA3B96B);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_playTennisDiveAnim(bool& success, int32_t _ped, int32_t _p1, float _p2, float _p3, float _p4, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8FA9C42FC5D7C64B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTennisMoveNetworkSignalFloat(bool& success, int32_t _ped, const char* _p1, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x54F157E0336A3822);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_p1));
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetDispatchSpawnLocation(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5896F2BD5683A4E1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDispatchSpawnLocation(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD10F442036302D50);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetDispatchIdealSpawnDistance(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77A84429DD9F0A15);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDispatchIdealSpawnDistance(bool& success, float _distance) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6FE601A64180D423);
	ctx->Reset();
	ctx->Push(_distance);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetDispatchTimeBetweenSpawnAttempts(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB2DB0CAD13154B3);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDispatchTimeBetweenSpawnAttempts(bool& success, int32_t _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44F7CBC1BEB3327D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDispatchTimeBetweenSpawnAttemptsMultiplier(bool& success, int32_t _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48838ED9937A15D1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_addDispatchSpawnAngledBlockingArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _width) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x918C7B2D2FF3928B);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_width);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_addDispatchSpawnSphereBlockingArea(bool& success, float _x1, float _y1, float _x2, float _y2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D4259F1FEB81DA9);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_removeDispatchSpawnBlockingArea(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x264AC28B01B353A5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetDispatchSpawnBlockingAreas(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC7BFD5C1D83EA75);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetWantedResponseNumPedsToSpawn(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9F692D349249528);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setWantedResponseNumPedsToSpawn(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE532EC1A63231B4F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addTacticalNavMeshPoint(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8721407EE9C3FF6);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearTacticalNavMeshPoints(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3CD58CCA6CDA852);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRiotModeEnabled(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2587A48BC88DFADF);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_displayOnscreenKeyboardWithLongerInitialString(bool& success, int32_t _p0, const char* _windowTitle, int32_t& _p2, const char* _defaultText, const char* _defaultConcat1, const char* _defaultConcat2, const char* _defaultConcat3, const char* _defaultConcat4, const char* _defaultConcat5, const char* _defaultConcat6, const char* _defaultConcat7, int32_t _maxInputLength) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA78CFA0366592FE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(SaveString(_windowTitle));
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	ctx->Push(SaveString(_defaultText));
	ctx->Push(SaveString(_defaultConcat1));
	ctx->Push(SaveString(_defaultConcat2));
	ctx->Push(SaveString(_defaultConcat3));
	ctx->Push(SaveString(_defaultConcat4));
	ctx->Push(SaveString(_defaultConcat5));
	ctx->Push(SaveString(_defaultConcat6));
	ctx->Push(SaveString(_defaultConcat7));
	ctx->Push(_maxInputLength);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p2 = ptr_p2;
}

void Native_displayOnscreenKeyboard(bool& success, int32_t _p0, const char* _windowTitle, const char* _p2, const char* _defaultText, const char* _defaultConcat1, const char* _defaultConcat2, const char* _defaultConcat3, int32_t _maxInputLength) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x00DC833F2568DBF6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(SaveString(_windowTitle));
	ctx->Push(SaveString(_p2));
	ctx->Push(SaveString(_defaultText));
	ctx->Push(SaveString(_defaultConcat1));
	ctx->Push(SaveString(_defaultConcat2));
	ctx->Push(SaveString(_defaultConcat3));
	ctx->Push(_maxInputLength);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_updateOnscreenKeyboard(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0CF2B696BBF945AE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

const char* Native_getOnscreenKeyboardResult(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8362B09B91893647);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

void Native_cancelOnscreenKeyboard(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58A39BE597CE99CD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_nextOnscreenKeyboardResultWillDisplayUsingTheseFonts(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3ED1438C1F5C6612);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_actionManagerEnableAction(bool& success, uint32_t _hash, uint8_t _enable) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6A12939F16D85BE);
	ctx->Reset();
	ctx->Push(_hash);
	ctx->Push((int32_t) _enable);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getRealWorldTime(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F60413F5DF65748);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_supressRandomEventThisFrame(bool& success, int32_t _eventType, uint8_t _suppress) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1EAE0A6E978894A2);
	ctx->Reset();
	ctx->Push(_eventType);
	ctx->Push((int32_t) _suppress);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setExplosiveAmmoThisFrame(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA66C71C98D5F2CFB);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFireAmmoThisFrame(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11879CDD803D30F4);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setExplosiveMeleeThisFrame(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF1BED81BFDC0FE0);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSuperJumpThisFrame(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57FFF03E423A4C0B);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBeastJumpThisFrame(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x438822C279B73B93);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setForcedJumpThisFrame(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1183BCFEE0F93D1);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasGameInstalledThisSession(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6FDDF453C0C756EC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setTickerJohnmarstonIsDone(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB00CA71DA386228);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_areProfileSettingsValid(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5AA3BEFA29F03AD4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_preventArrestStateThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3D969D2785FFB5E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceGameStatePlaying(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0AA53F866B3134D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_scriptRaceInit(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A60017F841A54F2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_scriptRaceShutdown(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1FF6BF9A63E5757F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_scriptRacePlayerHitCheckpoint(bool& success, int32_t _player, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1BB299305C3E8C13);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_scriptRaceGetPlayerSplitTime(bool& success, int32_t _player, int32_t& _p1, int32_t& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8EF5573A1F801A5C);
	ctx->Reset();
	ctx->Push(_player);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p1 = ptr_p1;
	_p2 = ptr_p2;
	return ctx->ResultBool();
}

void Native_startEndUserBenchmark(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92790862E36C2ADA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopEndUserBenchmark(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7DB36C24634F52B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetEndUserBenchmark(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x437138B6A830166A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_saveEndUserBenchmark(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x37DEB0AA183FB6D8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_uiStartedEndUserBenchmark(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA2F2061875EED90);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_landingScreenStartedEndUserBenchmark(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3BBBD13E5041A79E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isCommandlineEndUserBenchmark(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA049A5BE0F04F2F8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getBenchmarkIterations(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4750FC27570311EC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getBenchmarkPass(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B2366C3F2A5C8DF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_restartGame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE574A662ACAEFBB1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_quitGame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB6891F03362FB12);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasAsyncInstallFinished(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14832BF2ABA53FC5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_cleanupAsyncInstall(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC79AE21974B01FB2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_plmIsInConstrainedMode(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x684A41975F077262);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_plmGetConstrainedDurationMs(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xABB2FA71C83A1B72);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPlayerIsInAnimalForm(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4EBB7E87AA0DBED4);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getIsPlayerInAnimalForm(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9689123E3F213AA5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPlayerIsRepeatingAMission(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D8D44ADBBA61EF2);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableScreenDimmingThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23227DF0B2115469);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getCityDensity(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD10282B6E3751BA0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_useActiveCameraForTimeslicingCentre(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x693478ACBD7F18E7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setContentIdIndex(bool& success, uint32_t _contentId, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4B82FA6F2D624634);
	ctx->Reset();
	ctx->Push(_contentId);
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getContentIdIndex(bool& success, uint32_t _contentId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xECF041186C5A94DC);
	ctx->Reset();
	ctx->Push(_contentId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_createMobilePhone(bool& success, int32_t _phoneType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA4E8E696C532FBC7);
	ctx->Reset();
	ctx->Push(_phoneType);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_destroyMobilePhone(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3BC861DF703E5097);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMobilePhoneScale(bool& success, float _scale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCBDD322A73D6D932);
	ctx->Reset();
	ctx->Push(_scale);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMobilePhoneRotation(bool& success, float _rotX, float _rotY, float _rotZ, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB779C0CA917E865);
	ctx->Reset();
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getMobilePhoneRotation(bool& success, vector3_t& _rotation, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CEFB61F193070AE);
	ctx->Reset();
	alt::INative::Vector3 converted_rotation { _rotation.x, 0, _rotation.y, 0, _rotation.z };
	ctx->Push(&converted_rotation);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_rotation.x = converted_rotation.x;
	_rotation.y = converted_rotation.y;
	_rotation.z = converted_rotation.z;
}

void Native_setMobilePhonePosition(bool& success, float _posX, float _posY, float _posZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x693A5C6D6734085B);
	ctx->Reset();
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getMobilePhonePosition(bool& success, vector3_t& _position) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x584FDFDA48805B86);
	ctx->Reset();
	alt::INative::Vector3 converted_position { _position.x, 0, _position.y, 0, _position.z };
	ctx->Push(&converted_position);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_position.x = converted_position.x;
	_position.y = converted_position.y;
	_position.z = converted_position.z;
}

void Native_scriptIsMovingMobilePhoneOffscreen(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF511F759238A5122);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_canPhoneBeSeenOnScreen(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC4E2813898C97A4B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setMobilePhoneDofState(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x375A706A5C2FD084);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cellSetInput(bool& success, int32_t _direction) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95C9E72F3D7DEC9B);
	ctx->Reset();
	ctx->Push(_direction);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cellHorizontalModeToggle(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44E44169EF70138E);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cellCamActivate(bool& success, uint8_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFDE8F069C542D126);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cellCamActivateSelfieMode(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x015C49A93E3E086E);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cellCamActivateShallowDofMode(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2CCBE62CD4C91A4);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cellCamSetSelfieModeSideOffsetScaling(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B0B4AEED5B9B41C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cellCamSetSelfieModeHorzPanOffset(bool& success, float _horizontalPan) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53F4892D18EC90A4);
	ctx->Reset();
	ctx->Push(_horizontalPan);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cellCamSetSelfieModeVertPanOffset(bool& success, float _vertPan) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3117D84EFA60F77B);
	ctx->Reset();
	ctx->Push(_vertPan);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cellCamSetSelfieModeRollOffset(bool& success, float _roll) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15E69E2802C24B8D);
	ctx->Reset();
	ctx->Push(_roll);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cellCamSetSelfieModeDistanceScaling(bool& success, float _distanceScaling) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC2890471901861C);
	ctx->Reset();
	ctx->Push(_distanceScaling);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cellCamSetSelfieModeHeadYawOffset(bool& success, float _yaw) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD6ADE981781FCA09);
	ctx->Reset();
	ctx->Push(_yaw);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cellCamSetSelfieModeHeadRollOffset(bool& success, float _roll) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1E22DC13F5EEBAD);
	ctx->Reset();
	ctx->Push(_roll);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cellCamSetSelfieModeHeadPitchOffset(bool& success, float _pitch) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x466DA42C89865553);
	ctx->Reset();
	ctx->Push(_pitch);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_cellCamIsCharVisibleNoFaceCheck(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x439E9BC95B7E7FBE);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_getMobilePhoneRenderId(bool& success, int32_t& _renderId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4A53E05F68B6FA1);
	ctx->Reset();
	auto ptr_renderId = _renderId;
	ctx->Push(&ptr_renderId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_renderId = ptr_renderId;
}

void Native_networkInitializeCash(bool& success, int32_t _wallet, int32_t _bank) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3DA5ECD1A56CBA6D);
	ctx->Reset();
	ctx->Push(_wallet);
	ctx->Push(_bank);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkDeleteCharacter(bool& success, int32_t _characterSlot, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x05A50AF38947EB8D);
	ctx->Reset();
	ctx->Push(_characterSlot);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkManualDeleteCharacter(bool& success, int32_t _characterSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x821418C727FCACD7);
	ctx->Reset();
	ctx->Push(_characterSlot);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkGetPlayerIsHighEarner(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB2456B2040A6A67);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkClearCharacterWallet(bool& success, int32_t _characterSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA921DED15FDF28F5);
	ctx->Reset();
	ctx->Push(_characterSlot);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkGivePlayerJobshareCash(bool& success, int32_t _amount, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB18DF9CB95E0105);
	ctx->Reset();
	ctx->Push(_amount);
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
}

void Native_networkReceivePlayerJobshareCash(bool& success, int32_t _value, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x56A3B51944C50598);
	ctx->Reset();
	ctx->Push(_value);
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
}

uint8_t Native_networkCanShareJobCash(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C2473301B1C66BA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkRefundCash(bool& success, int32_t _index, const char* _context, const char* _reason, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9C812CD7C46E817);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push(SaveString(_context));
	ctx->Push(SaveString(_reason));
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkDeductCash(bool& success, int32_t _amount, const char* _p1, const char* _p2, uint8_t _p3, uint8_t _p4, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x18B7AE224B087E26);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(SaveString(_p1));
	ctx->Push(SaveString(_p2));
	ctx->Push((int32_t) _p3);
	ctx->Push((int32_t) _p4);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkMoneyCanBet(bool& success, int32_t _amount, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x81404F3DC124FE5B);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkCanBet(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A54E33660DED67F);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkCasinoCanBet(bool& success, uint32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x158C16F5E4CF41F8);
	ctx->Reset();
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkCasinoCanBetPvc(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x394DCDB9E836B7A9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkCasinoCanBetAmount(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF62F6D9528358FE4);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkCasinoCanBuyChipsPvc(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8968D4D8C6C40C11);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkCasinoBuyChips(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3BD101471C7F9EEC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkCasinoSellChips(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED44897CB336F480);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkDeferCashTransactionsUntilShopSave(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD0F5B5D932AE473);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_canPayAmountToBoss(bool& success, int32_t _p0, int32_t _p1, int32_t _amount, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9777734DAD16992F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_amount);
	auto ptr_p3 = _p3;
	ctx->Push(&ptr_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p3 = ptr_p3;
	return ctx->ResultBool();
}

void Native_networkEarnFromPickup(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED1517D3AF17C698);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromGangattackPickup(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA03D4ACE0A3284CE);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnAssassinateTargetKilled(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA700D8A9905F78A);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromRobArmoredCars(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF514621E8EA463D0);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromCrateDrop(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1CC1B9EC3007A2A);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromBetting(bool& success, int32_t _amount, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x827A5BA1A44ACA6D);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(SaveString(_p1));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromJob(bool& success, int32_t _amount, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2CC4836834E8A98);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(SaveString(_p1));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromJobx2(bool& success, int32_t _amount, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDEBBF584665411D0);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(SaveString(_p1));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromPremiumJob(bool& success, int32_t _amount, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8407624CEF2354B);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(SaveString(_p1));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromBendJob(bool& success, int32_t _amount, const char* _heistHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61326EE6DF15B0CA);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(SaveString(_heistHash));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromChallengeWin(bool& success, int32_t _p0, int32_t& _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B171E6B2F64D8DF);
	ctx->Reset();
	ctx->Push(_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p1 = ptr_p1;
}

void Native_networkEarnFromBounty(bool& success, int32_t _amount, int32_t& _gamerHandle, int32_t& _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x131BB5DA15453ACF);
	ctx->Reset();
	ctx->Push(_amount);
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	_p2 = ptr_p2;
}

void Native_networkEarnFromImportExport(bool& success, int32_t _amount, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF92A014A634442D6);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromHoldups(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45B8154E077D9E4D);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromProperty(bool& success, int32_t _amount, uint32_t _propertyName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x849648349D77F5C5);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_propertyName);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromAiTargetKill(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x515B4A22E4D3C6D7);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromNotBadsport(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4337511FA8221D36);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromRockstar(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02CE1D6AC0FC73EA);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromVehicle(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB539BD8A4C1EECF8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromPersonalVehicle(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F4D00167E41E0AD);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromDailyObjectives(bool& success, int32_t _amount, const char* _type, int32_t _characterSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6EA318C91C1A8786);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(SaveString(_type));
	ctx->Push(_characterSlot);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromAmbientJob(bool& success, int32_t _p0, const char* _p1, int32_t& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB6DB092FBAE29E6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(SaveString(_p1));
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p2 = ptr_p2;
}

void Native_networkEarnFromJobBonus(bool& success, int32_t _p0, int32_t& _p1, int32_t& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6816FB4416760775);
	ctx->Reset();
	ctx->Push(_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p1 = ptr_p1;
	_p2 = ptr_p2;
}

void Native_networkEarnHeistAward(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D4FDBB035229669);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFirstTimeBonus(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11B0A20C493F7E36);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnGoon(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCDA1C62BE2777802);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnBoss(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x08B0CA7A6AB3AC32);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnAgency(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0CB1BE0633C024A8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromWarehouse(bool& success, int32_t _amount, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E4ADAFF1830F146);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromContraband(bool& success, int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xECA658CE2A4E5A72);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromDestroyingContraband(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84C0116D012E8FC2);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromSmugglerWork(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B7E4FB50D5F3D65);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromHangarTrade(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x31BA138F6304FB9F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnPurchaseClubHouse(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55A1E095DB052FA5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromBusinessProduct(bool& success, int32_t _amount, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8586789730B10CAF);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromVehicleExport(bool& success, int32_t _amount, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEDEAD9A91EC768B3);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnSmugglerAgency(bool& success, int32_t _amount, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDEE612F2D71B0308);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnBountyHunterReward(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6B170F9A02E9E87);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromBusinessBattle(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42FCE14F50F27291);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromClubManagementParticipation(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA75EAC69F59E96E7);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromFmbbPhonecallMission(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5156361F26E2212);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromBusinessHubSell(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0B39CF0D53F1C883);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromFmbbBossWork(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1FDA0AA679C9919B);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFmbbWageBonus(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFFFBA1B1F7C0B6F4);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkCanSpendMoney(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2, uint8_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAB3CAA6B422164DA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkCanSpendMoney2(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2, uint8_t _p3, int32_t& _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7303E27CC6532080);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	auto ptr_p4 = _p4;
	ctx->Push(&ptr_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p4 = ptr_p4;
	return ctx->ResultBool();
}

void Native_networkBuyItem(bool& success, int32_t _amount, uint32_t _item, int32_t _p2, int32_t _p3, uint8_t _p4, const char* _item_name, int32_t _p6, int32_t _p7, int32_t _p8, uint8_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0077C797F66A355);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_item);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push((int32_t) _p4);
	ctx->Push(SaveString(_item_name));
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push((int32_t) _p9);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentTaxi(bool& success, int32_t _amount, uint8_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17C3A7D31EAE39F9);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkPayEmployeeWage(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FD5ED82CBBE9989);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkPayMatchEntryFee(bool& success, int32_t _amount, const char* _matchId, uint8_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9346E14F2AF74D46);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(SaveString(_matchId));
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentBetting(bool& success, int32_t _amount, int32_t _p1, const char* _matchId, uint8_t _p3, uint8_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C436FD11FFA692F);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(SaveString(_matchId));
	ctx->Push((int32_t) _p3);
	ctx->Push((int32_t) _p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentWager(bool& success, int32_t _p0, int32_t _p1, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD99DB210089617FE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentInStripclub(bool& success, int32_t _p0, uint8_t _p1, int32_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE99784E4467689C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push(_p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkBuyHealthcare(bool& success, int32_t _cost, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9B067E55253E3DD);
	ctx->Reset();
	ctx->Push(_cost);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkBuyAirstrike(bool& success, int32_t _cost, uint8_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x763B4BD305338F19);
	ctx->Reset();
	ctx->Push(_cost);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkBuyBackupGang(bool& success, int32_t _p0, int32_t _p1, uint8_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA3EDDAA42411D3B9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkBuyHeliStrike(bool& success, int32_t _cost, uint8_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x81AA4610E3FD3A69);
	ctx->Reset();
	ctx->Push(_cost);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentAmmoDrop(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB162DC95C0A3317B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkBuyBounty(bool& success, int32_t _amount, int32_t _victim, uint8_t _p2, uint8_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7B718E197453F2D9);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_victim);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkBuyProperty(bool& success, int32_t _cost, uint32_t _propertyName, uint8_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x650A08A280870AF6);
	ctx->Reset();
	ctx->Push(_cost);
	ctx->Push(_propertyName);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkBuySmokes(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75AF80E61248EEBD);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentHeliPickup(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7BF1D73DB2ECA492);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentBoatPickup(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x524EE43A37232C00);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentBullShark(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6DD8458CE24012C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentCashDrop(bool& success, int32_t _amount, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x289016EC778D60E0);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentHireMugger(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE404BFB981665BF0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentRobbedByMugger(bool& success, int32_t _amount, uint8_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x995A65F15F581359);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentHireMercenary(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE7B80E2BF9D80BD6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentBuyWantedlevel(bool& success, int32_t _p0, int32_t& _p1, uint8_t _p2, uint8_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE1B13771A843C4F6);
	ctx->Reset();
	ctx->Push(_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p1 = ptr_p1;
}

void Native_networkSpentBuyOfftheradar(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA628A745E2275C5D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentBuyRevealPlayers(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E176F1B18BC0637);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentCarwash(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, uint8_t _p3, uint8_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC03C719DB2F4306);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push((int32_t) _p3);
	ctx->Push((int32_t) _p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentCinema(bool& success, int32_t _p0, int32_t _p1, uint8_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B38ECB05A63A685);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentTelescope(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FE61782AD94CC09);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentHoldups(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9B86B9872039763);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentBuyPassiveMode(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D3A430D1A809179);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentBankInterest(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA230C9682556CF1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentProstitutes(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB21B89501CFAC79E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentArrestBail(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x812F5488B1B2A299);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentPayVehicleInsurancePremium(bool& success, int32_t _amount, uint32_t _vehicleModel, int32_t& _gamerHandle, uint8_t _notBankrupt, uint8_t _hasTheMoney) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9FF28D88C766E3E8);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_vehicleModel);
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	ctx->Push((int32_t) _notBankrupt);
	ctx->Push((int32_t) _hasTheMoney);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
}

void Native_networkSpentCallPlayer(bool& success, int32_t _p0, int32_t& _p1, uint8_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xACDE7185B374177C);
	ctx->Reset();
	ctx->Push(_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p1 = ptr_p1;
}

void Native_networkSpentBounty(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29B260B84947DFCC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentFromRockstar(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A445B64ED7ABEB5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_networkSpendEarnedFromBankAndWallets(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B5016A6433A68C5);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

const char* Native_processCashGift(bool& success, int32_t& _p0, int32_t& _p1, const char* _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20194D48EAEC9A41);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	ctx->Push(SaveString(_p2));
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	_p0 = ptr_p0;
	_p1 = ptr_p1;
	return AllocateString(ctx->ResultString());
}

void Native_networkSpentPlayerHealthcare(bool& success, int32_t _p0, int32_t _p1, uint8_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C99101F7FCE2EE5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentNoCops(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD5BB406F4E04019F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentCargoSourcing(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x948705F6F9C50824);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentRequestJob(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8204DA7934DF3155);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentRequestHeist(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D26502BB97BFE62);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkBuyFairgroundRide(bool& success, int32_t _amount, int32_t _p1, uint8_t _p2, uint8_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A7B3952DD64D2B5);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkEconomyHasFixedCrazyNumbers(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C4FCCD2E4DEB394);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkSpentJobSkip(bool& success, int32_t _amount, const char* _matchId, uint8_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28F174A67B8D0C2F);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(SaveString(_matchId));
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkSpentBossGoon(bool& success, int32_t _amount, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFFBE02CD385356BD);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkSpendGoon(bool& success, int32_t _p0, int32_t _p1, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x08A1B82B91900682);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendBoss(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDBC966A01C02BCA7);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentMoveYacht(bool& success, int32_t _amount, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE7DF4E0545DFB56E);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentRenameOrganization(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC4EE00A7B3BFB76);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkBuyContrabandMission(bool& success, int32_t _p0, int32_t _p1, uint32_t _p2, uint8_t _p3, uint8_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x30FD873ECE50E9F6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push((int32_t) _p3);
	ctx->Push((int32_t) _p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentPaServiceHeli(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x112209CE0290C03A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentPaServiceVehicle(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED5FD7AF10F5E262);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentPaServiceSnack(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0D30EB83668E63C5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentPaServiceDancer(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB49ECA122467D05F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentPaServiceImpound(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE23ADC6FCB1F29AE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentPaHeliPickup(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0FE8E1FCD2B86B33);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentPurchaseOfficeProperty(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x69EF772B192614C1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentUpgradeOfficeProperty(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8E243837643D9583);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentPurchaseWarehouseProperty(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD0EFB25CCA8F97A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentUpgradeWarehouseProperty(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA95F667A755725DA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentPurchaseImpexpWarehouseProperty(bool& success, int32_t _amount, int32_t& _data, uint8_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33981D6804E62F49);
	ctx->Reset();
	ctx->Push(_amount);
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_data = ptr_data;
}

void Native_networkSpentUpgradeImpexpWarehouseProperty(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4128464231E3CA0B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentTradeImpexpWarehouseProperty(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FAB6614CE22E196);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentOrderWarehouseVehicle(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x05F04155A226FBBF);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentOrderBodyguardVehicle(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE8B0B270B6E7C76E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentJukebox(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BCDE0F640C773D2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentPurchaseClubHouse(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x998E18CEB44487FC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentUpgradeClubHouse(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA07759E6FDDD7CF);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentPurchaseBusinessProperty(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6FD97159FE3C971A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentUpgradeBusinessProperty(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x675D19C6067CAE08);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentTradeBusinessProperty(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA51B086B0B2C0F7A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentMcAbility(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7CCCBA28C4ECAF0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentPayBusinessSupplies(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0035BB914316F1E3);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentChangeAppearance(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F456788B05FAEAC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentVehicleExportMods(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA75CCF58A60A5FD1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentPurchaseOfficeGarage(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4C2EC463672474E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentUpgradeOfficeGarage(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2AFC2D19B50797F2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentImportExportRepair(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC1952F3773BA18FE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentPurchaseHangar(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCCB339CC970452DA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentUpgradeHangar(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x615EB504B0788DAF);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentHangarUtilityCharges(bool& success, int32_t _amount, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB18AC2ECBB15CB6A);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentHangarStaffCharges(bool& success, int32_t _amount, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1F1346FD57685D7);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentBuyTruck(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC272C0AE01B4BD8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentUpgradeTruck(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x365E877C61D6988B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentBuyBunker(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x12D148D26538D0F9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentUpradeBunker(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C82D21A77C22D49);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromSellBunker(bool& success, int32_t _amount, uint32_t _bunkerHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9251B6ABF2D0A5B4);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_bunkerHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentBallisticEquipment(bool& success, int32_t _amount, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D97630A8A0EF123);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnRdrBonus(bool& success, int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A5349B773584675);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnWagePayment(bool& success, int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35F8DA0E8A31EF1B);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnWagePaymentBonus(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x005ACA7100BD101D);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentBuyBase(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4EA3F425C7744D21);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentUpgradeBase(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3DD3F33A5D55EA6F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentBuyTiltrotor(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0CCE73BC7A11E885);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentUpgradeTiltrotor(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x165E135D6DFA2907);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentEmployAssassins(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BBBD92186E1F1C5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendGangopsCannon(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x771ADB0E7635B7BF);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendGangopsSkipMission(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA947AE8880D5C18);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendCasinoHeistSkipMission(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x487009DD91D93429);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnSellBase(bool& success, int32_t _amount, uint32_t _baseNameHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0E1E2FF3F4EC11AA);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_baseNameHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnTargetRefund(bool& success, int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B669CF2299A271F);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnGangopsWages(bool& success, int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DCB19ABAB0380A8);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnGangopsWagesBonus(bool& success, int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15BB2A5C757EB91F);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnDarChallenge(bool& success, int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCAC672087B4A24AB);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnDoomsdayFinaleBonus(bool& success, int32_t _amount, uint32_t _vehicleHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x128A747F4A230952);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_vehicleHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnGangopsAward(bool& success, int32_t _amount, const char* _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9A31475F530DFDA);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(SaveString(_p1));
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnGangopsElite(bool& success, int32_t _amount, const char* _p1, int32_t _actIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2597A0D4A4FC2C77);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(SaveString(_p1));
	ctx->Push(_actIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkServiceEarnGangopsRivalDelivery(bool& success, int32_t _earnedMoney) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B882107C23A9022);
	ctx->Reset();
	ctx->Push(_earnedMoney);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendGangopsStartStrand(bool& success, int32_t _type, int32_t _amount, uint8_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA19EC0786E326E06);
	ctx->Reset();
	ctx->Push(_type);
	ctx->Push(_amount);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendGangopsTripSkip(bool& success, int32_t _amount, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5ECE6FD7B4EC8D6A);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnGangopsPrepParticipation(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED26584F6BDCBBFD);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnGangopsSetup(bool& success, int32_t _amount, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9160796D47A2CF8);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(SaveString(_p1));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnGangopsFinale(bool& success, int32_t _amount, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C121FC9545E0D52);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(SaveString(_p1));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendGangopsRepairCost(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A7CEC72C3443BCC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnNightclub(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE0F82D68C7039158);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnNightclubDancing(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4DEAE67F35E2ACD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnBbEventBonus(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFDD8D2440DAF1590);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentPurchaseHackerTruck(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A93C46AAB1EACC9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentUpgradeHackerTruck(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x226C284C830D0CA8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnHackerTruck(bool& success, int32_t _p0, int32_t _amount, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE8815FE993896AD3);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_amount);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentPurchaseNightclubAndWarehouse(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED76D195E6E3BF7F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentUpgradeNightclubAndWarehouse(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DC9B749E7AE282B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnNightclubAndWarehouse(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6E74CF8C884C880);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendNightclubAndWarehouse(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x65482BFD0923C8A1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentRdrHatchetBonus(bool& success, int32_t _amount, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE284D46FFDB82E36);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentNightclubEntryFee(bool& success, int32_t _player, int32_t _amount, int32_t _p1, uint8_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x876056684281655D);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendNightclubBarDrink(bool& success, int32_t _amount, int32_t _p1, uint8_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD21B016E4289465);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendBountyHunterMission(bool& success, int32_t _amount, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1BEA0CD93470BB1F);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentRehireDj(bool& success, int32_t _amount, int32_t _p1, uint8_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6C8A544E4CF14FC);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpentArenaJoinSpectator(bool& success, int32_t _amount, int32_t _p1, uint8_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14EAEA58F93B55AF);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnArenaSkillLevelProgression(bool& success, int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE08256F972C7BB2C);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnArenaCareerProgression(bool& success, int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F99F70C61F14619);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendMakeItRain(bool& success, int32_t _amount, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE5F5A060439C2F5D);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendBuyArena(bool& success, int32_t _amount, uint8_t _p1, uint8_t _p2, const char* _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x40D5DA9550B7CB46);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(SaveString(_p3));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendUpgradeArena(bool& success, int32_t _amount, uint8_t _p1, uint8_t _p2, const char* _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x037ABB06825D7AB1);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(SaveString(_p3));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendArenaSpectatorBox(bool& success, int32_t _amount, int32_t _type, uint8_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7049BF858601DC0F);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_type);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendSpinTheWheelPayment(bool& success, int32_t _amount, int32_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A5BD1D0000B339C);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnSpinTheWheelCash(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x676C48776CACBB5A);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendArenaPremium(bool& success, int32_t _amount, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x619496D837EFD920);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnArenaWar(bool& success, int32_t _amount, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x631F1CB8FB4130AA);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnArenaWarAssassinateTarget(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E7AE8AABE8B7C0D);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnArenaWarEventCargo(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA82959062361B259);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnRcTimeTrial(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFF49EE984E7AAE8);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnDailyObjectiveEvent(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5128DF14A5BB86FC);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendCasinoMembership(bool& success, int32_t _amount, uint8_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFBBE0570EDF39D46);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendBuyCasino(bool& success, int32_t _amount, uint8_t _p1, uint8_t _p2, int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34A6FC4D06C4DA0F);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_data = ptr_data;
}

void Native_networkSpendUpgradeCasino(bool& success, int32_t _amount, uint8_t _p1, uint8_t _p2, int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4740D62BC1B4EBEA);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_data = ptr_data;
}

void Native_networkSpendCasinoGeneric(bool& success, int32_t _amount, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88BF9B612B84D3C3);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnCasinoTimeTrialWin(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0819DB99FD2FBBD8);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnCollectablesActionFigures(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5517F90043466049);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnCasinoCollectableCompletedCollection(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83AD64F53F4E9483);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnSellPrizeVehicle(bool& success, int32_t _amount, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8BCB27A057DF7B7F);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnCasinoMissionReward(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x566FD402B25787DE);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnCasinoStoryMissionReward(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC95ED552157E092);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnCasinoMissionParticipation(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x09E8F18641BE2575);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnCasinoAward(bool& success, int32_t _amount, uint32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x973A9781A34F8DEB);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendBuyArcade(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x870289A558348378);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendUpgradeArcade(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5574637681911FDA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendCasinoHeist(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8, int32_t _p9, int32_t _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD30E8392F407C328);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendArcadeMgmt(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5B58E24868CB09E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendPlayArcade(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEAD3D81F2C3A1458);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendArcade(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43AA7FAC4E6D6687);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnCasinoHeist(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x72E7C7B9615FA3C3);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnUpgradeArcade(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C3B75694F7E0D9C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnArcade(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD29334ED1A256DBF);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnCollectables(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA95CFB4E02390842);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnChallenge(bool& success, int32_t _amount, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0DD362F14F18942A);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnCasinoHeistAwards(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3EC7471E6909798A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnCollectableItem(bool& success, int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84FF63BD4966F33D);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnCollectableCompletedCollection(bool& success, int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C9B198AF5A54FA6);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnYatchMission(bool& success, int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE68E30D89F97132);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnDispatchCall(bool& success, int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE2E244AB823B4483);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendBeachParty(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x54ABA22FA6371249);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendSubmarine(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C8BC1488527AAAB);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendCasinoClub(bool& success, int32_t _amount1, int32_t _p1, uint8_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _amount2, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC991C255AA6D90B2);
	ctx->Reset();
	ctx->Push(_amount1);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_amount2);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendBuySub(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90CD7C6871FBF1B4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendUpgradeSub(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x89049A84065CE68E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendIslandHeist(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE86689E5F82DE429);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnIslandHeist(bool& success, int32_t _amount1, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _amount2, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD21D111C46BA9F15);
	ctx->Reset();
	ctx->Push(_amount1);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_amount2);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnBeachPartyLostFound(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA51338E0DCCD4065);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFromIslandHeistDjMission(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE2BB399D90942091);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendCarClubMembership(bool& success, int32_t _amount1, int32_t _p1, int32_t _p2, int32_t _amount2, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1464E17207CD36E2);
	ctx->Reset();
	ctx->Push(_amount1);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_amount2);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendCarClubBar(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x925227803A0EAA1B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendAutoshopModify(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9BEA350D7C48061B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendCarClubTakeover(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1E46824E6FB92B5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendBuyAutoshop(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEEB7E5D1FEB20869);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendUpgradeAutoshop(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD829AA198FDC46C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnAutoshopBusiness(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36A7FD5A7194B03E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnAutoshopIncome(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC66D1CF99ED7FE25);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnCarclubMembership(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC6227792A188E2E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnDailyVehicle(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x533073E8A596008C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnDailyVehicleBonus(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFE65AFE7308E32B2);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnTunerAward(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB846F547D3792DF6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnTunerRobbery(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBCB266247193AC61);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnUpgradeAutoshop(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC10322A8D3E061EE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendInteractionMenuAbility(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93AA4165CB67E925);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendSetCommonFields(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9F7A469460E7A4A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendSetDiscount(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7E2F4E8F44CAF4E0);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendBuyAgency(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA8CD3C9B3C35884);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendUpgradeAgency(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6CCA64840589A3B6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendAgency(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B2120405080125C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendHidden(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF8793B91EA094A7);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendSourceBike(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9DF467CBE4398C8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendCompSuv(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD86581F9E7CDA383);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendSuvFstTrvl(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61A2DF64ED2D396E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendSupply(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEBD482B82ACB8BAD);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendBikeShop(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x923AEA8E78F8DF0B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendVehicleRequested(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02D24A35A9CC3503);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendGunrunning(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2CEB0E0BC2A77C05);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnAgencySafe(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x663B4B9D11742A12);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnAwardContract(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x146D4EB6D22A403F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnAgencyContract(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x38482AD49CB905C7);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnAwardPhone(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7397A115030F1BE3);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnAgencyPhone(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE29F3D5FA63B1B82);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnAwardFixerMission(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88D6C327D6C57C45);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFixerPrep(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6283E5DE4C4460C6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFixerFinale(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA154373C5FE51E8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFixerAgencyShortTrip(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF4A8E57460BF2037);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnAwardShortTrip(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B4DBDED84D6A420);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnFixerRivalDelivery(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x235D41210B3A1A5E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnUpgradeAgency(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD07C7C3F1995108C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSpendApartmentUtilities(bool& success, int32_t _amount, uint8_t _p1, uint8_t _p2, int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1254B5B3925EFD3D);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_data = ptr_data;
}

void Native_networkSpendBusinessPropertyFees(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92D1CFDA1227FF1C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnSightseeingReward(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45087AE480B233AC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnBikerShop(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C5809EB9DF57257);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEarnBiker(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71BEC32FA466E105);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkYohanSourceGoods(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x59498BC8B1C8B15C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_networkGetVcBankBalance(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x76EF28DA05EA395A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkGetVcWalletBalance(bool& success, int32_t _characterSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA40F9C2623F6A8B5);
	ctx->Reset();
	ctx->Push(_characterSlot);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkGetVcBalance(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CBAD97E059E1B94);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkGetEvcBalance(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D1E75F91C07DEE5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkGetPvcBalance(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F54F3B6C202FB4E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

const char* Native_networkGetStringWalletBalance(bool& success, int32_t _characterSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9B10B529DCFB33B);
	ctx->Reset();
	ctx->Push(_characterSlot);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

const char* Native_networkGetStringBankBalance(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6FA3979BED01B81);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

const char* Native_networkGetStringBankWalletBalance(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x700AF71AE615E6DD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

uint8_t Native_networkGetCanSpendFromWallet(bool& success, int32_t _amount, int32_t _characterSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED5AB8860415BABA);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_characterSlot);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkGetCanSpendFromBank(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA31FD6A0865B6D14);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkGetCanSpendFromBankAndWallet(bool& success, int32_t _amount, int32_t _characterSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC18531D7019A535);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_characterSlot);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkGetPvcTransferBalance(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13A8DE2FD77D04F3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkGetCanTransferCash(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x08E8EEADFD0DC4A0);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkCanReceivePlayerCash(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D17BE59D2123284);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkGetRemainingTransferBalance(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA560AC9EEB1E19B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_withdrawVc(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF70EFA14FE091429);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_depositVc(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE260E0BB9CD995AC);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasVcWithdrawalCompleted(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE154B48B68EF72BC);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_wasVcWithdrawalSuccessful(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6FCF8DDEA146C45B);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverUseServerTransactions(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D2708796355B20B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverCatalogItemIsValid(bool& success, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD4D7EAF8A30F637);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverCatalogItemKeyIsValid(bool& success, uint32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x247F0F73A182EA0B);
	ctx->Reset();
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_netGameserverGetPrice(bool& success, uint32_t _itemHash, uint32_t _categoryHash, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC27009422FCCA88D);
	ctx->Reset();
	ctx->Push(_itemHash);
	ctx->Push(_categoryHash);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_netGameserverCatalogIsValid(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C4487461E9B0DCB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverIsCatalogCurrent(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B949A1E6AEC8F6A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint32_t Native_netGameserverGetCatalogCloudCrc(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85F6C9ABA1DE2BCF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint8_t Native_netGameserverRefreshServerCatalog(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x357B152EF96C30B6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverRetrieveCatalogRefreshStatus(bool& success, int32_t& _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF38DAFBB49EDE5E);
	ctx->Reset();
	auto ptr_state = _state;
	ctx->Push(&ptr_state);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_state = ptr_state;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverInitSession(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3E5A7C64CA2C6ED);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverRetrieveInitSessionStatus(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0395CB47B022E62C);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverStartSession(bool& success, int32_t _charSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA135AC892A58FC07);
	ctx->Reset();
	ctx->Push(_charSlot);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverStartSessionPending(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x72EB7BA9B69BF6AB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverRetrieveStartSessionStatus(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x170910093218C8B9);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverRetrieveSessionErrorCode(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC13C38E47EA5DF31);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverIsSessionValid(bool& success, int32_t _charSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB24F0944DA203D9E);
	ctx->Reset();
	ctx->Push(_charSlot);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverClearSession(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74A0FD0688F1EE45);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverSessionApplyReceivedData(bool& success, int32_t _charSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F41D51BA3BCD1F1);
	ctx->Reset();
	ctx->Push(_charSlot);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverIsSessionRefreshPending(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x810E8431C0614BF9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverStartSessionRestart(bool& success, uint8_t _inventory, uint8_t _playerbalance) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35A1B3E1D1315CFA);
	ctx->Reset();
	ctx->Push((int32_t) _inventory);
	ctx->Push((int32_t) _playerbalance);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverTransactionInProgress(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x613F125BA3BD2EB9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverGetSessionStateAndStatus(bool& success, int32_t& _p0, uint8_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x897433D292B44130);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	auto ptr_p1 = (int32_t) _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	_p1 = (bool) ptr_p1;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverBasketStart(bool& success, int32_t& _transactionId, uint32_t _categoryHash, uint32_t _actionHash, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x279F08B1A4B29B7E);
	ctx->Reset();
	auto ptr_transactionId = _transactionId;
	ctx->Push(&ptr_transactionId);
	ctx->Push(_categoryHash);
	ctx->Push(_actionHash);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_transactionId = ptr_transactionId;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverBasketEnd(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA336E7F40C0A0D0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverBasketIsActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA65568121DF2EA26);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverBasketAddItem(bool& success, int32_t& _itemData, int32_t _quantity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF30980718C8ED876);
	ctx->Reset();
	auto ptr_itemData = _itemData;
	ctx->Push(&ptr_itemData);
	ctx->Push(_quantity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_itemData = ptr_itemData;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverBasketIsFull(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27F76CC6C55AD30E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverBasketApplyServerData(bool& success, int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE1A0450ED46A7812);
	ctx->Reset();
	ctx->Push(_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverCheckoutStart(bool& success, int32_t _transactionId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39BE7CEA8D9CC8E6);
	ctx->Reset();
	ctx->Push(_transactionId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverBeginService(bool& success, int32_t& _transactionId, uint32_t _categoryHash, uint32_t _itemHash, uint32_t _actionTypeHash, int32_t _value, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C5FD37B5499582E);
	ctx->Reset();
	auto ptr_transactionId = _transactionId;
	ctx->Push(&ptr_transactionId);
	ctx->Push(_categoryHash);
	ctx->Push(_itemHash);
	ctx->Push(_actionTypeHash);
	ctx->Push(_value);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_transactionId = ptr_transactionId;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverEndService(bool& success, int32_t _transactionId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE2A99A9B524BEFFF);
	ctx->Reset();
	ctx->Push(_transactionId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverDeleteCharacter(bool& success, int32_t _slot, uint8_t _transfer, uint32_t _reason) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x51F1A8E48C3D2F6D);
	ctx->Reset();
	ctx->Push(_slot);
	ctx->Push((int32_t) _transfer);
	ctx->Push(_reason);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_netGameserverDeleteCharacterGetStatus(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A6D923DFFC9BD89);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_netGameserverDeleteSetTelemetryNonceSeed(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x112CEF1615A1139F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverTransferBankToWallet(bool& success, int32_t _charSlot, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD47A2C1BA117471D);
	ctx->Reset();
	ctx->Push(_charSlot);
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverTransferWalletToBank(bool& success, int32_t _charSlot, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC2F7FE5309181C7D);
	ctx->Reset();
	ctx->Push(_charSlot);
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_netGameserverTransferBankToWalletGetStatus(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23789E777D14CE44);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_netGameserverTransferWalletToBankGetStatus(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x350AA5EBC03D3BD2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_netGameserverTransferCashSetTelemetryNonceSeed(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x498C1E05CE5F7877);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_netGameserverSetTelemetryNonceSeed(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9507D4271988E1AE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

const char* Native_getOnlineVersion(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFCA9373EF340AC0A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

uint8_t Native_networkIsSignedIn(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x054354A99211EB96);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsSignedOnline(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1077788E268557C2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsNpAvailable(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD545D44CCE70597);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsNpPending(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEBCAB9E5048434F4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkGetNpUnavailableReason(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74FB3E29E6D10FA9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkIsConnetedToNpPresence(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7808619F31FF22DB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsLoggedInToPsn(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0FA4EC6A05DA44E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHasValidRosCredentials(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85443FF4C328F53B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsRefreshingRosCredentials(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D11E61A4ABF49CC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsCloudAvailable(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A4CF4F48AD77302);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHasSocialClubAccount(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x67A5589628E0CFF6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkAreSocialClubPoliciesCurrent(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA9775570DB788CF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsHost(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8DB296B814EDDA07);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkGetHostPlayerIndex(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8251FB94DC4FDFC8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkWasGameSuspended(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4237E822315D8BA9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHaveOnlinePrivileges(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25CB5A9F37BFD063);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHasAgeRestrictions(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1353F87E89946207);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHaveUserContentPrivileges(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x72D918C99BCACC54);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHaveCommunicationPrivileges(bool& success, int32_t _p0, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAEEF48CDF5B6CE7C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkCheckOnlinePrivileges(bool& success, int32_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78321BEA235FD8CD);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkCheckUserContentPrivileges(bool& success, int32_t _p0, int32_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x595F028698072DD9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkCheckCommunicationPrivileges(bool& success, int32_t _p0, int32_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83F28CE49FBBFFBA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkCheckTextCommunicationPrivileges(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x07EAB372C8841D99);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsUsingOnlinePromotion(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x906CA41A4B74ECA4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkShouldShowPromotionAlertScreen(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x023ACAB2DC9DC4A4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHasSocialNetworkingSharingPriv(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x76BF03FADBF154F5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkGetAgeGroup(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9614B71F8ADB982B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkCheckPrivileges(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0CF6CC51AA18F0F8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsPrivilegeCheckInProgress(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x64E5C4CC82847B73);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkSetPrivilegeCheckResultNotNeeded(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F7BC3539F9E0224);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkResolvePrivilegeUserContent(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE9225854F37BF72);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHavePlatformSubscription(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5EA784D197556507);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsPlatformSubscriptionCheckPending(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA8ACB6459542A8C8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkShowAccountUpgradeUi(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83FE8D7229593017);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkIsShowingSystemUiOrRecentlyRequestedUpsell(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7788DFE15016A182);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkNeedToStartNewGameButBlocked(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53C10C8BD774F2C9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkCanBail(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x580CE4438479CC61);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkBail(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95914459A87EBA28);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkOnReturnToSinglePlayer(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x283B6062A2C01E9B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkTransitionStart(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B4FFC790CA131EF);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkTransitionAddStage(bool& success, uint32_t _hash, int32_t _p1, int32_t _p2, int32_t _state, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3BFED92026A2AAD);
	ctx->Reset();
	ctx->Push(_hash);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_state);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkTransitionFinish(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x04918A41BC9B8157);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkCanAccessMultiplayer(bool& success, int32_t& _loadingState) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF50DA1A3F8B1BA4);
	ctx->Reset();
	auto ptr_loadingState = _loadingState;
	ctx->Push(&ptr_loadingState);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_loadingState = ptr_loadingState;
	return ctx->ResultBool();
}

uint8_t Native_networkIsMultiplayerDisabled(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9747292807126EDA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkCanEnterMultiplayer(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7E782A910C362C25);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkSessionDoFreeroamQuickmatch(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _maxPlayers, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x330ED4D05491934F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_maxPlayers);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkSessionDoFriendMatchmaking(bool& success, int32_t _p0, int32_t _p1, int32_t _maxPlayers, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2CFC76E0D087C994);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_maxPlayers);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkSessionDoCrewMatchmaking(bool& success, int32_t _crewId, int32_t _p1, int32_t _p2, int32_t _maxPlayers, uint8_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x94BC51E9449D917F);
	ctx->Reset();
	ctx->Push(_crewId);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_maxPlayers);
	ctx->Push((int32_t) _p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkSessionDoActivityQuickmatch(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE3E347A87ACEB82);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkSessionHost(bool& success, int32_t _p0, int32_t _maxPlayers, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F3D4ED9BEE4E61D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_maxPlayers);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkSessionHostClosed(bool& success, int32_t _p0, int32_t _maxPlayers) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED34C0C02C098BB7);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_maxPlayers);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkSessionHostFriendsOnly(bool& success, int32_t _p0, int32_t _maxPlayers) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9CFD27A5D578D83);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_maxPlayers);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkSessionIsClosedFriends(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFBCFA2EA2E206890);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkSessionIsClosedCrew(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74732C6CA90DA2B4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkSessionIsSolo(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3929C2379B60CCE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkSessionIsPrivate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCEF70AA5B3F89BA1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkSessionEnd(bool& success, uint8_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA02E59562D711006);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkSessionLeave(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9351A07A0D458B1);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkSessionKickPlayer(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA8904DC5F304220);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkSessionGetKickVote(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD6D09A6F32F49EF1);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkSessionReserveSlotsTransition(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x041C7F2A6C9894E6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkJoinPreviouslyFailedSession(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x59DF79317F85A7E0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkJoinPreviouslyFailedTransition(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFFE1E5B792D92B34);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkSessionSetMatchmakingGroup(bool& success, int32_t _matchmakingGroup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x49EC8030F5015F8B);
	ctx->Reset();
	ctx->Push(_matchmakingGroup);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSessionSetMatchmakingGroupMax(bool& success, int32_t _playerType, int32_t _playerCount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B6A4DD0AF9CE215);
	ctx->Reset();
	ctx->Push(_playerType);
	ctx->Push(_playerCount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_networkSessionGetMatchmakingGroupFree(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x56CE820830EF040B);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_networkSessionAddActiveMatchmakingGroup(bool& success, int32_t _groupId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCAE55F48D3D7875C);
	ctx->Reset();
	ctx->Push(_groupId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSessionSetUniqueCrewLimit(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF49ABC20D8552257);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSessionSetUniqueCrewLimitTransition(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4811BBAC21C5FCD5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSessionSetUniqueCrewOnlyCrewsTransition(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5539C3EBF104A53A);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSessionSetCrewLimitMaxMembersTransition(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x702BC4D605522539);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSessionSetMatchmakingPropertyId(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F52E880AAF6C8CA);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSessionSetMatchmakingMentalState(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1EEA2DDA9FFA69D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSessionSetNumBosses(bool& success, int32_t _num) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x59D421683D31835A);
	ctx->Reset();
	ctx->Push(_num);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSessionSetScriptValidateJoin(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1153FA02A659051C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSessionValidateJoin(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC19F6C8E7865A6FF);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkAddFollowers(bool& success, int32_t& _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x236406F60CF216D6);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
}

void Native_networkClearFollowers(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x058F43EC59A8631A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkGetGlobalMultiplayerClock(bool& success, int32_t& _hours, int32_t& _minutes, int32_t& _seconds) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D03BFBD643B2A02);
	ctx->Reset();
	auto ptr_hours = _hours;
	ctx->Push(&ptr_hours);
	auto ptr_minutes = _minutes;
	ctx->Push(&ptr_minutes);
	auto ptr_seconds = _seconds;
	ctx->Push(&ptr_seconds);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_hours = ptr_hours;
	_minutes = ptr_minutes;
	_seconds = ptr_seconds;
}

void Native_networkSessionSetGamemode(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x600F8CB31C7AAB6E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_networkSessionGetHostAimPreference(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFFA5BE8381C3314);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkFindGamersInCrew(bool& success, int32_t _crewId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE532D6811B3A4D2A);
	ctx->Reset();
	ctx->Push(_crewId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkFindMatchedGamers(bool& success, int32_t _attribute, float _fallbackLimit, float _lowerLimit, float _upperLimit) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF7B2CFDE5C9F700D);
	ctx->Reset();
	ctx->Push(_attribute);
	ctx->Push(_fallbackLimit);
	ctx->Push(_lowerLimit);
	ctx->Push(_upperLimit);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsFindingGamers(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDDDF64C91BFCF0AA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkDidFindGamersSucceed(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9B83B77929D8863);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkGetNumFoundGamers(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1B043EE79A916FB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkGetFoundGamer(bool& success, int32_t& _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DCFF2AFB68B3476);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

void Native_networkClearFoundGamers(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D14CCEE1B40381A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkQueueGamerForStatus(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85A0EF54A500882C);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_networkGetGamerStatusFromQueue(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2CC848A861D01493);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsGettingGamerStatus(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x94A8394D150B013A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkDidGetGamerStatusSucceed(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5AE17C6B0134B7F1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkGetGamerStatusResult(bool& success, int32_t& _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02A8BEC6FD9AF660);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

void Native_networkClearGetGamerStatus(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x86E0660E4F5C956D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSessionJoinInvite(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6F8AB8A4189CF3A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSessionCancelInvite(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FBF47B1B36D36F9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSessionForceCancelInvite(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA29177F7703B5644);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkHasPendingInvite(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC8C7B9B88C4A668);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHasConfirmedInvite(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC42DD763159F3461);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkRequestInviteConfirmedEvent(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62A0296C1BB1CEB3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkSessionWasInvited(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23DFB504655D0CE4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkSessionGetInviter(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE57397B4A3429DD0);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
}

uint8_t Native_networkSessionIsAwaitingInviteResponse(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD313DE83394AF134);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkSessionIsDisplayingInviteConfirmation(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBDB6F89C729CF388);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkSuppressInvite(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0682D67EF1FBA3D);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkBlockInvites(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34F9E9049454A7A0);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkBlockJoinQueueInvites(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCFEB8AF24FC1D0BB);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetCanReceiveRsInvites(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x68980414688F7F9D);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkStoreInviteThroughRestart(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF814FEC6A19FD6E0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkAllowInviteProcessInPlayerSwitch(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B07B9CE4D390375);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetScriptReadyForEvents(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7AC752103856FB20);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkIsOfflineInvitePending(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74698374C45701D2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkClearOfflineInvitePending(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x140E6A44870A11CE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSessionHostSinglePlayer(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC74C33FCA52856D5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSessionLeaveSinglePlayer(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3442775428FD2DAA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkIsGameInProgress(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x10FAB35428CCC9D7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsSessionActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD83C2B94E7508980);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsInSession(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA97246103B63917);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsSessionStarted(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DE624D2FC4B603F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsSessionBusy(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF4435D66A8E2905E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkCanSessionEnd(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4EEBC3694E49C572);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkGetGameMode(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C9034162368E206);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_networkSessionMarkVisible(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x271CC6AB59EBF9A5);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkSessionIsVisible(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA416D68C631496A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkSessionBlockJoinRequests(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA73667484D7037C3);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSessionChangeSlots(bool& success, int32_t _slots, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4AB419E0D86ACAE);
	ctx->Reset();
	ctx->Push(_slots);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_networkSessionGetPrivateSlots(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53AFD64C6758F2F9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkSessionVoiceHost(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C1556705F864230);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkSessionVoiceLeave(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6793E42BE02B575D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkSessionVoiceConnectToPlayer(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xABD5E88B8A2D3DB2);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
}

void Native_networkSessionVoiceRespondToRequest(bool& success, uint8_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F8413B7FC2AA6B9);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSessionVoiceSetTimeout(bool& success, int32_t _timeout) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B8ED3DB018927B1);
	ctx->Reset();
	ctx->Push(_timeout);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkSessionIsInVoiceSession(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x855BC38818F6F684);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkSessionIsVoiceSessionActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5D3453C98456528);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkSessionIsVoiceSessionBusy(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF0912DDF7C4CB4B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkSendTextMessage(bool& success, const char* _message, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A214F2EC889B100);
	ctx->Reset();
	ctx->Push(SaveString(_message));
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

void Native_networkSetActivitySpectator(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75138790B4359A74);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkIsActivitySpectator(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x12103B9E0C9F92FB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkSetActivityPlayerMax(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0E4F77F7B9D74D84);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetActivitySpectatorMax(bool& success, int32_t _maxSpectators) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D277B76D1D12222);
	ctx->Reset();
	ctx->Push(_maxSpectators);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_networkGetActivityPlayerNum(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x73E2B500410DA5A2);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkIsActivitySpectatorFromHandle(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2763BBAA72A7BCB9);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkHostTransition(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, uint8_t _p5, uint8_t _p6, int32_t _p7, int32_t _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA60BB5CE242BB254);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push((int32_t) _p5);
	ctx->Push((int32_t) _p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkDoTransitionQuickmatch(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71FB0EBCD4915D56);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkDoTransitionQuickmatchAsync(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA091A5E44F0072E5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkDoTransitionQuickmatchWithGroup(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t& _p4, int32_t _p5, int32_t _p6, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C4AB58491FDC98A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	auto ptr_p4 = _p4;
	ctx->Push(&ptr_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p4 = ptr_p4;
	return ctx->ResultBool();
}

uint8_t Native_networkJoinGroupActivity(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA06509A691D12BE4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkClearGroupActivity(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1888694923EF4591);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkRetainActivityGroup(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB13E88E655E5A3BC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkIsTransitionClosedFriends(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6512765E3BE78C50);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsTransitionClosedCrew(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0DBD5D7E3C5BEC3B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsTransitionSolo(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5DC577201723960A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsTransitionPrivate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A6AA44FF8E931E6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkGetNumTransitionNonAsyncGamers(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x617F49C2668E6155);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_networkMarkAsPreferredActivity(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x261E97AD7BCF3D40);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkMarkAsWaitingAsync(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39917E1B4CB0F911);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetInProgressFinishTime(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2CE9D95E4051AECD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetTransitionCreatorHandle(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF26739BCD9907D5);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
}

void Native_networkClearTransitionCreatorHandle(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB3272229A82C759);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkInviteGamersToTransition(bool& success, int32_t& _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A595C32F77DFF76);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

void Native_networkSetGamerInvitedToTransition(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA2C8073411ECDB6);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
}

uint8_t Native_networkLeaveTransition(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD23A1A815D21DB19);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkLaunchTransition(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DCF46CB1A4F0884);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkSetDoNotLaunchFromJoinAsMigratedHost(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2E9C1AB8A92E8CD);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkCancelTransitionMatchmaking(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x023782EFC70585EE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkBailTransition(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEAA572036990CD1B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkDoTransitionToGame(bool& success, uint8_t _p0, int32_t _maxPlayers) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E9BB38102A589B0);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push(_maxPlayers);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkDoTransitionToNewGame(bool& success, uint8_t _p0, int32_t _maxPlayers, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4665F51EFED00034);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push(_maxPlayers);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkDoTransitionToFreemode(bool& success, int32_t& _p0, int32_t _p1, uint8_t _p2, int32_t _players, uint8_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3AAD8B2FCA1E289F);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_players);
	ctx->Push((int32_t) _p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_networkDoTransitionToNewFreemode(bool& success, int32_t& _p0, int32_t _p1, int32_t _players, uint8_t _p3, uint8_t _p4, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9E80A5BA8109F974);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(_p1);
	ctx->Push(_players);
	ctx->Push((int32_t) _p3);
	ctx->Push((int32_t) _p4);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_networkIsTransitionToGame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D7696D8F4FA6CB7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkGetTransitionMembers(bool& success, int32_t& _data, int32_t _dataCount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x73B000F7FBC55829);
	ctx->Reset();
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	ctx->Push(_dataCount);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_data = ptr_data;
	return ctx->ResultInt();
}

void Native_networkApplyTransitionParameter(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x521638ADA1BA0D18);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkApplyTransitionParameterString(bool& success, int32_t _p0, const char* _string, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEBEFC2E77084F599);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(SaveString(_string));
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkSendTransitionGamerInstruction(bool& success, int32_t& _gamerHandle, const char* _p1, int32_t _p2, int32_t _p3, uint8_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x31D1D2B858D25E6B);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	ctx->Push(SaveString(_p1));
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push((int32_t) _p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkMarkTransitionGamerAsFullyJoined(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5728BB6D63E3FF1D);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_networkIsTransitionHost(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0B824797C9BF2159);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsTransitionHostFromHandle(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B5C83BA3EFE6A10);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkGetTransitionHost(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x65042B9774C4435E);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkIsInTransition(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x68049AEFF83D8F0A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsTransitionStarted(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53FA83401D9C07FE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsTransitionBusy(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x520F3282A53D26B7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsTransitionMatchmaking(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x292564C735375EDF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsTransitionLeavePostponed(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC571D0E77D8BBC29);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkTransitionSetInProgress(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1398582B7F72B3ED);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkTransitionSetContentCreator(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F8E00FB18239600);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkTransitionSetActivityIsland(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6F4383B7C92F11A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkOpenTransitionMatchmaking(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B3A8F7CA3A38FDE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkCloseTransitionMatchmaking(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43F4DBA69710E01E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkIsTransitionOpenToMatchmaking(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x37A4494483B9F5C9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkSetTransitionVisibilityLock(bool& success, uint8_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C978FDA19692C2C);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkIsTransitionVisibilityLocked(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0A484CB2F829FBE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkSetTransitionActivityId(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x30DE938B516F0AD2);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkChangeTransitionSlots(bool& success, int32_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEEEDA5E6D7080987);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkTransitionBlockJoinRequests(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x973D76AA760A6CB6);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkHasPlayerStartedTransition(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9AC9CCBFA8C29795);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkAreTransitionDetailsValid(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2615AA2A695930C1);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkJoinTransition(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D060B08CD63321A);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHasInvitedGamerToTransition(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7284A47B3540E6CF);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_networkHasTransitionInviteBeenAcked(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F9990BF5F22759C);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_networkIsActivitySession(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x05095437424397FA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkDisableRealtimeMultiplayer(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x236905C700FDB54D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetPresenceSessionInvitesBlocked(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A9FDE3A5A6D0437);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkSendInviteViaPresence(bool& success, int32_t& _gamerHandle, const char* _p1, int32_t _dataCount, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3C7A6AFDB244624);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	ctx->Push(SaveString(_p1));
	ctx->Push(_dataCount);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkSendTransitionInviteViaPresence(bool& success, int32_t& _gamerHandle, const char* _p1, int32_t _dataCount, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC116FF9B4D488291);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	ctx->Push(SaveString(_p1));
	ctx->Push(_dataCount);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkSendImportantTransitionInviteViaPresence(bool& success, int32_t& _gamerHandle, const char* _p1, int32_t _dataCount, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1171A97A3D3981B6);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	ctx->Push(SaveString(_p1));
	ctx->Push(_dataCount);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

int32_t Native_networkGetPresenceInviteIndexById(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x742B58F723233ED9);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkGetNumPresenceInvites(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCEFA968912D0F78D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkAcceptPresenceInvite(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA91550DF9318B22);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkRemovePresenceInvite(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0210268DB0974B1);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkGetPresenceInviteId(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFF09646E12EC386);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

const char* Native_networkGetPresenceInviteInviter(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4962CC4AA2F345B7);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

uint8_t Native_networkGetPresenceInviteHandle(bool& success, int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x38D5B0FEBB086F75);
	ctx->Reset();
	ctx->Push(_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

int32_t Native_networkGetPresenceInviteSessionId(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26E1CD96B0903D60);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

const char* Native_networkGetPresenceInviteContentId(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x24409FC4C55CB22D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

int32_t Native_networkGetPresenceInvitePlaylistLength(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD39B3FFF8FFDD5BF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkGetPresenceInvitePlaylistCurrent(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x728C4CC7920CD102);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkGetPresenceInviteFromAdmin(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3DBF2DF0AEB7D289);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkGetPresenceInviteIsTournament(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8806CEBFABD3CE05);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHasFollowInvite(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x76D9B976C4C09FDE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkActionFollowInvite(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC88156EBB786F8D5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkClearFollowInvite(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x439BFDE3CD0610F6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkRemoveAndCancelAllInvites(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEBF8284D8CADEB53);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkRemoveTransitionInvite(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7524B431B2E6F7EE);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
}

void Native_networkRemoveAllTransitionInvite(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x726E0375C7A26368);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkRemoveAndCancelAllTransitionInvites(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF083835B70BA9BFE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkInviteGamers(bool& success, int32_t& _p0, int32_t _p1, int32_t& _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D80CD1D0E6327DE);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(_p1);
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	_p2 = ptr_p2;
	return ctx->ResultBool();
}

uint8_t Native_networkHasInvitedGamer(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D86CD31E8976ECE);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_networkHasMadeInviteDecision(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71DC455F5CD1C2B1);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

int32_t Native_networkGetInviteReplyStatus(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3855FB5EB2C5E8B2);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkGetCurrentlySelectedGamerHandleFromInviteMenu(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74881E6BCAE2327C);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_networkSetCurrentlySelectedGamerHandleFromInviteMenu(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7206F674F2A3B1BB);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

void Native_networkSetInviteOnCallForInviteMenu(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66F010A4B031A331);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
}

uint8_t Native_networkCheckDataManagerSucceededForHandle(bool& success, int32_t _p0, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44B37CDCAE765AAE);
	ctx->Reset();
	ctx->Push(_p0);
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkCheckDataManagerForHandle(bool& success, int32_t _p0, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4AD490AE1536933B);
	ctx->Reset();
	ctx->Push(_p0);
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

void Native_networkSetInviteFailedMessageForInviteMenu(bool& success, int32_t& _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0D77A82DC2D0DA59);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
	_p1 = ptr_p1;
}

uint8_t Native_filloutPmPlayerList(bool& success, int32_t& _gamerHandle, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCBBD7C4991B64809);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_filloutPmPlayerListWithNames(bool& success, int32_t& _p0, int32_t& _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x716B6DB9D1886106);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

uint8_t Native_refreshPlayerListStats(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE26CCFF8094D8C74);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkSetCurrentDataManagerHandle(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x796A87B3B68D1F3D);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_networkIsInPlatformParty(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FC5650B0271CB57);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkGetPlatformPartyMemberCount(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01ABCE5E7CBDA196);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkGetPlatformPartyMembers(bool& success, int32_t& _data, int32_t _dataSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x120364DE2845DAF8);
	ctx->Reset();
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	ctx->Push(_dataSize);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_data = ptr_data;
	return ctx->ResultInt();
}

uint8_t Native_networkIsInPlatformPartyChat(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD8B834A8BA05048);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsChattingInPlatformParty(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8DE9945BCC9AEC52);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkCanQueueForPreviousSessionJoin(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2BF66D2E7414F686);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsQueuingForSessionJoin(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14922ED3E38761F0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkClearQueuedJoinRequest(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6CE50E47F5543D0C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSendQueuedJoinRequest(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA2888E3833C8E96);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkRemoveAllQueuedJoinRequests(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25D990F8E0E3F13C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSeedRandomNumberGenerator(bool& success, int32_t _seed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1B84178F8674195);
	ctx->Reset();
	ctx->Push(_seed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_networkGetRandomInt(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x599E4FA1F87EB5FF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkGetRandomIntRanged(bool& success, int32_t _rangeStart, int32_t _rangeEnd) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE30CF56F1EFA5F43);
	ctx->Reset();
	ctx->Push(_rangeStart);
	ctx->Push(_rangeEnd);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkPlayerIsCheater(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x655B91F1495A9090);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkPlayerGetCheaterReason(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x172F75B6EE2233BA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkPlayerIsBadsport(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19D8DA0E5A68045A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_triggerPlayerCrcHackerCheck(bool& success, int32_t _player, int32_t _p1, uint32_t _scriptHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46FB3ED415C7641C);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	ctx->Push(_scriptHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_triggerTuningCrcHackerCheck(bool& success, int32_t _player, const char* _p1, const char* _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA12D3A5A3753CC23);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(SaveString(_p1));
	ctx->Push(SaveString(_p2));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_triggerFileCrcHackerCheck(bool& success, int32_t _player, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF287F506767CC8A9);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(SaveString(_p1));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_remoteCheaterPlayerDetected(bool& success, int32_t _player, int32_t _a, int32_t _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x472841A026D26D8B);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_a);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_badSportPlayerLeftDetected(bool& success, int32_t& _gamerHandle, int32_t _event, int32_t _amountReceived) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC5E3AF5289DCA81);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	ctx->Push(_event);
	ctx->Push(_amountReceived);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

void Native_networkAddInvalidObjectModel(bool& success, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F562DBC212E81F9);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkRemoveInvalidObjectModel(bool& success, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x791EDB5803B2F468);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkClearInvalidObjectModels(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x03B2F03A53D85E41);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkApplyPedScarData(bool& success, int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE66C690248F11150);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetThisScriptIsNetworkScript(bool& success, int32_t _maxNumMissionParticipants, uint8_t _p1, int32_t _instanceId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CA59E306ECB80A5);
	ctx->Reset();
	ctx->Push(_maxNumMissionParticipants);
	ctx->Push((int32_t) _p1);
	ctx->Push(_instanceId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkTryToSetThisScriptIsNetworkScript(bool& success, int32_t _p0, uint8_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1110739EEADB592);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkGetThisScriptIsNetworkScript(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2910669969E9535E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkGetMaxNumParticipants(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6C90FBC38E395EE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkGetNumParticipants(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x18D0456E86604654);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkGetScriptStatus(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57D158647A6BFABF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_networkRegisterHostBroadcastVariables(bool& success, int32_t& _unkVars, int32_t _numVars, const char* _debugName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E9B2F01C50DF595);
	ctx->Reset();
	auto ptr_unkVars = _unkVars;
	ctx->Push(&ptr_unkVars);
	ctx->Push(_numVars);
	ctx->Push(SaveString(_debugName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_unkVars = ptr_unkVars;
}

void Native_networkRegisterPlayerBroadcastVariables(bool& success, int32_t& _unkVars, int32_t _numVars, const char* _debugName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3364AA97340CA215);
	ctx->Reset();
	auto ptr_unkVars = _unkVars;
	ctx->Push(&ptr_unkVars);
	ctx->Push(_numVars);
	ctx->Push(SaveString(_debugName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_unkVars = ptr_unkVars;
}

void Native_networkRegisterHighFrequencyHostBroadcastVariables(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA8C0DDB10E2822A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkRegisterHighFrequencyPlayerBroadcastVariables(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD6D7478CA62B8D41);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkFinishBroadcastingData(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x64F62AFB081E260D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkHasReceivedHostBroadcastData(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D10B3795F3FC886);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkGetPlayerIndex(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x24FB80D107371267);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkGetParticipantIndex(bool& success, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B84DF6AF2A46938);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkGetPlayerIndexFromPed(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C0E2E0125610278);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkGetNumConnectedPlayers(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA4A79DD2D9600654);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkIsPlayerConnected(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93DC1BE4E1ABE9D1);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkGetTotalNumPlayers(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF61D4B4702EE9EB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkIsParticipantActive(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6FF8FF40B6357D45);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsPlayerActive(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8DFD30D6973E135);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsPlayerAParticipant(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3CA58F6CB7CBD784);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsHostOfThisScript(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83CD99A1E6061AB5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkGetHostOfThisScript(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7B4D79B01FA7A5C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkGetHostOfScript(bool& success, const char* _scriptName, int32_t _instance_id, int32_t _position_hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D6A14F1F9A736FC);
	ctx->Reset();
	ctx->Push(SaveString(_scriptName));
	ctx->Push(_instance_id);
	ctx->Push(_position_hash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_networkSetMissionFinished(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3B3D11CD9FFCDFC9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkIsScriptActive(bool& success, const char* _scriptName, int32_t _instance_id, uint8_t _p2, int32_t _position_hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D40DF90FAD26098);
	ctx->Reset();
	ctx->Push(SaveString(_scriptName));
	ctx->Push(_instance_id);
	ctx->Push((int32_t) _p2);
	ctx->Push(_position_hash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsScriptActiveByHash(bool& success, uint32_t _scriptHash, int32_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA7DE67F5FE5EE13);
	ctx->Reset();
	ctx->Push(_scriptHash);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsThreadANetworkScript(bool& success, int32_t _threadId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x560B423D73015E77);
	ctx->Reset();
	ctx->Push(_threadId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkGetNumScriptParticipants(bool& success, const char* _scriptName, int32_t _instance_id, int32_t _position_hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3658E8CD94FC121A);
	ctx->Reset();
	ctx->Push(SaveString(_scriptName));
	ctx->Push(_instance_id);
	ctx->Push(_position_hash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkGetInstanceIdOfThisScript(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x638A3A81733086DB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint32_t Native_networkGetPositionHashOfThisScript(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x257ED0FADF750BCF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint8_t Native_networkIsPlayerAParticipantOnScript(bool& success, int32_t _player, const char* _script, int32_t _instance_id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1AD5B71586B94820);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(SaveString(_script));
	ctx->Push(_instance_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkPreventScriptHostMigration(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2302C0264EA58D31);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkRequestToBeHostOfThisScript(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x741A3D8380319A81);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_participantId(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90986E8876CE0A83);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_participantIdToInt(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57A3BDDAD8E5AA0A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkGetKillerOfPlayer(bool& success, int32_t _player, uint32_t& _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DA41ED6E1FCD7A5);
	ctx->Reset();
	ctx->Push(_player);
	auto ptr_weaponHash = _weaponHash;
	ctx->Push(&ptr_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_weaponHash = ptr_weaponHash;
	return ctx->ResultInt();
}

int32_t Native_networkGetDestroyerOfNetworkId(bool& success, int32_t _netId, uint32_t& _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A1ADEEF01740A24);
	ctx->Reset();
	ctx->Push(_netId);
	auto ptr_weaponHash = _weaponHash;
	ctx->Push(&ptr_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_weaponHash = ptr_weaponHash;
	return ctx->ResultInt();
}

int32_t Native_networkGetDestroyerOfEntity(bool& success, int32_t _entity, uint32_t& _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC434133D9BA52777);
	ctx->Reset();
	ctx->Push(_entity);
	auto ptr_weaponHash = _weaponHash;
	ctx->Push(&ptr_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_weaponHash = ptr_weaponHash;
	return ctx->ResultInt();
}

uint8_t Native_networkGetAssistedKillOfEntity(bool& success, int32_t _player, int32_t _entity, int32_t& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83660B734994124D);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_entity);
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p2 = ptr_p2;
	return ctx->ResultBool();
}

uint8_t Native_networkGetAssistedDamageOfEntity(bool& success, int32_t _player, int32_t _entity, int32_t& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4CACA84440FA26F6);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_entity);
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p2 = ptr_p2;
	return ctx->ResultBool();
}

int32_t Native_networkGetEntityKillerOfPlayer(bool& success, int32_t _player, uint32_t& _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42B2DAA6B596F5F8);
	ctx->Reset();
	ctx->Push(_player);
	auto ptr_weaponHash = _weaponHash;
	ctx->Push(&ptr_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_weaponHash = ptr_weaponHash;
	return ctx->ResultInt();
}

void Native_networkSetCurrentPublicContentId(bool& success, const char* _missionId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C863ACDCD12B3DB);
	ctx->Reset();
	ctx->Push(SaveString(_missionId));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetCurrentSpawnLocationOption(bool& success, uint32_t _mpSettingSpawn) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA6D5451DC3448B6);
	ctx->Reset();
	ctx->Push(_mpSettingSpawn);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetVehicleDrivenInTestDrive(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C70252FC40F320B);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkResurrectLocalPlayer(bool& success, float _x, float _y, float _z, float _heading, uint8_t _p4, uint8_t _changetime, uint8_t _p6, int32_t _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA23C49EAA83ACFB);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	ctx->Push((int32_t) _p4);
	ctx->Push((int32_t) _changetime);
	ctx->Push((int32_t) _p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetLocalPlayerInvincibleTime(bool& success, int32_t _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D95C7E2D7E07307);
	ctx->Reset();
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkIsLocalPlayerInvincible(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A8694B48715B000);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkDisableInvincibleFlashing(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DD368BF06983221);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkPatchPostCutsceneHs4fTunEnt(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0BC9BCD24A511D5);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetLocalPlayerSyncLookAt(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x524FF0AEFF9C3973);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkHasEntityBeenRegisteredWithThisThread(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB07D3185E11657A5);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkGetNetworkIdFromEntity(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA11700682F3AD45C);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkGetEntityFromNetworkId(bool& success, int32_t _netId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE4E5D9B0A4FF560);
	ctx->Reset();
	ctx->Push(_netId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkGetEntityIsNetworked(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7827959479DCC78);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkGetEntityIsLocal(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0991549DE4D64762);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkRegisterEntityAsNetworked(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06FAACD625D80CAA);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkUnregisterNetworkedEntity(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7368E683BB9038D6);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkDoesNetworkIdExist(bool& success, int32_t _netId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x38CE16C96BD11344);
	ctx->Reset();
	ctx->Push(_netId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkDoesEntityExistWithNetworkId(bool& success, int32_t _netId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x18A47D074708FD68);
	ctx->Reset();
	ctx->Push(_netId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkRequestControlOfNetworkId(bool& success, int32_t _netId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA670B3662FAFFBD0);
	ctx->Reset();
	ctx->Push(_netId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHasControlOfNetworkId(bool& success, int32_t _netId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D36070FE0215186);
	ctx->Reset();
	ctx->Push(_netId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsNetworkIdRemotelyControlled(bool& success, int32_t _netId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7242F8B741CE1086);
	ctx->Reset();
	ctx->Push(_netId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkRequestControlOfEntity(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB69317BF5E782347);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkRequestControlOfDoor(bool& success, int32_t _doorID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x870DDFD5A4A796E4);
	ctx->Reset();
	ctx->Push(_doorID);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHasControlOfEntity(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01BF60A500E28887);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHasControlOfPickup(bool& success, int32_t _pickup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BC9495F0B3B6FA6);
	ctx->Reset();
	ctx->Push(_pickup);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHasControlOfDoor(bool& success, uint32_t _doorHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB3C68ADB06195DF);
	ctx->Reset();
	ctx->Push(_doorHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsDoorNetworked(bool& success, uint32_t _doorHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC01E93FAC20C3346);
	ctx->Reset();
	ctx->Push(_doorHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_vehToNet(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4C94523F023419C);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_pedToNet(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0EDEC3C276198689);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_objToNet(bool& success, int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x99BFDC94A603E541);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_netToVeh(bool& success, int32_t _netHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x367B936610BA360C);
	ctx->Reset();
	ctx->Push(_netHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_netToPed(bool& success, int32_t _netHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBDCD95FC216A8B3E);
	ctx->Reset();
	ctx->Push(_netHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_netToObj(bool& success, int32_t _netHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD8515F5FEA14CB3F);
	ctx->Reset();
	ctx->Push(_netHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_netToEnt(bool& success, int32_t _netHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBFFEAB45A9A9094A);
	ctx->Reset();
	ctx->Push(_netHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_networkGetLocalHandle(bool& success, int32_t& _gamerHandle, int32_t _gamerHandleSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE86051786B66CD8E);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	ctx->Push(_gamerHandleSize);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
}

void Native_networkHandleFromUserId(bool& success, const char* _userId, int32_t& _gamerHandle, int32_t _gamerHandleSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCD51DD8F87AEC5C);
	ctx->Reset();
	ctx->Push(SaveString(_userId));
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	ctx->Push(_gamerHandleSize);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
}

void Native_networkHandleFromMemberId(bool& success, const char* _memberId, int32_t& _gamerHandle, int32_t _gamerHandleSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0FD21BED61E5C4C);
	ctx->Reset();
	ctx->Push(SaveString(_memberId));
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	ctx->Push(_gamerHandleSize);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
}

void Native_networkHandleFromPlayer(bool& success, int32_t _player, int32_t& _gamerHandle, int32_t _gamerHandleSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x388EB2B86C73B6B3);
	ctx->Reset();
	ctx->Push(_player);
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	ctx->Push(_gamerHandleSize);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
}

uint32_t Native_networkHashFromPlayerHandle(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC1D768F2F5D6C05);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint32_t Native_networkHashFromGamerHandle(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58575AC3CF2CA8EC);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultUint();
}

void Native_networkHandleFromFriend(bool& success, int32_t _friendIndex, int32_t& _gamerHandle, int32_t _gamerHandleSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD45CB817D7E177D2);
	ctx->Reset();
	ctx->Push(_friendIndex);
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	ctx->Push(_gamerHandleSize);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
}

uint8_t Native_networkGamertagFromHandleStart(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F0C0A981D73FA56);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkGamertagFromHandlePending(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB071E27958EF4CF0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkGamertagFromHandleSucceeded(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD00798DBA7523DD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

const char* Native_networkGetGamertagFromHandle(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x426141162EBE5CDB);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return AllocateString(ctx->ResultString());
}

int32_t Native_networkDisplaynamesFromHandlesStart(bool& success, int32_t& _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD66C9E72B3CC4982);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultInt();
}

int32_t Native_networkGetDisplaynamesFromHandles(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58CC181719256197);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkAreHandlesTheSame(bool& success, int32_t& _gamerHandle1, int32_t& _gamerHandle2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57DBA049E110F217);
	ctx->Reset();
	auto ptr_gamerHandle1 = _gamerHandle1;
	ctx->Push(&ptr_gamerHandle1);
	auto ptr_gamerHandle2 = _gamerHandle2;
	ctx->Push(&ptr_gamerHandle2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle1 = ptr_gamerHandle1;
	_gamerHandle2 = ptr_gamerHandle2;
	return ctx->ResultBool();
}

uint8_t Native_networkIsHandleValid(bool& success, int32_t& _gamerHandle, int32_t _gamerHandleSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F79B93B0A8E4133);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	ctx->Push(_gamerHandleSize);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

int32_t Native_networkGetPlayerFromGamerHandle(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE5F689CF5A0A49D);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultInt();
}

const char* Native_networkMemberIdFromGamerHandle(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC82630132081BB6F);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return AllocateString(ctx->ResultString());
}

uint8_t Native_networkIsGamerInMySession(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F10B05DDF8D16E9);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

void Native_networkShowProfileUi(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x859ED1CEA343FCA8);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
}

const char* Native_networkPlayerGetName(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7718D2E2060837D2);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

const char* Native_networkPlayerGetUserid(bool& success, int32_t _player, int32_t& _userID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4927FC39CD0869A0);
	ctx->Reset();
	ctx->Push(_player);
	auto ptr_userID = _userID;
	ctx->Push(&ptr_userID);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	_userID = ptr_userID;
	return AllocateString(ctx->ResultString());
}

uint8_t Native_networkPlayerIsRockstarDev(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x544ABDDA3B409B6D);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkPlayerIndexIsCheater(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x565E430DB3B05BEC);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkEntityGetObjectId(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x815F18AD865F057F);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkGetEntityFromObjectId(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x37D5F739FD494675);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkIsInactiveProfile(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7E58745504313A2E);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

int32_t Native_networkGetMaxFriends(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAFEBB0D5D8F687D2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkGetFriendCount(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x203F1CFD823B27A4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

const char* Native_networkGetFriendName(bool& success, int32_t _friendIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE11EBBB2A783FE8B);
	ctx->Reset();
	ctx->Push(_friendIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

const char* Native_networkGetFriendDisplayName(bool& success, int32_t _friendIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4164F227D052E293);
	ctx->Reset();
	ctx->Push(_friendIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

uint8_t Native_networkIsFriendOnline(bool& success, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x425A44533437B64D);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsFriendHandleOnline(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x87EB7A3FFCB314DB);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkIsFriendInSameTitle(bool& success, const char* _friendName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2EA9A3BEDF3F17B8);
	ctx->Reset();
	ctx->Push(SaveString(_friendName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsFriendInMultiplayer(bool& success, const char* _friendName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57005C18827F3A28);
	ctx->Reset();
	ctx->Push(SaveString(_friendName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsFriend(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A24A179F9B31654);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkIsPendingFriend(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BE73DA6984A6E33);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsAddingFriend(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6EA101606F6E4D81);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkAddFriend(bool& success, int32_t& _gamerHandle, const char* _message) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8E02D73914064223);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	ctx->Push(SaveString(_message));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkIsFriendIndexOnline(bool& success, int32_t _friendIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBAD8F2A42B844821);
	ctx->Reset();
	ctx->Push(_friendIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkSetPlayerIsPassive(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B857666604B1A74);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkGetPlayerOwnsWaypoint(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x82377B65E943F72D);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkCanSetWaypoint(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC927EC229934AF60);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkIgnoreRemoteWaypoints(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C2A9FDC22377075);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkSetScriptAutomuted(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB309EBEA797E001F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHasAutomuteOverride(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26F07DD83A5F7F98);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHasHeadset(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE870F9F1F7B4F1FA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkSetLookAtTalkers(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D395EA61622E116);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkIsPushToTalkActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0D2AF00BCC234CA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkGamerHasHeadset(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2FD55CB574BCC55);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkIsGamerTalking(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71C33B22606CD88A);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkPermissionsHasGamerRecord(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x559EBF901A8C68E0);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkCanCommunicateWithGamer(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F5D1AD832AEB06C);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkCanTextChatWithGamer(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA150A4F065806B1F);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkIsGamerMutedByMe(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE60DE011B6C7978);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkAmIMutedByGamer(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF02A2C93F1F26DA);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkIsGamerBlockedByMe(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE944C4F5AF1B5883);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkAmIBlockedByGamer(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15337C7C268A27B2);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkCanViewGamerUserContent(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB57A49545BA53CE7);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkHasViewGamerUserContentResult(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCCA4318E1AB03F1F);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkCanPlayMultiplayerWithGamer(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x07DD29D5E22763F1);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkCanGamerPlayMultiplayerWithMe(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x135F9B7B7ADD2185);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkCanSendLocalInvite(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x021ABCBD98EC4320);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkCanReceiveLocalInvite(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x421E34C55F125964);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkIsPlayerTalking(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x031E11F3D447647E);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkPlayerHasHeadset(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3FB99A8B08D18FD6);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsPlayerMutedByMe(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C71288AE68EDE39);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkAmIMutedByPlayer(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D6981DFC91A8604);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsPlayerBlockedByMe(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57AF1F8E27483721);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkAmIBlockedByPlayer(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x87F395D957D4353D);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

float Native_networkGetPlayerLoudness(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21A1684A25C2867F);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_networkSetTalkerProximity(bool& success, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCBF12D65F95AD686);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_networkGetTalkerProximity(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84F0F13120B4E098);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_networkSetVoiceActive(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBABEC9E69A91C57B);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkRemainInGameChat(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCFEB46DCD7D8D5EB);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkOverrideTransitionChat(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF66059A131AA269);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetTeamOnlyChat(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD5B4883AC32F24C3);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetScriptControllingTeams(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x265559DA40B3F327);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkSetSameTeamAsLocalPlayer(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4348BFDA56023A2F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkOverrideTeamRestrictions(bool& success, int32_t _team, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F697A66CE78674E);
	ctx->Reset();
	ctx->Push(_team);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetOverrideSpectatorMode(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70DA3BF8DACD3210);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetOverrideTutorialSessionChat(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C5C1E2C2FF814B1);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetProximityAffectsTeam(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D7AFCBF21C51712);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetNoSpectatorChat(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF46A1E03E8755980);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetIgnoreSpectatorChatLimitsSameTeam(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A5D89D7769A40D8);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkOverrideChatRestrictions(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3039AE5AD2C9C0C4);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkOverrideSendRestrictions(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97DD4C5944CC2E6A);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkOverrideSendRestrictionsAll(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57B192B4D4AD23D5);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkOverrideReceiveRestrictions(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDDF73E2B1FEC5AB4);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkOverrideReceiveRestrictionsAll(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0FF2862B61A58AF9);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetVoiceChannel(bool& success, int32_t _channel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF6212C2EFEF1A23);
	ctx->Reset();
	ctx->Push(_channel);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkClearVoiceChannel(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE036A705F989E049);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkApplyVoiceProximityOverride(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDBD2056652689917);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkClearVoiceProximityOverride(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF03755696450470C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEnableVoiceBandwidthRestriction(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E3AA4CA2B6FB0EE);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkDisableVoiceBandwidthRestriction(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA575C391FEA25CC);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkGetMuteCountForPlayer(bool& success, int32_t _p0, float& _p1, float& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADB57E5B663CCA8B);
	ctx->Reset();
	ctx->Push(_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p1 = ptr_p1;
	_p2 = ptr_p2;
}

void Native_networkSetSpectatorToNonSpectatorTextChat(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8EF52ACAECC51D9C);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkTextChatIsTyping(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FCF4D7069B09026);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_shutdownAndLaunchSinglePlayerGame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x593850C16A36B692);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_shutdownAndLoadMostRecentSave(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9ECA15ADFE141431);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkSetFriendlyFireOption(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF808475FA571D823);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetRichPresence(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DCCACDCFC569362);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetRichPresenceString(bool& success, int32_t _p0, const char* _textLabel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E200C2BCF4164EB);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(SaveString(_textLabel));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_networkGetTimeoutTime(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5ED0356A0CE3A34F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_networkLeavePedBehindBeforeWarp(bool& success, int32_t _player, float _x, float _y, float _z, uint8_t _p4, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9769F811D1785B03);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _p4);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkLeavePedBehindBeforeCutscene(bool& success, int32_t _player, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF22E0F32968E967);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeAllStickyBombsFromEntity(bool& success, int32_t _entity, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x715135F4B82AC90D);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkKeepEntityCollisionDisabledAfterAnimScene(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17C9E241111A674D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkIsAnyPlayerNear(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E4C123D1C8A710E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkClanServiceIsValid(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x579CCED0265D4896);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkClanPlayerIsActive(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB124B57F571D8F18);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkClanPlayerGetDesc(bool& success, int32_t& _clanDesc, int32_t _bufferSize, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEEE6EACBE8874FBA);
	ctx->Reset();
	auto ptr_clanDesc = _clanDesc;
	ctx->Push(&ptr_clanDesc);
	ctx->Push(_bufferSize);
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_clanDesc = ptr_clanDesc;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkClanIsRockstarClan(bool& success, int32_t& _clanDesc, int32_t _bufferSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7543BB439F63792B);
	ctx->Reset();
	auto ptr_clanDesc = _clanDesc;
	ctx->Push(&ptr_clanDesc);
	ctx->Push(_bufferSize);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_clanDesc = ptr_clanDesc;
	return ctx->ResultBool();
}

void Native_networkClanGetUiFormattedTag(bool& success, int32_t& _clanDesc, int32_t _bufferSize, const char*& _formattedTag) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF45352426FF3A4F0);
	ctx->Reset();
	auto ptr_clanDesc = _clanDesc;
	ctx->Push(&ptr_clanDesc);
	ctx->Push(_bufferSize);
	auto ptr_formattedTag = SaveString(_formattedTag);
	ctx->Push(&ptr_formattedTag);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_clanDesc = ptr_clanDesc;
	_formattedTag = ptr_formattedTag;
}

int32_t Native_networkClanGetLocalMembershipsCount(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F471B79ACC90BEF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkClanGetMembershipDesc(bool& success, int32_t& _memberDesc, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48DE78AF2C8885B8);
	ctx->Reset();
	auto ptr_memberDesc = _memberDesc;
	ctx->Push(&ptr_memberDesc);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_memberDesc = ptr_memberDesc;
	return ctx->ResultBool();
}

uint8_t Native_networkClanDownloadMembership(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA989044E70010ABE);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultBool();
}

uint8_t Native_networkClanDownloadMembershipPending(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B9E023DC6EBEDC0);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_networkClanAnyDownloadMembershipPending(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3F64A6A91432477);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkClanRemoteMembershipsAreInCache(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB6E6FEE99D866B2);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

int32_t Native_networkClanGetMembershipCount(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAAB11F6C4ADBC2C1);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultInt();
}

uint8_t Native_networkClanGetMembershipValid(bool& success, int32_t& _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48A59CF88D43DF0E);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_networkClanGetMembership(bool& success, int32_t& _p0, int32_t& _clanMembership, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8BC2011F67B3411);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	auto ptr_clanMembership = _clanMembership;
	ctx->Push(&ptr_clanMembership);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	_clanMembership = ptr_clanMembership;
	return ctx->ResultBool();
}

uint8_t Native_networkClanJoin(bool& success, int32_t _clanDesc) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9FAAA4F4FC71F87F);
	ctx->Reset();
	ctx->Push(_clanDesc);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkClanCrewinfoGetStringValue(bool& success, const char* _animDict, const char* _animName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x729E3401F0430686);
	ctx->Reset();
	ctx->Push(SaveString(_animDict));
	ctx->Push(SaveString(_animName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkClanCrewinfoGetCrewranktitle(bool& success, int32_t _p0, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B51EDBEFC301339);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(SaveString(_p1));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkClanHasCrewinfoMetadataBeenReceived(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC32EA7A2F6CA7557);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkClanGetEmblemTxdName(bool& success, int32_t& _netHandle, const char*& _txdName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5835D9CD92E83184);
	ctx->Reset();
	auto ptr_netHandle = _netHandle;
	ctx->Push(&ptr_netHandle);
	auto ptr_txdName = SaveString(_txdName);
	ctx->Push(&ptr_txdName);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_netHandle = ptr_netHandle;
	_txdName = ptr_txdName;
	return ctx->ResultBool();
}

uint8_t Native_networkClanRequestEmblem(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13518FF1C6B28938);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkClanIsEmblemReady(bool& success, int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA134777FF7F33331);
	ctx->Reset();
	ctx->Push(_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

void Native_networkClanReleaseEmblem(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x113E6E3E50E286B0);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkGetPrimaryClanDataClear(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9AA46BADAD0E27ED);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkGetPrimaryClanDataCancel(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x042E4B70B93E6054);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkGetPrimaryClanDataStart(bool& success, int32_t& _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE86D8191B762107);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_networkGetPrimaryClanDataPending(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5074DB804E28CE7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkGetPrimaryClanDataSuccess(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B4F04F19376A0BA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkGetPrimaryClanDataNew(bool& success, int32_t& _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC080FF658B2E41DA);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

void Native_setNetworkIdCanMigrate(bool& success, int32_t _netId, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x299EEB23175895FC);
	ctx->Reset();
	ctx->Push(_netId);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setNetworkIdExistsOnAllMachines(bool& success, int32_t _netId, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE05E81A888FA63C8);
	ctx->Reset();
	ctx->Push(_netId);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setNetworkIdAlwaysExistsForPlayer(bool& success, int32_t _netId, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA8A024587329F36A);
	ctx->Reset();
	ctx->Push(_netId);
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setNetworkIdCanBeReassigned(bool& success, int32_t _netId, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D724B400A7E8FFC);
	ctx->Reset();
	ctx->Push(_netId);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetEntityCanBlend(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD830567D88A1E873);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetObjectCanBlendWhenFixed(bool& success, int32_t _object, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0379DAF89BA09AA5);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetEntityOnlyExistsForParticipants(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1CA12B18AEF5298);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setNetworkIdVisibleInCutscene(bool& success, int32_t _netId, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6928482543022B4);
	ctx->Reset();
	ctx->Push(_netId);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setNetworkIdVisibleInCutsceneHack(bool& success, int32_t _netId, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x32EBD154CB6B8B99);
	ctx->Reset();
	ctx->Push(_netId);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setNetworkIdVisibleInCutsceneRemainHack(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x76B3F29D3F967692);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setNetworkCutsceneEntities(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAAA553E7DD28A457);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_areCutsceneEntitiesNetworked(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66D6A5E9C511214A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setNetworkIdPassControlInTutorial(bool& success, int32_t _netId, uint8_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3FA36981311FA4FF);
	ctx->Reset();
	ctx->Push(_netId);
	ctx->Push((int32_t) _state);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isNetworkIdOwnedByParticipant(bool& success, int32_t _netId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1607996431332DF);
	ctx->Reset();
	ctx->Push(_netId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setLocalPlayerVisibleInCutscene(bool& success, uint8_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1065D68947E7B6E);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setLocalPlayerInvisibleLocally(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE5F773C1A1D9D168);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setLocalPlayerVisibleLocally(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7619364C82D3BF14);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerInvisibleLocally(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x12B37D54667DB0B8);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerVisibleLocally(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFAA10F1FAFB11AF2);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_fadeOutLocalPlayer(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x416DBD4CD6ED8DD2);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkFadeOutEntity(bool& success, int32_t _entity, uint8_t _normal, uint8_t _slow) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE564951F95E09ED);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _normal);
	ctx->Push((int32_t) _slow);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkFadeInEntity(bool& success, int32_t _entity, uint8_t _state, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F4ED342ACEFE62D);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _state);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkIsPlayerFading(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x631DC5DFF4B110E3);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsEntityFading(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x422F32CC7E56ABAD);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPlayerInCutscene(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE73092F4157CD126);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setEntityVisibleInCutscene(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE0031D3C8F36AB82);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityLocallyInvisible(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE135A9FF3F5D05D8);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityLocallyVisible(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x241E289B5C059EDC);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isDamageTrackerActiveOnNetworkId(bool& success, int32_t _netID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E192E33AD436366);
	ctx->Reset();
	ctx->Push(_netID);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_activateDamageTrackerOnNetworkId(bool& success, int32_t _netID, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD45B1FFCCD52FF19);
	ctx->Reset();
	ctx->Push(_netID);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isDamageTrackerActiveOnPlayer(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2092A1EAA7FD45F);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_activateDamageTrackerOnPlayer(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBEC0816FF5ACBCDA);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isSphereVisibleToAnotherMachine(bool& success, float _p0, float _p1, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD82CF8E64C8729D8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isSphereVisibleToPlayer(bool& success, int32_t _p0, float _p1, float _p2, float _p3, float _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC3A310219E5DA62);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_reserveNetworkMissionObjects(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E5C93BD0C32FBF8);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_reserveNetworkMissionPeds(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB60FEBA45333D36F);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_reserveNetworkMissionVehicles(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x76B02E21ED27A469);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_reserveLocalNetworkMissionObjects(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x797F9C5E661D920E);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_reserveLocalNetworkMissionPeds(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C8DF5D129595281);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_reserveLocalNetworkMissionVehicles(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42613035157E4208);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_canRegisterMissionObjects(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x800DD4721A8B008B);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_canRegisterMissionPeds(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBCBF4FEF9FA5D781);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_canRegisterMissionVehicles(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7277F1F2E085EE74);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_canRegisterMissionPickups(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A49D1CB6E34AF72);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_canRegisterMissionDoors(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE16AA70CE9BEEDC3);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_canRegisterMissionEntities(bool& success, int32_t _ped_amt, int32_t _vehicle_amt, int32_t _object_amt, int32_t _pickup_amt) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x69778E7564BADE6D);
	ctx->Reset();
	ctx->Push(_ped_amt);
	ctx->Push(_vehicle_amt);
	ctx->Push(_object_amt);
	ctx->Push(_pickup_amt);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getNumReservedMissionObjects(bool& success, uint8_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA81B5F10BC43AC2);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getNumReservedMissionPeds(bool& success, uint8_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F13D5AE5CB17E17);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getNumReservedMissionVehicles(bool& success, uint8_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF3A965906452031);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getNumCreatedMissionObjects(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x12B6281B6C6706C0);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getNumCreatedMissionPeds(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB215C4B56A7FAE7);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getNumCreatedMissionVehicles(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0CD9AB83489430EA);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_getReservedMissionEntitiesInArea(bool& success, float _x, float _y, float _z, int32_t _p3, int32_t& _out1, int32_t& _out2, int32_t& _out3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE42D626EEC94E5D9);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	auto ptr_out1 = _out1;
	ctx->Push(&ptr_out1);
	auto ptr_out2 = _out2;
	ctx->Push(&ptr_out2);
	auto ptr_out3 = _out3;
	ctx->Push(&ptr_out3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_out1 = ptr_out1;
	_out2 = ptr_out2;
	_out3 = ptr_out3;
}

int32_t Native_getMaxNumNetworkObjects(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7BE335216B5EC7C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getMaxNumNetworkPeds(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C1F7D49C39D2289);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getMaxNumNetworkVehicles(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0AFCE529F69B21FF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getMaxNumNetworkPickups(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA72835064DD63E4C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_networkSetObjectScopeDistance(bool& success, int32_t _object, float _range) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA7F0B77D80A4EB7);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_range);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkAllowCloningWhileInTutorial(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F1A4B45B7693B95);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetTaskCutsceneInscopeMultipler(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6FCEE21C6FCEE21);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getNetworkTime(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A5487FE9FAA6B48);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getNetworkTimeAccurate(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x89023FBBF9200E9F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_hasNetworkTimeStarted(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46718ACEEDEAFC84);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getTimeOffset(bool& success, int32_t _timeA, int32_t _timeB) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x017008CCDAD48503);
	ctx->Reset();
	ctx->Push(_timeA);
	ctx->Push(_timeB);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isTimeLessThan(bool& success, int32_t _timeA, int32_t _timeB) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB2CF5148012C8D0);
	ctx->Reset();
	ctx->Push(_timeA);
	ctx->Push(_timeB);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isTimeMoreThan(bool& success, int32_t _timeA, int32_t _timeB) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE350F8651E4346C);
	ctx->Reset();
	ctx->Push(_timeA);
	ctx->Push(_timeB);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isTimeEqualTo(bool& success, int32_t _timeA, int32_t _timeB) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF5BC95857BD6D512);
	ctx->Reset();
	ctx->Push(_timeA);
	ctx->Push(_timeB);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getTimeDifference(bool& success, int32_t _timeA, int32_t _timeB) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2C6FC031D46FFF0);
	ctx->Reset();
	ctx->Push(_timeA);
	ctx->Push(_timeB);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

const char* Native_getTimeAsString(bool& success, int32_t _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9E23B1777A927DAD);
	ctx->Reset();
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

const char* Native_getCloudTimeAsString(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF12E6CD06C73D69E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

int32_t Native_getCloudTimeAsInt(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A73240B49945C76);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_convertPosixTime(bool& success, int32_t _posixTime, int32_t& _timeStructure) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC97AF97FA68E5D5);
	ctx->Reset();
	ctx->Push(_posixTime);
	auto ptr_timeStructure = _timeStructure;
	ctx->Push(&ptr_timeStructure);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_timeStructure = ptr_timeStructure;
}

void Native_networkSetInSpectatorMode(bool& success, uint8_t _toggle, int32_t _playerPed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x423DE3854BB50894);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	ctx->Push(_playerPed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetInSpectatorModeExtended(bool& success, uint8_t _toggle, int32_t _playerPed, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x419594E137637120);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	ctx->Push(_playerPed);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetInFreeCamMode(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC18DB55AE19E046);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetAntagonisticToPlayer(bool& success, uint8_t _toggle, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C707A667DF8B9FA);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkIsInSpectatorMode(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x048746E388762E11);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkSetInMpCutscene(bool& success, uint8_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9CA5DE655269FEC4);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkIsInMpCutscene(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6CC27C9FA2040220);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsPlayerInMpCutscene(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x63F9EE203C3619F2);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkHideProjectileInCutscene(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFAC18E7356BD3210);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setNetworkVehicleRespotTimer(bool& success, int32_t _netId, int32_t _time, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC51713AB6EC36E8);
	ctx->Reset();
	ctx->Push(_netId);
	ctx->Push(_time);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setNetworkVehicleAsGhost(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6274C4712850841E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setNetworkVehicleMaxPositionDeltaMultiplier(bool& success, int32_t _vehicle, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2A707979FE754DC);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setNetworkEnableHighSpeedEdgeFallDetection(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x838DA0936A24ED4D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setLocalPlayerAsGhost(bool& success, uint8_t _toggle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FFE9B4144F9712F);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isEntityAGhost(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21D04D7BC538C146);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setNonParticipantsOfThisScriptAsGhosts(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13F1FCB111B820B0);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRemotePlayerAsGhost(bool& success, int32_t _player, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7C511FA1C5BDA38);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGhostAlpha(bool& success, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x658500AE6D723A7E);
	ctx->Reset();
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetGhostAlpha(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17330EBF2F2124A8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityGhostedForGhostPlayers(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4BA166079D658ED4);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setInvertGhosting(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7B6C73CAD419BCF);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isEntityInGhostCollision(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EF7649B64D7FF10);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_usePlayerColourInsteadOfTeamColour(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77758139EC9B66C7);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_networkCreateSynchronisedScene(bool& success, float _x, float _y, float _z, float _xRot, float _yRot, float _zRot, int32_t _rotationOrder, uint8_t _useOcclusionPortal, uint8_t _looped, float _p9, float _animTime, float _p11) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7CD6BC4C2BBDD526);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_rotationOrder);
	ctx->Push((int32_t) _useOcclusionPortal);
	ctx->Push((int32_t) _looped);
	ctx->Push(_p9);
	ctx->Push(_animTime);
	ctx->Push(_p11);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_networkAddPedToSynchronisedScene(bool& success, int32_t _ped, int32_t _netScene, const char* _animDict, const char* _animnName, float _speed, float _speedMultiplier, int32_t _duration, int32_t _flag, float _playbackRate, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x742A637471BCECD9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_netScene);
	ctx->Push(SaveString(_animDict));
	ctx->Push(SaveString(_animnName));
	ctx->Push(_speed);
	ctx->Push(_speedMultiplier);
	ctx->Push(_duration);
	ctx->Push(_flag);
	ctx->Push(_playbackRate);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkAddPedToSynchronisedSceneWithIk(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5EAFE473E45C442);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkAddEntityToSynchronisedScene(bool& success, int32_t _entity, int32_t _netScene, const char* _animDict, const char* _animName, float _speed, float _speedMulitiplier, int32_t _flag) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2404D68CBC855FA);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_netScene);
	ctx->Push(SaveString(_animDict));
	ctx->Push(SaveString(_animName));
	ctx->Push(_speed);
	ctx->Push(_speedMulitiplier);
	ctx->Push(_flag);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkAddMapEntityToSynchronisedScene(bool& success, int32_t _netScene, uint32_t _modelHash, float _x, float _y, float _z, float _p5, const char* _p6, float _p7, float _p8, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45F35C0EDC33B03B);
	ctx->Reset();
	ctx->Push(_netScene);
	ctx->Push(_modelHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p5);
	ctx->Push(SaveString(_p6));
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkAddSynchronisedSceneCamera(bool& success, int32_t _netScene, const char* _animDict, const char* _animName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF8BD3B0BD6D42D7);
	ctx->Reset();
	ctx->Push(_netScene);
	ctx->Push(SaveString(_animDict));
	ctx->Push(SaveString(_animName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkAttachSynchronisedSceneToEntity(bool& success, int32_t _netScene, int32_t _entity, int32_t _bone) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x478DCBD2A98B705A);
	ctx->Reset();
	ctx->Push(_netScene);
	ctx->Push(_entity);
	ctx->Push(_bone);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkStartSynchronisedScene(bool& success, int32_t _netScene) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A1B3FCDB36C8697);
	ctx->Reset();
	ctx->Push(_netScene);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkStopSynchronisedScene(bool& success, int32_t _netScene) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC254481A4574CB2F);
	ctx->Reset();
	ctx->Push(_netScene);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_networkGetLocalSceneFromNetworkId(bool& success, int32_t _netId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02C40BF885C567B6);
	ctx->Reset();
	ctx->Push(_netId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_networkForceLocalUseOfSyncedSceneCamera(bool& success, int32_t _netScene) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC9B43A33D09CADA7);
	ctx->Reset();
	ctx->Push(_netScene);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkAllowRemoteSyncedSceneLocalPlayerRequests(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x144DA052257AE7D8);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkFindLargestBunchOfPlayers(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB1F9381E80FA13F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkStartRespawnSearchForPlayer(bool& success, int32_t _player, float _x, float _y, float _z, float _radius, float _p5, float _p6, float _p7, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A6FFA2433E2F14C);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkStartRespawnSearchInAngledAreaForPlayer(bool& success, int32_t _player, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _width, float _p8, float _p9, float _p10, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4BA92A18502BCA61);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_width);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkQueryRespawnResults(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C891A251567DFCE);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultInt();
}

void Native_networkCancelRespawnSearch(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB8F2A6F3DF08CBE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkGetRespawnResult(bool& success, int32_t _randomInt, vector3_t& _coordinates, float& _heading) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x371EA43692861CF1);
	ctx->Reset();
	ctx->Push(_randomInt);
	alt::INative::Vector3 converted_coordinates { _coordinates.x, 0, _coordinates.y, 0, _coordinates.z };
	ctx->Push(&converted_coordinates);
	auto ptr_heading = _heading;
	ctx->Push(&ptr_heading);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_coordinates.x = converted_coordinates.x;
	_coordinates.y = converted_coordinates.y;
	_coordinates.z = converted_coordinates.z;
	_heading = ptr_heading;
}

int32_t Native_networkGetRespawnResultFlags(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C34F1208B8923FD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_networkStartSoloTutorialSession(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17E0198B3882C2CB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkAllowGangToJoinTutorialSession(bool& success, int32_t _teamId, int32_t _instanceId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB680D403909DC70);
	ctx->Reset();
	ctx->Push(_teamId);
	ctx->Push(_instanceId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEndTutorialSession(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0AFAFF5A51D72F7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkIsInTutorialSession(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADA24309FE08DACF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkWaitingPopClearTutorialSession(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB37E4E6A2388CA7B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsTutorialSessionChangePending(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35F0B98A8387274D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkGetPlayerTutorialSessionInstance(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3B39236746714134);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkArePlayersInSameTutorialSession(bool& success, int32_t _player, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DE986FC9A87C474);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkBlockProxyMigrationBetweenTutorialSessions(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFEA7A352DDB34D52);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkConcealPlayer(bool& success, int32_t _player, uint8_t _toggle, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBBDF066252829606);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkIsPlayerConcealed(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x919B3C98ED8292F9);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkConcealEntity(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1632BE0AC1E62876);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkIsEntityConcealed(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71302EC70689052A);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkOverrideClockTime(bool& success, int32_t _hours, int32_t _minutes, int32_t _seconds) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE679E3E06E363892);
	ctx->Reset();
	ctx->Push(_hours);
	ctx->Push(_minutes);
	ctx->Push(_seconds);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkOverrideClockRate(bool& success, int32_t _ms) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42BF1D2E723B6D7E);
	ctx->Reset();
	ctx->Push(_ms);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkClearClockTimeOverride(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD972DF67326F966E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkIsClockTimeOverridden(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7C95D322FF57522);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkAddEntityArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x494C8FB299290269);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkAddEntityAngledArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _width) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x376C6375BA60293A);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_width);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkAddClientEntityArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25B99872D588A101);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkAddClientEntityAngledArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B1C623823DB0D9D);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkRemoveEntityArea(bool& success, int32_t _areaHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93CF869BAA0C4874);
	ctx->Reset();
	ctx->Push(_areaHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkEntityAreaDoesExist(bool& success, int32_t _areaHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE64A3CA08DFA37A9);
	ctx->Reset();
	ctx->Push(_areaHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkEntityAreaHaveAllReplied(bool& success, int32_t _areaHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4DF7CFFF471A7FB1);
	ctx->Reset();
	ctx->Push(_areaHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkEntityAreaIsOccupied(bool& success, int32_t _areaHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A2D4E8BF4265B0F);
	ctx->Reset();
	ctx->Push(_areaHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkUseHighPrecisionBlending(bool& success, int32_t _netID, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B1813ABA29016C5);
	ctx->Reset();
	ctx->Push(_netID);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetCustomArenaBallParams(bool& success, int32_t _netId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6FCECCF4721D679);
	ctx->Reset();
	ctx->Push(_netId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEntityUseHighPrecisionRotation(bool& success, int32_t _netId, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95BAF97C82464629);
	ctx->Reset();
	ctx->Push(_netId);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkRequestCloudBackgroundScripts(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x924426BFFD82E915);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsCloudBackgroundScriptRequestPending(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8132C0EB8B2B3293);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkRequestCloudTunables(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42FB3B532D526E6C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkIsTunableCloudRequestPending(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0467C11ED88B7D28);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkGetTunableCloudCrc(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x10BD227A753B0D84);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkDoesTunableExist(bool& success, const char* _tunableContext, const char* _tunableName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85E5F8B9B898B20A);
	ctx->Reset();
	ctx->Push(SaveString(_tunableContext));
	ctx->Push(SaveString(_tunableName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkAccessTunableInt(bool& success, const char* _tunableContext, const char* _tunableName, int32_t& _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8BE1146DFD5D4468);
	ctx->Reset();
	ctx->Push(SaveString(_tunableContext));
	ctx->Push(SaveString(_tunableName));
	auto ptr_value = _value;
	ctx->Push(&ptr_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_value = ptr_value;
	return ctx->ResultBool();
}

uint8_t Native_networkAccessTunableFloat(bool& success, const char* _tunableContext, const char* _tunableName, float& _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE5608CA7BC163A5F);
	ctx->Reset();
	ctx->Push(SaveString(_tunableContext));
	ctx->Push(SaveString(_tunableName));
	auto ptr_value = _value;
	ctx->Push(&ptr_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_value = ptr_value;
	return ctx->ResultBool();
}

uint8_t Native_networkAccessTunableBool(bool& success, const char* _tunableContext, const char* _tunableName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA6A47A573ABB75A);
	ctx->Reset();
	ctx->Push(SaveString(_tunableContext));
	ctx->Push(SaveString(_tunableName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkDoesTunableExistHash(bool& success, uint32_t _tunableContext, uint32_t _tunableName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4E53E1419D81127);
	ctx->Reset();
	ctx->Push(_tunableContext);
	ctx->Push(_tunableName);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkAccessTunableModificationDetectionClear(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFAFC23AEE23868DB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkAccessTunableIntHash(bool& success, uint32_t _tunableContext, uint32_t _tunableName, int32_t& _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x40FCE03E50E8DBE8);
	ctx->Reset();
	ctx->Push(_tunableContext);
	ctx->Push(_tunableName);
	auto ptr_value = _value;
	ctx->Push(&ptr_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_value = ptr_value;
	return ctx->ResultBool();
}

uint8_t Native_networkAccessTunableIntModificationDetectionRegistrationHash(bool& success, uint32_t _contextHash, uint32_t _nameHash, int32_t& _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A8B55FDA4C8DDEF);
	ctx->Reset();
	ctx->Push(_contextHash);
	ctx->Push(_nameHash);
	auto ptr_value = _value;
	ctx->Push(&ptr_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_value = ptr_value;
	return ctx->ResultBool();
}

uint8_t Native_networkAccessTunableFloatHash(bool& success, uint32_t _tunableContext, uint32_t _tunableName, float& _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x972BC203BBC4C4D5);
	ctx->Reset();
	ctx->Push(_tunableContext);
	ctx->Push(_tunableName);
	auto ptr_value = _value;
	ctx->Push(&ptr_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_value = ptr_value;
	return ctx->ResultBool();
}

uint8_t Native_networkAccessTunableFloatModificationDetectionRegistrationHash(bool& success, uint32_t _contextHash, uint32_t _nameHash, float& _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1950DAE9848A4739);
	ctx->Reset();
	ctx->Push(_contextHash);
	ctx->Push(_nameHash);
	auto ptr_value = _value;
	ctx->Push(&ptr_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_value = ptr_value;
	return ctx->ResultBool();
}

uint8_t Native_networkAccessTunableBoolHash(bool& success, uint32_t _tunableContext, uint32_t _tunableName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA16B69D93D71A45);
	ctx->Reset();
	ctx->Push(_tunableContext);
	ctx->Push(_tunableName);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkAccessTunableBoolModificationDetectionRegistrationHash(bool& success, uint32_t _contextHash, uint32_t _nameHash, uint8_t& _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x697F508861875B42);
	ctx->Reset();
	ctx->Push(_contextHash);
	ctx->Push(_nameHash);
	auto ptr_value = (int32_t) _value;
	ctx->Push(&ptr_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_value = (bool) ptr_value;
	return ctx->ResultBool();
}

uint8_t Native_networkTryAccessTunableBoolHash(bool& success, uint32_t _tunableContext, uint32_t _tunableName, uint8_t _defaultValue) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7420099936CE286);
	ctx->Reset();
	ctx->Push(_tunableContext);
	ctx->Push(_tunableName);
	ctx->Push((int32_t) _defaultValue);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkGetContentModifierListId(bool& success, uint32_t _contentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x187382F8A3E0A6C3);
	ctx->Reset();
	ctx->Push(_contentHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkGetBoneIdOfFatalHit(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7DB53B37A2F211A0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_networkResetBodyTracker(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x72433699B4E6DD64);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_networkGetNumberBodyTrackerHits(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD38C4A6D047C019D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkHasBoneBeenHitByKiller(bool& success, int32_t _boneIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E0BF682CC778D49);
	ctx->Reset();
	ctx->Push(_boneIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkSetAttributeDamageToPlayer(bool& success, int32_t _ped, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0EDE326D47CD0F3E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkTriggerDamageEventForZeroDamage(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x890E2C5ABED7236D);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkTriggerDamageEventForZeroWeaponHash(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x38B7C51AB1EDC7D8);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetNoLongerNeeded(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3FC795691834481D);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkExplodeVehicle(bool& success, int32_t _vehicle, uint8_t _isAudible, uint8_t _isInvisible, int32_t _netId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x301A42153C9AD707);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _isAudible);
	ctx->Push((int32_t) _isInvisible);
	ctx->Push(_netId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkExplodeHeli(bool& success, int32_t _vehicle, uint8_t _isAudible, uint8_t _isInvisible, int32_t _netId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A5E0621DD815A9A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _isAudible);
	ctx->Push((int32_t) _isInvisible);
	ctx->Push(_netId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkUseLogarithmicBlendingThisFrame(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD71A4ECAB22709E);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkOverrideCoordsAndHeading(bool& success, int32_t _entity, float _x, float _y, float _z, float _heading) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7E30DE9272B6D49);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkEnableExtraVehicleOrientationBlendChecks(bool& success, int32_t _netId, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6717E652B8C8D8A);
	ctx->Reset();
	ctx->Push(_netId);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkDisableProximityMigration(bool& success, int32_t _netID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x407091CF6037118E);
	ctx->Reset();
	ctx->Push(_netID);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetPropertyId(bool& success, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1775961C2FBBCB5C);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkClearPropertyId(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC2B82527CA77053E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetPlayerMentalState(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x367EF5E2F439B4C6);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSetMinimumRankForMission(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x94538037EE44F5CF);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkCacheLocalPlayerHeadBlendData(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD0BE0BFC927EAC1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkHasCachedPlayerHeadBlendData(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x237D5336A9A54108);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkApplyCachedPlayerHeadBlendData(bool& success, int32_t _ped, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x99B72C7ABDE5C910);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getNumCommerceItems(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2EAC213D5EA0623);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isCommerceDataValid(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA14EEF5B7CD2C30);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_triggerCommerceDataFetch(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB606E6CC59664972);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isCommerceDataFetchInProgress(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D4DC17C38FEAFF0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

const char* Native_getCommerceItemId(bool& success, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x662635855957C411);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

const char* Native_getCommerceItemName(bool& success, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4271092CA7EDF48);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

const char* Native_getCommerceProductPrice(bool& success, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA94551B50B4932C);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

int32_t Native_getCommerceItemNumCats(bool& success, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A7776C709904AB0);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

const char* Native_getCommerceItemCat(bool& success, int32_t _index, int32_t _index2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F44CBF56D79FAC0);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push(_index2);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

void Native_openCommerceStore(bool& success, const char* _p0, const char* _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58C21165F6545892);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	ctx->Push(SaveString(_p1));
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isCommerceStoreOpen(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2EAC52B4019E2782);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setStoreEnabled(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9641A9FF718E9C5E);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_requestCommerceItemImage(bool& success, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2F952104FC6DD4B);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_releaseAllCommerceItemImages(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x72D0706CD6CCDB58);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

const char* Native_getCommerceItemTexturename(bool& success, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x722F5D28B61C5EA8);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

uint8_t Native_isStoreAvailableToUser(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x883D79C4071E18B3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_delayMpStoreOpen(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x265635150FB0D82E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetStoreNetworkGameTracking(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x444C4525ECE0A4B9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isUserOldEnoughToAccessStore(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x59328EB08C5CEB2B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setLastViewedShopItem(bool& success, uint32_t _p0, int32_t _p1, uint32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFAE628F1E9ADB239);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getUserPremiumAccess(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x754615490A029508);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getUserStarterAccess(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x155467ACA0F55705);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_cloudDeleteMemberFile(bool& success, const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC64DED7EF0D2FE37);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_cloudHasRequestCompleted(bool& success, int32_t _requestId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C61B39930D045DA);
	ctx->Reset();
	ctx->Push(_requestId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_cloudDidRequestSucceed(bool& success, int32_t _requestId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A3D5568AF297CD5);
	ctx->Reset();
	ctx->Push(_requestId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_cloudCheckAvailability(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F18196C8D38768D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_cloudIsCheckingAvailability(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7ABAC5DE675EE3B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_cloudGetAvailabilityCheckResult(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0B0CC10720653F3B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getContentToLoadType(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B0C2964BA471961);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_getIsLaunchFromLiveArea(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88B588B41FF7868E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getIsLiveAreaLaunchWithContent(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x67FC09BC554A75E5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_clearServiceEventArguments(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x966DD84FB6A46017);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_ugcCopyContent(bool& success, int32_t& _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x152D90E4C1B4738A);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

uint8_t Native_ugcIsCreating(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9FEDF86898F100E9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ugcHasCreateFinished(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E24341A7F92A74B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ugcDidCreateSucceed(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x24E4E51FC16305F9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_ugcGetCreateResult(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFBC5E768C7A77A6A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

const char* Native_ugcGetCreateContentId(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC55A0B40FFB1ED23);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

void Native_ugcClearCreateResult(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17440AA15D1D3739);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_ugcQueryMyContent(bool& success, int32_t _p0, int32_t _p1, int32_t& _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9BF438815F5D96EA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p2 = ptr_p2;
	return ctx->ResultBool();
}

uint8_t Native_ugcQueryByCategory(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, const char* _p3, int32_t _p4, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x692D58DF40657E8C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(SaveString(_p3));
	ctx->Push(_p4);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ugcQueryByContentId(bool& success, const char* _contentId, uint8_t _latestVersion, const char* _contentTypeName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x158EC424F35EC469);
	ctx->Reset();
	ctx->Push(SaveString(_contentId));
	ctx->Push((int32_t) _latestVersion);
	ctx->Push(SaveString(_contentTypeName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ugcQueryByContentIds(bool& success, int32_t& _data, int32_t _count, uint8_t _latestVersion, const char* _contentTypeName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7397A83F7A2A462);
	ctx->Reset();
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	ctx->Push(_count);
	ctx->Push((int32_t) _latestVersion);
	ctx->Push(SaveString(_contentTypeName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_data = ptr_data;
	return ctx->ResultBool();
}

uint8_t Native_ugcQueryMostRecentlyCreatedContent(bool& success, int32_t _offset, int32_t _count, const char* _contentTypeName, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D4CB481FAC835E8);
	ctx->Reset();
	ctx->Push(_offset);
	ctx->Push(_count);
	ctx->Push(SaveString(_contentTypeName));
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ugcGetBookmarkedContent(bool& success, int32_t _p0, int32_t _p1, const char* _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD5A4B59980401588);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(SaveString(_p2));
	auto ptr_p3 = _p3;
	ctx->Push(&ptr_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p3 = ptr_p3;
	return ctx->ResultBool();
}

uint8_t Native_ugcGetMyContent(bool& success, int32_t _p0, int32_t _p1, const char* _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3195F8DD0D531052);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(SaveString(_p2));
	auto ptr_p3 = _p3;
	ctx->Push(&ptr_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p3 = ptr_p3;
	return ctx->ResultBool();
}

uint8_t Native_ugcGetFriendContent(bool& success, int32_t _p0, int32_t _p1, const char* _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9E1CCAE8BA4C281);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(SaveString(_p2));
	auto ptr_p3 = _p3;
	ctx->Push(&ptr_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p3 = ptr_p3;
	return ctx->ResultBool();
}

uint8_t Native_ugcGetCrewContent(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, const char* _p3, int32_t& _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F6E2821885CAEE2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(SaveString(_p3));
	auto ptr_p4 = _p4;
	ctx->Push(&ptr_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p4 = ptr_p4;
	return ctx->ResultBool();
}

uint8_t Native_ugcGetGetByCategory(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, const char* _p3, int32_t& _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x678BB03C1A3BD51E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(SaveString(_p3));
	auto ptr_p4 = _p4;
	ctx->Push(&ptr_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p4 = ptr_p4;
	return ctx->ResultBool();
}

uint8_t Native_ugcGetGetByContentId(bool& success, const char* _contentId, const char* _contentTypeName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x815E5E3073DA1D67);
	ctx->Reset();
	ctx->Push(SaveString(_contentId));
	ctx->Push(SaveString(_contentTypeName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ugcGetGetByContentIds(bool& success, int32_t& _data, int32_t _dataCount, const char* _contentTypeName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8322EEB38BE7C26);
	ctx->Reset();
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	ctx->Push(_dataCount);
	ctx->Push(SaveString(_contentTypeName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_data = ptr_data;
	return ctx->ResultBool();
}

uint8_t Native_ugcGetMostRecentlyCreatedContent(bool& success, int32_t _p0, int32_t _p1, int32_t& _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7862BC5ED1DFD7E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	auto ptr_p3 = _p3;
	ctx->Push(&ptr_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p2 = ptr_p2;
	_p3 = ptr_p3;
	return ctx->ResultBool();
}

uint8_t Native_ugcGetMostRecentlyPlayedContent(bool& success, int32_t _p0, int32_t _p1, int32_t& _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97A770BEEF227E2B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	auto ptr_p3 = _p3;
	ctx->Push(&ptr_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p2 = ptr_p2;
	_p3 = ptr_p3;
	return ctx->ResultBool();
}

uint8_t Native_ugcGetTopRatedContent(bool& success, int32_t _p0, int32_t _p1, int32_t& _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5324A0E3E4CE3570);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	auto ptr_p3 = _p3;
	ctx->Push(&ptr_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p2 = ptr_p2;
	_p3 = ptr_p3;
	return ctx->ResultBool();
}

void Native_ugcCancelQuery(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE9B99B6853181409);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_ugcIsGetting(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD53ACDBEF24A46E8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ugcHasGetFinished(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02ADA21EA2F6918F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ugcDidGetSucceed(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x941E5306BCD7C2C7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ugcWasQueryForceCancelled(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC87E740D9F3872CC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_ugcGetQueryResult(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEDF7F927136C224B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_ugcGetContentNum(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE0A6138401BCB837);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_ugcGetContentTotal(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x769951E2455E2EB5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint32_t Native_ugcGetContentHash(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A17A27D75C74887);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

void Native_ugcClearQueryResults(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA96394A0EECFA65);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

const char* Native_ugcGetContentUserId(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD67AD041A394C9C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

uint8_t Native_ugcGetContentCreatorGamerHandle(bool& success, int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x584770794D758C18);
	ctx->Reset();
	ctx->Push(_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

uint8_t Native_ugcGetContentCreatedByLocalPlayer(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C8D2739BA44AF0F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

const char* Native_ugcGetContentUserName(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x703F12425ECA8BF5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

uint8_t Native_ugcGetContentIsUsingScNickname(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAEAB987727C5A8A4);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_ugcGetContentCategory(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7BAB11E7C9C6C5A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

const char* Native_ugcGetContentId(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55AA95F481D694D2);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

const char* Native_ugcGetRootContentId(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0173D6BFF4E0348);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

const char* Native_ugcGetContentName(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF09786A7FCAB582);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

int32_t Native_ugcGetContentDescriptionHash(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7CF0448787B23758);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

const char* Native_ugcGetContentPath(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBAF6BABF9E7CCC13);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

void Native_ugcGetContentUpdatedDate(bool& success, int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCFD115B373C0DF63);
	ctx->Reset();
	ctx->Push(_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p1 = ptr_p1;
}

int32_t Native_ugcGetContentFileVersion(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x37025B27D9B658B1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_ugcGetContentHasLoResPhoto(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D610EB0FEA716D9);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ugcGetContentHasHiResPhoto(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FCC39C46C3C03BD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_ugcGetContentLanguage(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x32DD916F3F7C9672);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_ugcGetContentIsPublished(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3054F114121C21EA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ugcGetContentIsVerified(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9240A96C74CCA13);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

float Native_ugcGetContentRating(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1ACCFBA3D8DAB2EE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

int32_t Native_ugcGetContentRatingCount(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x759299C5BB31D2A9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_ugcGetContentRatingPositiveCount(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x87E5C46C187FE0AE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_ugcGetContentRatingNegativeCount(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E548C0D7AE39FF9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_ugcGetContentHasPlayerRecord(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70EA8DA57840F9BE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ugcGetContentHasPlayerBookmarked(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x993CBE59D350D225);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_ugcRequestContentDataFromIndex(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x171DF6A0C07FB3DC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_ugcRequestContentDataFromParams(bool& success, const char* _contentTypeName, const char* _contentId, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FD2990AF016795E);
	ctx->Reset();
	ctx->Push(SaveString(_contentTypeName));
	ctx->Push(SaveString(_contentId));
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_ugcRequestCachedDescription(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E0165278F6339EE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_ugcIsDescriptionRequestInProgress(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D5DC831176D0114);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ugcHasDescriptionRequestFinished(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEBFA8D50ADDC54C4);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ugcDidDescriptionRequestSucceed(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x162C23CA83ED0A62);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

const char* Native_ugcGetCachedDescription(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x40F7E66472DF3E5C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

uint8_t Native_ugcReleaseCachedDescription(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A34CD9C3C5BEC44);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_ugcReleaseAllCachedDescriptions(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x68103E2247887242);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_ugcPublish(bool& success, const char* _contentId, const char* _baseContentId, const char* _contentTypeName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DE0F5F50D723CAA);
	ctx->Reset();
	ctx->Push(SaveString(_contentId));
	ctx->Push(SaveString(_baseContentId));
	ctx->Push(SaveString(_contentTypeName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ugcSetBookmarked(bool& success, const char* _contentId, uint8_t _bookmarked, const char* _contentTypeName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x274A1519DFC1094F);
	ctx->Reset();
	ctx->Push(SaveString(_contentId));
	ctx->Push((int32_t) _bookmarked);
	ctx->Push(SaveString(_contentTypeName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ugcSetDeleted(bool& success, int32_t& _p0, uint8_t _p1, const char* _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD05D1A6C74DA3498);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push(SaveString(_p2));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_ugcIsModifying(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45E816772E93A9DB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ugcHasModifyFinished(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x299EF3C576773506);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ugcDidModifySucceed(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x793FF272D5B365F4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_ugcGetModifyResult(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A0A3D1A186A5508);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_ugcClearModifyResult(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1E5E0204A6FCC70);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_ugcGetCreatorsByUserId(bool& success, int32_t& _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB746D20B17F2A229);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

uint8_t Native_ugcHasQueryCreatorsFinished(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x63B406D7884BFA95);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_ugcDidQueryCreatorsSucceed(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D02279C83BE69FE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_ugcGetCreatorNum(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x597F8DBA9B206FC7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_ugcLoadOfflineQuery(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CAE833B0EE0C500);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_ugcClearOfflineQuery(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61A885D3F7CFEE9A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_ugcSetQueryDataFromOffline(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF98DDE0A8ED09323);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_ugcSetUsingOfflineContent(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD75DABC0957BF33);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_ugcIsLanguageSupported(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF53E48461B71EECB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_facebookPostCompletedHeist(bool& success, const char* _heistName, int32_t _cashEarned, int32_t _xpEarned) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x098AB65B9ED9A9EC);
	ctx->Reset();
	ctx->Push(SaveString(_heistName));
	ctx->Push(_cashEarned);
	ctx->Push(_xpEarned);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_facebookPostCreateCharacter(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC48473142545431);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_facebookPostCompletedMilestone(bool& success, int32_t _milestoneId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0AE1F1653B554AB9);
	ctx->Reset();
	ctx->Push(_milestoneId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_facebookHasPostCompleted(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62B9FEC9A11F10EF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_facebookDidPostSucceed(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA75E2B6733DA5142);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_facebookCanPostToFacebook(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43865688AE10F0D7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_textureDownloadRequest(bool& success, int32_t& _gamerHandle, const char* _filePath, const char* _name, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16160DA74A8E74A2);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	ctx->Push(SaveString(_filePath));
	ctx->Push(SaveString(_name));
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
	return ctx->ResultInt();
}

int32_t Native_titleTextureDownloadRequest(bool& success, const char* _filePath, const char* _name, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0B203B4AFDE53A4F);
	ctx->Reset();
	ctx->Push(SaveString(_filePath));
	ctx->Push(SaveString(_name));
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_ugcTextureDownloadRequest(bool& success, const char* _p0, int32_t _p1, int32_t _p2, int32_t _p3, const char* _p4, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x308F96458B7087CC);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(SaveString(_p4));
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_textureDownloadRelease(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x487EB90B98E9FB19);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_textureDownloadHasFailed(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5776ED562C134687);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

const char* Native_textureDownloadGetName(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3448505B6E35262D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

int32_t Native_getStatusOfTextureDownload(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8BD6C6DEA20E82C6);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_networkCheckRosLinkWentdownNotNet(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x60EDD13EB3AC1FF3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkShouldShowStrictNatWarning(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x82A2B386716608F1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkIsCableConnected(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEFFB25453D8600F9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHaveScsPrivateMsgPriv(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66B59CFFD78467AF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHaveRosSocialClubPriv(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x606E4D3E3CCCF3EB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHaveRosBannedPriv(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8020A73847E0CA7D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHaveRosCreateTicketPriv(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0AD7E2AF5349F61);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHaveRosMultiplayerPriv(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F91D5D0B36AA310);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHaveRosLeaderboardWritePriv(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x422D396F80A96547);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHasRosPrivilege(bool& success, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA699957E60D80214);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHasRosPrivilegeEndDate(bool& success, int32_t _privilege, int32_t& _banType, int32_t& _timeData) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC22912B1D85F26B1);
	ctx->Reset();
	ctx->Push(_privilege);
	auto ptr_banType = _banType;
	ctx->Push(&ptr_banType);
	auto ptr_timeData = _timeData;
	ctx->Push(&ptr_timeData);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_banType = ptr_banType;
	_timeData = ptr_timeData;
	return ctx->ResultBool();
}

uint8_t Native_networkHasRosPrivilegePlayedLastGen(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x593570C289A77688);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_networkHasRosPrivilegeSpecialEditionContent(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x91B87C55093DE351);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_networkStartCommunicationPermissionsCheck(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36391F397731595D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkStartUserContentPermissionsCheck(bool& success, int32_t& _netHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDEB2B99A1AF1A2A6);
	ctx->Reset();
	auto ptr_netHandle = _netHandle;
	ctx->Push(&ptr_netHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_netHandle = ptr_netHandle;
	return ctx->ResultInt();
}

void Native_networkSkipRadioResetNextClose(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9465E683B12D3F6B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkSkipRadioResetNextOpen(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA59CCAE5D01E4CE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkSkipRadioWarning(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x659CF2EF7F550C4F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkForceLocalPlayerScarSync(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB7C7F6AD6424304B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkDisableLeaveRemotePedBehind(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC505036A35AFD01B);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkAllowRemoteAttachmentModification(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x267C78C60E806B9A);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkShowChatRestrictionMsc(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6BFF5F84102DF80A);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkShowPsnUgcRestriction(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C497525F803486B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkIsTitleUpdateRequired(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6FB7BB3607D27FA2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkQuitMpToDesktop(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45A83257ED02D9BC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkIsConnectedViaRelay(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16D3D49902F697BB);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

float Native_networkGetAverageLatency(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD414BE129BB81B32);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_networkGetAveragePing(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0E3A041ED6AC2B45);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_networkGetAveragePacketLoss(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x350C23949E43686C);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

int32_t Native_networkGetNumUnackedReliables(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF8FCF9FFC458A1C);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkGetUnreliableResendCount(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3765C3A3E8192E10);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkGetHighestReliableResendCount(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x52C1EADAF7B10302);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_networkReportCodeTamper(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5626D9D6810730D5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

vector3_t Native_networkGetLastEntityPosReceivedOverNetwork(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x64D779659BC37B19);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

vector3_t Native_networkGetLastPlayerPosReceivedOverNetwork(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x125E6D638B8605D4);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

vector3_t Native_networkGetLastVelReceivedOverNetwork(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33DE49EDF4DDE77A);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

vector3_t Native_networkGetPredictedVelocity(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA5FAFCD2C5F5E47);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

void Native_networkDumpNetIfConfig(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAEDF1BC1C133D6E3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkGetSignallingInfo(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2555CF7DA5473794);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
}

void Native_networkGetNetStatisticsInfo(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6FD992C4A1C1B986);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
}

int32_t Native_networkGetPlayerAccountId(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB663CC9FF3407A9);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_networkUgcNav(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC1447451DDB512F0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_createObject(bool& success, uint32_t _modelHash, float _x, float _y, float _z, uint8_t _isNetwork, uint8_t _bScriptHostObj, uint8_t _dynamic) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x509D5878EB39E842);
	ctx->Reset();
	ctx->Push(_modelHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _isNetwork);
	ctx->Push((int32_t) _bScriptHostObj);
	ctx->Push((int32_t) _dynamic);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_createObjectNoOffset(bool& success, uint32_t _modelHash, float _x, float _y, float _z, uint8_t _isNetwork, uint8_t _bScriptHostObj, uint8_t _dynamic) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A294B2138ABB884);
	ctx->Reset();
	ctx->Push(_modelHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _isNetwork);
	ctx->Push((int32_t) _bScriptHostObj);
	ctx->Push((int32_t) _dynamic);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_deleteObject(bool& success, int32_t& _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x539E0AE3E6634B9F);
	ctx->Reset();
	auto ptr_object = _object;
	ctx->Push(&ptr_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_object = ptr_object;
}

uint8_t Native_placeObjectOnGroundProperly(bool& success, int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58A850EAEE20FAA3);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_placeObjectOnGroundOrObjectProperly(bool& success, int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD76EEEF746057FD6);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_rotateObject(bool& success, int32_t _object, float _p1, float _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAFE24E4D29249E4A);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_slideObject(bool& success, int32_t _object, float _toX, float _toY, float _toZ, float _speedX, float _speedY, float _speedZ, uint8_t _collision) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FDFF4107B8C1147);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_toX);
	ctx->Push(_toY);
	ctx->Push(_toZ);
	ctx->Push(_speedX);
	ctx->Push(_speedY);
	ctx->Push(_speedZ);
	ctx->Push((int32_t) _collision);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setObjectTargettable(bool& success, int32_t _object, uint8_t _targettable) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A7391690F5AFD81);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push((int32_t) _targettable);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setObjectForceVehiclesToAvoid(bool& success, int32_t _object, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77F33F2CCF64B3AA);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getClosestObjectOfType(bool& success, float _x, float _y, float _z, float _radius, uint32_t _modelHash, uint8_t _isMission, uint8_t _p6, uint8_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE143FA2249364369);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_modelHash);
	ctx->Push((int32_t) _isMission);
	ctx->Push((int32_t) _p6);
	ctx->Push((int32_t) _p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_hasObjectBeenBroken(bool& success, int32_t _object, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8ABFB70C49CC43E2);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasClosestObjectOfTypeBeenBroken(bool& success, float _p0, float _p1, float _p2, float _p3, uint32_t _modelHash, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x761B0E69AC4D007E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_modelHash);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasClosestObjectOfTypeBeenCompletelyDestroyed(bool& success, float _x, float _y, float _z, float _radius, uint32_t _modelHash, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46494A2475701343);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_modelHash);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getHasObjectBeenCompletelyDestroyed(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2542269291C6AC84);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

vector3_t Native_getOffsetFromCoordAndHeadingInWorldCoords(bool& success, float _xPos, float _yPos, float _zPos, float _heading, float _xOffset, float _yOffset, float _zOffset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x163E252DE035A133);
	ctx->Reset();
	ctx->Push(_xPos);
	ctx->Push(_yPos);
	ctx->Push(_zPos);
	ctx->Push(_heading);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

uint8_t Native_getCoordsAndRotationOfClosestObjectOfType(bool& success, float _x, float _y, float _z, float _radius, uint32_t _modelHash, vector3_t& _outPosition, vector3_t& _outRotation, int32_t _rotationOrder) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x163F8B586BC95F2A);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_modelHash);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	alt::INative::Vector3 converted_outRotation { _outRotation.x, 0, _outRotation.y, 0, _outRotation.z };
	ctx->Push(&converted_outRotation);
	ctx->Push(_rotationOrder);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
	_outRotation.x = converted_outRotation.x;
	_outRotation.y = converted_outRotation.y;
	_outRotation.z = converted_outRotation.z;
	return ctx->ResultBool();
}

void Native_setStateOfClosestDoorOfType(bool& success, uint32_t _type, float _x, float _y, float _z, uint8_t _locked, float _heading, uint8_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF82D8F1926A02C3D);
	ctx->Reset();
	ctx->Push(_type);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _locked);
	ctx->Push(_heading);
	ctx->Push((int32_t) _p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getStateOfClosestDoorOfType(bool& success, uint32_t _type, float _x, float _y, float _z, uint8_t& _locked, float& _heading) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEDC1A5B84AEF33FF);
	ctx->Reset();
	ctx->Push(_type);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	auto ptr_locked = (int32_t) _locked;
	ctx->Push(&ptr_locked);
	auto ptr_heading = _heading;
	ctx->Push(&ptr_heading);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_locked = (bool) ptr_locked;
	_heading = ptr_heading;
}

void Native_setLockedUnstreamedInDoorOfType(bool& success, uint32_t _modelHash, float _x, float _y, float _z, uint8_t _locked, float _xRotMult, float _yRotMult, float _zRotMult) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B12F9A24FABEDB0);
	ctx->Reset();
	ctx->Push(_modelHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _locked);
	ctx->Push(_xRotMult);
	ctx->Push(_yRotMult);
	ctx->Push(_zRotMult);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playObjectAutoStartAnim(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x006E4B040ED37EC3);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addDoorToSystem(bool& success, uint32_t _doorHash, uint32_t _modelHash, float _x, float _y, float _z, uint8_t _p5, uint8_t _scriptDoor, uint8_t _isLocal) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F8838D03D1DC226);
	ctx->Reset();
	ctx->Push(_doorHash);
	ctx->Push(_modelHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _p5);
	ctx->Push((int32_t) _scriptDoor);
	ctx->Push((int32_t) _isLocal);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeDoorFromSystem(bool& success, uint32_t _doorHash, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x464D8E1427156FE4);
	ctx->Reset();
	ctx->Push(_doorHash);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_doorSystemSetDoorState(bool& success, uint32_t _doorHash, int32_t _state, uint8_t _requestDoor, uint8_t _forceUpdate) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6BAB9442830C7F53);
	ctx->Reset();
	ctx->Push(_doorHash);
	ctx->Push(_state);
	ctx->Push((int32_t) _requestDoor);
	ctx->Push((int32_t) _forceUpdate);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_doorSystemGetDoorState(bool& success, uint32_t _doorHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x160AA1B32F6139B8);
	ctx->Reset();
	ctx->Push(_doorHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_doorSystemGetDoorPendingState(bool& success, uint32_t _doorHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4BC2854478F3A749);
	ctx->Reset();
	ctx->Push(_doorHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_doorSystemSetAutomaticRate(bool& success, uint32_t _doorHash, float _rate, uint8_t _requestDoor, uint8_t _forceUpdate) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x03C27E13B42A0E82);
	ctx->Reset();
	ctx->Push(_doorHash);
	ctx->Push(_rate);
	ctx->Push((int32_t) _requestDoor);
	ctx->Push((int32_t) _forceUpdate);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_doorSystemSetAutomaticDistance(bool& success, uint32_t _doorHash, float _distance, uint8_t _requestDoor, uint8_t _forceUpdate) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9BA001CB45CBF627);
	ctx->Reset();
	ctx->Push(_doorHash);
	ctx->Push(_distance);
	ctx->Push((int32_t) _requestDoor);
	ctx->Push((int32_t) _forceUpdate);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_doorSystemSetOpenRatio(bool& success, uint32_t _doorHash, float _ajar, uint8_t _requestDoor, uint8_t _forceUpdate) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB6E6FBA95C7324AC);
	ctx->Reset();
	ctx->Push(_doorHash);
	ctx->Push(_ajar);
	ctx->Push((int32_t) _requestDoor);
	ctx->Push((int32_t) _forceUpdate);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_doorSystemGetAutomaticDistance(bool& success, uint32_t _doorHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE851471AEFC3374F);
	ctx->Reset();
	ctx->Push(_doorHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_doorSystemGetOpenRatio(bool& success, uint32_t _doorHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x65499865FCA6E5EC);
	ctx->Reset();
	ctx->Push(_doorHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_doorSystemSetSpringRemoved(bool& success, uint32_t _doorHash, uint8_t _removed, uint8_t _requestDoor, uint8_t _forceUpdate) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC485E07E4F0B7958);
	ctx->Reset();
	ctx->Push(_doorHash);
	ctx->Push((int32_t) _removed);
	ctx->Push((int32_t) _requestDoor);
	ctx->Push((int32_t) _forceUpdate);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_doorSystemSetHoldOpen(bool& success, uint32_t _doorHash, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9B71952F78A2640);
	ctx->Reset();
	ctx->Push(_doorHash);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_doorSystemSetDoorOpenForRaces(bool& success, uint32_t _doorHash, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA85A21582451E951);
	ctx->Reset();
	ctx->Push(_doorHash);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isDoorRegisteredWithSystem(bool& success, uint32_t _doorHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC153C43EA202C8C1);
	ctx->Reset();
	ctx->Push(_doorHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isDoorClosed(bool& success, uint32_t _doorHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC531EE8A1145A149);
	ctx->Reset();
	ctx->Push(_doorHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_openAllBarriersForRace(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7F29CA00F46350E);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_closeAllBarriersForRace(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x701FDA1E82076BA4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doorSystemGetIsPhysicsLoaded(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF97CDD4FC08FD34);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_doorSystemFindExistingDoor(bool& success, float _x, float _y, float _z, uint32_t _modelHash, uint32_t& _outDoorHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x589F80B325CC82C5);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_modelHash);
	auto ptr_outDoorHash = _outDoorHash;
	ctx->Push(&ptr_outDoorHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outDoorHash = ptr_outDoorHash;
	return ctx->ResultBool();
}

uint8_t Native_isGarageEmpty(bool& success, uint32_t _garageHash, uint8_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90E47239EA1980B8);
	ctx->Reset();
	ctx->Push(_garageHash);
	ctx->Push((int32_t) _p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPlayerEntirelyInsideGarage(bool& success, uint32_t _garageHash, int32_t _player, float _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x024A60DEB0EA69F0);
	ctx->Reset();
	ctx->Push(_garageHash);
	ctx->Push(_player);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPlayerPartiallyInsideGarage(bool& success, uint32_t _garageHash, int32_t _player, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1761DC5D8471CBAA);
	ctx->Reset();
	ctx->Push(_garageHash);
	ctx->Push(_player);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_areEntitiesEntirelyInsideGarage(bool& success, uint32_t _garageHash, uint8_t _p1, uint8_t _p2, uint8_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85B6C850546FDDE2);
	ctx->Reset();
	ctx->Push(_garageHash);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isAnyEntityEntirelyInsideGarage(bool& success, uint32_t _garageHash, uint8_t _p1, uint8_t _p2, uint8_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x673ED815D6E323B7);
	ctx->Reset();
	ctx->Push(_garageHash);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isObjectEntirelyInsideGarage(bool& success, uint32_t _garageHash, int32_t _entity, float _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x372EF6699146A1E4);
	ctx->Reset();
	ctx->Push(_garageHash);
	ctx->Push(_entity);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isObjectPartiallyInsideGarage(bool& success, uint32_t _garageHash, int32_t _entity, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0EED5A6BC7B237A);
	ctx->Reset();
	ctx->Push(_garageHash);
	ctx->Push(_entity);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_clearGarage(bool& success, uint32_t _garageHash, uint8_t _isNetwork) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA05194260CDCDF9);
	ctx->Reset();
	ctx->Push(_garageHash);
	ctx->Push((int32_t) _isNetwork);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearObjectsInsideGarage(bool& success, uint32_t _garageHash, uint8_t _vehicles, uint8_t _peds, uint8_t _objects, uint8_t _isNetwork) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x190428512B240692);
	ctx->Reset();
	ctx->Push(_garageHash);
	ctx->Push((int32_t) _vehicles);
	ctx->Push((int32_t) _peds);
	ctx->Push((int32_t) _objects);
	ctx->Push((int32_t) _isNetwork);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableTidyingUpInGarage(bool& success, int32_t _id, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x659F9D71F52843F8);
	ctx->Reset();
	ctx->Push(_id);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_enableSavingInGarage(bool& success, uint32_t _garageHash, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2E1A7133DD356A6);
	ctx->Reset();
	ctx->Push(_garageHash);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_closeSafehouseGarages(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66A49D021870FE88);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesObjectOfTypeExistAtCoords(bool& success, float _x, float _y, float _z, float _radius, uint32_t _hash, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBFA48E2FF417213F);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_hash);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPointInAngledArea(bool& success, float _xPos, float _yPos, float _zPos, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _width, uint8_t _debug, uint8_t _includeZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A70BAE8883E4C81);
	ctx->Reset();
	ctx->Push(_xPos);
	ctx->Push(_yPos);
	ctx->Push(_zPos);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_width);
	ctx->Push((int32_t) _debug);
	ctx->Push((int32_t) _includeZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setObjectAllowLowLodBuoyancy(bool& success, int32_t _object, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D89D607CB3DD1D2);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setObjectPhysicsParams(bool& success, int32_t _object, float _weight, float _p2, float _p3, float _p4, float _p5, float _gravity, float _p7, float _p8, float _p9, float _p10, float _buoyancy) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6DF6E90DE7DF90F);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_weight);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_gravity);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_buoyancy);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getObjectFragmentDamageHealth(bool& success, int32_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB6FBFD079B8D0596);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setActivateObjectPhysicsAsSoonAsItIsUnfrozen(bool& success, int32_t _object, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x406137F8EF90EAF5);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isAnyObjectNearPoint(bool& success, float _x, float _y, float _z, float _range, uint8_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x397DC58FF00298D1);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_range);
	ctx->Push((int32_t) _p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isObjectNearPoint(bool& success, uint32_t _objectHash, float _x, float _y, float _z, float _range) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C90FE4B381BA60A);
	ctx->Reset();
	ctx->Push(_objectHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_range);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_removeObjectHighDetailModel(bool& success, int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A39DB43E47CF3AA);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_breakObjectFragmentChild(bool& success, int32_t _p0, int32_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE7E4C198B0185900);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_damageObjectFragmentChild(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE05F6AEEFEB0BB02);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_fixObjectFragment(bool& success, int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9C1681347C8BD15);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_trackObjectVisibility(bool& success, int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB252BC036B525623);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isObjectVisible(bool& success, int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B32ACE6326A7546);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setObjectIsSpecialGolfball(bool& success, int32_t _object, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6033D32241F6FB5);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setObjectTakesDamageFromCollidingWithBuildings(bool& success, int32_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB6F1A9B5510A5D2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_allowDamageEventsForNonNetworkedObjects(bool& success, uint8_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xABDABF4E1EDECBFA);
	ctx->Reset();
	ctx->Push((int32_t) _value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCutscenesWeaponFlashlightOnThisFrame(bool& success, int32_t _object, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBCE595371A5FBAAF);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getRayfireMapObject(bool& success, float _x, float _y, float _z, float _radius, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB48FCED898292E52);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setStateOfRayfireMapObject(bool& success, int32_t _object, int32_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C29F698D404C5E1);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getStateOfRayfireMapObject(bool& success, int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x899BA936634A322E);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_doesRayfireMapObjectExist(bool& success, int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x52AF537A0C5B8AAD);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

float Native_getRayfireMapObjectAnimPhase(bool& success, int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x260EE4FDBDF4DB01);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

int32_t Native_createPickup(bool& success, uint32_t _pickupHash, float _posX, float _posY, float _posZ, int32_t _p4, int32_t _value, uint8_t _p6, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFBA08C503DD5FA58);
	ctx->Reset();
	ctx->Push(_pickupHash);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_p4);
	ctx->Push(_value);
	ctx->Push((int32_t) _p6);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_createPickupRotate(bool& success, uint32_t _pickupHash, float _posX, float _posY, float _posZ, float _rotX, float _rotY, float _rotZ, int32_t _flag, int32_t _amount, int32_t _p9, uint8_t _p10, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x891804727E0A98B7);
	ctx->Reset();
	ctx->Push(_pickupHash);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_flag);
	ctx->Push(_amount);
	ctx->Push(_p9);
	ctx->Push((int32_t) _p10);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_forcePickupRotateFaceUp(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x394CD08E31313C28);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCustomPickupWeaponHash(bool& success, uint32_t _pickupHash, int32_t _pickup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x826D1EE4D1CAFC78);
	ctx->Reset();
	ctx->Push(_pickupHash);
	ctx->Push(_pickup);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_createAmbientPickup(bool& success, uint32_t _pickupHash, float _posX, float _posY, float _posZ, int32_t _flags, int32_t _value, uint32_t _modelHash, uint8_t _p7, uint8_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x673966A0C0FD7171);
	ctx->Reset();
	ctx->Push(_pickupHash);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_flags);
	ctx->Push(_value);
	ctx->Push(_modelHash);
	ctx->Push((int32_t) _p7);
	ctx->Push((int32_t) _p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_createNonNetworkedAmbientPickup(bool& success, uint32_t _pickupHash, float _posX, float _posY, float _posZ, int32_t _flags, int32_t _value, uint32_t _modelHash, uint8_t _p7, uint8_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C93764223E29C50);
	ctx->Reset();
	ctx->Push(_pickupHash);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_flags);
	ctx->Push(_value);
	ctx->Push(_modelHash);
	ctx->Push((int32_t) _p7);
	ctx->Push((int32_t) _p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_blockPlayersForAmbientPickup(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E3F1B1B891A2AAA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_createPortablePickup(bool& success, uint32_t _pickupHash, float _x, float _y, float _z, uint8_t _placeOnGround, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2EAF1FDB2FB55698);
	ctx->Reset();
	ctx->Push(_pickupHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _placeOnGround);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_createNonNetworkedPortablePickup(bool& success, uint32_t _pickupHash, float _x, float _y, float _z, uint8_t _placeOnGround, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x125494B98A21AAF7);
	ctx->Reset();
	ctx->Push(_pickupHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _placeOnGround);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_attachPortablePickupToPed(bool& success, int32_t _pickupObject, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8DC39368BDD57755);
	ctx->Reset();
	ctx->Push(_pickupObject);
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_detachPortablePickupFromPed(bool& success, int32_t _pickupObject) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF463D1E9A0AECB1);
	ctx->Reset();
	ctx->Push(_pickupObject);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forcePortablePickupLastAccessiblePositionSetting(bool& success, int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CE2E45A5CE2E45A);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_hidePortablePickupWhenDetached(bool& success, int32_t _pickupObject, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x867458251D47CCB2);
	ctx->Reset();
	ctx->Push(_pickupObject);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMaxNumPortablePickupsCarriedByPlayer(bool& success, uint32_t _modelHash, int32_t _number) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BF3B3BD47D79C08);
	ctx->Reset();
	ctx->Push(_modelHash);
	ctx->Push(_number);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setLocalPlayerCanCollectPortablePickups(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78857FC65CADB909);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

vector3_t Native_getSafePickupCoords(bool& success, float _x, float _y, float _z, float _p3, float _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E16BC2503FF1FF0);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

void Native_addExtendedPickupProbeArea(bool& success, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4A7A435B3710D05);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearExtendedPickupProbeAreas(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB7C6D80FB371659A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

vector3_t Native_getPickupCoords(bool& success, int32_t _pickup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x225B8B35C88029B3);
	ctx->Reset();
	ctx->Push(_pickup);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

void Native_suppressPickupSoundForPickup(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8DCA505A5C196F05);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeAllPickupsOfType(bool& success, uint32_t _pickupHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27F9D613092159CF);
	ctx->Reset();
	ctx->Push(_pickupHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasPickupBeenCollected(bool& success, int32_t _pickup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80EC48E6679313F9);
	ctx->Reset();
	ctx->Push(_pickup);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_removePickup(bool& success, int32_t _pickup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3288D8ACAECD2AB2);
	ctx->Reset();
	ctx->Push(_pickup);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_createMoneyPickups(bool& success, float _x, float _y, float _z, int32_t _value, int32_t _amount, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0589B5E791CE9B2B);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_value);
	ctx->Push(_amount);
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesPickupExist(bool& success, int32_t _pickup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAFC1CA75AD4074D1);
	ctx->Reset();
	ctx->Push(_pickup);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_doesPickupObjectExist(bool& success, int32_t _pickupObject) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9EFB6DBF7DAAEA3);
	ctx->Reset();
	ctx->Push(_pickupObject);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getPickupObject(bool& success, int32_t _pickup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5099BC55630B25AE);
	ctx->Reset();
	ctx->Push(_pickup);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isObjectAPickup(bool& success, int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC481C641EBBD27D);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isObjectAPortablePickup(bool& success, int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0378C08504160D0D);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_doesPickupOfTypeExistInArea(bool& success, uint32_t _pickupHash, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9C36251F6E48E33);
	ctx->Reset();
	ctx->Push(_pickupHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPickupRegenerationTime(bool& success, int32_t _pickup, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78015C9B4B3ECC9D);
	ctx->Reset();
	ctx->Push(_pickup);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forcePickupRegenerate(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x758A5C1B3B1E1990);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerPermittedToCollectPickupsOfType(bool& success, int32_t _player, uint32_t _pickupHash, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x616093EC6B139DD9);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_pickupHash);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setLocalPlayerPermittedToCollectPickupsWithModel(bool& success, uint32_t _modelHash, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88EAEC617CD26926);
	ctx->Reset();
	ctx->Push(_modelHash);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_allowAllPlayersToCollectPickupsOfType(bool& success, uint32_t _pickupHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFDC07C58E8AAB715);
	ctx->Reset();
	ctx->Push(_pickupHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTeamPickupObject(bool& success, int32_t _object, int32_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53E0DF1A2A3CF0CA);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_preventCollectionOfPortablePickup(bool& success, int32_t _object, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92AEFB5F6E294023);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPickupObjectGlowWhenUncollectable(bool& success, int32_t _pickup, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27F248C3FEBFAAD3);
	ctx->Reset();
	ctx->Push(_pickup);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPickupGlowOffset(bool& success, int32_t _pickup, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0596843B34B95CE5);
	ctx->Reset();
	ctx->Push(_pickup);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPickupObjectGlowOffset(bool& success, int32_t _pickup, float _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA08FE5E49BDC39DD);
	ctx->Reset();
	ctx->Push(_pickup);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setObjectGlowInSameTeam(bool& success, int32_t _pickup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62454A641B41F3C5);
	ctx->Reset();
	ctx->Push(_pickup);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPickupObjectArrowMarker(bool& success, int32_t _pickup, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39A5FB7EAF150840);
	ctx->Reset();
	ctx->Push(_pickup);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_allowPickupArrowMarkerWhenUncollectable(bool& success, int32_t _pickup, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x834344A414C7C85D);
	ctx->Reset();
	ctx->Push(_pickup);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getDefaultAmmoForWeaponPickup(bool& success, uint32_t _pickupHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB41D07A45A6D4B7);
	ctx->Reset();
	ctx->Push(_pickupHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPickupGenerationRangeMultiplier(bool& success, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x318516E02DE3ECE2);
	ctx->Reset();
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getPickupGenerationRangeMultiplier(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3ECA65C7317F174);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setOnlyAllowAmmoCollectionWhenLow(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x31F924B53EADDF65);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPickupUncollectable(bool& success, int32_t _pickup, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C1B69FAE509BA97);
	ctx->Reset();
	ctx->Push(_pickup);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPickupTransparentWhenUncollectable(bool& success, int32_t _pickup, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x858EC9FD25DE04AA);
	ctx->Reset();
	ctx->Push(_pickup);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPickupHiddenWhenUncollectable(bool& success, int32_t _pickup, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3ED2B83AB2E82799);
	ctx->Reset();
	ctx->Push(_pickup);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPickupObjectTransparentWhenUncollectable(bool& success, int32_t _pickup, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8881C98A31117998);
	ctx->Reset();
	ctx->Push(_pickup);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPickupObjectAlphaWhenTransparent(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8CFF648FBD7330F1);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPortablePickupPersist(bool& success, int32_t _pickup, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46F3ADD1E2D5BAF2);
	ctx->Reset();
	ctx->Push(_pickup);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_allowPortablePickupToMigrateToNonParticipants(bool& success, int32_t _pickup, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x641F272B52E2F0F8);
	ctx->Reset();
	ctx->Push(_pickup);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceActivatePhysicsOnUnfixedPickup(bool& success, int32_t _pickup, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C134B4DF76025D0);
	ctx->Reset();
	ctx->Push(_pickup);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_allowPickupByNoneParticipant(bool& success, int32_t _pickup, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA059C615DE9DD03);
	ctx->Reset();
	ctx->Push(_pickup);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_suppressPickupRewardType(bool& success, int32_t _rewardType, uint8_t _suppress) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF92099527DB8E2A7);
	ctx->Reset();
	ctx->Push(_rewardType);
	ctx->Push((int32_t) _suppress);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearAllPickupRewardTypeSuppression(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2C1F5E92AFE49ED);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearPickupRewardTypeSuppression(bool& success, int32_t _rewardType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x762DB2D380B48D04);
	ctx->Reset();
	ctx->Push(_rewardType);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_renderFakePickupGlow(bool& success, float _x, float _y, float _z, int32_t _colorIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3430676B11CDF21D);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_colorIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPickupObjectCollectableInVehicle(bool& success, int32_t _pickup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7813E8B8C4AE4799);
	ctx->Reset();
	ctx->Push(_pickup);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPickupTrackDamageEvents(bool& success, int32_t _pickup, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBFFE53AE7E67FCDC);
	ctx->Reset();
	ctx->Push(_pickup);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityFlagSuppressShadow(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD05A3241B9A86F19);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEntityFlagRenderSmallShadow(bool& success, int32_t _object, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2D0BDE54F0E8E5A);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint32_t Native_getWeaponTypeFromPickupType(bool& success, uint32_t _pickupHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x08F96CA6C551AD51);
	ctx->Reset();
	ctx->Push(_pickupHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint32_t Native_getPickupTypeFromWeaponHash(bool& success, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD6429A016084F1A5);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint8_t Native_isPickupWeaponObjectValid(bool& success, int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11D1E53A726891FE);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getObjectTintIndex(bool& success, int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE84EB93729C5F36A);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setObjectTintIndex(bool& success, int32_t _object, int32_t _textureVariation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x971DA0055324D033);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_textureVariation);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_setTintIndexClosestBuildingOfType(bool& success, float _x, float _y, float _z, float _radius, uint32_t _modelHash, int32_t _textureVariation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF12E33034D887F66);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_modelHash);
	ctx->Push(_textureVariation);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_setPropLightColor(bool& success, int32_t _object, uint8_t _p1, int32_t _r, int32_t _g, int32_t _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F048334B4A4E774);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push((int32_t) _p1);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPropLightOverriden(bool& success, int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADF084FB8F075D06);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setObjectIsVisibleInMirrors(bool& success, int32_t _object, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3B2FD68DB5F8331C);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setObjectSpeedBoostAmount(bool& success, int32_t _object, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x96EE0EBA0163DF80);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setObjectSpeedBoostDuration(bool& success, int32_t _object, float _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF6CA0330F2E737B);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint32_t Native_convertOldPickupTypeToNew(bool& success, uint32_t _pickupHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5EAAD83F8CFB4575);
	ctx->Reset();
	ctx->Push(_pickupHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

void Native_setForceObjectThisFrame(bool& success, float _x, float _y, float _z, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF538081986E49E9D);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_onlyCleanUpObjectWhenOutOfRange(bool& success, int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADBE4809F19F927A);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDisableCollisionsBetweenCarsAndCarParachute(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8CAAB2BD3EA58BD4);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setProjectilesShouldExplodeOnContact(bool& success, int32_t _entity, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x63ECF581BC70E363);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDriveArticulatedJoint(bool& success, int32_t _object, uint8_t _toggle, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x911024442F4898F0);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push((int32_t) _toggle);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDriveArticulatedJointWithInflictor(bool& success, int32_t _object, uint8_t _toggle, int32_t _p2, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB20834A7DD3D8896);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push((int32_t) _toggle);
	ctx->Push(_p2);
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setObjectIsAPressurePlate(bool& success, int32_t _object, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x734E1714D077DA9A);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setWeaponImpactsApplyGreaterForce(bool& success, int32_t _object, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A6CBB06E2D0D79D);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getIsArticulatedJointAtMinAngle(bool& success, int32_t _object, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43C677F1E1158005);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getIsArticulatedJointAtMaxAngle(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3BD770D281982DB5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setIsObjectArticulated(bool& success, int32_t _object, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C57C94A6446492A);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setIsObjectBall(bool& success, int32_t _object, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5B7742424BD4445);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isControlEnabled(bool& success, int32_t _control, int32_t _action) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CEA6BFDF248E5D9);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_action);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isControlPressed(bool& success, int32_t _control, int32_t _action) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3A21BCD95725A4A);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_action);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isControlReleased(bool& success, int32_t _control, int32_t _action) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x648EE3E7F38877DD);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_action);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isControlJustPressed(bool& success, int32_t _control, int32_t _action) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x580417101DDB492F);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_action);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isControlJustReleased(bool& success, int32_t _control, int32_t _action) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50F940259D3841E6);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_action);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getControlValue(bool& success, int32_t _control, int32_t _action) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD95E79E8686D2C27);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_action);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

float Native_getControlNormal(bool& success, int32_t _control, int32_t _action) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC3C9B8D5327B563);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_action);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setUseAdjustedMouseCoords(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B73C77D9EB66E24);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getControlUnboundNormal(bool& success, int32_t _control, int32_t _action) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B84D09CEC5209C5);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_action);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

uint8_t Native_setControlValueNextFrame(bool& success, int32_t _control, int32_t _action, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE8A25867FBA3B05E);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_action);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isDisabledControlPressed(bool& success, int32_t _control, int32_t _action) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE2587F8CBBD87B1D);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_action);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isDisabledControlReleased(bool& success, int32_t _control, int32_t _action) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB6C4072E9A32E92);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_action);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isDisabledControlJustPressed(bool& success, int32_t _control, int32_t _action) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x91AEF906BCA88877);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_action);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isDisabledControlJustReleased(bool& success, int32_t _control, int32_t _action) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x305C8DCD79DA8B0F);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_action);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

float Native_getDisabledControlNormal(bool& success, int32_t _control, int32_t _action) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11E65974A982637C);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_action);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getDisabledControlUnboundNormal(bool& success, int32_t _control, int32_t _action) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F8A26A890FD62FB);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_action);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

int32_t Native_getControlHowLongAgo(bool& success, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7D22F5592AED8BA);
	ctx->Reset();
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isUsingKeyboardAndMouse(bool& success, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA571D46727E2B718);
	ctx->Reset();
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isUsingCursor(bool& success, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13337B38DB572509);
	ctx->Reset();
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_setCursorPosition(bool& success, float _x, float _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC695459D4D0E219);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isUsingRemotePlay(bool& success, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23F09EADC01449D6);
	ctx->Reset();
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_haveControlsChanged(bool& success, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6CD79468A1E595C6);
	ctx->Reset();
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

const char* Native_getControlInstructionalButtonsString(bool& success, int32_t _control, int32_t _action, uint8_t _allowXOSwap) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0499D7B09FC9B407);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_action);
	ctx->Push((int32_t) _allowXOSwap);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

const char* Native_getControlGroupInstructionalButtonsString(bool& success, int32_t _control, int32_t _controlGroup, uint8_t _allowXOSwap) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80C2FD58D720C801);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_controlGroup);
	ctx->Push((int32_t) _allowXOSwap);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

void Native_setControlLightEffectColor(bool& success, int32_t _control, int32_t _red, int32_t _green, int32_t _blue) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8290252FFF36ACB5);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearControlLightEffect(bool& success, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB0360EFEFB2580D);
	ctx->Reset();
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setControlShake(bool& success, int32_t _control, int32_t _duration, int32_t _frequency) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48B3886C1358D0D5);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_duration);
	ctx->Push(_frequency);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setControlTriggerShake(bool& success, int32_t _control, int32_t _leftDuration, int32_t _leftFrequency, int32_t _rightDuration, int32_t _rightFrequency) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14D29BB12D47F68C);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_leftDuration);
	ctx->Push(_leftFrequency);
	ctx->Push(_rightDuration);
	ctx->Push(_rightFrequency);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopControlShake(bool& success, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x38C16A305E8CDC8D);
	ctx->Reset();
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setControlShakeSuppressedId(bool& success, int32_t _control, int32_t _uniqueId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF239400E16C23E08);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_uniqueId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearControlShakeSuppressedId(bool& success, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0CEFCEA390AAB9B);
	ctx->Reset();
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isLookInverted(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77B612531280010D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isMouseLookInverted(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE1615EC03B3BB4FD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getLocalPlayerAimState(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB41AFBBBC0A0287);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getLocalPlayerGamepadAimState(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x59B9A7AF4C95133C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_getIsUsingAlternateHandbrake(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25AAA32BDC98F2A3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getIsUsingAlternateDriveby(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F70731BACCFBB96);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getAllowMovementWhileZoomed(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC859E2374407556);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPlayerpadShakesWhenControllerDisabled(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x798FDEB5B1575088);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setInputExclusive(bool& success, int32_t _control, int32_t _action) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEDE476E5EE29EDB1);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_action);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableControlAction(bool& success, int32_t _control, int32_t _action, uint8_t _disableRelatedActions) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFE99B66D079CF6BC);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_action);
	ctx->Push((int32_t) _disableRelatedActions);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_enableControlAction(bool& success, int32_t _control, int32_t _action, uint8_t _enableRelatedActions) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x351220255D64C155);
	ctx->Reset();
	ctx->Push(_control);
	ctx->Push(_action);
	ctx->Push((int32_t) _enableRelatedActions);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableAllControlActions(bool& success, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F4B6931816E599B);
	ctx->Reset();
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_enableAllControlActions(bool& success, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5FFE9B05F199DE7);
	ctx->Reset();
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_initPcScriptedControls(bool& success, const char* _schemeName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3D42B92563939375);
	ctx->Reset();
	ctx->Push(SaveString(_schemeName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_switchPcScriptedControls(bool& success, const char* _schemeName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4683149ED1DDE7A1);
	ctx->Reset();
	ctx->Push(SaveString(_schemeName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_shutdownPcScriptedControls(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x643ED62D5EA3BEBD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableInputGroup(bool& success, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F4724035FDCA1DD);
	ctx->Reset();
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRoadsInArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, uint8_t _nodeEnabled, uint8_t _unknown2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF1A602B5BA52FEE);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push((int32_t) _nodeEnabled);
	ctx->Push((int32_t) _unknown2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRoadsInAngledArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _width, uint8_t _unknown1, uint8_t _unknown2, uint8_t _unknown3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A5AA1208AF5DB59);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_width);
	ctx->Push((int32_t) _unknown1);
	ctx->Push((int32_t) _unknown2);
	ctx->Push((int32_t) _unknown3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedPathsInArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, uint8_t _p6, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34F060F4BF92E018);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push((int32_t) _p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getSafeCoordForPed(bool& success, float _x, float _y, float _z, uint8_t _onGround, vector3_t& _outPosition, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB61C8E878A4199CA);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _onGround);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
	return ctx->ResultBool();
}

uint8_t Native_getClosestVehicleNode(bool& success, float _x, float _y, float _z, vector3_t& _outPosition, int32_t _nodeFlags, float _p5, float _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x240A18690AE96513);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	ctx->Push(_nodeFlags);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
	return ctx->ResultBool();
}

uint8_t Native_getClosestMajorVehicleNode(bool& success, float _x, float _y, float _z, vector3_t& _outPosition, float _unknown1, float _unknown2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2EABE3B06F58C1BE);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	ctx->Push(_unknown1);
	ctx->Push(_unknown2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
	return ctx->ResultBool();
}

uint8_t Native_getClosestVehicleNodeWithHeading(bool& success, float _x, float _y, float _z, vector3_t& _outPosition, float& _outHeading, int32_t _nodeType, float _p6, float _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF071FB798B803B0);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	auto ptr_outHeading = _outHeading;
	ctx->Push(&ptr_outHeading);
	ctx->Push(_nodeType);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
	_outHeading = ptr_outHeading;
	return ctx->ResultBool();
}

uint8_t Native_getNthClosestVehicleNode(bool& success, float _x, float _y, float _z, int32_t _nthClosest, vector3_t& _outPosition, int32_t _nodeFlags, float _unknown1, float _unknown2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE50E52416CCF948B);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_nthClosest);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	ctx->Push(_nodeFlags);
	ctx->Push(_unknown1);
	ctx->Push(_unknown2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
	return ctx->ResultBool();
}

int32_t Native_getNthClosestVehicleNodeId(bool& success, float _x, float _y, float _z, int32_t _nth, int32_t _nodeFlags, float _p5, float _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x22D7275A79FE8215);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_nth);
	ctx->Push(_nodeFlags);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_getNthClosestVehicleNodeWithHeading(bool& success, float _x, float _y, float _z, int32_t _nthClosest, vector3_t& _outPosition, float& _outHeading, int32_t& _outNumLanes, int32_t _nodeFlags, float _unknown3, float _unknown4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80CA6A8B6C094CC4);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_nthClosest);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	auto ptr_outHeading = _outHeading;
	ctx->Push(&ptr_outHeading);
	auto ptr_outNumLanes = _outNumLanes;
	ctx->Push(&ptr_outNumLanes);
	ctx->Push(_nodeFlags);
	ctx->Push(_unknown3);
	ctx->Push(_unknown4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
	_outHeading = ptr_outHeading;
	_outNumLanes = ptr_outNumLanes;
	return ctx->ResultBool();
}

int32_t Native_getNthClosestVehicleNodeIdWithHeading(bool& success, float _x, float _y, float _z, int32_t _nthClosest, vector3_t& _outPosition, float& _outHeading, int32_t _nodeFlags, float _p7, float _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6448050E9C2A7207);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_nthClosest);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	auto ptr_outHeading = _outHeading;
	ctx->Push(&ptr_outHeading);
	ctx->Push(_nodeFlags);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
	_outHeading = ptr_outHeading;
	return ctx->ResultInt();
}

uint8_t Native_getNthClosestVehicleNodeFavourDirection(bool& success, float _x, float _y, float _z, float _desiredX, float _desiredY, float _desiredZ, int32_t _nthClosest, vector3_t& _outPosition, float& _outHeading, int32_t _nodeFlags, float _p10, float _p11) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45905BE8654AE067);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_desiredX);
	ctx->Push(_desiredY);
	ctx->Push(_desiredZ);
	ctx->Push(_nthClosest);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	auto ptr_outHeading = _outHeading;
	ctx->Push(&ptr_outHeading);
	ctx->Push(_nodeFlags);
	ctx->Push(_p10);
	ctx->Push(_p11);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
	_outHeading = ptr_outHeading;
	return ctx->ResultBool();
}

uint8_t Native_getVehicleNodeProperties(bool& success, float _x, float _y, float _z, int32_t& _density, int32_t& _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0568566ACBB5DEDC);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	auto ptr_density = _density;
	ctx->Push(&ptr_density);
	auto ptr_flags = _flags;
	ctx->Push(&ptr_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_density = ptr_density;
	_flags = ptr_flags;
	return ctx->ResultBool();
}

uint8_t Native_isVehicleNodeIdValid(bool& success, int32_t _vehicleNodeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1EAF30FCFBF5AF74);
	ctx->Reset();
	ctx->Push(_vehicleNodeId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_getVehicleNodePosition(bool& success, int32_t _nodeId, vector3_t& _outPosition) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x703123E5E7D429C2);
	ctx->Reset();
	ctx->Push(_nodeId);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
}

uint8_t Native_getVehicleNodeIsGpsAllowed(bool& success, int32_t _nodeID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2AE5C478B96E3B6);
	ctx->Reset();
	ctx->Push(_nodeID);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getVehicleNodeIsSwitchedOff(bool& success, int32_t _nodeID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F5070AA58F69279);
	ctx->Reset();
	ctx->Push(_nodeID);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getClosestRoad(bool& success, float _x, float _y, float _z, float _p3, int32_t _p4, vector3_t& _p5, vector3_t& _p6, int32_t& _p7, int32_t& _p8, float& _p9, uint8_t _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x132F52BBA570FE92);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	ctx->Push(_p4);
	alt::INative::Vector3 converted_p5 { _p5.x, 0, _p5.y, 0, _p5.z };
	ctx->Push(&converted_p5);
	alt::INative::Vector3 converted_p6 { _p6.x, 0, _p6.y, 0, _p6.z };
	ctx->Push(&converted_p6);
	auto ptr_p7 = _p7;
	ctx->Push(&ptr_p7);
	auto ptr_p8 = _p8;
	ctx->Push(&ptr_p8);
	auto ptr_p9 = _p9;
	ctx->Push(&ptr_p9);
	ctx->Push((int32_t) _p10);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p5.x = converted_p5.x;
	_p5.y = converted_p5.y;
	_p5.z = converted_p5.z;
	_p6.x = converted_p6.x;
	_p6.y = converted_p6.y;
	_p6.z = converted_p6.z;
	_p7 = ptr_p7;
	_p8 = ptr_p8;
	_p9 = ptr_p9;
	return ctx->ResultBool();
}

void Native_setAllowStreamPrologueNodes(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x228E5C6AD4D74BFD);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAllowStreamHeistIslandNodes(bool& success, int32_t _type) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF74B1FFA4A15FBEA);
	ctx->Reset();
	ctx->Push(_type);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_areNodesLoadedForArea(bool& success, float _x1, float _y1, float _x2, float _y2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF7B79A50B905A30D);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_requestPathNodesInAreaThisFrame(bool& success, float _x1, float _y1, float _x2, float _y2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x07FB139B592FA687);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setRoadsBackToOriginal(bool& success, float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1EE7063B80FFC77C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRoadsBackToOriginalInAngledArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _width, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0027501B9F3B407E);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_width);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAmbientPedRangeMultiplierThisFrame(bool& success, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0B919E1FB47CC4E0);
	ctx->Reset();
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_adjustAmbientPedSpawnDensitiesThisFrame(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA76052DDA9BFC3E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedPathsBackToOriginal(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE04B48F2CC926253);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getRandomVehicleNode(bool& success, float _x, float _y, float _z, float _radius, uint8_t _p4, uint8_t _p5, uint8_t _p6, vector3_t& _outPosition, int32_t& _nodeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93E0DB8440B73A7D);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push((int32_t) _p4);
	ctx->Push((int32_t) _p5);
	ctx->Push((int32_t) _p6);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	auto ptr_nodeId = _nodeId;
	ctx->Push(&ptr_nodeId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
	_nodeId = ptr_nodeId;
	return ctx->ResultBool();
}

void Native_getStreetNameAtCoord(bool& success, float _x, float _y, float _z, uint32_t& _streetName, uint32_t& _crossingRoad) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2EB41072B4C1E4C0);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	auto ptr_streetName = _streetName;
	ctx->Push(&ptr_streetName);
	auto ptr_crossingRoad = _crossingRoad;
	ctx->Push(&ptr_crossingRoad);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_streetName = ptr_streetName;
	_crossingRoad = ptr_crossingRoad;
}

int32_t Native_generateDirectionsToCoord(bool& success, float _x, float _y, float _z, uint8_t _p3, int32_t& _direction, float& _p5, float& _distToNxJunction) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF90125F1F79ECDF8);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _p3);
	auto ptr_direction = _direction;
	ctx->Push(&ptr_direction);
	auto ptr_p5 = _p5;
	ctx->Push(&ptr_p5);
	auto ptr_distToNxJunction = _distToNxJunction;
	ctx->Push(&ptr_distToNxJunction);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_direction = ptr_direction;
	_p5 = ptr_p5;
	_distToNxJunction = ptr_distToNxJunction;
	return ctx->ResultInt();
}

void Native_setIgnoreNoGpsFlag(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x72751156E7678833);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setIgnoreNoGpsFlagUntilFirstNormalNode(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1FC289A0C3FF470F);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGpsDisabledZone(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC20483CD3DD5201);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getGpsBlipRouteLength(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBBB45C3CF5C8AA85);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_getPosAlongGpsTypeRoute(bool& success, vector3_t& _result, uint8_t _p1, float _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3162836C28F9DA5);
	ctx->Reset();
	alt::INative::Vector3 converted_result { _result.x, 0, _result.y, 0, _result.z };
	ctx->Push(&converted_result);
	ctx->Push((int32_t) _p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_result.x = converted_result.x;
	_result.y = converted_result.y;
	_result.z = converted_result.z;
	return ctx->ResultBool();
}

uint8_t Native_getGpsBlipRouteFound(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x869DAACBBE9FA006);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getRoadBoundaryUsingHeading(bool& success, float _x, float _y, float _z, float _heading, vector3_t& _outPosition) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0F8A7517A273C05);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
	return ctx->ResultBool();
}

uint8_t Native_getPositionBySideOfRoad(bool& success, float _x, float _y, float _z, int32_t _p3, vector3_t& _outPosition) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16F46FB18C8009E4);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
	return ctx->ResultBool();
}

uint8_t Native_isPointOnRoad(bool& success, float _x, float _y, float _z, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x125BF4ABFC536B09);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getNextGpsDisabledZoneIndex(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3A6A0EF48823A8C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setGpsDisabledZoneAtIndex(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0BC1C6FB18EE154);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearGpsDisabledZoneAtIndex(bool& success, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2801D0012266DF07);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addNavmeshRequiredRegion(bool& success, float _x, float _y, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x387EAD7EE42F6685);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeNavmeshRequiredRegions(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x916F0A3CDEC3445E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isNavmeshRequiredRegionInUse(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x705A844002B39DC0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_disableNavmeshInArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C8872D8CDBE1B8B);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_areAllNavmeshRegionsLoaded(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8415D95B194A3AEA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isNavmeshLoadedInArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF813C7E63F9062A5);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getNumNavmeshesExistingInArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01708E8DD3FF8C65);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_addNavmeshBlockingObject(bool& success, float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6, uint8_t _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFCD5C8E06E502F5A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push((int32_t) _p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_updateNavmeshBlockingObject(bool& success, int32_t _p0, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6, float _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x109E99373F290687);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeNavmeshBlockingObject(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46399A7895957C0E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesNavmeshBlockingObjectExist(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0EAEB0DB4B132399);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

float Native_getApproxHeightForPoint(bool& success, float _x, float _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29C24BFBED8AB8FB);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getApproxHeightForArea(bool& success, float _x1, float _y1, float _x2, float _y2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8ABE8608576D9CE3);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getApproxFloorForPoint(bool& success, float _x, float _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x336511A34F2E5185);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getApproxFloorForArea(bool& success, float _x1, float _y1, float _x2, float _y2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3599D741C9AC6310);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_calculateTravelDistanceBetweenPoints(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADD95C7005C4A197);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

int32_t Native_createPed(bool& success, int32_t _pedType, uint32_t _modelHash, float _x, float _y, float _z, float _heading, uint8_t _isNetwork, uint8_t _bScriptHostPed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD49F9B0955C367DE);
	ctx->Reset();
	ctx->Push(_pedType);
	ctx->Push(_modelHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	ctx->Push((int32_t) _isNetwork);
	ctx->Push((int32_t) _bScriptHostPed);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_deletePed(bool& success, int32_t& _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9614299DCB53E54B);
	ctx->Reset();
	auto ptr_ped = _ped;
	ctx->Push(&ptr_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_ped = ptr_ped;
}

int32_t Native_clonePed(bool& success, int32_t _ped, uint8_t _isNetwork, uint8_t _bScriptHostPed, uint8_t _copyHeadBlendFlag) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF29A16337FACADB);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _isNetwork);
	ctx->Push((int32_t) _bScriptHostPed);
	ctx->Push((int32_t) _copyHeadBlendFlag);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_clonePedAlt(bool& success, int32_t _ped, uint8_t _isNetwork, uint8_t _bScriptHostPed, uint8_t _copyHeadBlendFlag, uint8_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x668FD40BCBA5DE48);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _isNetwork);
	ctx->Push((int32_t) _bScriptHostPed);
	ctx->Push((int32_t) _copyHeadBlendFlag);
	ctx->Push((int32_t) _p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_clonePedToTarget(bool& success, int32_t _ped, int32_t _targetPed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE952D6431689AD9A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_targetPed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clonePedToTargetAlt(bool& success, int32_t _ped, int32_t _targetPed, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x148B08C2D2ACB884);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_targetPed);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedInVehicle(bool& success, int32_t _ped, int32_t _vehicle, uint8_t _atGetIn) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA3EE4A07279BB9DB);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _atGetIn);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedInModel(bool& success, int32_t _ped, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x796D90EFB19AA332);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedInAnyVehicle(bool& success, int32_t _ped, uint8_t _atGetIn) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x997ABD671D25CA0B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _atGetIn);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isCopPedInArea3d(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16EC4839969F9F5E);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedInjured(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84A2DD9AC37C35C1);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedHurt(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5983BB449D7FDB12);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedFatallyInjured(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD839450756ED5A80);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedDeadOrDying(bool& success, int32_t _ped, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3317DEDB88C95038);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isConversationPedDead(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE0A0AEC214B1FABA);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedAimingFromCover(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3998B1276A3300E5);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedReloading(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x24B100C68C645951);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedAPlayer(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x12534C348C6CB68B);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_createPedInsideVehicle(bool& success, int32_t _vehicle, int32_t _pedType, uint32_t _modelHash, int32_t _seat, uint8_t _isNetwork, uint8_t _bScriptHostPed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7DD959874C1FD534);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_pedType);
	ctx->Push(_modelHash);
	ctx->Push(_seat);
	ctx->Push((int32_t) _isNetwork);
	ctx->Push((int32_t) _bScriptHostPed);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPedDesiredHeading(bool& success, int32_t _ped, float _heading) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA5A7ECE2AA8FE70);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_heading);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceAllHeadingValuesToAlign(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF287323B0E2C69A);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedFacingPed(bool& success, int32_t _ped, int32_t _otherPed, float _angle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD71649DB0A545AA3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_otherPed);
	ctx->Push(_angle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedInMeleeCombat(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E209B2C1EAD5159);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedStopped(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x530944F6F4B8A214);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedShootingInArea(bool& success, int32_t _ped, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, uint8_t _p7, uint8_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7E9DFE24AC1E58EF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push((int32_t) _p7);
	ctx->Push((int32_t) _p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isAnyPedShootingInArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, uint8_t _p6, uint8_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0D3D71EA1086C55);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push((int32_t) _p6);
	ctx->Push((int32_t) _p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedShooting(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34616828CD07F1A1);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedAccuracy(bool& success, int32_t _ped, int32_t _accuracy) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7AEFB85C1D49DEB6);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_accuracy);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPedAccuracy(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x37F4AD56ECBC0CD6);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setAmbientLawPedAccuracyModifier(bool& success, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x87DDEB611B329A9C);
	ctx->Reset();
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedModel(bool& success, int32_t _ped, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC9D55B1A358A5BF7);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_explodePedHead(bool& success, int32_t _ped, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D05CED3A38D0F3A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removePedElegantly(bool& success, int32_t& _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC6D445B994DF95E);
	ctx->Reset();
	auto ptr_ped = _ped;
	ctx->Push(&ptr_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_ped = ptr_ped;
}

void Native_addArmourToPed(bool& success, int32_t _ped, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BA652A0CD14DF2F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedArmour(bool& success, int32_t _ped, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCEA04D83135264CC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedIntoVehicle(bool& success, int32_t _ped, int32_t _vehicle, int32_t _seatIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF75B0D629E1C063D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_seatIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedAllowVehiclesOverride(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C028C636A414ED9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_canCreateRandomPed(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E8349C08E4B82E4);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_createRandomPed(bool& success, float _posX, float _posY, float _posZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4AC7D0CF06BFE8F);
	ctx->Reset();
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_createRandomPedAsDriver(bool& success, int32_t _vehicle, uint8_t _returnHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B62392B474F44A0);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _returnHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_canCreateRandomDriver(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8EB95E5B4E56978);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_canCreateRandomBikeRider(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEACEEDA81751915C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedMoveAnimsBlendOut(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9E8C908F41584ECD);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanBeDraggedOut(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC1670E958EEE24E5);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedAllowHurtCombatForAllMissionPeds(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2BEBCDFAFDAA19E);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedMale(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D9F5FAA7488BA46);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedHuman(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB980061DA992779D);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getVehiclePedIsIn(bool& success, int32_t _ped, uint8_t _includeLastVehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A9112A0FE9A4713);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _includeLastVehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_resetPedLastVehicle(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB8DE8CF6A8DD8BB);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedDensityMultiplierThisFrame(bool& success, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95E3D6257B166CF2);
	ctx->Reset();
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setScenarioPedDensityMultiplierThisFrame(bool& success, float _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A556143A1C03898);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_suppressAmbientPedAggressiveCleanupThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A7F62FDA59759BD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setScriptedConversionCoordThisFrame(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5086C7843552CF85);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedNonCreationArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE01041D559983EA);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearPedNonCreationArea(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E05208086BA0651);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_instantlyFillPedPopulation(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4759CC730F947C81);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedOnMount(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x460BC76A0E10655E);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getMount(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE7E11B8DCBED1058);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isPedOnVehicle(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x67722AEB798E5FAB);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedOnSpecificVehicle(bool& success, int32_t _ped, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC5F66E459AF3BB2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedMoney(bool& success, int32_t _ped, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9C8960E8684C1B5);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPedMoney(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F69145BBA87BAE7);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setHealthSnacksCarriedByAllNewPeds(bool& success, float _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF4803BC019852D9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAmbientPedsDropMoney(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B0E6172C9A4D902);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBlockingOfNonTemporaryEventsForAmbientPedsThisFrame(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9911F4A24485F653);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedSuffersCriticalHits(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEBD76F2359F190AC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedUpperBodyDamageOnly(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAFC976FD0580C7B3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedSittingInVehicle(bool& success, int32_t _ped, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA808AA1D79230FC2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedSittingInAnyVehicle(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x826AA586EDB9FEF8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedOnFoot(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01FEE67DB37F59B2);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedOnAnyBike(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x94495889E22C6479);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedPlantingBomb(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC70B5FAE151982D8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

vector3_t Native_getDeadPedPickupCoords(bool& success, int32_t _ped, float _p1, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD5003B097200F36);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

uint8_t Native_isPedInAnyBoat(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E0E1C2B4F6CB339);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedInAnySub(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFBFC01CCFB35D99E);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedInAnyHeli(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x298B91AE825E5705);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedInAnyPlane(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FFF4CFC74D8FB80);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedInFlyingVehicle(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9134873537FA419C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedDiesInWater(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x56CEF0AC79073BDE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getPedDiesInWater(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x65671A4FB8218930);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedDiesInSinkingVehicle(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD718A22995E2B4BC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPedArmour(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9483AF821605B1D8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPedStayInVehicleWhenJacked(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEDF4079F9D54C9A1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanBeShotInVehicle(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7EF1BA83230BA07);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getPedLastDamageBone(bool& success, int32_t _ped, int32_t& _outBone) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD75960F6BD9EA49C);
	ctx->Reset();
	ctx->Push(_ped);
	auto ptr_outBone = _outBone;
	ctx->Push(&ptr_outBone);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outBone = ptr_outBone;
	return ctx->ResultBool();
}

void Native_clearPedLastDamageBone(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8EF6B7AC68E2F01B);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAiWeaponDamageModifier(bool& success, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B1E2A40A65B8521);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetAiWeaponDamageModifier(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA16670E7BA4743C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAiMeleeWeaponDamageModifier(bool& success, float _modifier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66460DEDDD417254);
	ctx->Reset();
	ctx->Push(_modifier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetAiMeleeWeaponDamageModifier(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46E56A7CD1D63C3F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTreatAsAmbientPedForDriverLockon(bool& success, int32_t _ped, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F3C3D9F50681DE4);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanBeTargetted(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x63F58F7C80513AAD);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanBeTargettedByTeam(bool& success, int32_t _ped, int32_t _team, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF1CA77833E58F2C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_team);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanBeTargettedByPlayer(bool& success, int32_t _ped, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66B57B72E0836A76);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAllowLockonToPedIfFriendly(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x061CB768363D6424);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setUseCameraHeadingForDesiredDirectionLockOnTest(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD325494792302D7);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedInAnyPoliceVehicle(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BD04E29640C9C12);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_forcePedToOpenParachute(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16E42E800B472221);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedInParachuteFreeFall(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7DCE8BDA0F1C1200);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedFalling(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB92A102F1C4DFA3);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedJumping(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCEDABC5900A0BF97);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedLanding(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x412F1364FA066CFB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedDoingABeastJump(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x451D05012CCEC234);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedClimbing(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53E8CB4F48BFE623);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedVaulting(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x117C70D1F5730B5E);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedDiving(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5527B8246FEF9B11);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedJumpingOutOfVehicle(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x433DDFFE2044B636);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedOpeningDoor(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26AF0E8E30BD2A2C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getPedParachuteState(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x79CFD9827CC979B6);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getPedParachuteLandingType(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B9F1FC6AE8166C0);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPedParachuteTintIndex(bool& success, int32_t _ped, int32_t _tintIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x333FC8DB079B7186);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_tintIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getPedParachuteTintIndex(bool& success, int32_t _ped, int32_t& _outTintIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEAF5F7E5AE7C6C9D);
	ctx->Reset();
	ctx->Push(_ped);
	auto ptr_outTintIndex = _outTintIndex;
	ctx->Push(&ptr_outTintIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_outTintIndex = ptr_outTintIndex;
}

void Native_setPedReserveParachuteTintIndex(bool& success, int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE88DA0751C22A2AD);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_createParachuteBagObject(bool& success, int32_t _ped, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C4F3BF23B6237DB);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPedDucking(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x030983CA930B692D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedDucking(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD125AE748725C6BC);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedInAnyTaxi(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E575D6A898AB852);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedIdRange(bool& success, int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF107E836A70DCE05);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedHighlyPerceptive(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x52D59AB61DDC05DD);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCopPerceptionOverrides(bool& success, float _seeingRange, float _seeingRangePeripheral, float _hearingRange, float _visualFieldMinAzimuthAngle, float _visualFieldMaxAzimuthAngle, float _fieldOfGazeMaxAngle, float _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F074C904D85129E);
	ctx->Reset();
	ctx->Push(_seeingRange);
	ctx->Push(_seeingRangePeripheral);
	ctx->Push(_hearingRange);
	ctx->Push(_visualFieldMinAzimuthAngle);
	ctx->Push(_visualFieldMaxAzimuthAngle);
	ctx->Push(_fieldOfGazeMaxAngle);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedInjuredOnGroundBehaviour(bool& success, int32_t _ped, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC4B4B3B9908052A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disablePedInjuredOnGroundBehaviour(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x733C87D4CE22BEA2);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedSeeingRange(bool& success, int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF29CF591C4BF6CEE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedHearingRange(bool& success, int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33A8F7F7D5F7F33C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedVisualFieldMinAngle(bool& success, int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DB492222FB21E26);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedVisualFieldMaxAngle(bool& success, int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70793BDCA1E854D4);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedVisualFieldMinElevationAngle(bool& success, int32_t _ped, float _angle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A276EB2C224D70F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_angle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedVisualFieldMaxElevationAngle(bool& success, int32_t _ped, float _angle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78D0B67629D75856);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_angle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedVisualFieldPeripheralRange(bool& success, int32_t _ped, float _range) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C74B0BC831B753A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_range);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedVisualFieldCenterAngle(bool& success, int32_t _ped, float _angle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3B6405E8AB34A907);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_angle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getPedVisualFieldCenterAngle(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF2C71A32CAD5FBD);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setPedStealthMovement(bool& success, int32_t _ped, uint8_t _p1, const char* _action) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88CBB5CEB96B7BD2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	ctx->Push(SaveString(_action));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getPedStealthMovement(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C2AC9CA66575FBF);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_createGroup(bool& success, int32_t _unused) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90370EBE0FEE1A3D);
	ctx->Reset();
	ctx->Push(_unused);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPedAsGroupLeader(bool& success, int32_t _ped, int32_t _groupId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A7819605465FBCE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_groupId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedAsGroupMember(bool& success, int32_t _ped, int32_t _groupId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F3480FE65DB31B5);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_groupId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanTeleportToGroupLeader(bool& success, int32_t _pedHandle, int32_t _groupHandle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E2F4240B3F24647);
	ctx->Reset();
	ctx->Push(_pedHandle);
	ctx->Push(_groupHandle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeGroup(bool& success, int32_t _groupId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8EB2F69076AF7053);
	ctx->Reset();
	ctx->Push(_groupId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removePedFromGroup(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED74007FFB146BC2);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedGroupMember(bool& success, int32_t _ped, int32_t _groupId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9BB01E3834671191);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_groupId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedHangingOnToVehicle(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C86D8AEF8254B78);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setGroupSeparationRange(bool& success, int32_t _groupHandle, float _separationRange) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4102C7858CFEE4E4);
	ctx->Reset();
	ctx->Push(_groupHandle);
	ctx->Push(_separationRange);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedMinGroundTimeForStungun(bool& success, int32_t _ped, int32_t _ms) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA0675AB151073FA);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_ms);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedProne(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD6A86331A537A7B9);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedInCombat(bool& success, int32_t _ped, int32_t _target) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4859F1FC66A6278E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getPedTargetFromCombatPed(bool& success, int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x32C27A11307B01CC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_canPedInCombatSeeTarget(bool& success, int32_t _ped, int32_t _target) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEAD42DE3610D0721);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedDoingDriveby(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2C086CC1BF8F2BF);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedJacking(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4AE4FF911DFB61DA);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedBeingJacked(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A497FE2DF198913);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedBeingStunned(bool& success, int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4FBACCE3B4138EE8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getPedsJacker(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B128DC36C1E04CF);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getJackTarget(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5486A79D9FBD342D);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isPedFleeing(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBBCCE00B381F8482);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedInCover(bool& success, int32_t _ped, uint8_t _exceptUseWeapon) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x60DFD0691A170B88);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _exceptUseWeapon);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedInCoverFacingLeft(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x845333B3150583AB);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedInHighCover(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A03BF943D767C93);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedGoingIntoCover(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F65DBC537E59AD5);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_setPedPinnedDown(bool& success, int32_t _ped, uint8_t _pinned, int32_t _i) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAAD6D1ACF08F4612);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _pinned);
	ctx->Push(_i);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getSeatPedIsTryingToEnter(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F4C85ACD641BCD2);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getVehiclePedIsTryingToEnter(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x814FA8BE5449445D);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getPedSourceOfDeath(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93C8B64DEB84728C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint32_t Native_getPedCauseOfDeath(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16FFE42AB2D2DC59);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

int32_t Native_getPedTimeOfDeath(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E98817B311AE98A);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_countPedsInCombatWithTarget(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5407B7288D0478B7);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_countPedsInCombatWithTargetWithinRadius(bool& success, int32_t _ped, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x336B3D200AB007CB);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPedRelationshipGroupDefaultHash(bool& success, int32_t _ped, uint32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADB3F206518799E8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedRelationshipGroupHash(bool& success, int32_t _ped, uint32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC80A74AC829DDD92);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRelationshipBetweenGroups(bool& success, int32_t _relationship, uint32_t _group1, uint32_t _group2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF25EB89375A37AD);
	ctx->Reset();
	ctx->Push(_relationship);
	ctx->Push(_group1);
	ctx->Push(_group2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearRelationshipBetweenGroups(bool& success, int32_t _relationship, uint32_t _group1, uint32_t _group2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E29243FB56FC6D4);
	ctx->Reset();
	ctx->Push(_relationship);
	ctx->Push(_group1);
	ctx->Push(_group2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_addRelationshipGroup(bool& success, const char* _name, uint32_t& _groupHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF372BC22FCB88606);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	auto ptr_groupHash = _groupHash;
	ctx->Push(&ptr_groupHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_groupHash = ptr_groupHash;
	return ctx->ResultBool();
}

void Native_removeRelationshipGroup(bool& success, uint32_t _groupHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB6BA2444AB393DA2);
	ctx->Reset();
	ctx->Push(_groupHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesRelationshipGroupExist(bool& success, uint32_t _groupHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCC6E3B6BB69501F1);
	ctx->Reset();
	ctx->Push(_groupHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getRelationshipBetweenPeds(bool& success, int32_t _ped1, int32_t _ped2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEBA5AD3A0EAF7121);
	ctx->Reset();
	ctx->Push(_ped1);
	ctx->Push(_ped2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint32_t Native_getPedRelationshipGroupDefaultHash(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42FDD0F017B1E38E);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint32_t Native_getPedRelationshipGroupHash(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7DBDD04862D95F04);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

int32_t Native_getRelationshipBetweenGroups(bool& success, uint32_t _group1, uint32_t _group2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9E6B70061662AE5C);
	ctx->Reset();
	ctx->Push(_group1);
	ctx->Push(_group2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setRelationshipGroupAffectsWantedLevel(bool& success, uint32_t _group, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5615E0C5EB2BC6E2);
	ctx->Reset();
	ctx->Push(_group);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_tellGroupPedsInAreaToAttack(bool& success, int32_t _ped, int32_t _p1, float _p2, uint32_t _hash, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD27D957598E49E9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_hash);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanBeTargetedWithoutLos(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4328652AE5769C71);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedToInformRespectedFriends(bool& success, int32_t _ped, float _radius, int32_t _maxFriends) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x112942C6E708F70B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_radius);
	ctx->Push(_maxFriends);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedRespondingToEvent(bool& success, int32_t _ped, int32_t _event) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x625B774D75C87068);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_event);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getPosFromFiredEvent(bool& success, int32_t _ped, int32_t _eventType, int32_t& _outData) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA656A3BB01BDEA3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_eventType);
	auto ptr_outData = _outData;
	ctx->Push(&ptr_outData);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outData = ptr_outData;
	return ctx->ResultBool();
}

void Native_setPedFiringPattern(bool& success, int32_t _ped, uint32_t _patternHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9AC577F5A12AD8A9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_patternHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedShootRate(bool& success, int32_t _ped, int32_t _shootRate) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x614DA022990752DC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_shootRate);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCombatFloat(bool& success, int32_t _ped, int32_t _combatType, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF41B4B141ED981C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_combatType);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getCombatFloat(bool& success, int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x52DFF8A10508090A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_getGroupSize(bool& success, int32_t _groupID, int32_t& _p1, int32_t& _sizeInMembers) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8DE69FE35CA09A45);
	ctx->Reset();
	ctx->Push(_groupID);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	auto ptr_sizeInMembers = _sizeInMembers;
	ctx->Push(&ptr_sizeInMembers);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p1 = ptr_p1;
	_sizeInMembers = ptr_sizeInMembers;
}

uint8_t Native_doesGroupExist(bool& success, int32_t _groupId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C6B0C22F9F40BBE);
	ctx->Reset();
	ctx->Push(_groupId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getPedGroupIndex(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF162E133B4E7A675);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isPedInGroup(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5891CAC5D4ACFF74);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getPlayerPedIsFollowing(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A3975DEA89F9A17);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setGroupFormation(bool& success, int32_t _groupId, int32_t _formationType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE2F5FC3AF7E8C1E);
	ctx->Reset();
	ctx->Push(_groupId);
	ctx->Push(_formationType);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGroupFormationSpacing(bool& success, int32_t _groupId, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D9D45004C28C916);
	ctx->Reset();
	ctx->Push(_groupId);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetGroupFormationDefaultSpacing(bool& success, int32_t _groupHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x63DAB4CCB3273205);
	ctx->Reset();
	ctx->Push(_groupHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getVehiclePedIsUsing(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6094AD011A2EA87D);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getVehiclePedIsEntering(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF92691AED837A5FC);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPedGravity(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9FF447B6B6AD960A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_applyDamageToPed(bool& success, int32_t _ped, int32_t _damageAmount, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x697157CED63F18D4);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_damageAmount);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getTimePedDamagedByWeapon(bool& success, int32_t _ped, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36B77BB84687C318);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPedAllowedToDuck(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA1F1B7BE1A8766F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedNeverLeavesGroup(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3DBFC55D5C9BB447);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPedType(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF059E1E4C01E63C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPedAsCop(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB03C38DD3FB7FFD);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedHealthPendingLastDamageEventOverrideFlag(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3352E018D6F89DF);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedMaxHealth(bool& success, int32_t _ped, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF5F6378C4F3419D3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPedMaxHealth(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4700A416E8324EF3);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPedMaxTimeInWater(bool& success, int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43C851690662113D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedMaxTimeUnderwater(bool& success, int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6BA428C528D9E522);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCorpseRagdollFriction(bool& success, int32_t _ped, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2735233A786B1BEF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedVehicleForcedSeatUsage(bool& success, int32_t _ped, int32_t _vehicle, int32_t _seatIndex, int32_t _flags, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x952F06BEECD775CC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_seatIndex);
	ctx->Push(_flags);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearAllPedVehicleForcedSeatUsage(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6CA85E7259CE16B);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanBeKnockedOffBike(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB282749D5E028163);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanBeKnockedOffVehicle(bool& success, int32_t _ped, int32_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A6535691B477C48);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_canKnockPedOffVehicle(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x51AC07A44D4F5B8A);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_knockPedOffVehicle(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45BBCBA77C29A841);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCoordsNoGang(bool& success, int32_t _ped, float _posX, float _posY, float _posZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x87052FE446E07247);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPedAsGroupMember(bool& success, int32_t _groupID, int32_t _memberNumber) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x51455483CF23ED97);
	ctx->Reset();
	ctx->Push(_groupID);
	ctx->Push(_memberNumber);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getPedAsGroupLeader(bool& success, int32_t _groupID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CCE68DBD5FE93EC);
	ctx->Reset();
	ctx->Push(_groupID);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPedKeepTask(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x971D38760FBC02EF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedAllowMinorReactionsAsMissionPed(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x49E50BDB8BA4DAB2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedSwimming(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DE327631295B4C2);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedSwimmingUnderWater(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC024869A53992F34);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedCoordsKeepVehicle(bool& success, int32_t _ped, float _posX, float _posY, float _posZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9AFEFF481A85AB2E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedDiesInVehicle(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A30922C90C9B42C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCreateRandomCops(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x102E68B2024D536D);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCreateRandomCopsNotOnScenarios(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A4986851C4EF6E7);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCreateRandomCopsOnScenarios(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x444CB7D7DBE6973D);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_canCreateRandomCops(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5EE2CAFF7F17770D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedAsEnemy(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02A0C9720B854BFA);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanSmashGlass(bool& success, int32_t _ped, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CCE141467FF42A2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedInAnyTrain(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F972C1AB75A1ED0);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedGettingIntoAVehicle(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB062B2B5722478E);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedTryingToEnterALockedVehicle(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44D28D5DDFE5F68C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setEnableHandcuffs(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF1AF8B5D56542FA);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEnableBoundAnkles(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC52E0F855C58FC2E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEnableScuba(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF99F62004024D506);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCanAttackFriendly(bool& success, int32_t _ped, uint8_t _toggle, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3B1CB349FF9C75D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPedAlertness(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6AA118530443FD2);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPedAlertness(bool& success, int32_t _ped, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDBA71115ED9941A6);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedGetOutUpsideDownVehicle(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC0ED94165A48BC2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedMovementClipset(bool& success, int32_t _ped, const char* _clipSet, float _transitionSpeed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF8A94EDE7712BEF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_clipSet));
	ctx->Push(_transitionSpeed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetPedMovementClipset(bool& success, int32_t _ped, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA74EC0CB0AAEA2C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedStrafeClipset(bool& success, int32_t _ped, const char* _clipSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29A28F3F8CF6D854);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_clipSet));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetPedStrafeClipset(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20510814175EA477);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedWeaponMovementClipset(bool& success, int32_t _ped, const char* _clipSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2622E35B77D3ACA2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_clipSet));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetPedWeaponMovementClipset(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97B0DB5B4AA74E77);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedDriveByClipsetOverride(bool& success, int32_t _ped, const char* _clipset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED34AB6C5CB36520);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_clipset));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearPedDriveByClipsetOverride(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4AFE3690D7E0B5AC);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedMotionInCoverClipsetOverride(bool& success, int32_t _ped, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DBA107B4937F809);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_p1));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearPedMotionInCoverClipsetOverride(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC79196DCB36F6121);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearPedFallUpperBodyClipsetOverride(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80054D7FCC70EEC6);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedInVehicleContext(bool& success, int32_t _ped, uint32_t _context) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x530071295899A8C6);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_context);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetPedInVehicleContext(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x22EF8FF8778030EB);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isScriptedScenarioPedUsingConditionalAnim(bool& success, int32_t _ped, const char* _animDict, const char* _anim) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6EC47A344923E1ED);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_animDict));
	ctx->Push(SaveString(_anim));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedAlternateWalkAnim(bool& success, int32_t _ped, const char* _animDict, const char* _animName, float _p3, uint8_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C60394CB4F75E9A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_animDict));
	ctx->Push(SaveString(_animName));
	ctx->Push(_p3);
	ctx->Push((int32_t) _p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearPedAlternateWalkAnim(bool& success, int32_t _ped, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8844BBFCE30AA9E9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedAlternateMovementAnim(bool& success, int32_t _ped, int32_t _stance, const char* _animDictionary, const char* _animationName, float _p4, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90A43CC281FFAB46);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_stance);
	ctx->Push(SaveString(_animDictionary));
	ctx->Push(SaveString(_animationName));
	ctx->Push(_p4);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearPedAlternateMovementAnim(bool& success, int32_t _ped, int32_t _stance, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD8D19675ED5FBDCE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_stance);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedGestureGroup(bool& success, int32_t _ped, const char* _animGroupGesture) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDDF803377F94AAA8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_animGroupGesture));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

vector3_t Native_getAnimInitialOffsetPosition(bool& success, const char* _animDict, const char* _animName, float _x, float _y, float _z, float _xRot, float _yRot, float _zRot, float _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE22B26DD764C040);
	ctx->Reset();
	ctx->Push(SaveString(_animDict));
	ctx->Push(SaveString(_animName));
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

vector3_t Native_getAnimInitialOffsetRotation(bool& success, const char* _animDict, const char* _animName, float _x, float _y, float _z, float _xRot, float _yRot, float _zRot, float _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4B805E6046EE9E47);
	ctx->Reset();
	ctx->Push(SaveString(_animDict));
	ctx->Push(SaveString(_animName));
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

int32_t Native_getPedDrawableVariation(bool& success, int32_t _ped, int32_t _componentId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x67F3780DD425D4FC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getNumberOfPedDrawableVariations(bool& success, int32_t _ped, int32_t _componentId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27561561732A7842);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getPedTextureVariation(bool& success, int32_t _ped, int32_t _componentId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x04A355E041E004E6);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getNumberOfPedTextureVariations(bool& success, int32_t _ped, int32_t _componentId, int32_t _drawableId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F7156A3142A6BAD);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	ctx->Push(_drawableId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getNumberOfPedPropDrawableVariations(bool& success, int32_t _ped, int32_t _propId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FAF9754E789FB47);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_propId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getNumberOfPedPropTextureVariations(bool& success, int32_t _ped, int32_t _propId, int32_t _drawableId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6E7F1CEB523E171);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_propId);
	ctx->Push(_drawableId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getPedPaletteVariation(bool& success, int32_t _ped, int32_t _componentId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3DD5F2A84B42281);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_getMpOutfitDataFromMetadata(bool& success, int32_t& _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9E30E91FB03A2CAF);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

int32_t Native_getFmMaleShopPedApparelItemIndex(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E77FA7A62EE6C4C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getFmFemaleShopPedApparelItemIndex(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF033419D1B81FAE8);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isPedComponentVariationValid(bool& success, int32_t _ped, int32_t _componentId, int32_t _drawableId, int32_t _textureId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE825F6B6CEA7671D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	ctx->Push(_drawableId);
	ctx->Push(_textureId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedComponentVariation(bool& success, int32_t _ped, int32_t _componentId, int32_t _drawableId, int32_t _textureId, int32_t _paletteId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x262B14F48D29DE80);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	ctx->Push(_drawableId);
	ctx->Push(_textureId);
	ctx->Push(_paletteId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedRandomComponentVariation(bool& success, int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8A9481A01E63C28);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedRandomProps(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC44AA05345C992C6);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedDefaultComponentVariation(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45EEE61580806D63);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedBlendFromParents(bool& success, int32_t _ped, int32_t _p1, int32_t _p2, float _p3, float _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x137BBD05230DB22D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedHeadBlendData(bool& success, int32_t _ped, int32_t _shapeFirstID, int32_t _shapeSecondID, int32_t _shapeThirdID, int32_t _skinFirstID, int32_t _skinSecondID, int32_t _skinThirdID, float _shapeMix, float _skinMix, float _thirdMix, uint8_t _isParent) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9414E18B9434C2FE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_shapeFirstID);
	ctx->Push(_shapeSecondID);
	ctx->Push(_shapeThirdID);
	ctx->Push(_skinFirstID);
	ctx->Push(_skinSecondID);
	ctx->Push(_skinThirdID);
	ctx->Push(_shapeMix);
	ctx->Push(_skinMix);
	ctx->Push(_thirdMix);
	ctx->Push((int32_t) _isParent);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getPedHeadBlendData(bool& success, int32_t _ped, int32_t& _headBlendData) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2746BD9D88C5C5D0);
	ctx->Reset();
	ctx->Push(_ped);
	auto ptr_headBlendData = _headBlendData;
	ctx->Push(&ptr_headBlendData);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_headBlendData = ptr_headBlendData;
	return ctx->ResultBool();
}

void Native_updatePedHeadBlendData(bool& success, int32_t _ped, float _shapeMix, float _skinMix, float _thirdMix) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x723538F61C647C5A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_shapeMix);
	ctx->Push(_skinMix);
	ctx->Push(_thirdMix);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setHeadBlendEyeColor(bool& success, int32_t _ped, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50B56988B170AFDF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getHeadBlendEyeColor(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x76BBA2CEE66D47E9);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPedHeadOverlay(bool& success, int32_t _ped, int32_t _overlayID, int32_t _index, float _opacity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48F44967FA05CC1E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_overlayID);
	ctx->Push(_index);
	ctx->Push(_opacity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPedHeadOverlay(bool& success, int32_t _ped, int32_t _overlayID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA60EF3B6461A4D43);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_overlayID);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getPedHeadOverlayNum(bool& success, int32_t _overlayID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF1CE768BB43480E);
	ctx->Reset();
	ctx->Push(_overlayID);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPedHeadOverlayTint(bool& success, int32_t _ped, int32_t _overlayID, int32_t _colorType, int32_t _colorID, int32_t _secondColorID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x497BF74A7B9CB952);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_overlayID);
	ctx->Push(_colorType);
	ctx->Push(_colorID);
	ctx->Push(_secondColorID);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedHairTint(bool& success, int32_t _ped, int32_t _colorID, int32_t _highlightColorID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4CFFC65454C93A49);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_colorID);
	ctx->Push(_highlightColorID);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getNumPedHairTints(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE5C0CF872C2AD150);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getNumPedMakeupTints(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1F7CA1535D22818);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_getPedHairTintColor(bool& success, int32_t _hairColorIndex, int32_t& _outR, int32_t& _outG, int32_t& _outB) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4852FC386E2E1BB5);
	ctx->Reset();
	ctx->Push(_hairColorIndex);
	auto ptr_outR = _outR;
	ctx->Push(&ptr_outR);
	auto ptr_outG = _outG;
	ctx->Push(&ptr_outG);
	auto ptr_outB = _outB;
	ctx->Push(&ptr_outB);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_outR = ptr_outR;
	_outG = ptr_outG;
	_outB = ptr_outB;
}

void Native_getPedMakeupTintColor(bool& success, int32_t _makeupColorIndex, int32_t& _outR, int32_t& _outG, int32_t& _outB) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x013E5CFC38CD5387);
	ctx->Reset();
	ctx->Push(_makeupColorIndex);
	auto ptr_outR = _outR;
	ctx->Push(&ptr_outR);
	auto ptr_outG = _outG;
	ctx->Push(&ptr_outG);
	auto ptr_outB = _outB;
	ctx->Push(&ptr_outB);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_outR = ptr_outR;
	_outG = ptr_outG;
	_outB = ptr_outB;
}

uint8_t Native_isPedHairTintForCreator(bool& success, int32_t _colorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED6D8E27A43B8CDE);
	ctx->Reset();
	ctx->Push(_colorId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getDefaultSecondaryTintForCreator(bool& success, int32_t _colorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA9960D07DADCF10);
	ctx->Reset();
	ctx->Push(_colorId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isPedLipstickTintForCreator(bool& success, int32_t _colorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E802F11FBE27674);
	ctx->Reset();
	ctx->Push(_colorId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedBlushTintForCreator(bool& success, int32_t _colorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF41B5D290C99A3D6);
	ctx->Reset();
	ctx->Push(_colorId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedHairTintForBarber(bool& success, int32_t _colorID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE0D36E5D9E99CC21);
	ctx->Reset();
	ctx->Push(_colorID);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getDefaultSecondaryTintForBarber(bool& success, int32_t _colorID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAAA6A3698A69E048);
	ctx->Reset();
	ctx->Push(_colorID);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isPedLipstickTintForBarber(bool& success, int32_t _colorID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0525A2C2562F3CD4);
	ctx->Reset();
	ctx->Push(_colorID);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedBlushTintForBarber(bool& success, int32_t _colorID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x604E810189EE3A59);
	ctx->Reset();
	ctx->Push(_colorID);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedBlushFacepaintTintForBarber(bool& success, int32_t _colorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x09E7ECA981D9B210);
	ctx->Reset();
	ctx->Push(_colorId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getTintIndexForLastGenHairTexture(bool& success, uint32_t _modelHash, int32_t _drawableId, int32_t _textureId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC56FBF2F228E1DAC);
	ctx->Reset();
	ctx->Push(_modelHash);
	ctx->Push(_drawableId);
	ctx->Push(_textureId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPedMicroMorph(bool& success, int32_t _ped, int32_t _index, float _scale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71A5C1DBA060049E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_index);
	ctx->Push(_scale);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasPedHeadBlendFinished(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x654CD0A825161131);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_finalizeHeadBlend(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4668D80430D6C299);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setHeadBlendPaletteColor(bool& success, int32_t _ped, int32_t _r, int32_t _g, int32_t _b, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCC9682B8951C5229);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableHeadBlendPaletteColor(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA21C118553BBDF02);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPedHeadBlendFirstIndex(bool& success, int32_t _type) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x68D353AB88B97E0C);
	ctx->Reset();
	ctx->Push(_type);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getPedHeadBlendNumHeads(bool& success, int32_t _type) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5EF37013A6539C9D);
	ctx->Reset();
	ctx->Push(_type);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_setPedPreloadVariationData(bool& success, int32_t _ped, int32_t _slot, int32_t _drawableId, int32_t _textureId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39D55A620FCB6A3A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_slot);
	ctx->Push(_drawableId);
	ctx->Push(_textureId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_hasPedPreloadVariationDataFinished(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66680A92700F43DF);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_releasePedPreloadVariationData(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5AAB586FFEC0FD96);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_setPedPreloadPropData(bool& success, int32_t _ped, int32_t _componentId, int32_t _drawableId, int32_t _TextureId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B16A3BFF1FBCE49);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	ctx->Push(_drawableId);
	ctx->Push(_TextureId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_hasPedPreloadPropDataFinished(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x784002A632822099);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_releasePedPreloadPropData(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF79F9DEF0AADE61A);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPedPropIndex(bool& success, int32_t _ped, int32_t _componentId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x898CC20EA75BACD8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPedPropIndex(bool& success, int32_t _ped, int32_t _componentId, int32_t _drawableId, int32_t _TextureId, uint8_t _attach) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93376B65A266EB5F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	ctx->Push(_drawableId);
	ctx->Push(_TextureId);
	ctx->Push((int32_t) _attach);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_knockOffPedProp(bool& success, int32_t _ped, uint8_t _p1, uint8_t _p2, uint8_t _p3, uint8_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6FD7816A36615F48);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	ctx->Push((int32_t) _p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearPedProp(bool& success, int32_t _ped, int32_t _propId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0943E5B8E078E76E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_propId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearAllPedProps(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD8A7537A9B52F06);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_dropAmbientProp(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAFF4710E2A0A6C12);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPedPropTextureIndex(bool& success, int32_t _ped, int32_t _componentId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE131A28626F81AB2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_clearPedParachutePackVariation(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1280804F7CFD2D6C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedScubaGearVariation(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36C6984C3ED0C911);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearPedScubaGearVariation(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB50EB4CCB29704AC);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isUsingPedScubaGearVariation(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFEC9A3B1820F3331);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setBlockingOfNonTemporaryEvents(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F8AA94D6D97DBF4);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedBoundsOrientation(bool& success, int32_t _ped, float _p1, float _p2, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F5F651ACCC9C4CF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_registerTarget(bool& success, int32_t _ped, int32_t _target) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F25D9AEFA34FBA2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_registerHatedTargetsAroundPed(bool& success, int32_t _ped, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9222F300BF8354FE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getRandomPedAtCoord(bool& success, float _x, float _y, float _z, float _xRadius, float _yRadius, float _zRadius, int32_t _pedType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x876046A8E3A4B71C);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_xRadius);
	ctx->Push(_yRadius);
	ctx->Push(_zRadius);
	ctx->Push(_pedType);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_getClosestPed(bool& success, float _x, float _y, float _z, float _radius, uint8_t _p4, uint8_t _p5, int32_t& _outPed, uint8_t _p7, uint8_t _p8, int32_t _pedType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC33AB876A77F8164);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push((int32_t) _p4);
	ctx->Push((int32_t) _p5);
	auto ptr_outPed = _outPed;
	ctx->Push(&ptr_outPed);
	ctx->Push((int32_t) _p7);
	ctx->Push((int32_t) _p8);
	ctx->Push(_pedType);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outPed = ptr_outPed;
	return ctx->ResultBool();
}

void Native_setScenarioPedsToBeReturnedByNextCommand(bool& success, uint8_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14F19A8782C8071E);
	ctx->Reset();
	ctx->Push((int32_t) _value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getCanPedBeGrabbedByScript(bool& success, int32_t _ped, uint8_t _p1, uint8_t _p2, uint8_t _p3, uint8_t _p4, uint8_t _p5, uint8_t _p6, uint8_t _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x03EA03AF85A85CB7);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	ctx->Push((int32_t) _p4);
	ctx->Push((int32_t) _p5);
	ctx->Push((int32_t) _p6);
	ctx->Push((int32_t) _p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setDriverRacingModifier(bool& success, int32_t _driver, float _modifier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDED5AF5A0EA4B297);
	ctx->Reset();
	ctx->Push(_driver);
	ctx->Push(_modifier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDriverAbility(bool& success, int32_t _driver, float _ability) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB195FFA8042FC5C3);
	ctx->Reset();
	ctx->Push(_driver);
	ctx->Push(_ability);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDriverAggressiveness(bool& success, int32_t _driver, float _aggressiveness) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA731F608CA104E3C);
	ctx->Reset();
	ctx->Push(_driver);
	ctx->Push(_aggressiveness);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_canPedRagdoll(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x128F79EDCECE4FD5);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_setPedToRagdoll(bool& success, int32_t _ped, int32_t _time1, int32_t _time2, int32_t _ragdollType, uint8_t _p4, uint8_t _p5, uint8_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE99FB955581844A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_time1);
	ctx->Push(_time2);
	ctx->Push(_ragdollType);
	ctx->Push((int32_t) _p4);
	ctx->Push((int32_t) _p5);
	ctx->Push((int32_t) _p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_setPedToRagdollWithFall(bool& success, int32_t _ped, int32_t _time, int32_t _p2, int32_t _ragdollType, float _x, float _y, float _z, float _velocity, float _p8, float _p9, float _p10, float _p11, float _p12, float _p13) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD76632D99E4966C8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_time);
	ctx->Push(_p2);
	ctx->Push(_ragdollType);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_velocity);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	ctx->Push(_p12);
	ctx->Push(_p13);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedRagdollOnCollision(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0A4F1BBF4FA7497);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedRagdoll(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x47E4E977581C5B55);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedRunningRagdollTask(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3B6097CC25AA69E);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedRagdollForceFall(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01F6594B923B9251);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetPedRagdollTimer(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9FA4664CF62E47E8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanRagdoll(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB128377056A54E2A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedRunningMeleeTask(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1871251F3B5ACD7);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedRunningMobilePhoneTask(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2AFE52F782F25775);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isMobilePhoneToPedEar(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA3F3564A5B3646C0);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setRagdollBlockingFlags(bool& success, int32_t _ped, int32_t _blockingFlag) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26695EC767728D84);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_blockingFlag);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearRagdollBlockingFlags(bool& success, int32_t _ped, int32_t _blockingFlag) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD86D101FCFD00A4B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_blockingFlag);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedAngledDefensiveArea(bool& success, int32_t _ped, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6, float _p7, uint8_t _p8, uint8_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7F76DF27A5045A1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push((int32_t) _p8);
	ctx->Push((int32_t) _p9);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedSphereDefensiveArea(bool& success, int32_t _ped, float _x, float _y, float _z, float _radius, uint8_t _p5, uint8_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D3151A373974804);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push((int32_t) _p5);
	ctx->Push((int32_t) _p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedDefensiveSphereAttachedToPed(bool& success, int32_t _ped, int32_t _target, float _xOffset, float _yOffset, float _zOffset, float _radius, uint8_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9B8F91AAD3B953E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push(_radius);
	ctx->Push((int32_t) _p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedDefensiveSphereAttachedToVehicle(bool& success, int32_t _ped, int32_t _target, float _xOffset, float _yOffset, float _zOffset, float _radius, uint8_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4723DB6E736CCFF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push(_radius);
	ctx->Push((int32_t) _p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedDefensiveAreaAttachedToPed(bool& success, int32_t _ped, int32_t _attachPed, float _p2, float _p3, float _p4, float _p5, float _p6, float _p7, float _p8, uint8_t _p9, uint8_t _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4EF47FE21698A8B6);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_attachPed);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push((int32_t) _p9);
	ctx->Push((int32_t) _p10);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedDefensiveAreaDirection(bool& success, int32_t _ped, float _p1, float _p2, float _p3, uint8_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x413C6C763A4AFFAD);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push((int32_t) _p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removePedDefensiveArea(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74D4E028107450A9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

vector3_t Native_getPedDefensiveAreaPosition(bool& success, int32_t _ped, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C06B8786DD94CD1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

uint8_t Native_isPedDefensiveAreaActive(bool& success, int32_t _ped, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA63D9FE45412247);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedPreferredCoverSet(bool& success, int32_t _ped, int32_t _itemSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8421EB4DA7E391B9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_itemSet);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removePedPreferredCoverSet(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFDDB234CF74073D9);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_reviveInjuredPed(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D8ACD8388CD99CE);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resurrectPed(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71BC8E838B9C6035);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedNameDebug(bool& success, int32_t _ped, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x98EFA132A4117BE1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

vector3_t Native_getPedExtractedDisplacement(bool& success, int32_t _ped, uint8_t _worldSpace) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE0AF41401ADF87E3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _worldSpace);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

void Native_setPedDiesWhenInjured(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BA7919BED300023);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedEnableWeaponBlocking(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97A790315D3831FD);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_specialFunctionDoNotUse(bool& success, int32_t _ped, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9ACF4A08098EA25);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetPedVisibleDamage(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3AC1F7B898F30C05);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_applyPedBloodDamageByZone(bool& success, int32_t _ped, int32_t _p1, float _p2, float _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x816F6981C60BF53B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_applyPedBlood(bool& success, int32_t _ped, int32_t _boneIndex, float _xRot, float _yRot, float _zRot, const char* _woundType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83F7E01C7B769A26);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_boneIndex);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(SaveString(_woundType));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_applyPedBloodByZone(bool& success, int32_t _ped, int32_t _p1, float _p2, float _p3, const char* _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3311E47B91EDCBBC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(SaveString(_p4));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_applyPedBloodSpecific(bool& success, int32_t _ped, int32_t _p1, float _p2, float _p3, float _p4, float _p5, int32_t _p6, float _p7, const char* _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF0D582CBF2D9B0F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(SaveString(_p8));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_applyPedDamageDecal(bool& success, int32_t _ped, int32_t _damageZone, float _xOffset, float _yOffset, float _heading, float _scale, float _alpha, int32_t _unkVariation, uint8_t _fadeIn, const char* _decalName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x397C38AA7B4A5F83);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_damageZone);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_heading);
	ctx->Push(_scale);
	ctx->Push(_alpha);
	ctx->Push(_unkVariation);
	ctx->Push((int32_t) _fadeIn);
	ctx->Push(SaveString(_decalName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_applyPedDamagePack(bool& success, int32_t _ped, const char* _damagePack, float _damage, float _mult) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46DF918788CB093F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_damagePack));
	ctx->Push(_damage);
	ctx->Push(_mult);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearPedBloodDamage(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8FE22675A5A45817);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearPedBloodDamageByZone(bool& success, int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x56E3B78C5408D9F4);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_hidePedBloodDamageByZone(bool& success, int32_t _ped, int32_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62AB793144DE75DC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearPedDamageDecalByZone(bool& success, int32_t _ped, int32_t _p1, const char* _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x523C79AEEFCC4A2A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(SaveString(_p2));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPedDecorationsState(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71EAB450D86954A1);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_markPedDecorationsAsClonedFromLocalPlayer(bool& success, int32_t _ped, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B694AFCF64E6994);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearPedWetness(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C720776DAA43E7E);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedWetnessHeight(bool& success, int32_t _ped, float _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44CB6447D2571AA0);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_height);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedWetnessEnabledThisFrame(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5485E4907B53019);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearPedEnvDirt(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6585D955A68452A5);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedSweat(bool& success, int32_t _ped, float _sweat) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27B0405F59637D1F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_sweat);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addPedDecorationFromHashes(bool& success, int32_t _ped, uint32_t _collection, uint32_t _overlay) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F5D1665E352A839);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_collection);
	ctx->Push(_overlay);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addPedDecorationFromHashesInCorona(bool& success, int32_t _ped, uint32_t _collection, uint32_t _overlay) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5619BFA07CFD7833);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_collection);
	ctx->Push(_overlay);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPedDecorationZoneFromHashes(bool& success, uint32_t _collection, uint32_t _overlay) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9FD452BFBE7A7A8B);
	ctx->Reset();
	ctx->Push(_collection);
	ctx->Push(_overlay);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_clearPedDecorations(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0E5173C163976E38);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearPedDecorationsLeaveScars(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3B27E70CEAB9F0C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_wasPedSkeletonUpdated(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11B499C1E0FF8559);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

vector3_t Native_getPedBoneCoords(bool& success, int32_t _ped, int32_t _boneId, float _offsetX, float _offsetY, float _offsetZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17C07FC640E86B4E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_boneId);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

void Native_createNmMessage(bool& success, uint8_t _startImmediately, int32_t _messageId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x418EF2A1BCE56685);
	ctx->Reset();
	ctx->Push((int32_t) _startImmediately);
	ctx->Push(_messageId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_givePedNmMessage(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB158DFCCC56E5C5B);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_addScenarioBlockingArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, uint8_t _p6, uint8_t _p7, uint8_t _p8, uint8_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B5C85C612E5256E);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push((int32_t) _p6);
	ctx->Push((int32_t) _p7);
	ctx->Push((int32_t) _p8);
	ctx->Push((int32_t) _p9);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_removeScenarioBlockingAreas(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD37401D78A929A49);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeScenarioBlockingArea(bool& success, int32_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x31D16B74C6E29D66);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setScenarioPedsSpawnInSphereArea(bool& success, float _x, float _y, float _z, float _range, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28157D43CF600981);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_range);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesScenarioBlockingAreaExists(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A24B067D175A7BD);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedUsingScenario(bool& success, int32_t _ped, const char* _scenario) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1BF094736DD62C2E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_scenario));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedUsingAnyScenario(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57AB4A3080F85143);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_setPedPanicExitScenario(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFE07FF6495D52E2A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_toggleScenarioPedCowerInPlace(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A77DFD295E29B09);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_triggerPedScenarioPanicexittoflee(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25361A96E0F7E419);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_setPedShouldPlayDirectedNormalScenarioExit(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC6935EBE0847B90);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedShouldPlayNormalScenarioExit(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA3A9299C4F2ADB98);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedShouldPlayImmediateScenarioExit(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1C03A5352243A30);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_setPedShouldPlayFleeScenarioExit(bool& success, int32_t _ped, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEEED8FAFEC331A70);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedShouldIgnoreScenarioExitCollisionChecks(bool& success, int32_t _ped, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x425AECF167663F48);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedShouldIgnoreScenarioNavChecks(bool& success, int32_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B6010B3CBC29095);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedShouldProbeForScenarioExitsInOneFrame(bool& success, int32_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCEDA60A74219D064);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedGesturing(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC30BDAEE47256C13);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_playFacialAnim(bool& success, int32_t _ped, const char* _animName, const char* _animDict) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE1E65CA8AC9C00ED);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_animName));
	ctx->Push(SaveString(_animDict));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFacialClipset(bool& success, int32_t _ped, const char* _animDict) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5687C7F05B39E401);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_animDict));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFacialIdleAnimOverride(bool& success, int32_t _ped, const char* _animName, const char* _animDict) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFFC24B988B938B38);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_animName));
	ctx->Push(SaveString(_animDict));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearFacialIdleAnimOverride(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x726256CC1EEB182F);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanPlayGestureAnims(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBAF20C5432058024);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanPlayVisemeAnims(bool& success, int32_t _ped, uint8_t _toggle, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF833DDBA3B104D43);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedIsIgnoredByAutoOpenDoors(bool& success, int32_t _ped, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33A60D8BDD6E508C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanPlayAmbientAnims(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6373D1349925A70E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanPlayAmbientBaseAnims(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0EB0585D15254740);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_triggerIdleAnimationOnPed(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC2EE020F5FB4DB53);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanArmIk(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C3B4D6D13B4C841);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanHeadIk(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC11C18092C5530DC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanLegIk(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x73518ECE2485412B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanTorsoIk(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2B7106D37947CE0);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanTorsoReactIk(bool& success, int32_t _ped, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF5846EDB26A98A24);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanTorsoVehicleIk(bool& success, int32_t _ped, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6647C5F6F5792496);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanUseAutoConversationLookat(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC4686EC06434678);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedHeadtrackingPed(bool& success, int32_t _ped1, int32_t _ped2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CD3CB88A7F8850D);
	ctx->Reset();
	ctx->Push(_ped1);
	ctx->Push(_ped2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedHeadtrackingEntity(bool& success, int32_t _ped, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x813A0A7C9D2E831F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedPrimaryLookat(bool& success, int32_t _ped, int32_t _lookAt) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD17B554996A8D9E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_lookAt);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedClothPinFrames(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78C4E9961DB3EB5B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedClothPackageIndex(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x82A3D6D9CC2CB8E3);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedClothProne(bool& success, int32_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA660FAF550EB37E5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedConfigFlag(bool& success, int32_t _ped, int32_t _flagId, uint8_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1913FE4CBF41C463);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_flagId);
	ctx->Push((int32_t) _value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedResetFlag(bool& success, int32_t _ped, int32_t _flagId, uint8_t _doReset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC1E8A365BF3B29F2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_flagId);
	ctx->Push((int32_t) _doReset);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getPedConfigFlag(bool& success, int32_t _ped, int32_t _flagId, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EE53118C892B513);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_flagId);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getPedResetFlag(bool& success, int32_t _ped, int32_t _flagId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF9E59B1B1FBF2A0);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_flagId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedGroupMemberPassengerIndex(bool& success, int32_t _ped, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BDDB8D9EC6BCF3C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanEvasiveDive(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B7A646C242A7059);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedEvasiveDiving(bool& success, int32_t _ped, int32_t& _evadingEntity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x414641C26E105898);
	ctx->Reset();
	ctx->Push(_ped);
	auto ptr_evadingEntity = _evadingEntity;
	ctx->Push(&ptr_evadingEntity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_evadingEntity = ptr_evadingEntity;
	return ctx->ResultBool();
}

void Native_setPedShootsAtCoord(bool& success, int32_t _ped, float _x, float _y, float _z, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x96A05E4FB321B1BA);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedModelIsSuppressed(bool& success, uint32_t _modelHash, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE163A4BCE4DE6F11);
	ctx->Reset();
	ctx->Push(_modelHash);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopAnyPedModelBeingSuppressed(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB47BD05FA66B40CF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanBeTargetedWhenInjured(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x638C03B0F9878F57);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedGeneratesDeadBodyEvents(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FB17BA2E7DECA5B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_blockPedFromGeneratingDeadBodyEventsWhenDead(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE43A13C9E4CCCBCF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedWillOnlyAttackWantedPlayer(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E9679C1DFCF422C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanRagdollFromPlayerImpact(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF993EE5E90ABA25);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_givePedHelmet(bool& success, int32_t _ped, uint8_t _cannotRemove, int32_t _helmetFlag, int32_t _textureIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x54C7C4A94367717E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _cannotRemove);
	ctx->Push(_helmetFlag);
	ctx->Push(_textureIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removePedHelmet(bool& success, int32_t _ped, uint8_t _instantly) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7B2458D0AD6DED8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _instantly);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedTakingOffHelmet(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14590DDBEDB1EC85);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedHelmet(bool& success, int32_t _ped, uint8_t _canWearHelmet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x560A43136EB58105);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _canWearHelmet);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedHelmetFlag(bool& success, int32_t _ped, int32_t _helmetFlag) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0E78D5C2CE3EB25);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_helmetFlag);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedHelmetPropIndex(bool& success, int32_t _ped, int32_t _propIndex, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26D83693ED99291C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_propIndex);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedHelmetVisorPropIndices(bool& success, int32_t _ped, uint8_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F7325574E41B44D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedHelmetVisorUp(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9496CE47546DB2C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedHelmetTextureIndex(bool& success, int32_t _ped, int32_t _textureIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1550C4BD22582E2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_textureIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedWearingHelmet(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF33BDFE19B309B19);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_clearPedStoredHatProp(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x687C0B594907D2E8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPedHelmetStoredHatPropIndex(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x451294E859ECC018);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getPedHelmetStoredHatTexIndex(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D728C1E12BF5518);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isCurrentHeadPropAHelmet(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2385935BFFD4D92);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedToLoadCover(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x332B562EEDA62399);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanCowerInCover(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB7553CDCEF4A735);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanPeekInCover(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC514825C507E3736);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedPlaysHeadOnHornAnimWhenDiesInVehicle(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x94D94BF1A75AED3D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedLegIkMode(bool& success, int32_t _ped, int32_t _mode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC396F5B86FF9FEBD);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_mode);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedMotionBlur(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A986918B102B448);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanSwitchWeapon(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED7F7EFE9FABF340);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedDiesInstantlyInWater(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEEB64139BA29A7CF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setLadderClimbInputState(bool& success, int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A330D297AAC6BC1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopPedWeaponFiringWhenDropped(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC158D28142A34608);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setScriptedAnimSeatOffset(bool& success, int32_t _ped, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5917BBA32D06C230);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCombatMovement(bool& success, int32_t _ped, int32_t _combatMovement) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D9CA1009AFBD057);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_combatMovement);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPedCombatMovement(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDEA92412FCAEB3F5);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPedCombatAbility(bool& success, int32_t _ped, int32_t _abilityLevel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7622C0D36B2FDA8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_abilityLevel);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCombatRange(bool& success, int32_t _ped, int32_t _combatRange) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C606747B23E497B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_combatRange);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPedCombatRange(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9D9F7F2DB8E2FA0);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPedCombatAttributes(bool& success, int32_t _ped, int32_t _attributeId, uint8_t _enabled) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F7794730795E019);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_attributeId);
	ctx->Push((int32_t) _enabled);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedTargetLossResponse(bool& success, int32_t _ped, int32_t _responseType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0703B9079823DA4A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_responseType);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedPerformingMeleeAction(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCCA191DF9980FD7);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedPerformingStealthKill(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD4CCDBCC59941B7);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedPerformingACounterAttack(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEBD0EDBA5BE957CF);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedBeingStealthKilled(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x863B23EFDE9C5DF2);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getMeleeTargetForPed(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x18A3E9EE1297FD39);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_wasPedKilledByStealth(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9800AA1A771B000);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_wasPedKilledByTakedown(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F08E26039C7347C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_wasPedKnockedOut(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61767F73EACEED21);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedFleeAttributes(bool& success, int32_t _ped, int32_t _attributeFlags, uint8_t _enable) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70A2D1137C8ED7C9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_attributeFlags);
	ctx->Push((int32_t) _enable);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCowerHash(bool& success, int32_t _ped, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA549131166868ED3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_p1));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedSteersAroundDeadBodies(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2016C603D6B8987C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedSteersAroundPeds(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46F2193B3AD1D891);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedSteersAroundObjects(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1509C089ADC208BF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedSteersAroundVehicles(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB6FB9D48DDE23EC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedIsAvoidedByOthers(bool& success, int32_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9B61A329BFDCBEA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedIncreasedAvoidanceRadius(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x570389D1C3DE3C6B);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedBlocksPathingWhenDead(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x576594E8D64375E2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedNoTimeDelayBeforeShot(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA52D5247A4227E14);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isAnyPedNearPoint(bool& success, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x083961498679DC9F);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_forcePedAiAndAnimationUpdate(bool& success, int32_t _ped, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2208438012482A1A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedHeadingTowardsPosition(bool& success, int32_t _ped, float _x, float _y, float _z, float _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFCF37A457CB96DC0);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_requestPedVisibilityTracking(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D7A2E43E74E2EB8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_requestPedVehicleVisibilityTracking(bool& success, int32_t _ped, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2BC338A7B21F4608);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_requestPedRestrictedVehicleVisibilityTracking(bool& success, int32_t _ped, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD018C591F94CB43);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_requestPedUseSmallBboxVisibilityTracking(bool& success, int32_t _ped, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75BA1CB3B7D40CAF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isTrackedPedVisible(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x91C8E617F64188AC);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getTrackedPedPixelcount(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x511F1A683387C7E2);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isPedTracked(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C5E1F087CD10BB7);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasPedReceivedEvent(bool& success, int32_t _ped, int32_t _eventId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8507BCB710FA6DC0);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_eventId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_canPedSeeHatedPed(bool& success, int32_t _ped1, int32_t _ped2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6CD5A433374D4CFB);
	ctx->Reset();
	ctx->Push(_ped1);
	ctx->Push(_ped2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_canPedShuffleToOrFromTurretSeat(bool& success, int32_t _ped, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C6A6C19B6C0C496);
	ctx->Reset();
	ctx->Push(_ped);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

uint8_t Native_canPedShuffleToOrFromExtraSeat(bool& success, int32_t _ped, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DFC81C9B9608549);
	ctx->Reset();
	ctx->Push(_ped);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

int32_t Native_getPedBoneIndex(bool& success, int32_t _ped, int32_t _boneId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F428D08BE5AAE31);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_boneId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getPedRagdollBoneIndex(bool& success, int32_t _ped, int32_t _bone) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2057EF813397A772);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_bone);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPedEnveffScale(bool& success, int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF29516833893561);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getPedEnveffScale(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C14D30395A51A3C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setEnablePedEnveffScale(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2C5AA0C0E8D0F1E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedEnveffCpvAdd(bool& success, int32_t _ped, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x110F526AB784111F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedEnveffColorModulator(bool& success, int32_t _ped, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD69411AA0CEBF9E9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedEmissiveScale(bool& success, int32_t _ped, float _intensity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E90D746056E273D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_intensity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getPedEmissiveScale(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1461B28A06717D68);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

uint8_t Native_isPedShaderReady(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x81AA517FBBA05D39);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedEnableCrewEmblem(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE906EC930F5FE7C8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_requestRagdollBoundsUpdate(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1216E0BFA72CC703);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedAoBlobRendering(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B5AA717A181FB4C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedSheltered(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8B52E498014F5B0);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_createSynchronizedScene(bool& success, float _x, float _y, float _z, float _roll, float _pitch, float _yaw, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C18E0F9080ADD73);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_roll);
	ctx->Push(_pitch);
	ctx->Push(_yaw);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_createSynchronizedSceneAtMapObject(bool& success, float _x, float _y, float _z, float _radius, uint32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62EC273D00187DCA);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isSynchronizedSceneRunning(bool& success, int32_t _sceneId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25D39B935A038A26);
	ctx->Reset();
	ctx->Push(_sceneId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setSynchronizedSceneOrigin(bool& success, int32_t _sceneID, float _x, float _y, float _z, float _roll, float _pitch, float _yaw, uint8_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6ACF6B7225801CD7);
	ctx->Reset();
	ctx->Push(_sceneID);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_roll);
	ctx->Push(_pitch);
	ctx->Push(_yaw);
	ctx->Push((int32_t) _p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSynchronizedScenePhase(bool& success, int32_t _sceneID, float _phase) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x734292F4F0ABF6D0);
	ctx->Reset();
	ctx->Push(_sceneID);
	ctx->Push(_phase);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getSynchronizedScenePhase(bool& success, int32_t _sceneID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4A310B1D7FA73CC);
	ctx->Reset();
	ctx->Push(_sceneID);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setSynchronizedSceneRate(bool& success, int32_t _sceneID, float _rate) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB6C49F8A5E295A5D);
	ctx->Reset();
	ctx->Push(_sceneID);
	ctx->Push(_rate);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getSynchronizedSceneRate(bool& success, int32_t _sceneID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD80932D577274D40);
	ctx->Reset();
	ctx->Push(_sceneID);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setSynchronizedSceneLooped(bool& success, int32_t _sceneID, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9A897A4C6C2974F);
	ctx->Reset();
	ctx->Push(_sceneID);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isSynchronizedSceneLooped(bool& success, int32_t _sceneID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62522002E0C391BA);
	ctx->Reset();
	ctx->Push(_sceneID);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setSynchronizedSceneHoldLastFrame(bool& success, int32_t _sceneID, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x394B9CD12435C981);
	ctx->Reset();
	ctx->Push(_sceneID);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isSynchronizedSceneHoldLastFrame(bool& success, int32_t _sceneID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F2F4F13AC5257EF);
	ctx->Reset();
	ctx->Push(_sceneID);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_attachSynchronizedSceneToEntity(bool& success, int32_t _sceneID, int32_t _entity, int32_t _boneIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x272E4723B56A3B96);
	ctx->Reset();
	ctx->Push(_sceneID);
	ctx->Push(_entity);
	ctx->Push(_boneIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_detachSynchronizedScene(bool& success, int32_t _sceneID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D38F1F04CBB37EA);
	ctx->Reset();
	ctx->Push(_sceneID);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_takeOwnershipOfSynchronizedScene(bool& success, int32_t _scene) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD9CC7E200A52A6F);
	ctx->Reset();
	ctx->Push(_scene);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_forcePedMotionState(bool& success, int32_t _ped, uint32_t _motionStateHash, uint8_t _p2, int32_t _p3, uint8_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF28965D04F570DCA);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_motionStateHash);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	ctx->Push((int32_t) _p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getPedCurrentMoveBlendRatio(bool& success, int32_t _ped, float& _speedX, float& _speedY) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF60165E1D2C5370B);
	ctx->Reset();
	ctx->Push(_ped);
	auto ptr_speedX = _speedX;
	ctx->Push(&ptr_speedX);
	auto ptr_speedY = _speedY;
	ctx->Push(&ptr_speedY);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_speedX = ptr_speedX;
	_speedY = ptr_speedY;
	return ctx->ResultBool();
}

void Native_setPedMaxMoveBlendRatio(bool& success, int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x433083750C5E064A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedMinMoveBlendRatio(bool& success, int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01A898D26E2333DD);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedMoveRateOverride(bool& success, int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x085BF80FA50A39D1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedMoveRateInWaterOverride(bool& success, int32_t _ped, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0B3E35AC043707D9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_pedHasSexinessFlagSet(bool& success, int32_t _ped, int32_t _sexinessFlag) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46B05BCAE43856B0);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_sexinessFlag);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getPedNearbyVehicles(bool& success, int32_t _ped, int32_t& _sizeAndVehs) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCFF869CBFA210D82);
	ctx->Reset();
	ctx->Push(_ped);
	auto ptr_sizeAndVehs = _sizeAndVehs;
	ctx->Push(&ptr_sizeAndVehs);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_sizeAndVehs = ptr_sizeAndVehs;
	return ctx->ResultInt();
}

int32_t Native_getPedNearbyPeds(bool& success, int32_t _ped, int32_t& _sizeAndPeds, int32_t _ignore) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23F8F5FC7E8C4A6B);
	ctx->Reset();
	ctx->Push(_ped);
	auto ptr_sizeAndPeds = _sizeAndPeds;
	ctx->Push(&ptr_sizeAndPeds);
	ctx->Push(_ignore);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_sizeAndPeds = ptr_sizeAndPeds;
	return ctx->ResultInt();
}

uint8_t Native_haveAllStreamingRequestsCompleted(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7350823473013C02);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedUsingActionMode(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x00E73468D085F745);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedUsingActionMode(bool& success, int32_t _ped, uint8_t _p1, int32_t _p2, const char* _action) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD75ACCF5E0FB5367);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	ctx->Push(_p2);
	ctx->Push(SaveString(_action));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMovementModeOverride(bool& success, int32_t _ped, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x781DE8FA214E87D2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCapsule(bool& success, int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x364DF566EC833DE2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_registerPedheadshot(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4462658788425076);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_registerPedheadshotHires(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA8805A1108A2515);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_registerPedheadshotTransparent(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x953563CE563143AF);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_unregisterPedheadshot(bool& success, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x96B1361D9B24C2FF);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedheadshotValid(bool& success, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0A9668F158129A2);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedheadshotReady(bool& success, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7085228842B13A67);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

const char* Native_getPedheadshotTxdString(bool& success, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB4EACD4AD0A5D6B);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

uint8_t Native_requestPedheadshotImgUpload(bool& success, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0DAEF2F545BEE25);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_releasePedheadshotImgUpload(bool& success, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D517B27CF6ECD04);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedheadshotImgUploadAvailable(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEBB376779A760AA8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasPedheadshotImgUploadFailed(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x876928DDDFCCC9CD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasPedheadshotImgUploadSucceeded(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE8A169E666CBC541);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedHeatscaleOverride(bool& success, int32_t _ped, float _heatScale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC1F6EBF9A3D55538);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_heatScale);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disablePedHeatscaleOverride(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x600048C60D5C2C51);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_spawnpointsStartSearch(bool& success, float _p0, float _p1, float _p2, float _p3, float _p4, int32_t _interiorFlags, float _scale, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DF9038C90AD5264);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_interiorFlags);
	ctx->Push(_scale);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_spawnpointsStartSearchInAngledArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _width, int32_t _interiorFlags, float _scale, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2AFF10216DEFA2F);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_width);
	ctx->Push(_interiorFlags);
	ctx->Push(_scale);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_spawnpointsCancelSearch(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFEE4A5459472A9F8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_spawnpointsIsSearchActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C67506996001F5E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_spawnpointsIsSearchComplete(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA586FBEB32A53DBB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_spawnpointsIsSearchFailed(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF445DE8DA80A1792);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_spawnpointsGetNumSearchResults(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA635C11B8C44AFC2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_spawnpointsGetSearchResult(bool& success, int32_t _randomInt, float& _x, float& _y, float& _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x280C7E3AC7F56E90);
	ctx->Reset();
	ctx->Push(_randomInt);
	auto ptr_x = _x;
	ctx->Push(&ptr_x);
	auto ptr_y = _y;
	ctx->Push(&ptr_y);
	auto ptr_z = _z;
	ctx->Push(&ptr_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_x = ptr_x;
	_y = ptr_y;
	_z = ptr_z;
}

void Native_spawnpointsGetSearchResultFlags(bool& success, int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB782F8238512BAD5);
	ctx->Reset();
	ctx->Push(_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p1 = ptr_p1;
}

void Native_setIkTarget(bool& success, int32_t _ped, int32_t _ikIndex, int32_t _entityLookAt, int32_t _boneLookAt, float _offsetX, float _offsetY, float _offsetZ, int32_t _p7, int32_t _blendInDuration, int32_t _blendOutDuration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC32779C16FCEECD9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_ikIndex);
	ctx->Push(_entityLookAt);
	ctx->Push(_boneLookAt);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	ctx->Push(_p7);
	ctx->Push(_blendInDuration);
	ctx->Push(_blendOutDuration);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceInstantLegIkSetup(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED3C76ADFA6D07C4);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_requestActionModeAsset(bool& success, const char* _asset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x290E2780BB7AA598);
	ctx->Reset();
	ctx->Push(SaveString(_asset));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasActionModeAssetLoaded(bool& success, const char* _asset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4B5F4BF2CB24E65);
	ctx->Reset();
	ctx->Push(SaveString(_asset));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_removeActionModeAsset(bool& success, const char* _asset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13E940F88470FA51);
	ctx->Reset();
	ctx->Push(SaveString(_asset));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_requestStealthModeAsset(bool& success, const char* _asset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A0A62FCDEE16D4F);
	ctx->Reset();
	ctx->Push(SaveString(_asset));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasStealthModeAssetLoaded(bool& success, const char* _asset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE977FC5B08AF3441);
	ctx->Reset();
	ctx->Push(SaveString(_asset));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_removeStealthModeAsset(bool& success, const char* _asset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9219857D21F0E842);
	ctx->Reset();
	ctx->Push(SaveString(_asset));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedLodMultiplier(bool& success, int32_t _ped, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC2C5C242AAC342B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCanLosePropsOnDamage(bool& success, int32_t _ped, uint8_t _toggle, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE861D0B05C7662B8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setForceFootstepUpdate(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x129466ED55140F8D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setForceStepType(bool& success, int32_t _ped, uint8_t _p1, int32_t _type, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB968B53FC7F916D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	ctx->Push(_type);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isAnyHostilePedNearPoint(bool& success, int32_t _ped, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x68772DB2B2526F9F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedCanPlayInCarIdles(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x820E9892A77E97CD);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isTargetPedInPerceptionArea(bool& success, int32_t _ped, int32_t _targetPed, float _p2, float _p3, float _p4, float _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06087579E7AA85A9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_targetPed);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPopControlSphereThisFrame(bool& success, float _x, float _y, float _z, float _min, float _max) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD8C3BE3EE94CAF2D);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_min);
	ctx->Push(_max);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceZeroMassInCollisions(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD33DAA36272177C4);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDisableHighFallDeath(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x711794453CFD692B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedPhonePaletteIdx(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83A169EABCDB10A2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedSteerBias(bool& success, int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x288DF530C92DAD6F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedSwitchingWeapon(bool& success, int32_t _Ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3795688A307E1EB6);
	ctx->Reset();
	ctx->Push(_Ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedTreatedAsFriendly(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F62619393661D6E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDisablePedMapCollision(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFE68C4B787E1BFB);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_enableMpLight(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE2476B9EE4A094F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getMpLightEnabled(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88274C11CF0D866D);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_clearCoverPointForPed(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x637822DC2AFEEBF8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAllowStuntJumpCamera(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFAB944D4D481ACCB);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_addRope(bool& success, float _x, float _y, float _z, float _rotX, float _rotY, float _rotZ, float _length, int32_t _ropeType, float _maxLength, float _minLength, float _windingSpeed, uint8_t _p11, uint8_t _p12, uint8_t _rigid, float _p14, uint8_t _breakWhenShot, int32_t& _unkPtr) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE832D760399EB220);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_length);
	ctx->Push(_ropeType);
	ctx->Push(_maxLength);
	ctx->Push(_minLength);
	ctx->Push(_windingSpeed);
	ctx->Push((int32_t) _p11);
	ctx->Push((int32_t) _p12);
	ctx->Push((int32_t) _rigid);
	ctx->Push(_p14);
	ctx->Push((int32_t) _breakWhenShot);
	auto ptr_unkPtr = _unkPtr;
	ctx->Push(&ptr_unkPtr);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_unkPtr = ptr_unkPtr;
	return ctx->ResultInt();
}

void Native_deleteRope(bool& success, int32_t& _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x52B4829281364649);
	ctx->Reset();
	auto ptr_ropeId = _ropeId;
	ctx->Push(&ptr_ropeId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_ropeId = ptr_ropeId;
}

void Native_deleteChildRope(bool& success, int32_t _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA5D6B1888E4DB20);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesRopeExist(bool& success, int32_t& _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD5448BE3111ED96);
	ctx->Reset();
	auto ptr_ropeId = _ropeId;
	ctx->Push(&ptr_ropeId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_ropeId = ptr_ropeId;
	return ctx->ResultBool();
}

void Native_ropeDrawEnabled(bool& success, int32_t& _ropeId, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1AE736541B0FCA3);
	ctx->Reset();
	auto ptr_ropeId = _ropeId;
	ctx->Push(&ptr_ropeId);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_ropeId = ptr_ropeId;
}

void Native_ropeDrawShadowEnabled(bool& success, int32_t& _ropeId, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF159A63806BB5BA8);
	ctx->Reset();
	auto ptr_ropeId = _ropeId;
	ctx->Push(&ptr_ropeId);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_ropeId = ptr_ropeId;
}

void Native_loadRopeData(bool& success, int32_t _ropeId, const char* _rope_preset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCBB203C04D1ABD27);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(SaveString(_rope_preset));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_pinRopeVertex(bool& success, int32_t _ropeId, int32_t _vertex, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B320CF14146B69A);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_vertex);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_unpinRopeVertex(bool& success, int32_t _ropeId, int32_t _vertex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4B5AE2EEE4A8F180);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_vertex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getRopeVertexCount(bool& success, int32_t _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3655F544CD30F0B5);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_attachEntitiesToRope(bool& success, int32_t _ropeId, int32_t _ent1, int32_t _ent2, float _ent1_x, float _ent1_y, float _ent1_z, float _ent2_x, float _ent2_y, float _ent2_z, float _length, uint8_t _p10, uint8_t _p11, int32_t& _p12, int32_t& _p13) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3D95EC8B6D940AC3);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_ent1);
	ctx->Push(_ent2);
	ctx->Push(_ent1_x);
	ctx->Push(_ent1_y);
	ctx->Push(_ent1_z);
	ctx->Push(_ent2_x);
	ctx->Push(_ent2_y);
	ctx->Push(_ent2_z);
	ctx->Push(_length);
	ctx->Push((int32_t) _p10);
	ctx->Push((int32_t) _p11);
	auto ptr_p12 = _p12;
	ctx->Push(&ptr_p12);
	auto ptr_p13 = _p13;
	ctx->Push(&ptr_p13);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p12 = ptr_p12;
	_p13 = ptr_p13;
}

void Native_attachRopeToEntity(bool& success, int32_t _ropeId, int32_t _entity, float _x, float _y, float _z, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4B490A6832559A65);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_entity);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_detachRopeFromEntity(bool& success, int32_t _ropeId, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBCF3026912A8647D);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_ropeSetUpdatePinverts(bool& success, int32_t _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8D667EE52114ABA);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_ropeSetUpdateOrder(bool& success, int32_t _ropeId, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC57A637A20006ED);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_ropeSetSmoothReelin(bool& success, int32_t _ropeId, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36CCB9BE67B970FD);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isRopeAttachedAtBothEnds(bool& success, int32_t& _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84DE3B5FB3E666F0);
	ctx->Reset();
	auto ptr_ropeId = _ropeId;
	ctx->Push(&ptr_ropeId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_ropeId = ptr_ropeId;
	return ctx->ResultBool();
}

vector3_t Native_getRopeLastVertexCoord(bool& success, int32_t _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21BB0FBD3E217C2D);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

vector3_t Native_getRopeVertexCoord(bool& success, int32_t _ropeId, int32_t _vertex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA61CA8E80F09E4D);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_vertex);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

void Native_startRopeWinding(bool& success, int32_t _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1461C72C889E343E);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopRopeWinding(bool& success, int32_t _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB2D4AB84A19AA7C);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_startRopeUnwindingFront(bool& success, int32_t _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x538D1179EC1AA9A9);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopRopeUnwindingFront(bool& success, int32_t _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFFF3A50779EFBBB3);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_ropeConvertToSimple(bool& success, int32_t _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5389D48EFA2F079A);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_ropeLoadTextures(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B9039DBF2D258C1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_ropeAreTexturesLoaded(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2D0E6A75CC05597);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_ropeUnloadTextures(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6CE36C35C1AC8163);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesScriptOwnRope(bool& success, int32_t _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x271C9D3ACA5D6409);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_ropeAttachVirtualBoundGeom(bool& success, int32_t _ropeId, int32_t _p1, float _p2, float _p3, float _p4, float _p5, float _p6, float _p7, float _p8, float _p9, float _p10, float _p11, float _p12, float _p13) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC0CE682D4D05650);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	ctx->Push(_p12);
	ctx->Push(_p13);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_ropeChangeScriptOwner(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1B6216CA2E7B55E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_ropeSetRefframevelocityColliderorder(bool& success, int32_t _ropeId, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB743F735C03D7810);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_ropeGetDistanceBetweenEnds(bool& success, int32_t _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x73040398DFF9A4A6);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_ropeForceLength(bool& success, int32_t _ropeId, float _length) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD009F759A723DB1B);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_length);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_ropeResetLength(bool& success, int32_t _ropeId, float _length) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC16DE94D9BEA14A0);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_length);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_applyImpulseToCloth(bool& success, float _posX, float _posY, float _posZ, float _vecX, float _vecY, float _vecZ, float _impulse) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE37F721824571784);
	ctx->Reset();
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_vecX);
	ctx->Push(_vecY);
	ctx->Push(_vecZ);
	ctx->Push(_impulse);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDamping(bool& success, int32_t _entity, int32_t _vertex, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEEA3B200A6FEB65B);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_vertex);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_activatePhysics(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x710311ADF0E20730);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCgoffset(bool& success, int32_t _entity, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD8FA3908D7B86904);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

vector3_t Native_getCgoffset(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8214A4B5A7A33612);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

void Native_setCgAtBoundcenter(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE520D9761FF811F);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_breakEntityGlass(bool& success, int32_t _entity, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6, float _p7, float _p8, int32_t _p9, uint8_t _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E648D16F6E308F3);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push((int32_t) _p10);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getIsEntityAFrag(bool& success, int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C112765300C7E1E);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setDisableBreaking(bool& success, int32_t _object, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CEC1A84620E7D5B);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetDisableBreaking(bool& success, int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCC6E963682533882);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDisableFragDamage(bool& success, int32_t _object, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01BA3AED21C16CFB);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setUseKinematicPhysics(bool& success, int32_t _entity, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15F944730C832252);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setInStuntMode(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9EBD751E5787BAF2);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setInArenaMode(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA6A6098851C396F);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPlayerPed(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43A66C31C68491C0);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getPlayerPedScriptIndex(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50FAC3A3E030A6E1);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPlayerModel(bool& success, int32_t _player, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x00A1CADD00108836);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_changePlayerPed(bool& success, int32_t _player, int32_t _ped, uint8_t _p2, uint8_t _resetDamage) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x048189FAC643DEEE);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_ped);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _resetDamage);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getPlayerRgbColour(bool& success, int32_t _player, int32_t& _r, int32_t& _g, int32_t& _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE902EF951DCE178F);
	ctx->Reset();
	ctx->Push(_player);
	auto ptr_r = _r;
	ctx->Push(&ptr_r);
	auto ptr_g = _g;
	ctx->Push(&ptr_g);
	auto ptr_b = _b;
	ctx->Push(&ptr_b);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_r = ptr_r;
	_g = ptr_g;
	_b = ptr_b;
}

int32_t Native_getNumberOfPlayers(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x407C7F91DDB46C16);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getPlayerTeam(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x37039302F4E0A008);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPlayerTeam(bool& success, int32_t _player, int32_t _team) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0299FA38396A4940);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_team);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getNumberOfPlayersInTeam(bool& success, int32_t _team) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1FC200409F10E6F1);
	ctx->Reset();
	ctx->Push(_team);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

const char* Native_getPlayerName(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D0DE6A7B5DA71F8);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

float Native_getWantedLevelRadius(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x085DEB493BE80812);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

vector3_t Native_getPlayerWantedCentrePosition(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C92BA89F1AF26F8);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

void Native_setPlayerWantedCentrePosition(bool& success, int32_t _player, vector3_t& _position, uint8_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x520E541A97A13354);
	ctx->Reset();
	ctx->Push(_player);
	alt::INative::Vector3 converted_position { _position.x, 0, _position.y, 0, _position.z };
	ctx->Push(&converted_position);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_position.x = converted_position.x;
	_position.y = converted_position.y;
	_position.z = converted_position.z;
}

int32_t Native_getWantedLevelThreshold(bool& success, int32_t _wantedLevel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFDD179EAF45B556C);
	ctx->Reset();
	ctx->Push(_wantedLevel);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPlayerWantedLevel(bool& success, int32_t _player, int32_t _wantedLevel, uint8_t _disableNoMission) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39FF19C64EF7DA5B);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_wantedLevel);
	ctx->Push((int32_t) _disableNoMission);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerWantedLevelNoDrop(bool& success, int32_t _player, int32_t _wantedLevel, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x340E61DE7F471565);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_wantedLevel);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerWantedLevelNow(bool& success, int32_t _player, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE0A7D1E497FFCD6F);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_arePlayerFlashingStarsAboutToDrop(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAFAF86043E5874E9);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_arePlayerStarsGreyedOut(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A6EB355EE14A2DB);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isWantedAndHasBeenSeenByCops(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7E07C78925D5FD96);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setDispatchCopsForPlayer(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB172424876553F4);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPlayerWantedLevelGreater(bool& success, int32_t _player, int32_t _wantedLevel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x238DB2A2C23EE9EF);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_wantedLevel);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_clearPlayerWantedLevel(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB302540597885499);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPlayerDead(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x424D4687FA1E5652);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPlayerPressingHorn(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA1E2BF8B10598F9);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPlayerControl(bool& success, int32_t _player, uint8_t _bHasControl, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D32347D6D4C40A2);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _bHasControl);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPlayerWantedLevel(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE28E54788CE8F12D);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setMaxWantedLevel(bool& success, int32_t _maxWantedLevel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA5F02DB48D704B9);
	ctx->Reset();
	ctx->Push(_maxWantedLevel);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPoliceRadarBlips(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43286D561B72B8BF);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPoliceIgnorePlayer(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x32C62AA929C2DA6A);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPlayerPlaying(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E9564D8246B909A);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setEveryoneIgnorePlayer(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8EEDA153AD141BA4);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAllRandomPedsFlee(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x056E0FE8534C2949);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAllRandomPedsFleeThisFrame(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x471D2FF42A94B4F2);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAllNeutralRandomPedsFlee(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE45D1A1EF45EE61);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAllNeutralRandomPedsFleeThisFrame(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3376F42B1FACCC6);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setLawPedsCanAttackNonWantedPlayerThisFrame(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFAC75988A7D078D3);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setIgnoreLowPriorityShockingEvents(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x596976B02B6B5700);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setWantedLevelMultiplier(bool& success, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x020E5F00CDA207BA);
	ctx->Reset();
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setWantedLevelDifficulty(bool& success, int32_t _player, float _difficulty) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B0BB33B04405E7A);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_difficulty);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetWantedLevelDifficulty(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9D0DD990DC141DD);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getWantedLevelTimeToEscape(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA72200F51875FEA4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setWantedLevelHiddenEscapeTime(bool& success, int32_t _player, int32_t _wantedLevel, int32_t _lossTime) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x49B856B1360C47C7);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_wantedLevel);
	ctx->Push(_lossTime);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetWantedLevelHiddenEscapeTime(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x823EC8E82BA45986);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_startFiringAmnesty(bool& success, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF9BD71691857E48);
	ctx->Reset();
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_reportCrime(bool& success, int32_t _player, int32_t _crimeType, int32_t _wantedLvlThresh) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE9B09589827545E7);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_crimeType);
	ctx->Push(_wantedLvlThresh);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_suppressCrimeThisFrame(bool& success, int32_t _player, int32_t _crimeType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A987297ED8BD838);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_crimeType);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_updateWantedPositionThisFrame(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC9490CA15AEA8FB);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_suppressLosingWantedLevelIfHiddenThisFrame(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4669B3ED80F24B4E);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_allowEvasionHudIfDisablingHiddenEvasionThisFrame(bool& success, int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F41A3BAE005E5FA);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceStartHiddenEvasion(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD73CE5A09E42D12);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_suppressWitnessesCallingPoliceThisFrame(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36F1B38855F2A8DF);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_reportPoliceSpottedPlayer(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC64D2C53493ED12);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setLawResponseDelayOverride(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB45EFF719D8427A6);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetLawResponseDelayOverride(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0032A6DBA562C518);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_canPlayerStartMission(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE7465A27D403C06);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPlayerReadyForCutscene(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x908CBECC2CAA3690);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPlayerTargettingEntity(bool& success, int32_t _player, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7912F7FC4F6264B6);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getPlayerTargetEntity(bool& success, int32_t _player, int32_t& _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13EDE1A5DBF797C9);
	ctx->Reset();
	ctx->Push(_player);
	auto ptr_entity = _entity;
	ctx->Push(&ptr_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_entity = ptr_entity;
	return ctx->ResultBool();
}

uint8_t Native_isPlayerFreeAiming(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E397FD2ECD37C87);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPlayerFreeAimingAtEntity(bool& success, int32_t _player, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C06B5C839B38F7B);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getEntityPlayerIsFreeAimingAt(bool& success, int32_t _player, int32_t& _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2975C866E6713290);
	ctx->Reset();
	ctx->Push(_player);
	auto ptr_entity = _entity;
	ctx->Push(&ptr_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_entity = ptr_entity;
	return ctx->ResultBool();
}

void Native_setPlayerLockonRangeOverride(bool& success, int32_t _player, float _range) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29961D490E5814FD);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_range);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerCanDoDriveBy(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E8834B52EC20C77);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerCanBeHassledByGangs(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD5E460AD7020A246);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerCanUseCover(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD465A8599DFF6814);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getMaxWantedLevel(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x462E0DB9B137DC5F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isPlayerTargettingAnything(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78CFE51896B6B8A4);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPlayerSprint(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA01B8075D8B92DF4);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetPlayerStamina(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6F312FCCE9C1DFE);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_restorePlayerStamina(bool& success, int32_t _player, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA352C1B864CAFD33);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getPlayerSprintStaminaRemaining(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F9F16F8E65A7ED7);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getPlayerSprintTimeRemaining(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1885BC9B108B4C99);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getPlayerUnderwaterTimeRemaining(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1FCF8E6AF40B731);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_setPlayerUnderwaterBreathPercentRemaining(bool& success, int32_t _player, float _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0D3E4F7AAFB7E78);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

int32_t Native_getPlayerGroup(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0D127585F77030AF);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getPlayerMaxArmour(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92659B4CE1863CB3);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isPlayerControlOn(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x49C32D60007AFA47);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getAreCameraControlsDisabled(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C814D2FB49F40C0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPlayerScriptControlOn(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A876A65283DD7D7);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPlayerClimbing(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95E8F73DC65EFB9C);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPlayerBeingArrested(bool& success, int32_t _player, uint8_t _atArresting) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x388A47C51ABDAC8E);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _atArresting);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_resetPlayerArrestState(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D03E13C460760D6);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPlayersLastVehicle(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB6997A7EB3F5C8C0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getPlayerIndex(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5EDC40EF369B48D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_intToPlayerindex(bool& success, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x41BD2A6B006AF756);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_intToParticipantindex(bool& success, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9EC6603812C24710);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getTimeSincePlayerHitVehicle(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D35ECF3A81A0EE0);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getTimeSincePlayerHitPed(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE36A25322DC35F42);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getTimeSincePlayerDroveOnPavement(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD559D2BE9E37853B);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getTimeSincePlayerDroveAgainstTraffic(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB89591E290D9182);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isPlayerFreeForAmbientTask(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCCFD3F106C36AB4);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_playerId(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F8644AF03D0E0D6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_playerPedId(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD80958FC74E988A6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_networkPlayerIdToInt(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE68096F9F37341E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_hasForceCleanupOccurred(bool& success, int32_t _cleanupFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC968670BFACE42D9);
	ctx->Reset();
	ctx->Push(_cleanupFlags);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_forceCleanup(bool& success, int32_t _cleanupFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC8983F38F78ED51);
	ctx->Reset();
	ctx->Push(_cleanupFlags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceCleanupForAllThreadsWithThisName(bool& success, const char* _name, int32_t _cleanupFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C68DDDDF0097317);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	ctx->Push(_cleanupFlags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceCleanupForThreadWithThisId(bool& success, int32_t _id, int32_t _cleanupFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF745B37630DF176B);
	ctx->Reset();
	ctx->Push(_id);
	ctx->Push(_cleanupFlags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getCauseOfMostRecentForceCleanup(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A41CF4674A12272);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPlayerMayOnlyEnterThisVehicle(bool& success, int32_t _player, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8026FF78F208978A);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerMayNotEnterAnyVehicle(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DE37BBF9E9CC14A);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_giveAchievementToPlayer(bool& success, int32_t _achievementId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBEC7076D64130195);
	ctx->Reset();
	ctx->Push(_achievementId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_setAchievementProgress(bool& success, int32_t _achievementId, int32_t _progress) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC2AFFFDABBDC2C5C);
	ctx->Reset();
	ctx->Push(_achievementId);
	ctx->Push(_progress);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getAchievementProgress(bool& success, int32_t _achievementId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C186837D0619335);
	ctx->Reset();
	ctx->Push(_achievementId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_hasAchievementBeenPassed(bool& success, int32_t _achievementId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x867365E111A3B6EB);
	ctx->Reset();
	ctx->Push(_achievementId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPlayerOnline(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF25D331DC2627BBC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPlayerLoggingInNp(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74556E1420867ECA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_displaySystemSigninUi(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x94DD7888C10A979E);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isSystemUiBeingDisplayed(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D511E3867C87139);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPlayerInvincible(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x239528EACDC3E7DE);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getPlayerInvincible(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB721981B2B939E07);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getPlayerDebugInvincible(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCC07526B8EC45AF);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPlayerInvincibleButHasReactions(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6BC97F4F4BB3C04B);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerCanCollectDroppedMoney(bool& success, int32_t _player, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCAC57395B151135F);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removePlayerHelmet(bool& success, int32_t _player, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3AC26D3CC576528);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_givePlayerRagdollControl(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C49C870E66F0A28);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerLockon(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C8B2F450EE4328E);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerTargetingMode(bool& success, int32_t _targetMode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1906895227793F3);
	ctx->Reset();
	ctx->Push(_targetMode);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerTargetLevel(bool& success, int32_t _targetLevel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5702B917B99DB1CD);
	ctx->Reset();
	ctx->Push(_targetLevel);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getIsUsingFpsThirdPersonCover(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9CF1F793A9F1BF1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getIsUsingHoodCamera(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB645E85E97EA48B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_clearPlayerHasDamagedAtLeastOnePed(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0B67A4DE6AB5F98);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasPlayerDamagedAtLeastOnePed(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20CE80B0C2BF4ACC);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_clearPlayerHasDamagedAtLeastOneNonAnimalPed(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4AACB96203D11A31);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasPlayerDamagedAtLeastOneNonAnimalPed(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4B90F367BD81752);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setAirDragMultiplierForPlayersVehicle(bool& success, int32_t _player, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA7DC8329F0A1E9E);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSwimMultiplierForPlayer(bool& success, int32_t _player, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA91C6F0FF7D16A13);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRunSprintMultiplierForPlayer(bool& success, int32_t _player, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6DB47AA77FD94E09);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getTimeSinceLastArrest(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5063F92F07C2A316);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getTimeSinceLastDeath(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7034807558DDFCA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_assistedMovementCloseRoute(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAEBF081FFC0A0E5E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_assistedMovementFlushRoute(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8621390F0CDCFE1F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerForcedAim(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0FEE4F80AC44A726);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerForcedZoom(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75E7D505F2B15902);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerForceSkipAimIntro(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7651BC64AE59E128);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disablePlayerFiring(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E6CC07646BBEAB8);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disablePlayerThrowGrenadeWhileUsingGun(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB885852C39CC265D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDisableAmbientMeleeMove(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E8AABFA40A84F8C);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerMaxArmour(bool& success, int32_t _player, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77DFCCF5948B8C71);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_specialAbilityActivate(bool& success, int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x821FDC827D6F4090);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSpecialAbilityMp(bool& success, int32_t _player, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB214D570EAD7F81A);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_specialAbilityDeactivateMp(bool& success, int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17F7471EACA78290);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_specialAbilityDeactivate(bool& success, int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD6A953C6D1492057);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_specialAbilityDeactivateFast(bool& success, int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9CB5CE07A3968D5A);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_specialAbilityReset(bool& success, int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x375F0E738F861A94);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_specialAbilityChargeOnMissionFailed(bool& success, int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC9A763D8FE87436A);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_specialAbilityChargeSmall(bool& success, int32_t _player, uint8_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E7B9B683481687D);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_specialAbilityChargeMedium(bool& success, int32_t _player, uint8_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF113E3AA9BC54613);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_specialAbilityChargeLarge(bool& success, int32_t _player, uint8_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF733F45FA4497D93);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_specialAbilityChargeContinuous(bool& success, int32_t _player, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED481732DFF7E997);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_specialAbilityChargeAbsolute(bool& success, int32_t _player, int32_t _p1, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB7B0870EB531D08D);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_specialAbilityChargeNormalized(bool& success, int32_t _player, float _normalizedValue, uint8_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0696A65F009EE18);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_normalizedValue);
	ctx->Push((int32_t) _p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_specialAbilityFillMeter(bool& success, int32_t _player, uint8_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3DACA8DDC6FD4980);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_specialAbilityDepleteMeter(bool& success, int32_t _player, uint8_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D506DBBBC51E64B);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_specialAbilityLock(bool& success, uint32_t _playerModel, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A09D0D590A47D13);
	ctx->Reset();
	ctx->Push(_playerModel);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_specialAbilityUnlock(bool& success, uint32_t _playerModel, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF145F3BE2EFA9A3B);
	ctx->Reset();
	ctx->Push(_playerModel);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isSpecialAbilityUnlocked(bool& success, uint32_t _playerModel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6017F6A6CDFA694);
	ctx->Reset();
	ctx->Push(_playerModel);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isSpecialAbilityActive(bool& success, int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E5F7FC85D854E15);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isSpecialAbilityMeterFull(bool& success, int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x05A1FE504B7F2587);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_enableSpecialAbility(bool& success, int32_t _player, uint8_t _toggle, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x181EC197DAEFE121);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isSpecialAbilityEnabled(bool& success, int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1D200FE26AEF3CB);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setSpecialAbilityMultiplier(bool& success, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA49C426ED0CA4AB7);
	ctx->Reset();
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_updateSpecialAbilityFromStat(bool& success, int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFFEE8FA29AB9A18E);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getIsPlayerDrivingOnHighway(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FC472C501CCADB3);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getIsPlayerDrivingWreckless(bool& success, int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF10B44FD479D69F3);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getIsMoppingAreaFreeInFrontOfPlayer(bool& success, int32_t _player, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD2620B7B9D16FF1);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_startPlayerTeleport(bool& success, int32_t _player, float _x, float _y, float _z, float _heading, uint8_t _p5, uint8_t _findCollisionLand, uint8_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD15F075A4DA0FDE);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	ctx->Push((int32_t) _p5);
	ctx->Push((int32_t) _findCollisionLand);
	ctx->Push((int32_t) _p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_updatePlayerTeleport(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE23D5873C2394C61);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_stopPlayerTeleport(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC449EDED9D73009C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPlayerTeleportActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02B15662D7F8886F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

float Native_getPlayerCurrentStealthNoise(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F395D61F3A1F877);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setPlayerHealthRechargeMultiplier(bool& success, int32_t _player, float _regenRate) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5DB660B38DD98A31);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_regenRate);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getPlayerHealthRechargeMaxPercent(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8BC515BAE4AAF8FF);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setPlayerHealthRechargeMaxPercent(bool& success, int32_t _player, float _limit) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC388A0F065F5BC34);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_limit);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerFallDistanceToTriggerRagdollOverride(bool& success, int32_t _player, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEFD79FA81DFBA9CB);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerWeaponDamageModifier(bool& success, int32_t _player, float _modifier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE07B9F7817AADA3);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_modifier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerWeaponDefenseModifier(bool& success, int32_t _player, float _modifier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D83BC011CA14A3C);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_modifier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerWeaponMinigunDefenseModifier(bool& success, int32_t _player, float _modifier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBCFDE9EDE4CF27DC);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_modifier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerMeleeWeaponDamageModifier(bool& success, int32_t _player, float _modifier, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A3DC7ECCC321032);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_modifier);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerMeleeWeaponDefenseModifier(bool& success, int32_t _player, float _modifier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE540335B4ABC4E2);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_modifier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerVehicleDamageModifier(bool& success, int32_t _player, float _modifier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA50E117CDDF82F0C);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_modifier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerVehicleDefenseModifier(bool& success, int32_t _player, float _modifier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C60E6EFDAFF2462);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_modifier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerMaxExplosiveDamage(bool& success, int32_t _player, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D768602ADEF2245);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerExplosiveDamageModifier(bool& success, int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD821056B9ACF8052);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerWeaponTakedownDefenseModifier(bool& success, int32_t _player, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x31E90B8873A4CD3B);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerParachuteTintIndex(bool& success, int32_t _player, int32_t _tintIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA3D0E54541D9A5E5);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_tintIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getPlayerParachuteTintIndex(bool& success, int32_t _player, int32_t& _tintIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75D3F7A1B0D9B145);
	ctx->Reset();
	ctx->Push(_player);
	auto ptr_tintIndex = _tintIndex;
	ctx->Push(&ptr_tintIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_tintIndex = ptr_tintIndex;
}

void Native_setPlayerReserveParachuteTintIndex(bool& success, int32_t _player, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF04C87F5DC1DF38);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getPlayerReserveParachuteTintIndex(bool& success, int32_t _player, int32_t& _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD5A016BC3C09CF40);
	ctx->Reset();
	ctx->Push(_player);
	auto ptr_index = _index;
	ctx->Push(&ptr_index);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_index = ptr_index;
}

void Native_setPlayerParachutePackTintIndex(bool& success, int32_t _player, int32_t _tintIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93B0FB27C9A04060);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_tintIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getPlayerParachutePackTintIndex(bool& success, int32_t _player, int32_t& _tintIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E9C742F340CE5A2);
	ctx->Reset();
	ctx->Push(_player);
	auto ptr_tintIndex = _tintIndex;
	ctx->Push(&ptr_tintIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_tintIndex = ptr_tintIndex;
}

void Native_setPlayerHasReserveParachute(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7DDAB28D31FAC363);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getPlayerHasReserveParachute(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5DDFE2FF727F3CA3);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPlayerCanLeaveParachuteSmokeTrail(bool& success, int32_t _player, uint8_t _enabled) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF401B182DBA8AF53);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _enabled);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerParachuteSmokeTrailColor(bool& success, int32_t _player, int32_t _r, int32_t _g, int32_t _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8217FD371A4625CF);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getPlayerParachuteSmokeTrailColor(bool& success, int32_t _player, int32_t& _r, int32_t& _g, int32_t& _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF56DBABD3CD4887);
	ctx->Reset();
	ctx->Push(_player);
	auto ptr_r = _r;
	ctx->Push(&ptr_r);
	auto ptr_g = _g;
	ctx->Push(&ptr_g);
	auto ptr_b = _b;
	ctx->Push(&ptr_b);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_r = ptr_r;
	_g = ptr_g;
	_b = ptr_b;
}

void Native_setPlayerPhonePaletteIdx(bool& success, int32_t _player, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11D5F725F0E780E0);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerNoiseMultiplier(bool& success, int32_t _player, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB89EF50FF25FCE9);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerSneakingNoiseMultiplier(bool& success, int32_t _player, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2C1A29588A9F47C);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_canPedHearPlayer(bool& success, int32_t _player, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF297383AA91DCA29);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_simulatePlayerInputGait(bool& success, int32_t _player, float _amount, int32_t _gaitType, float _speed, uint8_t _p4, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x477D5D63E63ECA5D);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_amount);
	ctx->Push(_gaitType);
	ctx->Push(_speed);
	ctx->Push((int32_t) _p4);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetPlayerInputGait(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19531C47A2ABD691);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAutoGiveParachuteWhenEnterPlane(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F343285A00B4BB6);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAutoGiveScubaGearWhenExitVehicle(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2B315B6689D537D);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerStealthPerceptionModifier(bool& success, int32_t _player, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E9021C1FCDD507A);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isRemotePlayerInNonClonedVehicle(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x690A61A6D13583F6);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_increasePlayerJumpSuppressionRange(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9EDD76E87D5D51BA);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerSimulateAiming(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC54C95DA968EC5B5);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerClothPinFrames(bool& success, int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x749FADDF97DFE930);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerClothPackageIndex(bool& success, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F7BBA2EA6372500);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerClothLockCounter(bool& success, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14D913B777DFF5DA);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playerAttachVirtualBound(bool& success, float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6, float _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED51733DC73AED51);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playerDetachVirtualBound(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DD5897E2FA6E7C9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasPlayerBeenSpottedInStolenVehicle(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD705740BB0A1CF4C);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPlayerBattleAware(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x38D28DA81E4E9BF9);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getPlayerReceivedBattleEventRecently(bool& success, int32_t _player, int32_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC0753C9CA14B506);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_extendWorldBoundaryForPlayer(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5006D96C995A5827);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetWorldBoundaryForPlayer(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA1DF03D5A315F4E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPlayerRidingTrain(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4EC12697209F2196);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasPlayerLeftTheWorld(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD55DDFB47991A294);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPlayerLeavePedBehind(bool& success, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF300C7649724A0B);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerParachuteVariationOverride(bool& success, int32_t _player, int32_t _p1, int32_t _p2, int32_t _p3, uint8_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9284A8C0D48352C);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push((int32_t) _p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearPlayerParachuteVariationOverride(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F4CC924CF8C7B21);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerParachuteModelOverride(bool& success, int32_t _player, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x977DB4641F6FC3DB);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerReserveParachuteModelOverride(bool& success, int32_t _player, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0764486AEDE748DB);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint32_t Native_getPlayerParachuteModelOverride(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC219887CA3E65C41);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint32_t Native_getPlayerReserveParachuteModelOverride(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x37FAAA68DCA9D08D);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

void Native_clearPlayerParachuteModelOverride(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8753997EB5F6EE3F);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearPlayerReserveParachuteModelOverride(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x290D248E25815AE8);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerParachutePackModelOverride(bool& success, int32_t _player, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC80A4C2F18A2B64);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearPlayerParachutePackModelOverride(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x10C54E4389C12B42);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disablePlayerVehicleRewards(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC142BE3BB9CE125F);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerSpectatedVehicleRadioOverride(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F7CEB6520288061);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerBluetoothState(bool& success, int32_t _player, uint8_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5DC40A8869C22141);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push((int32_t) _state);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPlayerBluetoothEnable(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x65FAEE425DE637B0);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_disableCameraViewModeCycle(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5501B7A5CDB79D37);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPlayerFakeWantedLevel(bool& success, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x56105E599CAB0EFA);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPlayerCanDamagePlayer(bool& success, int32_t _player1, int32_t _player2, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55FCC0C390620314);
	ctx->Reset();
	ctx->Push(_player1);
	ctx->Push(_player2);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setApplyWaypointOfPlayer(bool& success, int32_t _player, int32_t _hudColor) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2382AB11450AE7BA);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_hudColor);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPlayerVehicleWeaponToggledToNonHoming(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E4361FF3E8CD7CA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPlayerVehicleWeaponToNonHoming(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x237440E46D918649);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerHomingDisabledForAllVehicleWeapons(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE4EBDD2593BA844);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addPlayerTargetableEntity(bool& success, int32_t _player, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9097EB6D4BB9A12A);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removePlayerTargetableEntity(bool& success, int32_t _player, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F260BFB59ADBCA3);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerPreviousVariationData(bool& success, int32_t _player, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7BAE68775557AE0B);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeScriptFirePosition(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7148E0F43D11F0D9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setScriptFirePosition(bool& success, float _coordX, float _coordY, float _coordZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70A382ADEC069DD3);
	ctx->Reset();
	ctx->Push(_coordX);
	ctx->Push(_coordY);
	ctx->Push(_coordZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_replayStartEvent(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48621C9FCA3EBD28);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_replayStopEvent(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x81CBAE94390F9F89);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_replayCancelEvent(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13B350B8AD0EEE10);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_replayRecordBackForTime(bool& success, float _p0, float _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x293220DA1B46CEBC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_replayCheckForEventThisFrame(bool& success, const char* _missionNameLabel, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x208784099002BC30);
	ctx->Reset();
	ctx->Push(SaveString(_missionNameLabel));
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_replayPreventRecordingThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB2D525B57F42B40);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_replayResetEventInfo(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF854439EFBB3B583);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_replayDisableCameraMovementThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF66DCEE6609B148);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_recordGreatestMoment(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66972397E0757E7A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_startReplayRecording(bool& success, int32_t _mode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3AC2FFF9612AC81);
	ctx->Reset();
	ctx->Push(_mode);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopReplayRecording(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x071A5197D6AFC8B3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_cancelReplayRecording(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88BB3507ED41A240);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_saveReplayRecording(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x644546EC5287471B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isReplayRecording(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1897CA71995A90B4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isReplayInitialized(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF4B952F7D381B95);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isReplayAvailable(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4282E08174868BE3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isReplayRecordSpaceAvailable(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33D47E85B476ABCD);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_registerEffectForReplayEditor(bool& success, const char* _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7E2BD3EF6C205F09);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_replaySystemHasRequestedAScriptCleanup(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95AB8B5C992C7B58);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setScriptsHaveCleanedUpForReplaySystem(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5AD3932DAEB1E5D3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setReplaySystemPausedForSave(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE058175F8EAFE79A);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_replayControlShutdown(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3353D13F09307691);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_activateRockstarEditor(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x49DA8145672B2725);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_requestScript(bool& success, const char* _scriptName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6EB5F71AA68F2E8E);
	ctx->Reset();
	ctx->Push(SaveString(_scriptName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setScriptAsNoLongerNeeded(bool& success, const char* _scriptName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC90D2DCACD56184C);
	ctx->Reset();
	ctx->Push(SaveString(_scriptName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasScriptLoaded(bool& success, const char* _scriptName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6CC9F3BA0FB9EF1);
	ctx->Reset();
	ctx->Push(SaveString(_scriptName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_doesScriptExist(bool& success, const char* _scriptName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC04745FBE67C19A);
	ctx->Reset();
	ctx->Push(SaveString(_scriptName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_requestScriptWithNameHash(bool& success, uint32_t _scriptHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD62A67D26D9653E6);
	ctx->Reset();
	ctx->Push(_scriptHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setScriptWithNameHashAsNoLongerNeeded(bool& success, uint32_t _scriptHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5BC038960E9DB27);
	ctx->Reset();
	ctx->Push(_scriptHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasScriptWithNameHashLoaded(bool& success, uint32_t _scriptHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F0F0C783EB16C04);
	ctx->Reset();
	ctx->Push(_scriptHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_doesScriptWithNameHashExist(bool& success, uint32_t _scriptHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF86AA3C56BA31381);
	ctx->Reset();
	ctx->Push(_scriptHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_terminateThread(bool& success, int32_t _threadId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8B189ED9138BCD4);
	ctx->Reset();
	ctx->Push(_threadId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isThreadActive(bool& success, int32_t _threadId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46E9AE36D8FA6417);
	ctx->Reset();
	ctx->Push(_threadId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

const char* Native_getNameOfScriptWithThisId(bool& success, int32_t _threadId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x05A42BA9FC8DA96B);
	ctx->Reset();
	ctx->Push(_threadId);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

void Native_scriptThreadIteratorReset(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDADFADA5A20143A8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_scriptThreadIteratorGetNextThreadId(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x30B4FA1C82DD4B9F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getIdOfThisThread(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC30338E8088E2E21);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_terminateThisThread(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1090044AD1DA76FA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getNumberOfThreadsRunningTheScriptWithThisHash(bool& success, uint32_t _scriptHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C83A9DA6BFFC4F9);
	ctx->Reset();
	ctx->Push(_scriptHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

const char* Native_getThisScriptName(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x442E0A7EDE4A738A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

uint32_t Native_getHashOfThisScriptName(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A1C8B1738FFE87E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

int32_t Native_getNumberOfEvents(bool& success, int32_t _eventGroup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F92A689A06620AA);
	ctx->Reset();
	ctx->Push(_eventGroup);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_getEventExists(bool& success, int32_t _eventGroup, int32_t _eventIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x936E6168A9BCEDB5);
	ctx->Reset();
	ctx->Push(_eventGroup);
	ctx->Push(_eventIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getEventAtIndex(bool& success, int32_t _eventGroup, int32_t _eventIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD8F66A3A60C62153);
	ctx->Reset();
	ctx->Push(_eventGroup);
	ctx->Push(_eventIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_getEventData(bool& success, int32_t _eventGroup, int32_t _eventIndex, int32_t& _eventData, int32_t _eventDataSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2902843FCD2B2D79);
	ctx->Reset();
	ctx->Push(_eventGroup);
	ctx->Push(_eventIndex);
	auto ptr_eventData = _eventData;
	ctx->Push(&ptr_eventData);
	ctx->Push(_eventDataSize);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_eventData = ptr_eventData;
	return ctx->ResultBool();
}

void Native_triggerScriptEvent(bool& success, int32_t _eventGroup, int32_t& _eventData, int32_t _eventDataSize, int32_t _playerBits) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5AE99C571D5BBE5D);
	ctx->Reset();
	ctx->Push(_eventGroup);
	auto ptr_eventData = _eventData;
	ctx->Push(&ptr_eventData);
	ctx->Push(_eventDataSize);
	ctx->Push(_playerBits);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_eventData = ptr_eventData;
}

void Native_shutdownLoadingScreen(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x078EBE9809CCD637);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setNoLoadingScreen(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5262CC1995D07E09);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getNoLoadingScreen(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x18C1270EA7F199BC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_commitToLoadingscreenSelction(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1577667C3708F9B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_bgIsExitflagSet(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x836B62713E0534CA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_bgSetExitflagResponse(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x760910B49D2B98EA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_bgStartContextHash(bool& success, uint32_t _contextHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75B18E49607874C7);
	ctx->Reset();
	ctx->Push(_contextHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_bgEndContextHash(bool& success, uint32_t _contextHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x107E5CC7CA942BC1);
	ctx->Reset();
	ctx->Push(_contextHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_bgStartContext(bool& success, const char* _contextName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D5A25BADB742ACD);
	ctx->Reset();
	ctx->Push(SaveString(_contextName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_bgEndContext(bool& success, const char* _contextName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC2BACD920D0A0DD);
	ctx->Reset();
	ctx->Push(SaveString(_contextName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_bgDoesLaunchParamExist(bool& success, int32_t _scriptIndex, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F6F1EBBC4E1D5E6);
	ctx->Reset();
	ctx->Push(_scriptIndex);
	ctx->Push(SaveString(_p1));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_bgGetLaunchParamValue(bool& success, int32_t _scriptIndex, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x22E21FBCFC88C149);
	ctx->Reset();
	ctx->Push(_scriptIndex);
	ctx->Push(SaveString(_p1));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_bgGetScriptIdFromNameHash(bool& success, uint32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x829CD22E043A2577);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_startShapeTestLosProbe(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _flags, int32_t _entity, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EE9F5D83DD4F90E);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_flags);
	ctx->Push(_entity);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_startExpensiveSynchronousShapeTestLosProbe(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _flags, int32_t _entity, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x377906D8A31E5586);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_flags);
	ctx->Push(_entity);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_startShapeTestBoundingBox(bool& success, int32_t _entity, int32_t _flags1, int32_t _flags2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x052837721A854EC7);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_flags1);
	ctx->Push(_flags2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_startShapeTestBox(bool& success, float _x, float _y, float _z, float _dimX, float _dimY, float _dimZ, float _rotX, float _rotY, float _rotZ, int32_t _p9, int32_t _flags, int32_t _entity, int32_t _p12) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFE466162C4401D18);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_dimX);
	ctx->Push(_dimY);
	ctx->Push(_dimZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_p9);
	ctx->Push(_flags);
	ctx->Push(_entity);
	ctx->Push(_p12);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_startShapeTestBound(bool& success, int32_t _entity, int32_t _flags1, int32_t _flags2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x37181417CE7C8900);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_flags1);
	ctx->Push(_flags2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_startShapeTestCapsule(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _radius, int32_t _flags, int32_t _entity, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28579D1B8F8AAC80);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_radius);
	ctx->Push(_flags);
	ctx->Push(_entity);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_startShapeTestSweptSphere(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _radius, int32_t _flags, int32_t _entity, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6AC6C45FBE83004);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_radius);
	ctx->Push(_flags);
	ctx->Push(_entity);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_startShapeTestMouseCursorLosProbe(bool& success, vector3_t& _pVec1, vector3_t& _pVec2, int32_t _flag, int32_t _entity, int32_t _flag2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF6BE494C7987F34);
	ctx->Reset();
	alt::INative::Vector3 converted_pVec1 { _pVec1.x, 0, _pVec1.y, 0, _pVec1.z };
	ctx->Push(&converted_pVec1);
	alt::INative::Vector3 converted_pVec2 { _pVec2.x, 0, _pVec2.y, 0, _pVec2.z };
	ctx->Push(&converted_pVec2);
	ctx->Push(_flag);
	ctx->Push(_entity);
	ctx->Push(_flag2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_pVec1.x = converted_pVec1.x;
	_pVec1.y = converted_pVec1.y;
	_pVec1.z = converted_pVec1.z;
	_pVec2.x = converted_pVec2.x;
	_pVec2.y = converted_pVec2.y;
	_pVec2.z = converted_pVec2.z;
	return ctx->ResultInt();
}

int32_t Native_getShapeTestResult(bool& success, int32_t _shapeTestHandle, uint8_t& _hit, vector3_t& _endCoords, vector3_t& _surfaceNormal, int32_t& _entityHit) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3D87450E15D98694);
	ctx->Reset();
	ctx->Push(_shapeTestHandle);
	auto ptr_hit = (int32_t) _hit;
	ctx->Push(&ptr_hit);
	alt::INative::Vector3 converted_endCoords { _endCoords.x, 0, _endCoords.y, 0, _endCoords.z };
	ctx->Push(&converted_endCoords);
	alt::INative::Vector3 converted_surfaceNormal { _surfaceNormal.x, 0, _surfaceNormal.y, 0, _surfaceNormal.z };
	ctx->Push(&converted_surfaceNormal);
	auto ptr_entityHit = _entityHit;
	ctx->Push(&ptr_entityHit);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_hit = (bool) ptr_hit;
	_endCoords.x = converted_endCoords.x;
	_endCoords.y = converted_endCoords.y;
	_endCoords.z = converted_endCoords.z;
	_surfaceNormal.x = converted_surfaceNormal.x;
	_surfaceNormal.y = converted_surfaceNormal.y;
	_surfaceNormal.z = converted_surfaceNormal.z;
	_entityHit = ptr_entityHit;
	return ctx->ResultInt();
}

int32_t Native_getShapeTestResultIncludingMaterial(bool& success, int32_t _shapeTestHandle, uint8_t& _hit, vector3_t& _endCoords, vector3_t& _surfaceNormal, uint32_t& _materialHash, int32_t& _entityHit) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x65287525D951F6BE);
	ctx->Reset();
	ctx->Push(_shapeTestHandle);
	auto ptr_hit = (int32_t) _hit;
	ctx->Push(&ptr_hit);
	alt::INative::Vector3 converted_endCoords { _endCoords.x, 0, _endCoords.y, 0, _endCoords.z };
	ctx->Push(&converted_endCoords);
	alt::INative::Vector3 converted_surfaceNormal { _surfaceNormal.x, 0, _surfaceNormal.y, 0, _surfaceNormal.z };
	ctx->Push(&converted_surfaceNormal);
	auto ptr_materialHash = _materialHash;
	ctx->Push(&ptr_materialHash);
	auto ptr_entityHit = _entityHit;
	ctx->Push(&ptr_entityHit);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_hit = (bool) ptr_hit;
	_endCoords.x = converted_endCoords.x;
	_endCoords.y = converted_endCoords.y;
	_endCoords.z = converted_endCoords.z;
	_surfaceNormal.x = converted_surfaceNormal.x;
	_surfaceNormal.y = converted_surfaceNormal.y;
	_surfaceNormal.z = converted_surfaceNormal.z;
	_materialHash = ptr_materialHash;
	_entityHit = ptr_entityHit;
	return ctx->ResultInt();
}

void Native_releaseScriptGuidFromEntity(bool& success, int32_t _entityHit) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B3334BCA57CD799);
	ctx->Reset();
	ctx->Push(_entityHit);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_scInboxGetTotalNumMessages(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x03A93FF1A2CA0864);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint32_t Native_scInboxGetMessageTypeAtIndex(bool& success, int32_t _msgIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB8EA16ECBC976C4);
	ctx->Reset();
	ctx->Push(_msgIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint8_t Native_scInboxGetMessageIsReadAtIndex(bool& success, int32_t _msgIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93028F1DB42BFD08);
	ctx->Reset();
	ctx->Push(_msgIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_scInboxSetMessageAsReadAtIndex(bool& success, int32_t _msgIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C015348CF19CA1D);
	ctx->Reset();
	ctx->Push(_msgIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_scInboxMessageGetDataInt(bool& success, int32_t _p0, const char* _context, int32_t& _out) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA00EFE4082C4056E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(SaveString(_context));
	auto ptr_out = _out;
	ctx->Push(&ptr_out);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_out = ptr_out;
	return ctx->ResultBool();
}

uint8_t Native_scInboxMessageGetDataBool(bool& success, int32_t _p0, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFFE5C16F402D851D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(SaveString(_p1));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_scInboxMessageGetDataString(bool& success, int32_t _p0, const char* _context, const char*& _out) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7572EF42FC6A9B6D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(SaveString(_context));
	auto ptr_out = SaveString(_out);
	ctx->Push(&ptr_out);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_out = ptr_out;
	return ctx->ResultBool();
}

uint8_t Native_scInboxMessageDoApply(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A2C8064B6C1E41A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

const char* Native_scInboxMessageGetRawTypeAtIndex(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3E31D16CBDCB304);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

void Native_scInboxMessagePushGamerT0RecipList(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA024BDBD600F44A);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
}

void Native_scInboxSendUgcstatupdateToRecipList(bool& success, int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA68D3D229F4F3B06);
	ctx->Reset();
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_data = ptr_data;
}

uint8_t Native_scInboxMessageGetUgcdata(bool& success, int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x69D82604A1A5A254);
	ctx->Reset();
	ctx->Push(_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

uint8_t Native_scInboxSendBountyToRecipList(bool& success, int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6AFD2CD753FEEF83);
	ctx->Reset();
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_data = ptr_data;
	return ctx->ResultBool();
}

uint8_t Native_scInboxGetBountyDataAtIndex(bool& success, int32_t _index, int32_t& _outData) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x87E0052F08BD64E6);
	ctx->Reset();
	ctx->Push(_index);
	auto ptr_outData = _outData;
	ctx->Push(&ptr_outData);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outData = ptr_outData;
	return ctx->ResultBool();
}

void Native_scEmailRetrieveEmails(bool& success, int32_t _offset, int32_t _limit) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x040ADDCBAFA1018A);
	ctx->Reset();
	ctx->Push(_offset);
	ctx->Push(_limit);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_scEmailGetRetrievalStatus(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16DA8172459434AA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_scEmailGetNumRetrievedEmails(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7DB18CA8CAD5B098);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_scEmailGetEmailAtIndex(bool& success, int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4737980E8A283806);
	ctx->Reset();
	ctx->Push(_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

void Native_scEmailDeleteEmails(bool& success, int32_t& _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44ACA259D67651DB);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
}

void Native_scEmailMessagePushGamerToRecipList(bool& success, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2330C12A7A605D16);
	ctx->Reset();
	auto ptr_gamerHandle = _gamerHandle;
	ctx->Push(&ptr_gamerHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_gamerHandle = ptr_gamerHandle;
}

void Native_scEmailMessageClearRecipList(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55DF6DB45179236E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_scEmailSendEmail(bool& success, const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x116FB94DC4B79F17);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_scEmailSetCurrentEmailTag(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x07DBD622D9533857);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_scCacheNewRockstarMsgs(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBFA0A56A817C6C7D);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_scHasNewRockstarMsg(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC1CC91205EC8D6E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

const char* Native_scGetNewRockstarMsg(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF649C4E9AFDD788);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

uint8_t Native_scPresenceAttrSetInt(bool& success, uint32_t _attrHash, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F1E9682483697C7);
	ctx->Reset();
	ctx->Push(_attrHash);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_scPresenceAttrSetFloat(bool& success, uint32_t _attrHash, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC4C4575F62534A24);
	ctx->Reset();
	ctx->Push(_attrHash);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_scPresenceAttrSetString(bool& success, uint32_t _attrHash, const char* _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x287F1F75D2803595);
	ctx->Reset();
	ctx->Push(_attrHash);
	ctx->Push(SaveString(_value));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_scPresenceSetActivityRating(bool& success, int32_t _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x487912FD248EFDDF);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_scGamerdataGetInt(bool& success, const char* _name, int32_t& _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC85A7127E7AD02AA);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	auto ptr_value = _value;
	ctx->Push(&ptr_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_value = ptr_value;
	return ctx->ResultBool();
}

uint8_t Native_scGamerdataGetFloat(bool& success, const char* _name, float& _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA770C8EEC6FB2AC5);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	auto ptr_value = _value;
	ctx->Push(&ptr_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_value = ptr_value;
	return ctx->ResultBool();
}

uint8_t Native_scGamerdataGetBool(bool& success, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8416FE4E4629D7D7);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_scGamerdataGetString(bool& success, const char* _name, const char*& _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FFCBFEE44ECFABF);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	auto ptr_value = SaveString(_value);
	ctx->Push(&ptr_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_value = ptr_value;
	return ctx->ResultBool();
}

uint8_t Native_scGamerdataGetActiveXpBonus(bool& success, float& _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D874D4AE612A65F);
	ctx->Reset();
	auto ptr_value = _value;
	ctx->Push(&ptr_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_value = ptr_value;
	return ctx->ResultBool();
}

uint8_t Native_scProfanityCheckString(bool& success, const char* _string, int32_t& _token) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75632C5ECD7ED843);
	ctx->Reset();
	ctx->Push(SaveString(_string));
	auto ptr_token = _token;
	ctx->Push(&ptr_token);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_token = ptr_token;
	return ctx->ResultBool();
}

uint8_t Native_scProfanityCheckStringUgc(bool& success, const char* _string, int32_t& _token) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB2BF817463DFA28);
	ctx->Reset();
	ctx->Push(SaveString(_string));
	auto ptr_token = _token;
	ctx->Push(&ptr_token);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_token = ptr_token;
	return ctx->ResultBool();
}

uint8_t Native_scProfanityGetCheckIsValid(bool& success, int32_t _token) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1753344C770358AE);
	ctx->Reset();
	ctx->Push(_token);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_scProfanityGetCheckIsPending(bool& success, int32_t _token) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x82E4A58BABC15AE7);
	ctx->Reset();
	ctx->Push(_token);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_scProfanityGetStringPassed(bool& success, int32_t _token) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85535ACF97FC0969);
	ctx->Reset();
	ctx->Push(_token);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_scProfanityGetStringStatus(bool& success, int32_t _token) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x930DE22F07B1CCE3);
	ctx->Reset();
	ctx->Push(_token);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_scLicenseplateCheckString(bool& success, const char* _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6BAAAF762E1BF40);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

uint8_t Native_scLicenseplateGetCheckIsValid(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF22CA0FD74B80E7A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_scLicenseplateGetCheckIsPending(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9237E334F6E43156);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_scLicenseplateGetCount(bool& success, int32_t _token) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x700569DBA175A77C);
	ctx->Reset();
	ctx->Push(_token);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

const char* Native_scLicenseplateGetPlate(bool& success, int32_t _token, int32_t _plateIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D4446A62D35B0D0);
	ctx->Reset();
	ctx->Push(_token);
	ctx->Push(_plateIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

const char* Native_scLicenseplateGetPlateData(bool& success, int32_t _token, int32_t _plateIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E89990DDFF670C3);
	ctx->Reset();
	ctx->Push(_token);
	ctx->Push(_plateIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

uint8_t Native_scLicenseplateSetPlateData(bool& success, const char* _oldPlateText, const char* _newPlateText, int32_t& _plateData) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0EE05FE193646EA);
	ctx->Reset();
	ctx->Push(SaveString(_oldPlateText));
	ctx->Push(SaveString(_newPlateText));
	auto ptr_plateData = _plateData;
	ctx->Push(&ptr_plateData);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_plateData = ptr_plateData;
	return ctx->ResultBool();
}

uint8_t Native_scLicenseplateAdd(bool& success, const char* _plateText, int32_t& _plateData, int32_t& _token) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1989C6E6F67E76A8);
	ctx->Reset();
	ctx->Push(SaveString(_plateText));
	auto ptr_plateData = _plateData;
	ctx->Push(&ptr_plateData);
	auto ptr_token = _token;
	ctx->Push(&ptr_token);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_plateData = ptr_plateData;
	_token = ptr_token;
	return ctx->ResultBool();
}

uint8_t Native_scLicenseplateGetAddIsPending(bool& success, int32_t _token) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x07C61676E5BB52CD);
	ctx->Reset();
	ctx->Push(_token);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_scLicenseplateGetAddStatus(bool& success, int32_t _token) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8147FFF6A718E1AD);
	ctx->Reset();
	ctx->Push(_token);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_scLicenseplateIsvalid(bool& success, const char* _plateText, int32_t& _token) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F73393BAC7E6730);
	ctx->Reset();
	ctx->Push(SaveString(_plateText));
	auto ptr_token = _token;
	ctx->Push(&ptr_token);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_token = ptr_token;
	return ctx->ResultBool();
}

uint8_t Native_scLicenseplateGetIsvalidIsPending(bool& success, int32_t _token) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD302E99EDF0449CF);
	ctx->Reset();
	ctx->Push(_token);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_scLicenseplateGetIsvalidStatus(bool& success, int32_t _token) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C4EBFFA98BDB41C);
	ctx->Reset();
	ctx->Push(_token);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_scCommunityEventIsActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF8F3A92B75ED67A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_scCommunityEventGetEventId(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4ED9C8D6DA297639);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_scCommunityEventGetExtraDataInt(bool& success, const char* _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x710BCDA8071EDED1);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

uint8_t Native_scCommunityEventGetExtraDataFloat(bool& success, const char* _p0, float& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50A8A36201DBF83E);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

uint8_t Native_scCommunityEventGetExtraDataString(bool& success, const char* _p0, const char*& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DE5D2F723575ED0);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	auto ptr_p1 = SaveString(_p1);
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

uint8_t Native_scCommunityEventGetDisplayName(bool& success, const char*& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC2C97EA97711D1AE);
	ctx->Reset();
	auto ptr_p0 = SaveString(_p0);
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_scCommunityEventIsActiveForType(bool& success, const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x450819D8CF90C416);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_scCommunityEventGetEventIdForType(bool& success, const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A7D6E727F941747);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_scCommunityEventGetExtraDataIntForType(bool& success, const char* _p0, int32_t& _p1, const char* _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE75A4A2E5E316D86);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	ctx->Push(SaveString(_p2));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

uint8_t Native_scCommunityEventGetExtraDataFloatForType(bool& success, const char* _p0, float& _p1, const char* _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2570E26BE63964E3);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	ctx->Push(SaveString(_p2));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

uint8_t Native_scCommunityEventGetExtraDataStringForType(bool& success, const char* _p0, const char*& _p1, const char* _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D12A56FC95BE92E);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	auto ptr_p1 = SaveString(_p1);
	ctx->Push(&ptr_p1);
	ctx->Push(SaveString(_p2));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

uint8_t Native_scCommunityEventGetDisplayNameForType(bool& success, const char*& _p0, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33DF47CC0642061B);
	ctx->Reset();
	auto ptr_p0 = SaveString(_p0);
	ctx->Push(&ptr_p0);
	ctx->Push(SaveString(_p1));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_scCommunityEventIsActiveById(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA468E0BE12B12C70);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_scCommunityEventGetExtraDataIntById(bool& success, int32_t _p0, const char* _p1, int32_t& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8CC469AB4D349B7C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(SaveString(_p1));
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p2 = ptr_p2;
	return ctx->ResultBool();
}

uint8_t Native_scCommunityEventGetExtraDataFloatById(bool& success, int32_t _p0, const char* _p1, float& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5A35C73B68F3C49);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(SaveString(_p1));
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p2 = ptr_p2;
	return ctx->ResultBool();
}

uint8_t Native_scCommunityEventGetExtraDataStringById(bool& success, int32_t _p0, const char* _p1, const char*& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x699E4A5C8C893A18);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(SaveString(_p1));
	auto ptr_p2 = SaveString(_p2);
	ctx->Push(&ptr_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p2 = ptr_p2;
	return ctx->ResultBool();
}

uint8_t Native_scCommunityEventGetDisplayNameById(bool& success, int32_t _p0, const char*& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19853B5B17D77BCA);
	ctx->Reset();
	ctx->Push(_p0);
	auto ptr_p1 = SaveString(_p1);
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

uint8_t Native_scTransitionNewsShow(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6BFB12CE158E3DD4);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_scTransitionNewsShowTimed(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFE4C1D0D3B9CC17E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_scTransitionNewsShowNextItem(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD8122C407663B995);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_scTransitionNewsHasExtraDataTu(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3001BEF2FECA3680);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_scTransitionNewsGetExtraDataIntTu(bool& success, const char* _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92DA6E70EF249BD1);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

void Native_scTransitionNewsEnd(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x675721C9F644D161);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_scPauseNewsInitStarterPack(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4F6E8D07A2F0F51);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_scPauseNewsGetPendingStory(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A4416C0DB05FA66);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_scPauseNewsShutdown(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA95C0853A27888E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

const char* Native_scAccountInfoGetNickname(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x198D161F458ECC7F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

uint8_t Native_scAchievementInfoStatus(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x225798743970412B);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_scHasAchievementBeenPassed(bool& success, int32_t _achievementId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x418DC16FAE452C1C);
	ctx->Reset();
	ctx->Push(_achievementId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statClearSlotForReload(bool& success, int32_t _statSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB0A72181D4AA4AD);
	ctx->Reset();
	ctx->Push(_statSlot);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statLoad(bool& success, int32_t _statSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA651443F437B1CE6);
	ctx->Reset();
	ctx->Push(_statSlot);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statSave(bool& success, int32_t _p0, uint8_t _p1, int32_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE07BCA305B82D2FD);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push(_p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_statSetOpenSavetypeInJob(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5688585E6D563CD8);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_statLoadPending(bool& success, int32_t _statSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1750FFAFA181661);
	ctx->Reset();
	ctx->Push(_statSlot);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statSavePending(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D3A583856F2C5AC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statSavePendingOrRequested(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBBB6AD006F1BBEA3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statDeleteSlot(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x49A49BED12794D70);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statSlotIsLoaded(bool& success, int32_t _statSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0D0A9F0E7BD91E3C);
	ctx->Reset();
	ctx->Push(_statSlot);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statCloudSlotLoadFailed(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F2C4CDF2E82DF4C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_statCloudSlotLoadFailedCode(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE496A53BA5F50A56);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_statSetBlockSaves(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF434A10BA01C37D0);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_statGetBlockSaves(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A7F19756F1A9016);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statCloudSlotSaveFailed(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7E6946F68A38B74F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_statClearPendingSaves(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA8733668D1047B51);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_statLoadDirtyReadDetected(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xECB41AC6AB754401);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_statClearDirtyReadDetected(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B4BD21D69B1E609);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_statGetLoadSafeToProgressToMpFromSp(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0E0D686DDFC6EAE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statSetInt(bool& success, uint32_t _statName, int32_t _value, uint8_t _save) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3271D7AB655B441);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(_value);
	ctx->Push((int32_t) _save);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statSetFloat(bool& success, uint32_t _statName, float _value, uint8_t _save) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4851997F37FE9B3C);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(_value);
	ctx->Push((int32_t) _save);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statSetBool(bool& success, uint32_t _statName, uint8_t _value, uint8_t _save) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4B33C4243DE0C432);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push((int32_t) _value);
	ctx->Push((int32_t) _save);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statSetGxtLabel(bool& success, uint32_t _statName, const char* _value, uint8_t _save) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17695002FD8B2AE0);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(SaveString(_value));
	ctx->Push((int32_t) _save);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statSetDate(bool& success, uint32_t _statName, int32_t& _value, int32_t _numFields, uint8_t _save) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C29BFB64F4FCBE4);
	ctx->Reset();
	ctx->Push(_statName);
	auto ptr_value = _value;
	ctx->Push(&ptr_value);
	ctx->Push(_numFields);
	ctx->Push((int32_t) _save);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_value = ptr_value;
	return ctx->ResultBool();
}

uint8_t Native_statSetString(bool& success, uint32_t _statName, const char* _value, uint8_t _save) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA87B2335D12531D7);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(SaveString(_value));
	ctx->Push((int32_t) _save);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statSetPos(bool& success, uint32_t _statName, float _x, float _y, float _z, uint8_t _save) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB283FDE680FE72E);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _save);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statSetMaskedInt(bool& success, uint32_t _statName, int32_t _p1, int32_t _p2, int32_t _p3, uint8_t _save) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7BBB1B54583ED410);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push((int32_t) _save);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statSetUserId(bool& success, uint32_t _statName, const char* _value, uint8_t _save) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8CDDF1E452BABE11);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(SaveString(_value));
	ctx->Push((int32_t) _save);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statSetCurrentPosixTime(bool& success, uint32_t _statName, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC2F84B7F9C4D0C61);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statGetInt(bool& success, uint32_t _statHash, int32_t& _outValue, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x767FBC2AC802EF3D);
	ctx->Reset();
	ctx->Push(_statHash);
	auto ptr_outValue = _outValue;
	ctx->Push(&ptr_outValue);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outValue = ptr_outValue;
	return ctx->ResultBool();
}

uint8_t Native_statGetFloat(bool& success, uint32_t _statHash, float& _outValue, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7AE6C9C9C6AC54C);
	ctx->Reset();
	ctx->Push(_statHash);
	auto ptr_outValue = _outValue;
	ctx->Push(&ptr_outValue);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outValue = ptr_outValue;
	return ctx->ResultBool();
}

uint8_t Native_statGetBool(bool& success, uint32_t _statHash, uint8_t& _outValue, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11B5E6D2AE73F48E);
	ctx->Reset();
	ctx->Push(_statHash);
	auto ptr_outValue = (int32_t) _outValue;
	ctx->Push(&ptr_outValue);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outValue = (bool) ptr_outValue;
	return ctx->ResultBool();
}

uint8_t Native_statGetDate(bool& success, uint32_t _statHash, int32_t& _outValue, int32_t _numFields, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B0FACEFC36C824B);
	ctx->Reset();
	ctx->Push(_statHash);
	auto ptr_outValue = _outValue;
	ctx->Push(&ptr_outValue);
	ctx->Push(_numFields);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outValue = ptr_outValue;
	return ctx->ResultBool();
}

const char* Native_statGetString(bool& success, uint32_t _statHash, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE50384ACC2C3DB74);
	ctx->Reset();
	ctx->Push(_statHash);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

uint8_t Native_statGetPos(bool& success, uint32_t _statName, float& _outX, float& _outY, float& _outZ, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x350F82CCB186AA1B);
	ctx->Reset();
	ctx->Push(_statName);
	auto ptr_outX = _outX;
	ctx->Push(&ptr_outX);
	auto ptr_outY = _outY;
	ctx->Push(&ptr_outY);
	auto ptr_outZ = _outZ;
	ctx->Push(&ptr_outZ);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outX = ptr_outX;
	_outY = ptr_outY;
	_outZ = ptr_outZ;
	return ctx->ResultBool();
}

uint8_t Native_statGetMaskedInt(bool& success, uint32_t _statHash, int32_t& _outValue, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x655185A06D9EEAAB);
	ctx->Reset();
	ctx->Push(_statHash);
	auto ptr_outValue = _outValue;
	ctx->Push(&ptr_outValue);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outValue = ptr_outValue;
	return ctx->ResultBool();
}

const char* Native_statGetUserId(bool& success, uint32_t _statHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2365C388E393BBE2);
	ctx->Reset();
	ctx->Push(_statHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

const char* Native_statGetLicensePlate(bool& success, uint32_t _statName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5473D4195058B2E4);
	ctx->Reset();
	ctx->Push(_statName);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

uint8_t Native_statSetLicensePlate(bool& success, uint32_t _statName, const char* _str) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x69FF13266D7296DA);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(SaveString(_str));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_statIncrement(bool& success, uint32_t _statName, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B5A68C6489E9909);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_statCommunityStartSynch(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A556B229A169402);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statCommunitySynchIsPending(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1D2BB1E1631F5B1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statCommunityGetHistory(bool& success, uint32_t _statName, int32_t _p1, float& _outValue) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBED9F5693F34ED17);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(_p1);
	auto ptr_outValue = _outValue;
	ctx->Push(&ptr_outValue);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outValue = ptr_outValue;
	return ctx->ResultBool();
}

void Native_statResetAllOnlineCharacterStats(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26D7399B9587FE89);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_statLocalResetAllOnlineCharacterStats(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA78B8FA58200DA56);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_statGetNumberOfDays(bool& success, uint32_t _statName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE0E854F5280FB769);
	ctx->Reset();
	ctx->Push(_statName);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_statGetNumberOfHours(bool& success, uint32_t _statName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2D4B2FE415AAFC3);
	ctx->Reset();
	ctx->Push(_statName);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_statGetNumberOfMinutes(bool& success, uint32_t _statName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7583B4BE4C5A41B5);
	ctx->Reset();
	ctx->Push(_statName);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_statGetNumberOfSeconds(bool& success, uint32_t _statName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2CE056FF3723F00B);
	ctx->Reset();
	ctx->Push(_statName);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_statSetProfileSettingValue(bool& success, int32_t _profileSetting, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x68F01422BE1D838F);
	ctx->Reset();
	ctx->Push(_profileSetting);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_statsCompletedCharacterCreation(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC01D2470F22CDE5A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_packedStatGetIntStatIndex(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x94F12ABF9C79E339);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint32_t Native_getPackedIntStatKey(bool& success, int32_t _index, uint8_t _spStat, uint8_t _charStat, int32_t _character) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61E111E323419E07);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push((int32_t) _spStat);
	ctx->Push((int32_t) _charStat);
	ctx->Push(_character);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint32_t Native_getPackedTuIntStatKey(bool& success, int32_t _index, uint8_t _spStat, uint8_t _charStat, int32_t _character) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD16C2AD6B8E32854);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push((int32_t) _spStat);
	ctx->Push((int32_t) _charStat);
	ctx->Push(_character);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint32_t Native_getPackedNgIntStatKey(bool& success, int32_t _index, uint8_t _spStat, uint8_t _charStat, int32_t _character, const char* _section) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B4CDCA6F07FF3DA);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push((int32_t) _spStat);
	ctx->Push((int32_t) _charStat);
	ctx->Push(_character);
	ctx->Push(SaveString(_section));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

int32_t Native_getPackedStatIntCode(bool& success, int32_t _index, int32_t _characterSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BC900A6FE73770C);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push(_characterSlot);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPackedStatIntCode(bool& success, int32_t _index, int32_t _value, int32_t _characterSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1581503AE529CD2E);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push(_value);
	ctx->Push(_characterSlot);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsBackgroundScriptAction(bool& success, const char* _action, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5009DFD741329729);
	ctx->Reset();
	ctx->Push(SaveString(_action));
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsNpcInvite(bool& success, const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93054C88E6AA7C44);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsAwardXp(bool& success, int32_t _amount, uint32_t _type, uint32_t _category) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46F917F6B4128FE4);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_type);
	ctx->Push(_category);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsRankUp(bool& success, int32_t _rank) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7F2DE41D102BFB4);
	ctx->Reset();
	ctx->Push(_rank);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsStartedSessionInOfflinemode(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x098760C7461724CD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsActivityDone(bool& success, int32_t _p0, int32_t _activityId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA071E0ED98F91286);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_activityId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsLeaveJobChain(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5BE134EC7BA96A0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsMissionStarted(bool& success, const char* _p0, int32_t _p1, int32_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC19A2925C34D2231);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsMissionOver(bool& success, const char* _p0, int32_t _p1, int32_t _p2, uint8_t _p3, uint8_t _p4, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C4BB33A8CED7324);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push((int32_t) _p3);
	ctx->Push((int32_t) _p4);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsMissionCheckpoint(bool& success, const char* _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC900596A63978C1D);
	ctx->Reset();
	ctx->Push(SaveString(_p0));
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsRandomMissionDone(bool& success, const char* _name, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71862B1D855F32E1);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsRosBet(bool& success, int32_t _amount, int32_t _act, int32_t _player, float _cm) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x121FB4DDDC2D5291);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_act);
	ctx->Push(_player);
	ctx->Push(_cm);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsRaceCheckpoint(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C375C315099DDE4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_playstatsCreateMatchHistoryId2(bool& success, int32_t& _playerAccountId, int32_t& _posixTime) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6DEE77AFF8C21BD1);
	ctx->Reset();
	auto ptr_playerAccountId = _playerAccountId;
	ctx->Push(&ptr_playerAccountId);
	auto ptr_posixTime = _posixTime;
	ctx->Push(&ptr_posixTime);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_playerAccountId = ptr_playerAccountId;
	_posixTime = ptr_posixTime;
	return ctx->ResultBool();
}

void Native_playstatsMatchStarted(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC80E22DED931E3D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsShopItem(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x176852ACAAC173D1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsCrateDropMissionDone(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CAE5D2E3F9A07F0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsCrateCreated(bool& success, float _p0, float _p1, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAFC7E5E075A96F46);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsHoldUpMissionDone(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB00196B31C39EB1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsImportExportMissionDone(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B69F5074C894811);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsRaceToPointMissionDone(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADDD1C754E2E2914);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsAcquiredHiddenPackage(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x79AB33F0FBFAC40C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsWebsiteVisited(bool& success, uint32_t _scaleformHash, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDDF24D535060F811);
	ctx->Reset();
	ctx->Push(_scaleformHash);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsFriendActivity(bool& success, int32_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F71DE29AB2258F1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsOddjobDone(bool& success, int32_t _totalTimeMs, int32_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x69DEA3E9DB727B4C);
	ctx->Reset();
	ctx->Push(_totalTimeMs);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsPropChange(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA739D6D5A05D6E7);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsClothChange(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34B973047A2268B9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsWeaponModeChange(bool& success, uint32_t _weaponHash, uint32_t _componentHashTo, uint32_t _componentHashFrom) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE95C8A1875A02CA4);
	ctx->Reset();
	ctx->Push(_weaponHash);
	ctx->Push(_componentHashTo);
	ctx->Push(_componentHashFrom);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsCheatApplied(bool& success, const char* _cheat) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6058665D72302D3F);
	ctx->Reset();
	ctx->Push(SaveString(_cheat));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsJobActivityEnd(bool& success, int32_t& _p0, int32_t& _p1, int32_t& _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF8C54A461C3E11DC);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	auto ptr_p3 = _p3;
	ctx->Push(&ptr_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
	_p1 = ptr_p1;
	_p2 = ptr_p2;
	_p3 = ptr_p3;
}

void Native_playstatsJobBend(bool& success, int32_t& _p0, int32_t& _p1, int32_t& _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF5BB8DAC426A52C0);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	auto ptr_p3 = _p3;
	ctx->Push(&ptr_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
	_p1 = ptr_p1;
	_p2 = ptr_p2;
	_p3 = ptr_p3;
}

void Native_playstatsJobLtsEnd(bool& success, int32_t& _p0, int32_t& _p1, int32_t& _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA736CF7FB7C5BFF4);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	auto ptr_p3 = _p3;
	ctx->Push(&ptr_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
	_p1 = ptr_p1;
	_p2 = ptr_p2;
	_p3 = ptr_p3;
}

void Native_playstatsJobLtsRoundEnd(bool& success, int32_t& _p0, int32_t& _p1, int32_t& _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14E0B2D1AD1044E0);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	auto ptr_p3 = _p3;
	ctx->Push(&ptr_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
	_p1 = ptr_p1;
	_p2 = ptr_p2;
	_p3 = ptr_p3;
}

void Native_playstatsQuickfixTool(bool& success, int32_t _element, const char* _item) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90D0622866E80445);
	ctx->Reset();
	ctx->Push(_element);
	ctx->Push(SaveString(_item));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsIdleKick(bool& success, int32_t _msStoodIdle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5DA3A8DE8CB6226F);
	ctx->Reset();
	ctx->Push(_msStoodIdle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsSetJoinType(bool& success, int32_t _joinType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1032E482629049E);
	ctx->Reset();
	ctx->Push(_joinType);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsHeistSaveCheat(bool& success, uint32_t _hash, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF4FF020A08BC8863);
	ctx->Reset();
	ctx->Push(_hash);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsAppendDirectorMetric(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46326E13DA4E0546);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_p0 = ptr_p0;
}

void Native_playstatsAwardBadSport(bool& success, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x47B32F5611E6E483);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsPegasusAsPersonalAircraft(bool& success, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9572BD4DD6B72122);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsFmEventChallenges(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A60E43998228229);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsFmEventVehicletarget(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBFAFDB5FAAA5C5AB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsFmEventUrbanwarfare(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C9D11605E59D955);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsFmEventCheckpointcollection(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3DE3AA516FB126A4);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsFmEventAtob(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBAA2F0490E146BE8);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsFmEventPennedin(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A7CE7CD3E653485);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsFmEventPasstheparcel(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x419615486BBF1956);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsFmEventHotproperty(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84DFC579C2FC214C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsFmEventDeaddrop(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A9C7F36E5D7B683);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsFmEventKingofthecastle(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x164C5FF663790845);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsFmEventCriminaldamage(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEDBF6C9B0D2C65C8);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsFmEventCompetitiveurbanwarfare(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6551B1F7F6CD46EA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsFmEventHuntbeast(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2CD90358F67D0AA8);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsPimenuHideOptions(bool& success, int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x203B381133817079);
	ctx->Reset();
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_data = ptr_data;
}

int32_t Native_leaderboardsGetNumberOfColumns(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x117B45156D7EFF2E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_leaderboardsGetColumnId(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC4B5467A1886EA7E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_leaderboardsGetColumnType(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF4FEF46DB7894D3);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_leaderboardsReadClearAll(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA34CB6E6F0DF4A0B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_leaderboardsReadClear(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7CCE5C737A665701);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_leaderboardsReadPending(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC392C8483342AC2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_leaderboardsReadAnyPending(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA31FD15197B192BD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_leaderboardsReadSuccessful(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FB19228983E832C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_leaderboards2ReadFriendsByRow(bool& success, int32_t& _p0, int32_t& _p1, int32_t _p2, uint8_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x918B101666F9CB83);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	ctx->Push(_p2);
	ctx->Push((int32_t) _p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

uint8_t Native_leaderboards2ReadByHandle(bool& success, int32_t& _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC30713A383BFBF0E);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

uint8_t Native_leaderboards2ReadByRow(bool& success, int32_t& _p0, int32_t& _p1, int32_t _p2, int32_t& _p3, int32_t _p4, int32_t& _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9CDB1E3F0A49883);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	ctx->Push(_p2);
	auto ptr_p3 = _p3;
	ctx->Push(&ptr_p3);
	ctx->Push(_p4);
	auto ptr_p5 = _p5;
	ctx->Push(&ptr_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	_p1 = ptr_p1;
	_p3 = ptr_p3;
	_p5 = ptr_p5;
	return ctx->ResultBool();
}

uint8_t Native_leaderboards2ReadByRank(bool& success, int32_t& _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA2C7DB0C129449A);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_leaderboards2ReadByRadius(bool& success, int32_t& _p0, int32_t _p1, int32_t& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CE587FB5A42C8C4);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(_p1);
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	_p2 = ptr_p2;
	return ctx->ResultBool();
}

uint8_t Native_leaderboards2ReadByScoreInt(bool& success, int32_t& _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EEC7E4F6984A16A);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_leaderboards2ReadByScoreFloat(bool& success, int32_t& _p0, float _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE662C8B759D08F3C);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_leaderboards2ReadRankPrediction(bool& success, int32_t& _p0, int32_t& _p1, int32_t& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC38DC1E90D22547C);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	_p1 = ptr_p1;
	_p2 = ptr_p2;
	return ctx->ResultBool();
}

uint8_t Native_leaderboards2ReadByPlaform(bool& success, int32_t& _p0, const char* _gamerHandleCsv, const char* _platformName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1AE5DCDBFCA2721);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	ctx->Push(SaveString(_gamerHandleCsv));
	ctx->Push(SaveString(_platformName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

uint8_t Native_leaderboards2ReadGetRowDataStart(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0F93D5465B3094D);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

void Native_leaderboards2ReadGetRowDataEnd(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71B008056E5692D6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_leaderboards2ReadGetRowDataInfo(bool& success, int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34770B9CE0E03B91);
	ctx->Reset();
	ctx->Push(_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

int32_t Native_leaderboards2ReadGetRowDataInt(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88578F6EC36B4A3A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

float Native_leaderboards2ReadGetRowDataFloat(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x38491439B6BA7F7D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

uint8_t Native_leaderboards2WriteData(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE2206545888AE49);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

void Native_leaderboardsWriteAddColumn(bool& success, int32_t _p0, int32_t _p1, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BCA1D2C47B0D269);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_leaderboardsWriteAddColumnLong(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E65248609523599);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_leaderboardsCacheDataRow(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9BB18E2C40142ED);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultBool();
}

void Native_leaderboardsClearCacheData(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4B02A6B476E1FDC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_leaderboardsClearCacheDataId(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8EC74CEB042E7CFF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_leaderboardsGetCacheExists(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C51349BE6CDFE2C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_leaderboardsGetCacheTime(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF04C1C27DA35F6C8);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_leaderboardsGetCacheNumberOfRows(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58A651CD201D89AD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_leaderboardsGetCacheDataRow(bool& success, int32_t _p0, int32_t _p1, int32_t& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9120E8DBA3D69273);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	auto ptr_p2 = _p2;
	ctx->Push(&ptr_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p2 = ptr_p2;
	return ctx->ResultBool();
}

void Native_presenceEventUpdatestatInt(bool& success, uint32_t _statHash, int32_t _value, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11FF1C80276097ED);
	ctx->Reset();
	ctx->Push(_statHash);
	ctx->Push(_value);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_presenceEventUpdatestatFloat(bool& success, uint32_t _statHash, float _value, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x30A6614C1F7799B8);
	ctx->Reset();
	ctx->Push(_statHash);
	ctx->Push(_value);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_presenceEventUpdatestatIntWithString(bool& success, uint32_t _statHash, int32_t _value, int32_t _p2, const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6483C25849031C4F);
	ctx->Reset();
	ctx->Push(_statHash);
	ctx->Push(_value);
	ctx->Push(_p2);
	ctx->Push(SaveString(_string));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getPlayerHasDrivenAllVehicles(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5EAD2BF6484852E4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setHasPostedAllVehiclesDriven(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC141B8917E0017EC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setProfileSettingPrologueComplete(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB475F27C6A994D65);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setProfileSettingSpChopMissionComplete(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC67E2DA1CBE759E2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setProfileSettingCreatorRacesDone(bool& success, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1A1803D3476F215);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setProfileSettingCreatorDmDone(bool& success, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x38BAAA5DD4C9D19F);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setProfileSettingCreatorCtfDone(bool& success, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55384438FC55AD8E);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setJobActivityIdStarted(bool& success, int32_t _p0, int32_t _characterSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x723C1CE13FBFDB67);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_characterSlot);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFreemodePrologueDone(bool& success, int32_t _p0, int32_t _characterSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0D01D20616FC73FB);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_characterSlot);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFreemodeStrandProgressionStatus(bool& success, int32_t _profileSetting, int32_t _settingValue) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x79D310A861697CC9);
	ctx->Reset();
	ctx->Push(_profileSetting);
	ctx->Push(_settingValue);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_statNetworkIncrementOnSuicide(bool& success, int32_t _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x428EAF89E24F6C36);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_statSetCheatIsActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x047CBED6F6F8B63C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_leaderboards2WriteDataForEventType(bool& success, int32_t& _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC980E62E33DF1D5C);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	_p1 = ptr_p1;
	return ctx->ResultBool();
}

void Native_forceCloudMpStatsDownloadAndOverwriteLocalSave(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F361B8889A792A3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_statMigrateClearForRestart(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC847B43F369AC0B5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_statMigrateSavegameStart(bool& success, const char* _platformName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5C80D8E768A9E66);
	ctx->Reset();
	ctx->Push(SaveString(_platformName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_statMigrateSavegameGetStatus(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A62EC95AE10E011);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_statMigrateCheckAlreadyDone(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C89FE2BDEB3F169);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statMigrateCheckStart(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6E0E2616A7576BB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_statMigrateCheckGetIsPlatformAvailable(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BD5F255321C4AAF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_statMigrateCheckGetPlatformStatus(bool& success, int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDEAAF77EB3687E97);
	ctx->Reset();
	ctx->Push(_p0);
	auto ptr_p1 = _p1;
	ctx->Push(&ptr_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p1 = ptr_p1;
	return ctx->ResultInt();
}

int32_t Native_statGetSaveMigrationStatus(bool& success, int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x886913BBEACA68C1);
	ctx->Reset();
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_data = ptr_data;
	return ctx->ResultInt();
}

uint8_t Native_statSaveMigrationCancelPendingOperation(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4FEF53183C3C6414);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_statGetCancelSaveMigrationStatus(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x567384DFA67029E6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_statSaveMigrationConsumeContent(bool& success, uint32_t _contentId, const char* _srcPlatform, const char* _srcGamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3270F67EED31FBC1);
	ctx->Reset();
	ctx->Push(_contentId);
	ctx->Push(SaveString(_srcPlatform));
	ctx->Push(SaveString(_srcGamerHandle));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_statGetSaveMigrationConsumeContentStatus(bool& success, int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE5AA445ABA8DEE0);
	ctx->Reset();
	auto ptr_p0 = _p0;
	ctx->Push(&ptr_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_p0 = ptr_p0;
	return ctx->ResultInt();
}

void Native_statEnableStatsTracking(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x98E2BC1CA26287C3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_statDisableStatsTracking(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x629526ABA383BCAA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_statIsStatsTrackingEnabled(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE3DB208333D9844);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statStartRecordStat(bool& success, int32_t _statType, int32_t _valueType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33D72899E24C3365);
	ctx->Reset();
	ctx->Push(_statType);
	ctx->Push(_valueType);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statStopRecordStat(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA761D4AC6115623D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_statGetRecordedValue(bool& success, float& _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF11F01D98113536A);
	ctx->Reset();
	auto ptr_value = _value;
	ctx->Push(&ptr_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_value = ptr_value;
	return ctx->ResultBool();
}

uint8_t Native_statIsRecordingStat(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B9CDBD6C566C38C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_statGetCurrentNearMissNocrashPrecise(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE8853FBCE7D8D0D6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

float Native_statGetCurrentRearWheelDistance(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA943FD1722E11EFD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_statGetCurrentFrontWheelDistance(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84A810B375E69C0E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_statGetCurrentJumpDistance(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9EC8858184CD253A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_statGetCurrentDriveNocrashDistance(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA9749CC94C1FD85);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_statGetCurrentSpeed(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55A8BECAF28A4EB7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_statGetCurrentDrivingReverseDistance(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x32CAC93C9DE73D32);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_statGetCurrentSkydivingDistance(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAFF47709F1D5DCCE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_statGetChallengeFlyingDist(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E0A5253375C4584);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

uint8_t Native_statGetFlyingAltitude(bool& success, float& _outValue) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A8EA222F9C67DBB);
	ctx->Reset();
	auto ptr_outValue = _outValue;
	ctx->Push(&ptr_outValue);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outValue = ptr_outValue;
	return ctx->ResultBool();
}

uint8_t Native_statIsPlayerVehicleAboveOcean(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9F2922717B819EC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

float Native_statGetVehicleBailDistance(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0B8B7F74BF061C6D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

uint8_t Native_statRollbackSaveMigration(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3DA2606774A8E2D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setHasSpecialeditionContent(bool& success, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDAC073C7901F9E15);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSaveMigrationTransactionIdWarning(bool& success, int32_t _transactionId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6792800AC95350D);
	ctx->Reset();
	ctx->Push(_transactionId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getBossGoonUuid(bool& success, int32_t _characterSlot, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6BC0ACD0673ACEBE);
	ctx->Reset();
	ctx->Push(_characterSlot);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsBwBossonbossdeathmatch(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D8ADB562F09A245);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsBwYatchattack(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1A1EE3B4FA8E760);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsBwHuntTheBoss(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88087EE1F28024AE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsBwSightseer(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFCC228E07217FCAC);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsBwAssault(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x678F86D8FC040BDB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsBwBellyOfTheBeast(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6F54BB2FFCA35EA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsBwHeadHunter(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FF2C33B13A02A11);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsBwFragileGoods(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x282B6739644F4347);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsBwAirFreight(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF06A6F41CB445443);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsBcCarJacking(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7B18DA61F6BAE9D5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsBcSmashAndGrab(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06EAF70AE066441E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsBcProtectionRacket(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14EDA9EE27BD1626);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsBcMostWanted(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x930F504203F561C9);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsBcFindersKeepers(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3261D791EB44ACB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsBcPointToPoint(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x73001E34F85137F8);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsBcCashing(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53CAE13E9B426993);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsBcSalvage(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D36291161859389);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsSpentPiCustomLoadout(bool& success, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE509B0A3693DE8B);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsBuyContrabandMission(bool& success, int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD6781E42755531F7);
	ctx->Reset();
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_data = ptr_data;
}

void Native_playstatsSellContrabandMission(bool& success, int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC729991A9065376E);
	ctx->Reset();
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_data = ptr_data;
}

void Native_playstatsDefendContrabandMission(bool& success, int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2605663BD4F23B5D);
	ctx->Reset();
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_data = ptr_data;
}

void Native_playstatsRecoverContrabandMission(bool& success, int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x04D90BA8207ADA2D);
	ctx->Reset();
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_data = ptr_data;
}

void Native_playstatsHitContrabandDestroyLimit(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x60EEDC12AF66E846);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_startBeingBoss(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3EBEAC6C3F81F6BD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_startBeingGoon(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x96E6D5150DBF1C09);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_endBeingBoss(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA3C53804BDB68ED2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_endBeingGoon(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6BCCF9948492FD85);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_hiredLimo(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x792271AB35C356A4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_orderBossVehicle(bool& success, int32_t _p0, int32_t _p1, uint32_t _vehicleHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCEA553E35C2246E1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_vehicleHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_changeUniform(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1C9B92BDD3F151D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_changeGoonLookingForWork(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44919CC079BB60BF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_sendMetricGhostingToPlayer(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7033EEFD9B28088E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_sendMetricVipPoach(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA525DFF66BB82F5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_sendMetricPunishBodyguard(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x015B03EE1C43E6EC);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsStartTrackingStunts(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x928DBFB892638EF3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsStopTrackingStunts(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A800DACCC0DA55D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsMissionEnded(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF371CD2B64212FD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsImpexpMissionEnded(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D8BA05688AD64C7);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsChangeMcRole(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _role, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0B565B0AAE56A0E8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_role);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsChangeMcOutfit(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28ECB8AC2F607DB2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsSwitchMcEmblem(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A50D2604E05CB94);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsMcRequestBike(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCC25A4553DFBF9EA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsMcKilledRivalMcMember(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF534D94DFA2EAD26);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsAbandonedMc(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD558BEC0BBA7E8D2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsEarnedMcPoints(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x501478855A6074CE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsMcFormationEnds(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x03C2EEBB04B3FB72);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsMcClubhouseActivity(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8989CBD7B4E82534);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsRivalBehavior(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27AA1C973CACFE63);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsCopyRankIntoNewSlot(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB7257BA2550EA10A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsDupeDetected(bool& success, int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x848B66100EE33B05);
	ctx->Reset();
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_data = ptr_data;
}

void Native_playstatsBanAlert(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x516FC96EB88EEFE5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsGunrunningMissionEnded(bool& success, int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0EACDF8487D5155A);
	ctx->Reset();
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_data = ptr_data;
}

void Native_playstatsGunrunningRnd(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDAF80797FC534BEC);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsBusinessBattleEnded(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x316DB59CD14C1774);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsWarehouseMissionEnded(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D7A9B577E72385E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsNightclubMissionEnded(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x830C3A44EB3F2CF9);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsDjUsage(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB26F670685631727);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsMinigameUsage(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC14BD9F5337219B2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsStoneHatchetEnded(bool& success, int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35E39E5570358630);
	ctx->Reset();
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_data = ptr_data;
}

void Native_playstatsSmugglerMissionEnded(bool& success, int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x320C35147D5B5DDD);
	ctx->Reset();
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_data = ptr_data;
}

void Native_playstatsFmHeistPrepEnded(bool& success, int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD8AFB345A9C5CCBB);
	ctx->Reset();
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_data = ptr_data;
}

void Native_playstatsInstancedHeistEnded(bool& success, int32_t& _data, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E1497D0D2108115);
	ctx->Reset();
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_data = ptr_data;
}

void Native_playstatsDarCheckpoint(bool& success, int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BC254FF3A911501);
	ctx->Reset();
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_data = ptr_data;
}

void Native_playstatsEnterSessionPack(bool& success, int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x878FF156D36E9956);
	ctx->Reset();
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_data = ptr_data;
}

void Native_playstatsDroneUsage(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66C7BB2416ED3FCE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsSpinWheel(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6731DE84A38BFAD0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsArenaWarsSpectator(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F4F599753F8200A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsArenaWarsEnded(bool& success, int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB479D9F0D48A1BC5);
	ctx->Reset();
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_data = ptr_data;
}

void Native_playstatsSwitchPassiveMode(bool& success, uint8_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35EEC6C2BC821A71);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsCollectiblePickedUp(bool& success, int32_t _p0, uint32_t _objectHash, int32_t _p2, int32_t _p3, int32_t _moneyAmount, int32_t _rpAmount, int32_t _chipsAmount, int32_t _p7, int32_t _p8, int32_t _p9, int32_t _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD0A8A9338681CF2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_objectHash);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_moneyAmount);
	ctx->Push(_rpAmount);
	ctx->Push(_chipsAmount);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsCasinoStoryMissionEnded(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFCCCAC2BD3C1F180);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsCasinoChip(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0999F3F090EC5012);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsCasinoRoulette(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95101C443A84E7F1);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsCasinoBlackjack(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3EAE97309727E7AD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsCasinoThreeCardPoker(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF740FB339D471C35);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsCasinoSlotMachine(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF5EC67D392B830A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsCasinoInsideTrack(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x049F059625058A86);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsCasinoLuckySeven(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C432C1435F5E4FA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsCasinoRouletteLight(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6572ABA3DE1197FC);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsCasinoBlackjackLight(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD5451C7BF151EB6F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsCasinoThreeCardPokerLight(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC9001364B4388F22);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsCasinoSlotMachineLight(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE60054A0FAE8227F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsCasinoInsideTrackLight(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23A3CBCD50D54E47);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsArcadeGame(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x533A7D1EA58DF958);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsArcadeLoveMatch(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4FCDBD3F0A813C25);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsFreemodeCasinoMissionEnded(bool& success, int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A0D4A6C336B7BC5);
	ctx->Reset();
	auto ptr_data = _data;
	ctx->Push(&ptr_data);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_data = ptr_data;
}

void Native_playstatsHeist3Drone(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFBD93BF2943E29B);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsHeist3Hack(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92FC0EEDFAC04A14);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsNpcPhone(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0077F15613D36993);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsArcadeCabinet(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9096193DF1F99D4);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsHeist3Finale(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E0259BABC27A327);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsHeist3Prep(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53C31853EC9531FF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsMasterControl(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x810B5FCC52EC7FF0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsQuitMode(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BF29846C6527C54);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsMissionVote(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC03FAB2C2F92289B);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsNjvsVote(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CDAED54B34B0ED0);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsKillYourself(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4AFF7E02E485E92B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsFmMissionEnd(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46A70777BE6CEAB9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsHeist4Prep(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFCDB14317A9B361);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsHeist4Finale(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC1E963C58664B556);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsHeist4Hack(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FA3173480008493);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsSubWeap(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4367D310F079DB0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsFastTrvl(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4DC416F246A41FC8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsHubEntry(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2818FF6638CB09DE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsDjMissionEnded(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD6CA58B3B53A0F22);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsRobberyPrep(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A67DFBF1F5C3835);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsRobberyFinale(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBBA55BE9AAAABF44);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsExtraEvent(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA5B74BAB8A7EF99);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsCarclubPoints(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF14D6FEEC507BBE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsCarclubChallenge(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1187CB58D7F3BED7);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsCarclubPrize(bool& success, int32_t _p0, uint32_t _vehicleModel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x69C922B677621428);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_vehicleModel);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsAwardNav(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70F52471E758EBAE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsInstMissionEnd(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFEA3F7E83C0610FA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsHubExit(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A46ACE5C4661132);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_playstatsInventory(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x887DAD63CF5B7908);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_loadAllObjectsNow(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD6E84632DD4CB3F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_loadScene(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4448EB75B4904BDB);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_networkUpdateLoadScene(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC4582015556D1C46);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isNetworkLoadingScene(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x41CA5A33160EA4AB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setInteriorActive(bool& success, int32_t _interiorID, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE37B76C387BE28ED);
	ctx->Reset();
	ctx->Push(_interiorID);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_requestModel(bool& success, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x963D27A58DF860AC);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_requestMenuPedModel(bool& success, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0261AEF7ACFC51E);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasModelLoaded(bool& success, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x98A4EB5D89A0C952);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_requestModelsInRoom(bool& success, int32_t _interior, const char* _roomName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A7A40100EDFEC58);
	ctx->Reset();
	ctx->Push(_interior);
	ctx->Push(SaveString(_roomName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setModelAsNoLongerNeeded(bool& success, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE532F5D78798DAAB);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isModelInCdimage(bool& success, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35B9E0803292B641);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isModelValid(bool& success, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0296A2EDF545E92);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isModelAPed(bool& success, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75816577FEA6DAD5);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isModelAVehicle(bool& success, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19AAC8F07BFEC53E);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_requestCollisionAtCoord(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x07503F7948F491A7);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_requestCollisionForModel(bool& success, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x923CB32A3B874FCB);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasCollisionForModelLoaded(bool& success, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x22CCA434E368F03A);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_requestAdditionalCollisionAtCoord(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC9156DC11411A9EA);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesAnimDictExist(bool& success, const char* _animDict) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DA49C3B79856961);
	ctx->Reset();
	ctx->Push(SaveString(_animDict));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_requestAnimDict(bool& success, const char* _animDict) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3BD40951412FEF6);
	ctx->Reset();
	ctx->Push(SaveString(_animDict));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasAnimDictLoaded(bool& success, const char* _animDict) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD031A9162D01088C);
	ctx->Reset();
	ctx->Push(SaveString(_animDict));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_removeAnimDict(bool& success, const char* _animDict) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF66A602F829E2A06);
	ctx->Reset();
	ctx->Push(SaveString(_animDict));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_requestAnimSet(bool& success, const char* _animSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6EA47DAE7FAD0EED);
	ctx->Reset();
	ctx->Push(SaveString(_animSet));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasAnimSetLoaded(bool& success, const char* _animSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC4EA073D86FB29B0);
	ctx->Reset();
	ctx->Push(SaveString(_animSet));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_removeAnimSet(bool& success, const char* _animSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16350528F93024B3);
	ctx->Reset();
	ctx->Push(SaveString(_animSet));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_requestClipSet(bool& success, const char* _clipSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2A71E1A77418A49);
	ctx->Reset();
	ctx->Push(SaveString(_clipSet));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasClipSetLoaded(bool& success, const char* _clipSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x318234F4F3738AF3);
	ctx->Reset();
	ctx->Push(SaveString(_clipSet));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_removeClipSet(bool& success, const char* _clipSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01F73A131C18CD94);
	ctx->Reset();
	ctx->Push(SaveString(_clipSet));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_requestIpl(bool& success, const char* _iplName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x41B4893843BBDB74);
	ctx->Reset();
	ctx->Push(SaveString(_iplName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeIpl(bool& success, const char* _iplName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE6C5AD3ECE0A82D);
	ctx->Reset();
	ctx->Push(SaveString(_iplName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isIplActive(bool& success, const char* _iplName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88A741E44A2B3495);
	ctx->Reset();
	ctx->Push(SaveString(_iplName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setStreaming(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E0C692677008888);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_loadGlobalWaterFile(bool& success, int32_t _waterType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7E3F55ED251B76D3);
	ctx->Reset();
	ctx->Push(_waterType);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getGlobalWaterFile(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF741BD853611592D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setGamePausesForStreaming(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x717CD6E6FAEBBEDC);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setReducePedModelBudget(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77B5F9A36BF96710);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setReduceVehicleModelBudget(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80C527893080CCF3);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDitchPoliceModels(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42CBE54462D92634);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getNumberOfStreamingRequests(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4060057271CEBC89);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_requestPtfxAsset(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x944955FB2A3935C8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasPtfxAssetLoaded(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA7D9B86ECA7481B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_removePtfxAsset(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88C6814073DD4A73);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_requestNamedPtfxAsset(bool& success, const char* _fxName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB80D8756B4668AB6);
	ctx->Reset();
	ctx->Push(SaveString(_fxName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasNamedPtfxAssetLoaded(bool& success, const char* _fxName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8702416E512EC454);
	ctx->Reset();
	ctx->Push(SaveString(_fxName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_removeNamedPtfxAsset(bool& success, const char* _fxName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F61EBBE1A00F96D);
	ctx->Reset();
	ctx->Push(SaveString(_fxName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehiclePopulationBudget(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB9E1EB3BE2AF4E9);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedPopulationBudget(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C95333CFC3340F3);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearFocus(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x31B73D1EA9F01DA2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFocusPosAndVel(bool& success, float _x, float _y, float _z, float _offsetX, float _offsetY, float _offsetZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB7454BAFF08FE25);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFocusEntity(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x198F77705FA0931D);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isEntityFocus(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DDFF3FB9075D747);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setRestoreFocusEntity(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0811381EF5062FEC);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setMapdatacullboxEnabled(bool& success, const char* _name, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF12610C644A35C9);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAllMapdataCulled(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E52E752C76E7E7A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_streamvolCreateSphere(bool& success, float _x, float _y, float _z, float _rad, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x219C7B8D53E429FD);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_rad);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_streamvolCreateFrustum(bool& success, float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6, int32_t _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F3F018BC3AFA77C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_streamvolCreateLine(bool& success, float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0AD9710CEE2F590F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_streamvolDelete(bool& success, int32_t _unused) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1EE7D8DF4425F053);
	ctx->Reset();
	ctx->Push(_unused);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_streamvolHasLoaded(bool& success, int32_t _unused) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D41E9D2D17C5B2D);
	ctx->Reset();
	ctx->Push(_unused);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_streamvolIsValid(bool& success, int32_t _unused) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x07C313F94746702C);
	ctx->Reset();
	ctx->Push(_unused);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isStreamvolActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC9823AB80A3DCAC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_newLoadSceneStart(bool& success, float _posX, float _posY, float _posZ, float _offsetX, float _offsetY, float _offsetZ, float _radius, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x212A8D0D2BABFAC2);
	ctx->Reset();
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	ctx->Push(_radius);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_newLoadSceneStartSphere(bool& success, float _x, float _y, float _z, float _radius, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xACCFB4ACF53551B0);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_newLoadSceneStop(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC197616D221FF4A4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isNewLoadSceneActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA41A05B6CB741B85);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isNewLoadSceneLoaded(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01B8247A7A8B9AD1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isSafeToStartPlayerSwitch(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71E7B2E657449AAD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_startPlayerSwitch(bool& success, int32_t _from, int32_t _to, int32_t _flags, int32_t _switchType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFAA23F2CBA159D67);
	ctx->Reset();
	ctx->Push(_from);
	ctx->Push(_to);
	ctx->Push(_flags);
	ctx->Push(_switchType);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopPlayerSwitch(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95C0A5BBDC189AA1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPlayerSwitchInProgress(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9D2CFFF49FAB35F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getPlayerSwitchType(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3C94A90D9FC9E62);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getIdealPlayerSwitchType(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5D7B26B45720E05);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getPlayerSwitchState(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x470555300D10B2A5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getPlayerShortSwitchState(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20F898A5D9782800);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPlayerShortSwitchStyle(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F2013F8BC24EE69);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPlayerSwitchJumpCutIndex(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78C0D93253149435);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPlayerSwitchOutro(bool& success, float _cameraCoordX, float _cameraCoordY, float _cameraCoordZ, float _camRotationX, float _camRotationY, float _camRotationZ, float _camFov, float _camFarClip, int32_t _rotationOrder) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC208B673CE446B61);
	ctx->Reset();
	ctx->Push(_cameraCoordX);
	ctx->Push(_cameraCoordY);
	ctx->Push(_cameraCoordZ);
	ctx->Push(_camRotationX);
	ctx->Push(_camRotationY);
	ctx->Push(_camRotationZ);
	ctx->Push(_camFov);
	ctx->Push(_camFarClip);
	ctx->Push(_rotationOrder);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerSwitchEstablishingShot(bool& success, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0FDE9DBFC0A6BC65);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_allowPlayerSwitchPan(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43D1680C6D19A8E9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_allowPlayerSwitchOutro(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74DE2E8739086740);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_allowPlayerSwitchAscent(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8E2A065ABDAE6994);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_allowPlayerSwitchDescent(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD5FDF34B81BFE79);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isSwitchReadyForDescent(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFA80CB25D0A19B3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_enableSwitchPauseBeforeDescent(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4793DFF3AF2ABCD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableSwitchOutroFx(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD605B8E0E18B3BB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_switchToMultiFirstpart(bool& success, int32_t _ped, int32_t _flags, int32_t _switchType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAAB3200ED59016BC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_flags);
	ctx->Push(_switchType);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_switchToMultiSecondpart(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD8295AF639FD9CB8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isSwitchToMultiFirstpartFinished(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x933BBEEB8C61B5F4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getPlayerSwitchInterpOutDuration(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x08C2D6C52A3104BB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getPlayerSwitchInterpOutCurrentTime(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B48A06DD0E792A5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isSwitchSkippingDescent(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B74EA8CFD5E3E7E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setSceneStreamingTracksCamPosThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E9057A74FD73E23);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getLodscale(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C15B0E443B2349D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_overrideLodscaleThisFrame(bool& success, float _scaling) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA76359FC80B2438E);
	ctx->Reset();
	ctx->Push(_scaling);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_remapLodscaleRangeThisFrame(bool& success, float _p0, float _p1, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBED8CA5FF5E04113);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_suppressHdMapStreamingThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x472397322E92A856);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRenderHdOnly(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x40AEFD1A244741F2);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceAllowTimeBasedFadingThisFrame(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x03F1A106BDA7DD3E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_iplGroupSwapStart(bool& success, const char* _iplName1, const char* _iplName2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95A7DABDDBB78AE7);
	ctx->Reset();
	ctx->Push(SaveString(_iplName1));
	ctx->Push(SaveString(_iplName2));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_iplGroupSwapCancel(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x63EB2B972A218CAC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_iplGroupSwapIsReady(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB199266061F820A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_iplGroupSwapFinish(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF4A0DADB70F57FA6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_iplGroupSwapIsActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5068F488DDB54DD8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_prefetchSrl(bool& success, const char* _srl) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3D245789CE12982C);
	ctx->Reset();
	ctx->Push(SaveString(_srl));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isSrlLoaded(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0263801A4C5B0BB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_beginSrl(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9BADDC94EF83B823);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_endSrl(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A41540E63C9EE17);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSrlTime(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA74A541C6884E7B8);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSrlPostCutsceneCamera(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF39EE20C537E98C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSrlReadaheadTimes(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBEB2D9A1D9A8F55A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSrlLongJumpMode(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20C6C7E4EB082A7F);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSrlForcePrestream(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF8155A7F03DDFC8E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setHdArea(bool& success, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB85F26619073E775);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearHdArea(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE58B1CFB9290813);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_initCreatorBudget(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5A4DB34FE89B88A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_shutdownCreatorBudget(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCCE26000E9A6FAD7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_addModelToCreatorBudget(bool& success, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BC3144DEB678666);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_removeModelFromCreatorBudget(bool& success, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF086AD9354FAC3A3);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getUsedCreatorBudget(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3D3D8B3BE5A83D35);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setIslandEnabled(bool& success, const char* _name, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A9D1BA639675CF1);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskPause(bool& success, int32_t _ped, int32_t _ms) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE73A266DB0CA9042);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_ms);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskStandStill(bool& success, int32_t _ped, int32_t _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x919BE13EED931959);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskJump(bool& success, int32_t _ped, uint8_t _usePlayerLaunchForce, uint8_t _doSuperJump, uint8_t _useFullSuperJumpForce) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0AE4086104E067B1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _usePlayerLaunchForce);
	ctx->Push((int32_t) _doSuperJump);
	ctx->Push((int32_t) _useFullSuperJumpForce);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskCower(bool& success, int32_t _ped, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3EB1FE9E8E908E15);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskHandsUp(bool& success, int32_t _ped, int32_t _duration, int32_t _facingPed, int32_t _timeToFacePed, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2EAB31979A7F910);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_duration);
	ctx->Push(_facingPed);
	ctx->Push(_timeToFacePed);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_updateTaskHandsUpDuration(bool& success, int32_t _ped, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA98FCAFD7893C834);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskOpenVehicleDoor(bool& success, int32_t _ped, int32_t _vehicle, int32_t _timeOut, int32_t _seat, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x965791A9A488A062);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_timeOut);
	ctx->Push(_seat);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskEnterVehicle(bool& success, int32_t _ped, int32_t _vehicle, int32_t _timeout, int32_t _seat, float _speed, int32_t _flag, const char* _overrideEntryClipsetName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC20E50AA46D09CA8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_timeout);
	ctx->Push(_seat);
	ctx->Push(_speed);
	ctx->Push(_flag);
	ctx->Push(SaveString(_overrideEntryClipsetName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskLeaveVehicle(bool& success, int32_t _ped, int32_t _vehicle, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3DBCE61A490BE02);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskGetOffBoat(bool& success, int32_t _ped, int32_t _boat) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C00E77AF14B2DFF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_boat);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskSkyDive(bool& success, int32_t _ped, uint8_t _instant) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x601736CFE536B0A0);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _instant);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskParachute(bool& success, int32_t _ped, uint8_t _giveParachuteItem, uint8_t _instant) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2F1C53C97EE81AB);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _giveParachuteItem);
	ctx->Push((int32_t) _instant);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskParachuteToTarget(bool& success, int32_t _ped, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB33E291AFA6BD03A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setParachuteTaskTarget(bool& success, int32_t _ped, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC313379AF0FCEDA7);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setParachuteTaskThrust(bool& success, int32_t _ped, float _thrust) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0729BAC1B8C64317);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_thrust);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskRappelFromHeli(bool& success, int32_t _ped, float _minHeightAboveGround) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x09693B0312F91649);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_minHeightAboveGround);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskVehicleDriveToCoord(bool& success, int32_t _ped, int32_t _vehicle, float _x, float _y, float _z, float _speed, int32_t _p6, uint32_t _vehicleModel, int32_t _drivingMode, float _stopRange, float _straightLineDistance) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE2A2AA2F659D77A7);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_speed);
	ctx->Push(_p6);
	ctx->Push(_vehicleModel);
	ctx->Push(_drivingMode);
	ctx->Push(_stopRange);
	ctx->Push(_straightLineDistance);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskVehicleDriveToCoordLongrange(bool& success, int32_t _ped, int32_t _vehicle, float _x, float _y, float _z, float _speed, int32_t _driveMode, float _stopRange) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x158BB33F920D360C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_speed);
	ctx->Push(_driveMode);
	ctx->Push(_stopRange);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskVehicleDriveWander(bool& success, int32_t _ped, int32_t _vehicle, float _speed, int32_t _drivingStyle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x480142959D337D00);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_speed);
	ctx->Push(_drivingStyle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskFollowToOffsetOfEntity(bool& success, int32_t _ped, int32_t _entity, float _offsetX, float _offsetY, float _offsetZ, float _movementSpeed, int32_t _timeout, float _stoppingRange, uint8_t _persistFollowing) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x304AE42E357B8C7E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_entity);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	ctx->Push(_movementSpeed);
	ctx->Push(_timeout);
	ctx->Push(_stoppingRange);
	ctx->Push((int32_t) _persistFollowing);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskGoStraightToCoord(bool& success, int32_t _ped, float _x, float _y, float _z, float _speed, int32_t _timeout, float _targetHeading, float _distanceToSlide) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD76B57B44F1E6F8B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_speed);
	ctx->Push(_timeout);
	ctx->Push(_targetHeading);
	ctx->Push(_distanceToSlide);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskGoStraightToCoordRelativeToEntity(bool& success, int32_t _ped, int32_t _entity, float _x, float _y, float _z, float _moveBlendRatio, int32_t _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61E360B7E040D12E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_entity);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_moveBlendRatio);
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskAchieveHeading(bool& success, int32_t _ped, float _heading, int32_t _timeout) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93B93A37987F1F3D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_heading);
	ctx->Push(_timeout);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskFlushRoute(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x841142A1376E9006);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskExtendRoute(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E7889778264843A);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskFollowPointRoute(bool& success, int32_t _ped, float _speed, int32_t _mode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x595583281858626E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_speed);
	ctx->Push(_mode);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskGoToEntity(bool& success, int32_t _entity, int32_t _target, int32_t _duration, float _distance, float _moveBlendRatio, float _slowDownDistance, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A071245EB0D1882);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_target);
	ctx->Push(_duration);
	ctx->Push(_distance);
	ctx->Push(_moveBlendRatio);
	ctx->Push(_slowDownDistance);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskSmartFleeCoord(bool& success, int32_t _ped, float _x, float _y, float _z, float _distance, int32_t _time, uint8_t _preferPavements, uint8_t _quitIfOutOfRange) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x94587F17E9C365D5);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_distance);
	ctx->Push(_time);
	ctx->Push((int32_t) _preferPavements);
	ctx->Push((int32_t) _quitIfOutOfRange);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskSmartFleePed(bool& success, int32_t _ped, int32_t _fleeTarget, float _safeDistance, int32_t _fleeTime, uint8_t _preferPavements, uint8_t _updateToNearestHatedPed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x22B0D0E37CCB840D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_fleeTarget);
	ctx->Push(_safeDistance);
	ctx->Push(_fleeTime);
	ctx->Push((int32_t) _preferPavements);
	ctx->Push((int32_t) _updateToNearestHatedPed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskReactAndFleePed(bool& success, int32_t _ped, int32_t _fleeTarget) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x72C896464915D1B1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_fleeTarget);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskShockingEventReact(bool& success, int32_t _ped, int32_t _eventHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x452419CBD838065B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_eventHandle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskWanderInArea(bool& success, int32_t _ped, float _x, float _y, float _z, float _radius, float _minimalLength, float _timeBetweenWalks) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE054346CA3A0F315);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_minimalLength);
	ctx->Push(_timeBetweenWalks);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskWanderStandard(bool& success, int32_t _ped, float _heading, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB9CE077274F6A1B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_heading);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskWanderSpecific(bool& success, int32_t _ped, const char* _conditionalAnimGroupStr, const char* _conditionalAnimStr, float _heading) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6919A2F136426098);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_conditionalAnimGroupStr));
	ctx->Push(SaveString(_conditionalAnimStr));
	ctx->Push(_heading);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskVehiclePark(bool& success, int32_t _ped, int32_t _vehicle, float _x, float _y, float _z, float _heading, int32_t _mode, float _radius, uint8_t _keepEngineOn) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F3E34E968EA374E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	ctx->Push(_mode);
	ctx->Push(_radius);
	ctx->Push((int32_t) _keepEngineOn);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskStealthKill(bool& success, int32_t _killer, int32_t _target, uint32_t _stealthKillActionResultHash, float _desiredMoveBlendRatio, int32_t _stealthFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA5DC05579D60BD9);
	ctx->Reset();
	ctx->Push(_killer);
	ctx->Push(_target);
	ctx->Push(_stealthKillActionResultHash);
	ctx->Push(_desiredMoveBlendRatio);
	ctx->Push(_stealthFlags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskPlantBomb(bool& success, int32_t _ped, float _x, float _y, float _z, float _heading) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x965FEC691D55E9BF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskFollowNavMeshToCoord(bool& success, int32_t _ped, float _x, float _y, float _z, float _moveBlendRatio, int32_t _time, float _targetRadius, int32_t _flags, float _targetHeading) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15D3A79D4E44B913);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_moveBlendRatio);
	ctx->Push(_time);
	ctx->Push(_targetRadius);
	ctx->Push(_flags);
	ctx->Push(_targetHeading);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskFollowNavMeshToCoordAdvanced(bool& success, int32_t _ped, float _x, float _y, float _z, float _moveBlendRatio, int32_t _time, float _targetRadius, int32_t _flags, float _slideToCoordHeading, float _maxSlopeNavigable, float _clampMaxSearchDistance, float _targetHeading) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17F58B88D085DBAC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_moveBlendRatio);
	ctx->Push(_time);
	ctx->Push(_targetRadius);
	ctx->Push(_flags);
	ctx->Push(_slideToCoordHeading);
	ctx->Push(_maxSlopeNavigable);
	ctx->Push(_clampMaxSearchDistance);
	ctx->Push(_targetHeading);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedPathCanUseClimbovers(bool& success, int32_t _ped, uint8_t _Toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8E06A6FE76C9EFF4);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _Toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedPathCanUseLadders(bool& success, int32_t _ped, uint8_t _Toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77A5B103C87F476E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _Toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedPathCanDropFromHeight(bool& success, int32_t _ped, uint8_t _Toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE361C5C71C431A4F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _Toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedPathClimbCostModifier(bool& success, int32_t _ped, float _modifier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88E32DB8C1A4AA4B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_modifier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedPathMayEnterWater(bool& success, int32_t _ped, uint8_t _mayEnterWater) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF35425A4204367EC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _mayEnterWater);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedPathPreferToAvoidWater(bool& success, int32_t _ped, uint8_t _avoidWater) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x38FE1EC73743793C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _avoidWater);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedPathAvoidFire(bool& success, int32_t _ped, uint8_t _avoidFire) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4455517B28441E60);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _avoidFire);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGlobalMinBirdFlightHeight(bool& success, float _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C6B148586F934F7);
	ctx->Reset();
	ctx->Push(_height);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getNavmeshRouteDistanceRemaining(bool& success, int32_t _ped, float& _distanceRemaining, uint8_t& _isPathReady) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6F5C0BCDC74D62D);
	ctx->Reset();
	ctx->Push(_ped);
	auto ptr_distanceRemaining = _distanceRemaining;
	ctx->Push(&ptr_distanceRemaining);
	auto ptr_isPathReady = (int32_t) _isPathReady;
	ctx->Push(&ptr_isPathReady);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_distanceRemaining = ptr_distanceRemaining;
	_isPathReady = (bool) ptr_isPathReady;
	return ctx->ResultInt();
}

int32_t Native_getNavmeshRouteResult(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x632E831F382A0FA8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isControlledVehicleUnableToGetToRoad(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E38E28A1D80DDF6);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_taskGoToCoordAnyMeans(bool& success, int32_t _ped, float _x, float _y, float _z, float _moveBlendRatio, int32_t _vehicle, uint8_t _useLongRangeVehiclePathing, int32_t _drivingFlags, float _maxRangeToShootTargets) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BC448CB78FA3E88);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_moveBlendRatio);
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _useLongRangeVehiclePathing);
	ctx->Push(_drivingFlags);
	ctx->Push(_maxRangeToShootTargets);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskGoToCoordAnyMeansExtraParams(bool& success, int32_t _ped, float _x, float _y, float _z, float _moveBlendRatio, int32_t _vehicle, uint8_t _useLongRangeVehiclePathing, int32_t _drivingFlags, float _maxRangeToShootTargets, float _extraVehToTargetDistToPreferVehicle, float _driveStraightLineDistance, int32_t _extraFlags, float _warpTimerMS) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DD45F9ECFDB1BC9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_moveBlendRatio);
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _useLongRangeVehiclePathing);
	ctx->Push(_drivingFlags);
	ctx->Push(_maxRangeToShootTargets);
	ctx->Push(_extraVehToTargetDistToPreferVehicle);
	ctx->Push(_driveStraightLineDistance);
	ctx->Push(_extraFlags);
	ctx->Push(_warpTimerMS);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(bool& success, int32_t _ped, float _x, float _y, float _z, float _moveBlendRatio, int32_t _vehicle, uint8_t _useLongRangeVehiclePathing, int32_t _drivingFlags, float _maxRangeToShootTargets, float _extraVehToTargetDistToPreferVehicle, float _driveStraightLineDistance, int32_t _extraFlags, float _cruiseSpeed, float _targetArriveDist) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8ECD61F531A7B02);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_moveBlendRatio);
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _useLongRangeVehiclePathing);
	ctx->Push(_drivingFlags);
	ctx->Push(_maxRangeToShootTargets);
	ctx->Push(_extraVehToTargetDistToPreferVehicle);
	ctx->Push(_driveStraightLineDistance);
	ctx->Push(_extraFlags);
	ctx->Push(_cruiseSpeed);
	ctx->Push(_targetArriveDist);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskPlayAnim(bool& success, int32_t _ped, const char* _animDictionary, const char* _animationName, float _blendInSpeed, float _blendOutSpeed, int32_t _duration, int32_t _flag, float _playbackRate, uint8_t _lockX, uint8_t _lockY, uint8_t _lockZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA47FE3719165B94);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_animDictionary));
	ctx->Push(SaveString(_animationName));
	ctx->Push(_blendInSpeed);
	ctx->Push(_blendOutSpeed);
	ctx->Push(_duration);
	ctx->Push(_flag);
	ctx->Push(_playbackRate);
	ctx->Push((int32_t) _lockX);
	ctx->Push((int32_t) _lockY);
	ctx->Push((int32_t) _lockZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskPlayAnimAdvanced(bool& success, int32_t _ped, const char* _animDict, const char* _animName, float _posX, float _posY, float _posZ, float _rotX, float _rotY, float _rotZ, float _animEnterSpeed, float _animExitSpeed, int32_t _duration, int32_t _flag, float _animTime, int32_t _rotOrder, int32_t _ikFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83CDB10EA29B370B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_animDict));
	ctx->Push(SaveString(_animName));
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_animEnterSpeed);
	ctx->Push(_animExitSpeed);
	ctx->Push(_duration);
	ctx->Push(_flag);
	ctx->Push(_animTime);
	ctx->Push(_rotOrder);
	ctx->Push(_ikFlags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopAnimTask(bool& success, int32_t _entity, const char* _animDictionary, const char* _animationName, float _blendDelta) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97FF36A1D40EA00A);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(SaveString(_animDictionary));
	ctx->Push(SaveString(_animationName));
	ctx->Push(_blendDelta);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskScriptedAnimation(bool& success, int32_t _ped, int32_t& _priorityLowData, int32_t& _priorityMidData, int32_t& _priorityHighData, float _blendInDelta, float _blendOutDelta) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x126EF75F1E17ABE5);
	ctx->Reset();
	ctx->Push(_ped);
	auto ptr_priorityLowData = _priorityLowData;
	ctx->Push(&ptr_priorityLowData);
	auto ptr_priorityMidData = _priorityMidData;
	ctx->Push(&ptr_priorityMidData);
	auto ptr_priorityHighData = _priorityHighData;
	ctx->Push(&ptr_priorityHighData);
	ctx->Push(_blendInDelta);
	ctx->Push(_blendOutDelta);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_priorityLowData = ptr_priorityLowData;
	_priorityMidData = ptr_priorityMidData;
	_priorityHighData = ptr_priorityHighData;
}

void Native_playEntityScriptedAnim(bool& success, int32_t _entity, int32_t& _priorityLowData, int32_t& _priorityMidData, int32_t& _priorityHighData, float _blendInDelta, float _blendOutDelta) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77A1EEC547E7FCF1);
	ctx->Reset();
	ctx->Push(_entity);
	auto ptr_priorityLowData = _priorityLowData;
	ctx->Push(&ptr_priorityLowData);
	auto ptr_priorityMidData = _priorityMidData;
	ctx->Push(&ptr_priorityMidData);
	auto ptr_priorityHighData = _priorityHighData;
	ctx->Push(&ptr_priorityHighData);
	ctx->Push(_blendInDelta);
	ctx->Push(_blendOutDelta);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_priorityLowData = ptr_priorityLowData;
	_priorityMidData = ptr_priorityMidData;
	_priorityHighData = ptr_priorityHighData;
}

void Native_stopAnimPlayback(bool& success, int32_t _entity, int32_t _priority, uint8_t _secondary) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE08C992D238C5D1);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_priority);
	ctx->Push((int32_t) _secondary);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAnimWeight(bool& success, int32_t _entity, float _weight, int32_t _priority, int32_t _index, uint8_t _secondary) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x207F1A47C0342F48);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_weight);
	ctx->Push(_priority);
	ctx->Push(_index);
	ctx->Push((int32_t) _secondary);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAnimPhase(bool& success, int32_t _entity, float _phase, int32_t _priority, uint8_t _secondary) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDDF3CB5A0A4C0B49);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_phase);
	ctx->Push(_priority);
	ctx->Push((int32_t) _secondary);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAnimRate(bool& success, int32_t _entity, float _rate, int32_t _priority, uint8_t _secondary) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x032D49C5E359C847);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_rate);
	ctx->Push(_priority);
	ctx->Push((int32_t) _secondary);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAnimLooped(bool& success, int32_t _entity, uint8_t _looped, int32_t _priority, uint8_t _secondary) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70033C3CC29A1FF4);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push((int32_t) _looped);
	ctx->Push(_priority);
	ctx->Push((int32_t) _secondary);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskPlayPhoneGestureAnimation(bool& success, int32_t _ped, const char* _animDict, const char* _animation, const char* _boneMaskType, float _blendInDuration, float _blendOutDuration, uint8_t _isLooping, uint8_t _holdLastFrame) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8FBB6758B3B3E9EC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_animDict));
	ctx->Push(SaveString(_animation));
	ctx->Push(SaveString(_boneMaskType));
	ctx->Push(_blendInDuration);
	ctx->Push(_blendOutDuration);
	ctx->Push((int32_t) _isLooping);
	ctx->Push((int32_t) _holdLastFrame);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskStopPhoneGestureAnimation(bool& success, int32_t _ped, float _blendOutOverride) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3FA00D4F4641BFAE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_blendOutOverride);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPlayingPhoneGestureAnim(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8EBB1E9D3588C10);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

float Native_getPhoneGestureAnimCurrentTime(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x47619ABE8B268C60);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getPhoneGestureAnimTotalTime(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1EE0F68A7C25DEC6);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_taskVehiclePlayAnim(bool& success, int32_t _vehicle, const char* _animationSet, const char* _animationName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x69F5C3BD0F3EBD89);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(SaveString(_animationSet));
	ctx->Push(SaveString(_animationName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskLookAtCoord(bool& success, int32_t _entity, float _x, float _y, float _z, int32_t _duration, int32_t _flags, int32_t _priority) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6FA46612594F7973);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_duration);
	ctx->Push(_flags);
	ctx->Push(_priority);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskLookAtEntity(bool& success, int32_t _ped, int32_t _lookAt, int32_t _duration, int32_t _flags, int32_t _priority) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x69F4BE8C8CC4796C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_lookAt);
	ctx->Push(_duration);
	ctx->Push(_flags);
	ctx->Push(_priority);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskClearLookAt(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F804F1DB19B9689);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_openSequenceTask(bool& success, int32_t& _taskSequenceId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE8854A4326B9E12B);
	ctx->Reset();
	auto ptr_taskSequenceId = _taskSequenceId;
	ctx->Push(&ptr_taskSequenceId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_taskSequenceId = ptr_taskSequenceId;
}

void Native_closeSequenceTask(bool& success, int32_t _taskSequenceId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39E72BC99E6360CB);
	ctx->Reset();
	ctx->Push(_taskSequenceId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskPerformSequence(bool& success, int32_t _ped, int32_t _taskSequenceId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5ABA3986D90D8A3B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_taskSequenceId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskPerformSequenceLocally(bool& success, int32_t _ped, int32_t _taskSequenceId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C33220C8D78CA0D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_taskSequenceId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearSequenceTask(bool& success, int32_t& _taskSequenceId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3841422E9C488D8C);
	ctx->Reset();
	auto ptr_taskSequenceId = _taskSequenceId;
	ctx->Push(&ptr_taskSequenceId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_taskSequenceId = ptr_taskSequenceId;
}

void Native_setSequenceToRepeat(bool& success, int32_t _taskSequenceId, uint8_t _repeat) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58C70CF3A41E4AE7);
	ctx->Reset();
	ctx->Push(_taskSequenceId);
	ctx->Push((int32_t) _repeat);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getSequenceProgress(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x00A9010CFE1E3533);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_getIsTaskActive(bool& success, int32_t _ped, int32_t _taskIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB0760331C7AA4155);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_taskIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getScriptTaskStatus(bool& success, int32_t _ped, uint32_t _taskHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77F1BEB8863288D5);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_taskHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getActiveVehicleMissionType(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x534AEBA6E5ED4CAB);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_taskLeaveAnyVehicle(bool& success, int32_t _ped, int32_t _delayTime, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x504D54DF3F6F2247);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_delayTime);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskAimGunScripted(bool& success, int32_t _ped, uint32_t _scriptTask, uint8_t _disableBlockingClip, uint8_t _instantBlendToAim) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A192BE16D373D00);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_scriptTask);
	ctx->Push((int32_t) _disableBlockingClip);
	ctx->Push((int32_t) _instantBlendToAim);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskAimGunScriptedWithTarget(bool& success, int32_t _ped, int32_t _target, float _x, float _y, float _z, int32_t _gunTaskType, uint8_t _disableBlockingClip, uint8_t _forceAim) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8605AF0DE8B3A5AC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_gunTaskType);
	ctx->Push((int32_t) _disableBlockingClip);
	ctx->Push((int32_t) _forceAim);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_updateTaskAimGunScriptedTarget(bool& success, int32_t _ped, int32_t _target, float _x, float _y, float _z, uint8_t _disableBlockingClip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9724FB59A3E72AD0);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _disableBlockingClip);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

const char* Native_getClipSetForScriptedGunTask(bool& success, int32_t _gunTaskType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A8CADC7D37AACC5);
	ctx->Reset();
	ctx->Push(_gunTaskType);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

void Native_taskAimGunAtEntity(bool& success, int32_t _ped, int32_t _entity, int32_t _duration, uint8_t _instantBlendToAim) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B53BB6E8943AF53);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_entity);
	ctx->Push(_duration);
	ctx->Push((int32_t) _instantBlendToAim);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskTurnPedToFaceEntity(bool& success, int32_t _ped, int32_t _entity, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5AD23D40115353AC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_entity);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskAimGunAtCoord(bool& success, int32_t _ped, float _x, float _y, float _z, int32_t _time, uint8_t _instantBlendToAim, uint8_t _playAnimIntro) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6671F3EEC681BDA1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_time);
	ctx->Push((int32_t) _instantBlendToAim);
	ctx->Push((int32_t) _playAnimIntro);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskShootAtCoord(bool& success, int32_t _ped, float _x, float _y, float _z, int32_t _duration, uint32_t _firingPattern) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46A6CC01E0826106);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_duration);
	ctx->Push(_firingPattern);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskShuffleToNextVehicleSeat(bool& success, int32_t _ped, int32_t _vehicle, uint8_t _useAlternateShuffle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7AA80209BDA643EB);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _useAlternateShuffle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearPedTasks(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE1EF3C1216AFF2CD);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearPedSecondaryTask(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x176CECF6F920D707);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskEveryoneLeaveVehicle(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F93691AB4B92272);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskGotoEntityOffset(bool& success, int32_t _ped, int32_t _entity, int32_t _time, float _seekRadius, float _seekAngleDeg, float _moveBlendRatio, int32_t _gotoEntityOffsetFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE39B4FF4FDEBDE27);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_entity);
	ctx->Push(_time);
	ctx->Push(_seekRadius);
	ctx->Push(_seekAngleDeg);
	ctx->Push(_moveBlendRatio);
	ctx->Push(_gotoEntityOffsetFlags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskGotoEntityOffsetXy(bool& success, int32_t _ped, int32_t _entity, int32_t _duration, float _targetRadius, float _offsetX, float _offsetY, float _moveBlendRatio, int32_t _gotoEntityOffsetFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x338E7EF52B6095A9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_entity);
	ctx->Push(_duration);
	ctx->Push(_targetRadius);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_moveBlendRatio);
	ctx->Push(_gotoEntityOffsetFlags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskTurnPedToFaceCoord(bool& success, int32_t _ped, float _x, float _y, float _z, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DDA930A0AC38571);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskVehicleTempAction(bool& success, int32_t _driver, int32_t _vehicle, int32_t _action, int32_t _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC429DCEEB339E129);
	ctx->Reset();
	ctx->Push(_driver);
	ctx->Push(_vehicle);
	ctx->Push(_action);
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskVehicleMission(bool& success, int32_t _driver, int32_t _vehicle, int32_t _vehicleTarget, int32_t _missionType, float _cruiseSpeed, int32_t _drivingStyle, float _targetReached, float _straightLineDistance, uint8_t _DriveAgainstTraffic) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x659427E0EF36BCDE);
	ctx->Reset();
	ctx->Push(_driver);
	ctx->Push(_vehicle);
	ctx->Push(_vehicleTarget);
	ctx->Push(_missionType);
	ctx->Push(_cruiseSpeed);
	ctx->Push(_drivingStyle);
	ctx->Push(_targetReached);
	ctx->Push(_straightLineDistance);
	ctx->Push((int32_t) _DriveAgainstTraffic);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskVehicleMissionPedTarget(bool& success, int32_t _ped, int32_t _vehicle, int32_t _pedTarget, int32_t _missionType, float _maxSpeed, int32_t _drivingStyle, float _minDistance, float _straightLineDistance, uint8_t _DriveAgainstTraffic) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9454528DF15D657A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_pedTarget);
	ctx->Push(_missionType);
	ctx->Push(_maxSpeed);
	ctx->Push(_drivingStyle);
	ctx->Push(_minDistance);
	ctx->Push(_straightLineDistance);
	ctx->Push((int32_t) _DriveAgainstTraffic);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskVehicleMissionCoorsTarget(bool& success, int32_t _ped, int32_t _vehicle, float _x, float _y, float _z, int32_t _mission, float _cruiseSpeed, int32_t _drivingStyle, float _targetReached, float _straightLineDistance, uint8_t _DriveAgainstTraffic) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0AF20AA7731F8C3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_mission);
	ctx->Push(_cruiseSpeed);
	ctx->Push(_drivingStyle);
	ctx->Push(_targetReached);
	ctx->Push(_straightLineDistance);
	ctx->Push((int32_t) _DriveAgainstTraffic);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskVehicleEscort(bool& success, int32_t _ped, int32_t _vehicle, int32_t _targetVehicle, int32_t _mode, float _speed, int32_t _drivingStyle, float _minDistance, int32_t _minHeightAboveTerrain, float _noRoadsDistance) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0FA6E4B75F302400);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_targetVehicle);
	ctx->Push(_mode);
	ctx->Push(_speed);
	ctx->Push(_drivingStyle);
	ctx->Push(_minDistance);
	ctx->Push(_minHeightAboveTerrain);
	ctx->Push(_noRoadsDistance);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskVehicleFollow(bool& success, int32_t _driver, int32_t _vehicle, int32_t _targetEntity, float _speed, int32_t _drivingStyle, int32_t _minDistance) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC545A9F0626E3B6);
	ctx->Reset();
	ctx->Push(_driver);
	ctx->Push(_vehicle);
	ctx->Push(_targetEntity);
	ctx->Push(_speed);
	ctx->Push(_drivingStyle);
	ctx->Push(_minDistance);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskVehicleChase(bool& success, int32_t _driver, int32_t _targetEnt) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C08A8E30363B353);
	ctx->Reset();
	ctx->Push(_driver);
	ctx->Push(_targetEnt);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskVehicleHeliProtect(bool& success, int32_t _pilot, int32_t _vehicle, int32_t _entityToFollow, float _targetSpeed, int32_t _drivingFlags, float _radius, int32_t _altitude, int32_t _heliFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E09C32048FEFD1C);
	ctx->Reset();
	ctx->Push(_pilot);
	ctx->Push(_vehicle);
	ctx->Push(_entityToFollow);
	ctx->Push(_targetSpeed);
	ctx->Push(_drivingFlags);
	ctx->Push(_radius);
	ctx->Push(_altitude);
	ctx->Push(_heliFlags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTaskVehicleChaseBehaviorFlag(bool& success, int32_t _ped, int32_t _flag, uint8_t _set) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCC665AAC360D31E7);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_flag);
	ctx->Push((int32_t) _set);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTaskVehicleChaseIdealPursuitDistance(bool& success, int32_t _ped, float _distance) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x639B642FACBE4EDD);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_distance);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskHeliChase(bool& success, int32_t _pilot, int32_t _entityToFollow, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC83B1DB38D0ADA0);
	ctx->Reset();
	ctx->Push(_pilot);
	ctx->Push(_entityToFollow);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskPlaneChase(bool& success, int32_t _pilot, int32_t _entityToFollow, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D2386F273FF7A25);
	ctx->Reset();
	ctx->Push(_pilot);
	ctx->Push(_entityToFollow);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskPlaneLand(bool& success, int32_t _pilot, int32_t _plane, float _runwayStartX, float _runwayStartY, float _runwayStartZ, float _runwayEndX, float _runwayEndY, float _runwayEndZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF19721FA34D32C0);
	ctx->Reset();
	ctx->Push(_pilot);
	ctx->Push(_plane);
	ctx->Push(_runwayStartX);
	ctx->Push(_runwayStartY);
	ctx->Push(_runwayStartZ);
	ctx->Push(_runwayEndX);
	ctx->Push(_runwayEndY);
	ctx->Push(_runwayEndZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearDefaultPrimaryTask(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6100B3CEFD43452E);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearPrimaryVehicleTask(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDBBC7A2432524127);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearVehicleCrashTask(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53DDC75BC3AC0A90);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskPlaneGotoPreciseVtol(bool& success, int32_t _ped, int32_t _vehicle, float _x, float _y, float _z, int32_t _flightHeight, int32_t _minHeightAboveTerrain, uint8_t _useDesiredOrientation, float _desiredOrientation, uint8_t _autopilot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF7F9DCCA89E7505B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_flightHeight);
	ctx->Push(_minHeightAboveTerrain);
	ctx->Push((int32_t) _useDesiredOrientation);
	ctx->Push(_desiredOrientation);
	ctx->Push((int32_t) _autopilot);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskSubmarineGotoAndStop(bool& success, int32_t _ped, int32_t _submarine, float _x, float _y, float _z, uint8_t _autopilot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC22B40579A498CA4);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_submarine);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _autopilot);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskHeliMission(bool& success, int32_t _pilot, int32_t _aircraft, int32_t _targetVehicle, int32_t _targetPed, float _destinationX, float _destinationY, float _destinationZ, int32_t _missionFlag, float _maxSpeed, float _radius, float _targetHeading, int32_t _maxHeight, int32_t _minHeight, float _slowDownDistance, int32_t _behaviorFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDAD029E187A2BEB4);
	ctx->Reset();
	ctx->Push(_pilot);
	ctx->Push(_aircraft);
	ctx->Push(_targetVehicle);
	ctx->Push(_targetPed);
	ctx->Push(_destinationX);
	ctx->Push(_destinationY);
	ctx->Push(_destinationZ);
	ctx->Push(_missionFlag);
	ctx->Push(_maxSpeed);
	ctx->Push(_radius);
	ctx->Push(_targetHeading);
	ctx->Push(_maxHeight);
	ctx->Push(_minHeight);
	ctx->Push(_slowDownDistance);
	ctx->Push(_behaviorFlags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskHeliEscortHeli(bool& success, int32_t _pilot, int32_t _heli1, int32_t _heli2, float _offsetX, float _offsetY, float _offsetZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB385523325077210);
	ctx->Reset();
	ctx->Push(_pilot);
	ctx->Push(_heli1);
	ctx->Push(_heli2);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskPlaneMission(bool& success, int32_t _pilot, int32_t _aircraft, int32_t _targetVehicle, int32_t _targetPed, float _destinationX, float _destinationY, float _destinationZ, int32_t _missionFlag, float _angularDrag, float _targetReached, float _targetHeading, float _maxZ, float _minZ, uint8_t _precise) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23703CD154E83B88);
	ctx->Reset();
	ctx->Push(_pilot);
	ctx->Push(_aircraft);
	ctx->Push(_targetVehicle);
	ctx->Push(_targetPed);
	ctx->Push(_destinationX);
	ctx->Push(_destinationY);
	ctx->Push(_destinationZ);
	ctx->Push(_missionFlag);
	ctx->Push(_angularDrag);
	ctx->Push(_targetReached);
	ctx->Push(_targetHeading);
	ctx->Push(_maxZ);
	ctx->Push(_minZ);
	ctx->Push((int32_t) _precise);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskPlaneTaxi(bool& success, int32_t _pilot, int32_t _aircraft, float _x, float _y, float _z, float _cruiseSpeed, float _targetReached) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92C360B5F15D2302);
	ctx->Reset();
	ctx->Push(_pilot);
	ctx->Push(_aircraft);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_cruiseSpeed);
	ctx->Push(_targetReached);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskBoatMission(bool& success, int32_t _pedDriver, int32_t _vehicle, int32_t _targetVehicle, int32_t _targetPed, float _x, float _y, float _z, int32_t _mission, float _maxSpeed, int32_t _drivingStyle, float _targetReached, int32_t _boatFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15C86013127CE63F);
	ctx->Reset();
	ctx->Push(_pedDriver);
	ctx->Push(_vehicle);
	ctx->Push(_targetVehicle);
	ctx->Push(_targetPed);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_mission);
	ctx->Push(_maxSpeed);
	ctx->Push(_drivingStyle);
	ctx->Push(_targetReached);
	ctx->Push(_boatFlags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskDriveBy(bool& success, int32_t _driverPed, int32_t _targetPed, int32_t _targetVehicle, float _targetX, float _targetY, float _targetZ, float _distanceToShoot, int32_t _pedAccuracy, uint8_t _pushUnderneathDrivingTaskIfDriving, uint32_t _firingPattern) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F8AF0E82773A171);
	ctx->Reset();
	ctx->Push(_driverPed);
	ctx->Push(_targetPed);
	ctx->Push(_targetVehicle);
	ctx->Push(_targetX);
	ctx->Push(_targetY);
	ctx->Push(_targetZ);
	ctx->Push(_distanceToShoot);
	ctx->Push(_pedAccuracy);
	ctx->Push((int32_t) _pushUnderneathDrivingTaskIfDriving);
	ctx->Push(_firingPattern);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDrivebyTaskTarget(bool& success, int32_t _shootingPed, int32_t _targetPed, int32_t _targetVehicle, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE5B302114D8162EE);
	ctx->Reset();
	ctx->Push(_shootingPed);
	ctx->Push(_targetPed);
	ctx->Push(_targetVehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearDrivebyTaskUnderneathDrivingTask(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC35B5CDB2824CF69);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isDrivebyTaskUnderneathDrivingTask(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8785E6E40C7A8818);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_controlMountedWeapon(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCFE42068FE0135A);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setMountedWeaponTarget(bool& success, int32_t _shootingPed, int32_t _targetPed, int32_t _targetVehicle, float _x, float _y, float _z, int32_t _taskMode, uint8_t _ignoreTargetVehDeadCheck) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCCD892192C6D2BB9);
	ctx->Reset();
	ctx->Push(_shootingPed);
	ctx->Push(_targetPed);
	ctx->Push(_targetVehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_taskMode);
	ctx->Push((int32_t) _ignoreTargetVehDeadCheck);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isMountedWeaponTaskUnderneathDrivingTask(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA320EF046186FA3B);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_taskUseMobilePhone(bool& success, int32_t _ped, uint8_t _usePhone, int32_t _desiredPhoneMode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD2A8EC3AF4DE7DB);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _usePhone);
	ctx->Push(_desiredPhoneMode);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskUseMobilePhoneTimed(bool& success, int32_t _ped, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5EE02954A14C69DB);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskChatToPed(bool& success, int32_t _ped, int32_t _target, int32_t _flags, float _goToLocationX, float _goToLocationY, float _goToLocationZ, float _headingDegs, float _idleTime) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C338E0263E4FD19);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	ctx->Push(_flags);
	ctx->Push(_goToLocationX);
	ctx->Push(_goToLocationY);
	ctx->Push(_goToLocationZ);
	ctx->Push(_headingDegs);
	ctx->Push(_idleTime);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskWarpPedIntoVehicle(bool& success, int32_t _ped, int32_t _vehicle, int32_t _seat) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A7D091411C5F684);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_seat);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskShootAtEntity(bool& success, int32_t _entity, int32_t _target, int32_t _duration, uint32_t _firingPattern) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x08DA95E8298AE772);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_target);
	ctx->Push(_duration);
	ctx->Push(_firingPattern);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskClimb(bool& success, int32_t _ped, uint8_t _usePlayerLaunchForce) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x89D9FCC2435112F1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _usePlayerLaunchForce);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskClimbLadder(bool& success, int32_t _ped, uint8_t _fast) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB6C987F9285A3814);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _fast);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskRappelDownWallUsingClipsetOverride(bool& success, int32_t _ped, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _minZ, int32_t _ropeHandle, const char* _clipSet, int32_t _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEAF66ACDDC794793);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_minZ);
	ctx->Push(_ropeHandle);
	ctx->Push(SaveString(_clipSet));
	ctx->Push(_p10);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getTaskRappelDownWallState(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D252648778160DF);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_clearPedTasksImmediately(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAAA34F8A7CB32098);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskPerformSequenceFromProgress(bool& success, int32_t _ped, int32_t _taskIndex, int32_t _progress1, int32_t _progress2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x89221B16730234F0);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_taskIndex);
	ctx->Push(_progress1);
	ctx->Push(_progress2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setNextDesiredMoveState(bool& success, float _nextMoveState) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1B9F16E89E2C93A);
	ctx->Reset();
	ctx->Push(_nextMoveState);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedDesiredMoveBlendRatio(bool& success, int32_t _ped, float _newMoveBlendRatio) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E982AC8716912C5);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_newMoveBlendRatio);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getPedDesiredMoveBlendRatio(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8517D4A6CA8513ED);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_taskGotoEntityAiming(bool& success, int32_t _ped, int32_t _target, float _distanceToStopAt, float _StartAimingDist) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9DA48FAB8A76C12);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	ctx->Push(_distanceToStopAt);
	ctx->Push(_StartAimingDist);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskSetDecisionMaker(bool& success, int32_t _ped, uint32_t _decisionMakerId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB8517DDA73720DA);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_decisionMakerId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskSetSphereDefensiveArea(bool& success, int32_t _ped, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x933C06518B52A9A4);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskClearDefensiveArea(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95A6C46A31D1917D);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskPedSlideToCoord(bool& success, int32_t _ped, float _x, float _y, float _z, float _heading, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD04FE6765D990A06);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskPedSlideToCoordHdgRate(bool& success, int32_t _ped, float _x, float _y, float _z, float _heading, float _speed, float _headingChangeRate) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A4A6A6D3DC64F52);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	ctx->Push(_speed);
	ctx->Push(_headingChangeRate);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_addCoverPoint(bool& success, float _x, float _y, float _z, float _direction, int32_t _usage, int32_t _height, int32_t _arc, uint8_t _isPriority) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD5C12A75C7B9497F);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_direction);
	ctx->Push(_usage);
	ctx->Push(_height);
	ctx->Push(_arc);
	ctx->Push((int32_t) _isPriority);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_removeCoverPoint(bool& success, int32_t _coverpoint) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE287C923D891715);
	ctx->Reset();
	ctx->Push(_coverpoint);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesScriptedCoverPointExistAtCoords(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA98B8E3C088E5A31);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

vector3_t Native_getScriptedCoverPointCoords(bool& success, int32_t _coverpoint) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x594A1028FC2A3E85);
	ctx->Reset();
	ctx->Push(_coverpoint);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

void Native_addScriptedCoverArea(bool& success, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28B7B9BFDAF274AA);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskCombatPed(bool& success, int32_t _ped, int32_t _targetPed, int32_t _combatFlags, int32_t _threatResponseFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF166E48407BAC484);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_targetPed);
	ctx->Push(_combatFlags);
	ctx->Push(_threatResponseFlags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskCombatPedTimed(bool& success, int32_t _ped, int32_t _target, int32_t _time, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x944F30DCB7096BDE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	ctx->Push(_time);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskSeekCoverFromPos(bool& success, int32_t _ped, float _x, float _y, float _z, int32_t _duration, uint8_t _allowPeekingAndFiring) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75AC2B60386D89F2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_duration);
	ctx->Push((int32_t) _allowPeekingAndFiring);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskSeekCoverFromPed(bool& success, int32_t _ped, int32_t _target, int32_t _duration, uint8_t _allowPeekingAndFiring) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84D32B3BEC531324);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	ctx->Push(_duration);
	ctx->Push((int32_t) _allowPeekingAndFiring);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskSeekCoverToCoverPoint(bool& success, int32_t _ped, int32_t _coverpoint, float _x, float _y, float _z, int32_t _time, uint8_t _allowPeekingAndFiring) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD43D95C7A869447F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_coverpoint);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_time);
	ctx->Push((int32_t) _allowPeekingAndFiring);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskSeekCoverToCoords(bool& success, int32_t _ped, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _timeout, uint8_t _shortRoute) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39246A6958EF072C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_timeout);
	ctx->Push((int32_t) _shortRoute);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskPutPedDirectlyIntoCover(bool& success, int32_t _ped, float _x, float _y, float _z, int32_t _time, uint8_t _allowPeekingAndFiring, float _blendInDuration, uint8_t _forceInitialFacingDirection, uint8_t _forceFaceLeft, int32_t _identifier, uint8_t _doEntry) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4172393E6BE1FECE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_time);
	ctx->Push((int32_t) _allowPeekingAndFiring);
	ctx->Push(_blendInDuration);
	ctx->Push((int32_t) _forceInitialFacingDirection);
	ctx->Push((int32_t) _forceFaceLeft);
	ctx->Push(_identifier);
	ctx->Push((int32_t) _doEntry);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskWarpPedDirectlyIntoCover(bool& success, int32_t _ped, int32_t _time, uint8_t _allowPeekingAndFiring, uint8_t _forceInitialFacingDirection, uint8_t _forceFaceLeft, int32_t _identifier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E01E9E8D89F8276);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_time);
	ctx->Push((int32_t) _allowPeekingAndFiring);
	ctx->Push((int32_t) _forceInitialFacingDirection);
	ctx->Push((int32_t) _forceFaceLeft);
	ctx->Push(_identifier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskExitCover(bool& success, int32_t _ped, int32_t _exitType, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x79B258E397854D29);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_exitType);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskPutPedDirectlyIntoMelee(bool& success, int32_t _ped, int32_t _meleeTarget, float _blendInDuration, float _timeInMelee, float _strafePhaseSync, int32_t _aiCombatFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C6CD14A876FFE39);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_meleeTarget);
	ctx->Push(_blendInDuration);
	ctx->Push(_timeInMelee);
	ctx->Push(_strafePhaseSync);
	ctx->Push(_aiCombatFlags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskToggleDuck(bool& success, int32_t _ped, int32_t _toggleType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC96609B9995EDF8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggleType);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskGuardCurrentPosition(bool& success, int32_t _ped, float _maxPatrolProximity, float _defensiveAreaRadius, uint8_t _setDefensiveArea) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A58A47A72E3FCB4);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_maxPatrolProximity);
	ctx->Push(_defensiveAreaRadius);
	ctx->Push((int32_t) _setDefensiveArea);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskGuardAssignedDefensiveArea(bool& success, int32_t _ped, float _x, float _y, float _z, float _heading, float _maxPatrolProximity, int32_t _timer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2A207EEBDF9889B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	ctx->Push(_maxPatrolProximity);
	ctx->Push(_timer);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskGuardSphereDefensiveArea(bool& success, int32_t _ped, float _defendPositionX, float _defendPositionY, float _defendPositionZ, float _heading, float _maxPatrolProximity, int32_t _time, float _x, float _y, float _z, float _defensiveAreaRadius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC946FE14BE0EB5E2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_defendPositionX);
	ctx->Push(_defendPositionY);
	ctx->Push(_defendPositionZ);
	ctx->Push(_heading);
	ctx->Push(_maxPatrolProximity);
	ctx->Push(_time);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_defensiveAreaRadius);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskStandGuard(bool& success, int32_t _ped, float _x, float _y, float _z, float _heading, const char* _scenarioName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE032F8BBA959E90);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	ctx->Push(SaveString(_scenarioName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDriveTaskCruiseSpeed(bool& success, int32_t _driver, float _cruiseSpeed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C9B84BD7D31D908);
	ctx->Reset();
	ctx->Push(_driver);
	ctx->Push(_cruiseSpeed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDriveTaskMaxCruiseSpeed(bool& success, int32_t _ped, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x404A5AA9B9F0B746);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDriveTaskDrivingStyle(bool& success, int32_t _ped, int32_t _drivingStyle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDACE1BE37D88AF67);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_drivingStyle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addCoverBlockingArea(bool& success, float _startX, float _startY, float _startZ, float _endX, float _endY, float _endZ, uint8_t _blockObjects, uint8_t _blockVehicles, uint8_t _blockMap, uint8_t _blockPlayer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45C597097DD7CB81);
	ctx->Reset();
	ctx->Push(_startX);
	ctx->Push(_startY);
	ctx->Push(_startZ);
	ctx->Push(_endX);
	ctx->Push(_endY);
	ctx->Push(_endZ);
	ctx->Push((int32_t) _blockObjects);
	ctx->Push((int32_t) _blockVehicles);
	ctx->Push((int32_t) _blockMap);
	ctx->Push((int32_t) _blockPlayer);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeAllCoverBlockingAreas(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB6708C0B46F56D8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeCoverBlockingAreasAtPosition(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA83CA6776038F64);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeSpecificCoverBlockingAreas(bool& success, float _startX, float _startY, float _startZ, float _endX, float _endY, float _endZ, uint8_t _blockObjects, uint8_t _blockVehicles, uint8_t _blockMap, uint8_t _blockPlayer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F351CF1C6475734);
	ctx->Reset();
	ctx->Push(_startX);
	ctx->Push(_startY);
	ctx->Push(_startZ);
	ctx->Push(_endX);
	ctx->Push(_endY);
	ctx->Push(_endZ);
	ctx->Push((int32_t) _blockObjects);
	ctx->Push((int32_t) _blockVehicles);
	ctx->Push((int32_t) _blockMap);
	ctx->Push((int32_t) _blockPlayer);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskStartScenarioInPlace(bool& success, int32_t _ped, const char* _scenarioName, int32_t _unkDelay, uint8_t _playEnterAnim) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x142A02425FF02BD9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_scenarioName));
	ctx->Push(_unkDelay);
	ctx->Push((int32_t) _playEnterAnim);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskStartScenarioAtPosition(bool& success, int32_t _ped, const char* _scenarioName, float _x, float _y, float _z, float _heading, int32_t _duration, uint8_t _sittingScenario, uint8_t _teleport) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA4EFC79F69D4F07);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_scenarioName));
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	ctx->Push(_duration);
	ctx->Push((int32_t) _sittingScenario);
	ctx->Push((int32_t) _teleport);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskUseNearestScenarioToCoord(bool& success, int32_t _ped, float _x, float _y, float _z, float _distance, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x277F471BA9DB000B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_distance);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskUseNearestScenarioToCoordWarp(bool& success, int32_t _ped, float _x, float _y, float _z, float _radius, int32_t _timeToLeave) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58E2E0F23F6B76C3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_timeToLeave);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskUseNearestScenarioChainToCoord(bool& success, int32_t _ped, float _x, float _y, float _z, float _maxRange, int32_t _timeToLeave) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9FDA1B3D7E7028B3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_maxRange);
	ctx->Push(_timeToLeave);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskUseNearestScenarioChainToCoordWarp(bool& success, int32_t _ped, float _x, float _y, float _z, float _radius, int32_t _timeToLeave) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97A28E63F0BA5631);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_timeToLeave);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesScenarioExistInArea(bool& success, float _x, float _y, float _z, float _radius, uint8_t _mustBeFree) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A59271FFADD33C1);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push((int32_t) _mustBeFree);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_doesScenarioOfTypeExistInArea(bool& success, float _x, float _y, float _z, const char* _scenarioName, float _radius, uint8_t _mustBeFree) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A9D0C2A3BBC86C1);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(SaveString(_scenarioName));
	ctx->Push(_radius);
	ctx->Push((int32_t) _mustBeFree);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isScenarioOccupied(bool& success, float _x, float _y, float _z, float _maxRange, uint8_t _onlyUsersActuallyAtScenario) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x788756D73AC2E07C);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_maxRange);
	ctx->Push((int32_t) _onlyUsersActuallyAtScenario);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_pedHasUseScenarioTask(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x295E3CCEC879CCD7);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_playAnimOnRunningScenario(bool& success, int32_t _ped, const char* _animDict, const char* _animName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x748040460F8DF5DC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_animDict));
	ctx->Push(SaveString(_animName));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesScenarioGroupExist(bool& success, const char* _scenarioGroup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9034C136C9E00D3);
	ctx->Reset();
	ctx->Push(SaveString(_scenarioGroup));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isScenarioGroupEnabled(bool& success, const char* _scenarioGroup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x367A09DED4E05B99);
	ctx->Reset();
	ctx->Push(SaveString(_scenarioGroup));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setScenarioGroupEnabled(bool& success, const char* _scenarioGroup, uint8_t _enabled) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02C8E5B49848664E);
	ctx->Reset();
	ctx->Push(SaveString(_scenarioGroup));
	ctx->Push((int32_t) _enabled);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetScenarioGroupsEnabled(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD902D0349AFAD3A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setExclusiveScenarioGroup(bool& success, const char* _scenarioGroup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x535E97E1F7FC0C6A);
	ctx->Reset();
	ctx->Push(SaveString(_scenarioGroup));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetExclusiveScenarioGroup(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4202BBCB8684563D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isScenarioTypeEnabled(bool& success, const char* _scenarioType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A815DB3EA088722);
	ctx->Reset();
	ctx->Push(SaveString(_scenarioType));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setScenarioTypeEnabled(bool& success, const char* _scenarioType, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB47EC4E34FB7EE1);
	ctx->Reset();
	ctx->Push(SaveString(_scenarioType));
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetScenarioTypesEnabled(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0D40EE2A7F2B2D6D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedActiveInScenario(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA135F9482C82CC3);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedPlayingBaseClipInScenario(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x621C6E4729388E41);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPedCanPlayAmbientIdles(bool& success, int32_t _ped, uint8_t _blockIdleClips, uint8_t _removeIdleClipIfPlaying) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8FD89A6240813FD0);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _blockIdleClips);
	ctx->Push((int32_t) _removeIdleClipIfPlaying);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskCombatHatedTargetsInArea(bool& success, int32_t _ped, float _x, float _y, float _z, float _radius, int32_t _combatFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4CF5F55DAC3280A0);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_combatFlags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskCombatHatedTargetsAroundPed(bool& success, int32_t _ped, float _radius, int32_t _combatFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7BF835BB9E2698C8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_radius);
	ctx->Push(_combatFlags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskCombatHatedTargetsAroundPedTimed(bool& success, int32_t _ped, float _radius, int32_t _time, int32_t _combatFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2BBA30B854534A0C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_radius);
	ctx->Push(_time);
	ctx->Push(_combatFlags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskThrowProjectile(bool& success, int32_t _ped, float _x, float _y, float _z, int32_t _ignoreCollisionEntityIndex, uint8_t _createInvincibleProjectile) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7285951DBF6B5A51);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_ignoreCollisionEntityIndex);
	ctx->Push((int32_t) _createInvincibleProjectile);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskSwapWeapon(bool& success, int32_t _ped, uint8_t _drawWeapon) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA21C51255B205245);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _drawWeapon);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskReloadWeapon(bool& success, int32_t _ped, uint8_t _drawWeapon) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62D2916F56B9CD2D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _drawWeapon);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedGettingUp(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A74E1D5F2F00EEC);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_taskWrithe(bool& success, int32_t _ped, int32_t _target, int32_t _minFireLoops, int32_t _startState, uint8_t _forceShootOnGround, int32_t _shootFromGroundTimer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCDDC2B77CE54AC6E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	ctx->Push(_minFireLoops);
	ctx->Push(_startState);
	ctx->Push((int32_t) _forceShootOnGround);
	ctx->Push(_shootFromGroundTimer);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedInWrithe(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDEB6D52126E7D640);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_openPatrolRoute(bool& success, const char* _patrolRoute) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA36BFB5EE89F3D82);
	ctx->Reset();
	ctx->Push(SaveString(_patrolRoute));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_closePatrolRoute(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB043ECA801B8CBC1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addPatrolRouteNode(bool& success, int32_t _nodeId, const char* _nodeType, float _posX, float _posY, float _posZ, float _headingX, float _headingY, float _headingZ, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8EDF950167586B7C);
	ctx->Reset();
	ctx->Push(_nodeId);
	ctx->Push(SaveString(_nodeType));
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_headingX);
	ctx->Push(_headingY);
	ctx->Push(_headingZ);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addPatrolRouteLink(bool& success, int32_t _nodeId1, int32_t _nodeId2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23083260DEC3A551);
	ctx->Reset();
	ctx->Push(_nodeId1);
	ctx->Push(_nodeId2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_createPatrolRoute(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF8A443CCC8018DC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_deletePatrolRoute(bool& success, const char* _patrolRoute) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7767DD9D65E91319);
	ctx->Reset();
	ctx->Push(SaveString(_patrolRoute));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getPatrolTaskInfo(bool& success, int32_t _ped, int32_t& _timeLeftAtNode, int32_t& _nodeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x52F734CEBE20DFBA);
	ctx->Reset();
	ctx->Push(_ped);
	auto ptr_timeLeftAtNode = _timeLeftAtNode;
	ctx->Push(&ptr_timeLeftAtNode);
	auto ptr_nodeId = _nodeId;
	ctx->Push(&ptr_nodeId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_timeLeftAtNode = ptr_timeLeftAtNode;
	_nodeId = ptr_nodeId;
	return ctx->ResultBool();
}

void Native_taskPatrol(bool& success, int32_t _ped, const char* _patrolRouteName, int32_t _alertState, uint8_t _canChatToPeds, uint8_t _useHeadLookAt) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBDA5DF49D080FE4E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_patrolRouteName));
	ctx->Push(_alertState);
	ctx->Push((int32_t) _canChatToPeds);
	ctx->Push((int32_t) _useHeadLookAt);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskStayInCover(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE5DA8615A6180789);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addVehicleSubtaskAttackCoord(bool& success, int32_t _ped, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CF0D8F9BBA0DD75);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addVehicleSubtaskAttackPed(bool& success, int32_t _ped, int32_t _target) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85F462BADC7DA47F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskVehicleShootAtPed(bool& success, int32_t _ped, int32_t _target, float _fireTolerance) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x10AB107B887214D8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	ctx->Push(_fireTolerance);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskVehicleAimAtPed(bool& success, int32_t _ped, int32_t _target) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE41885592B08B097);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskVehicleShootAtCoord(bool& success, int32_t _ped, float _x, float _y, float _z, float _fireTolerance) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5190796ED39C9B6D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_fireTolerance);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskVehicleAimAtCoord(bool& success, int32_t _ped, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x447C1E9EF844BC0F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskVehicleGotoNavmesh(bool& success, int32_t _ped, int32_t _vehicle, float _x, float _y, float _z, float _speed, int32_t _behaviorFlag, float _stoppingRange) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x195AEEB13CEFE2EE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_speed);
	ctx->Push(_behaviorFlag);
	ctx->Push(_stoppingRange);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskGoToCoordWhileAimingAtCoord(bool& success, int32_t _ped, float _x, float _y, float _z, float _aimAtX, float _aimAtY, float _aimAtZ, float _moveBlendRatio, uint8_t _shoot, float _targetRadius, float _slowDistance, uint8_t _useNavMesh, int32_t _navFlags, uint8_t _instantBlendToAim, uint32_t _firingPattern) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11315AB3385B8AC0);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_aimAtX);
	ctx->Push(_aimAtY);
	ctx->Push(_aimAtZ);
	ctx->Push(_moveBlendRatio);
	ctx->Push((int32_t) _shoot);
	ctx->Push(_targetRadius);
	ctx->Push(_slowDistance);
	ctx->Push((int32_t) _useNavMesh);
	ctx->Push(_navFlags);
	ctx->Push((int32_t) _instantBlendToAim);
	ctx->Push(_firingPattern);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskGoToCoordWhileAimingAtEntity(bool& success, int32_t _ped, float _x, float _y, float _z, int32_t _aimAtID, float _moveBlendRatio, uint8_t _shoot, float _targetRadius, float _slowDistance, uint8_t _useNavMesh, int32_t _navFlags, uint8_t _instantBlendToAim, uint32_t _firingPattern, int32_t _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2A16444EAD9AE47);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_aimAtID);
	ctx->Push(_moveBlendRatio);
	ctx->Push((int32_t) _shoot);
	ctx->Push(_targetRadius);
	ctx->Push(_slowDistance);
	ctx->Push((int32_t) _useNavMesh);
	ctx->Push(_navFlags);
	ctx->Push((int32_t) _instantBlendToAim);
	ctx->Push(_firingPattern);
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskGoToCoordAndAimAtHatedEntitiesNearCoord(bool& success, int32_t _pedHandle, float _goToLocationX, float _goToLocationY, float _goToLocationZ, float _focusLocationX, float _focusLocationY, float _focusLocationZ, float _speed, uint8_t _shootAtEnemies, float _distanceToStopAt, float _noRoadsDistance, uint8_t _useNavMesh, int32_t _navFlags, int32_t _taskFlags, uint32_t _firingPattern) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA55547801EB331FC);
	ctx->Reset();
	ctx->Push(_pedHandle);
	ctx->Push(_goToLocationX);
	ctx->Push(_goToLocationY);
	ctx->Push(_goToLocationZ);
	ctx->Push(_focusLocationX);
	ctx->Push(_focusLocationY);
	ctx->Push(_focusLocationZ);
	ctx->Push(_speed);
	ctx->Push((int32_t) _shootAtEnemies);
	ctx->Push(_distanceToStopAt);
	ctx->Push(_noRoadsDistance);
	ctx->Push((int32_t) _useNavMesh);
	ctx->Push(_navFlags);
	ctx->Push(_taskFlags);
	ctx->Push(_firingPattern);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskGoToEntityWhileAimingAtCoord(bool& success, int32_t _ped, int32_t _entity, float _aimX, float _aimY, float _aimZ, float _moveBlendRatio, uint8_t _shoot, float _targetRadius, float _slowDistance, uint8_t _useNavMesh, uint8_t _instantBlendToAim, uint32_t _firingPattern) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x04701832B739DCE5);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_entity);
	ctx->Push(_aimX);
	ctx->Push(_aimY);
	ctx->Push(_aimZ);
	ctx->Push(_moveBlendRatio);
	ctx->Push((int32_t) _shoot);
	ctx->Push(_targetRadius);
	ctx->Push(_slowDistance);
	ctx->Push((int32_t) _useNavMesh);
	ctx->Push((int32_t) _instantBlendToAim);
	ctx->Push(_firingPattern);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskGoToEntityWhileAimingAtEntity(bool& success, int32_t _ped, int32_t _entityToWalkTo, int32_t _entityToAimAt, float _speed, uint8_t _shootatEntity, float _targetRadius, float _slowDistance, uint8_t _useNavMesh, uint8_t _instantBlendToAim, uint32_t _firingPattern) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97465886D35210E9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_entityToWalkTo);
	ctx->Push(_entityToAimAt);
	ctx->Push(_speed);
	ctx->Push((int32_t) _shootatEntity);
	ctx->Push(_targetRadius);
	ctx->Push(_slowDistance);
	ctx->Push((int32_t) _useNavMesh);
	ctx->Push((int32_t) _instantBlendToAim);
	ctx->Push(_firingPattern);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setHighFallTask(bool& success, int32_t _ped, int32_t _minTime, int32_t _maxTime, int32_t _entryType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C825BDC7741D37C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_minTime);
	ctx->Push(_maxTime);
	ctx->Push(_entryType);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_requestWaypointRecording(bool& success, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9EEFB62EB27B5792);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getIsWaypointRecordingLoaded(bool& success, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB4E8BE8A0063C5D);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_removeWaypointRecording(bool& success, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF1B8B4AA1C25DC8);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_waypointRecordingGetNumPoints(bool& success, const char* _name, int32_t& _points) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5343532C01A07234);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	auto ptr_points = _points;
	ctx->Push(&ptr_points);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_points = ptr_points;
	return ctx->ResultBool();
}

uint8_t Native_waypointRecordingGetCoord(bool& success, const char* _name, int32_t _point, vector3_t& _coord) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FB897405C90B361);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	ctx->Push(_point);
	alt::INative::Vector3 converted_coord { _coord.x, 0, _coord.y, 0, _coord.z };
	ctx->Push(&converted_coord);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_coord.x = converted_coord.x;
	_coord.y = converted_coord.y;
	_coord.z = converted_coord.z;
	return ctx->ResultBool();
}

float Native_waypointRecordingGetSpeedAtPoint(bool& success, const char* _name, int32_t _point) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x005622AEBC33ACA9);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	ctx->Push(_point);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

uint8_t Native_waypointRecordingGetClosestWaypoint(bool& success, const char* _name, float _x, float _y, float _z, int32_t& _point) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB629A298081F876F);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	auto ptr_point = _point;
	ctx->Push(&ptr_point);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_point = ptr_point;
	return ctx->ResultBool();
}

void Native_taskFollowWaypointRecording(bool& success, int32_t _ped, const char* _name, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0759591819534F7B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_name));
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isWaypointPlaybackGoingOnForPed(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE03B3F2D3DC59B64);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getPedWaypointProgress(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2720AAA75001E094);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

float Native_getPedWaypointDistance(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6A877C64CAF1BC5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

uint8_t Native_setPedWaypointRouteOffset(bool& success, int32_t _ped, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED98E10B0AFCE4B4);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

float Native_getWaypointDistanceAlongRoute(bool& success, const char* _name, int32_t _point) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5B769058763E497);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	ctx->Push(_point);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

uint8_t Native_waypointPlaybackGetIsPaused(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x701375A7D43F01CB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_waypointPlaybackPause(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F342546AA06FED5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_waypointPlaybackResume(bool& success, int32_t _p0, uint8_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x244F70C84C547D2D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_waypointPlaybackOverrideSpeed(bool& success, int32_t _p0, float _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D7D2B47FA788E85);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_waypointPlaybackUseDefaultSpeed(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6599D834B12D0800);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_useWaypointRecordingAsAssistedMovementRoute(bool& success, const char* _name, uint8_t _p1, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A353B8E6B1095B5);
	ctx->Reset();
	ctx->Push(SaveString(_name));
	ctx->Push((int32_t) _p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_waypointPlaybackStartAimingAtPed(bool& success, int32_t _ped, int32_t _target, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20E330937C399D29);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_waypointPlaybackStartAimingAtCoord(bool& success, int32_t _ped, float _x, float _y, float _z, uint8_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8968400D900ED8B3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_waypointPlaybackStartShootingAtPed(bool& success, int32_t _ped, int32_t _ped, uint8_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE70BA7B90F8390DC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_ped);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_waypointPlaybackStartShootingAtCoord(bool& success, int32_t _ped, float _x, float _y, float _z, uint8_t _p4, uint32_t _firingPattern) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x057A25CFCC9DB671);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _p4);
	ctx->Push(_firingPattern);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_waypointPlaybackStopAimingOrShooting(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x47EFA040EBB8E2EA);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_assistedMovementRequestRoute(bool& success, const char* _route) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x817268968605947A);
	ctx->Reset();
	ctx->Push(SaveString(_route));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_assistedMovementRemoveRoute(bool& success, const char* _route) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3548536485DD792B);
	ctx->Reset();
	ctx->Push(SaveString(_route));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_assistedMovementIsRouteLoaded(bool& success, const char* _route) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x60F9A4393A21F741);
	ctx->Reset();
	ctx->Push(SaveString(_route));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_assistedMovementSetRouteProperties(bool& success, const char* _route, int32_t _props) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD5002D78B7162E1B);
	ctx->Reset();
	ctx->Push(SaveString(_route));
	ctx->Push(_props);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_assistedMovementOverrideLoadDistanceThisFrame(bool& success, float _dist) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13945951E16EF912);
	ctx->Reset();
	ctx->Push(_dist);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskVehicleFollowWaypointRecording(bool& success, int32_t _ped, int32_t _vehicle, const char* _WPRecording, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, float _p7, uint8_t _p8, float _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3123FAA6DB1CF7ED);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(SaveString(_WPRecording));
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push((int32_t) _p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isWaypointPlaybackGoingOnForVehicle(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF5134943EA29868C);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getVehicleWaypointProgress(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9824CFF8FC66E159);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getVehicleWaypointTargetPoint(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x416B62AC8B9E5BBD);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_vehicleWaypointPlaybackPause(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A4E6AC373666BC5);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_vehicleWaypointPlaybackResume(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC04FCAA7839D492);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_vehicleWaypointPlaybackUseDefaultSpeed(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CEB25A7D2848963);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_vehicleWaypointPlaybackOverrideSpeed(bool& success, int32_t _vehicle, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x121F0593E0A431D7);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskSetBlockingOfNonTemporaryEvents(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90D2156198831D69);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskForceMotionState(bool& success, int32_t _ped, uint32_t _state, uint8_t _forceRestart) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F056E1AFFEF17AB);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_state);
	ctx->Push((int32_t) _forceRestart);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskMoveNetworkByName(bool& success, int32_t _ped, const char* _task, float _multiplier, uint8_t _allowOverrideCloneUpdate, const char* _animDict, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D537BA194896636);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_task));
	ctx->Push(_multiplier);
	ctx->Push((int32_t) _allowOverrideCloneUpdate);
	ctx->Push(SaveString(_animDict));
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskMoveNetworkAdvancedByName(bool& success, int32_t _ped, const char* _network, float _x, float _y, float _z, float _rotX, float _rotY, float _rotZ, int32_t _rotOrder, float _blendDuration, uint8_t _allowOverrideCloneUpdate, const char* _animDict, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD5B35BEA41919ACB);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_network));
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_rotOrder);
	ctx->Push(_blendDuration);
	ctx->Push((int32_t) _allowOverrideCloneUpdate);
	ctx->Push(SaveString(_animDict));
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskMoveNetworkByNameWithInitParams(bool& success, int32_t _ped, const char* _network, int32_t& _initialParameters, float _blendDuration, uint8_t _allowOverrideCloneUpdate, const char* _animDict, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3D45B0B355C5E0C9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_network));
	auto ptr_initialParameters = _initialParameters;
	ctx->Push(&ptr_initialParameters);
	ctx->Push(_blendDuration);
	ctx->Push((int32_t) _allowOverrideCloneUpdate);
	ctx->Push(SaveString(_animDict));
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_initialParameters = ptr_initialParameters;
}

void Native_taskMoveNetworkAdvancedByNameWithInitParams(bool& success, int32_t _ped, const char* _network, int32_t& _initialParameters, float _x, float _y, float _z, float _rotX, float _rotY, float _rotZ, int32_t _rotOrder, float _blendDuration, uint8_t _allowOverrideCloneUpdate, const char* _dictionary, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29682E2CCF21E9B5);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_network));
	auto ptr_initialParameters = _initialParameters;
	ctx->Push(&ptr_initialParameters);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_rotOrder);
	ctx->Push(_blendDuration);
	ctx->Push((int32_t) _allowOverrideCloneUpdate);
	ctx->Push(SaveString(_dictionary));
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_initialParameters = ptr_initialParameters;
}

uint8_t Native_isTaskMoveNetworkActive(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x921CE12C489C4C41);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isTaskMoveNetworkReadyForTransition(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x30ED88D5E0C56A37);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_requestTaskMoveNetworkStateTransition(bool& success, int32_t _ped, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD01015C7316AE176);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_setExpectedCloneNextTaskMoveNetworkState(bool& success, int32_t _ped, const char* _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAB13A5565480B6D9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_state));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

const char* Native_getTaskMoveNetworkState(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x717E4D1F2048376D);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

void Native_setTaskMoveNetworkAnimSet(bool& success, int32_t _ped, uint32_t _clipSet, uint32_t _unkVariableClipSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8423541E8B3A1589);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_clipSet);
	ctx->Push(_unkVariableClipSet);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTaskMoveNetworkSignalFloat(bool& success, int32_t _ped, const char* _signalName, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD5BB4025AE449A4E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_signalName));
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTaskMoveNetworkSignalLocalFloat(bool& success, int32_t _ped, const char* _signalName, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x373EF409B82697A3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_signalName));
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTaskMoveNetworkSignalFloatLerpRate(bool& success, int32_t _ped, const char* _signalName, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8634CEF2522D987B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_signalName));
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTaskMoveNetworkSignalBool(bool& success, int32_t _ped, const char* _signalName, uint8_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB0A6CFD2C69C1088);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_signalName));
	ctx->Push((int32_t) _value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getTaskMoveNetworkSignalFloat(bool& success, int32_t _ped, const char* _signalName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44AB0B3AFECCE242);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_signalName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

uint8_t Native_getTaskMoveNetworkSignalBool(bool& success, int32_t _ped, const char* _signalName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7FFBA498E4AAF67);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_signalName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getTaskMoveNetworkEvent(bool& success, int32_t _ped, const char* _eventName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4F47213DF45A64C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_eventName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_setTaskMoveNetworkEnableCollisionOnNetworkCloneWhenFixed(bool& success, int32_t _ped, uint8_t _enable) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0FFB3C758E8C07B9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _enable);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isMoveBlendRatioStill(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x349CE7B56DAFD95C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isMoveBlendRatioWalking(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF133BBBE91E1691F);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isMoveBlendRatioRunning(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4D8636C0199A939);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isMoveBlendRatioSprinting(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x24A2AD74FA9814E2);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedStill(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC29253EEF8F0180);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedWalking(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE4C184B2B9B071A);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedRunning(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5286FFC176F28A2);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedSprinting(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57E457CD2C0FC168);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedStrafing(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE45B7F222DE47E09);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_taskSynchronizedScene(bool& success, int32_t _ped, int32_t _scene, const char* _animDictionary, const char* _animationName, float _blendIn, float _blendOut, int32_t _flags, int32_t _ragdollBlockingFlags, float _moverBlendDelta, int32_t _ikFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEEA929141F699854);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_scene);
	ctx->Push(SaveString(_animDictionary));
	ctx->Push(SaveString(_animationName));
	ctx->Push(_blendIn);
	ctx->Push(_blendOut);
	ctx->Push(_flags);
	ctx->Push(_ragdollBlockingFlags);
	ctx->Push(_moverBlendDelta);
	ctx->Push(_ikFlags);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskAgitatedActionConfrontResponse(bool& success, int32_t _ped, int32_t _ped2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19D1B791CB3670FE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_ped2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskSweepAimEntity(bool& success, int32_t _ped, const char* _animDict, const char* _lowAnimName, const char* _medAnimName, const char* _hiAnimName, int32_t _runtime, int32_t _targetEntity, float _turnRate, float _blendInDuration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2047C02158D6405A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_animDict));
	ctx->Push(SaveString(_lowAnimName));
	ctx->Push(SaveString(_medAnimName));
	ctx->Push(SaveString(_hiAnimName));
	ctx->Push(_runtime);
	ctx->Push(_targetEntity);
	ctx->Push(_turnRate);
	ctx->Push(_blendInDuration);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_updateTaskSweepAimEntity(bool& success, int32_t _ped, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4973DBDBE6E44B3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskSweepAimPosition(bool& success, int32_t _ped, const char* _animDict, const char* _lowAnimName, const char* _medAnimName, const char* _hiAnimName, int32_t _runtime, float _x, float _y, float _z, float _turnRate, float _blendInDuration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7AFE8FDC10BC07D2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(SaveString(_animDict));
	ctx->Push(SaveString(_lowAnimName));
	ctx->Push(SaveString(_medAnimName));
	ctx->Push(SaveString(_hiAnimName));
	ctx->Push(_runtime);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_turnRate);
	ctx->Push(_blendInDuration);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_updateTaskSweepAimPosition(bool& success, int32_t _ped, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB106883F5201FC4);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_taskArrestPed(bool& success, int32_t _ped, int32_t _target) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3B9A78A178572B1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedRunningArrestTask(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3DC52677769B4AE0);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedBeingArrested(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90A09F3A45FED688);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_uncuffPed(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x67406F2C8F87FC4F);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedCuffed(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74E559B3BC910685);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_createVehicle(bool& success, uint32_t _modelHash, float _x, float _y, float _z, float _heading, uint8_t _isNetwork, uint8_t _bScriptHostVeh, uint8_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF35D0D2583051B0);
	ctx->Reset();
	ctx->Push(_modelHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	ctx->Push((int32_t) _isNetwork);
	ctx->Push((int32_t) _bScriptHostVeh);
	ctx->Push((int32_t) _p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_deleteVehicle(bool& success, int32_t& _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA386986E786A54F);
	ctx->Reset();
	auto ptr_vehicle = _vehicle;
	ctx->Push(&ptr_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_vehicle = ptr_vehicle;
}

void Native_setVehicleAllowHomingMissleLockon(bool& success, int32_t _vehicle, uint8_t _toggle, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D6F9A3EF26136A0);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleAllowHomingMissleLockonSynced(bool& success, int32_t _vehicle, uint8_t _canBeLockedOn, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DDA078D12879EEE);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _canBeLockedOn);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleAllowNoPassengersLockon(bool& success, int32_t _veh, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D14D4154BFE7B2C);
	ctx->Reset();
	ctx->Push(_veh);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getVehicleHomingLockonState(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6B0E8CFC3633BF0);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getVehicleHomingLockedontoState(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6EAAEFC76ACC311F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setVehicleHomingLockedontoState(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x407DC5E97DB1A4D3);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isVehicleModel(bool& success, int32_t _vehicle, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x423E8DE37D934D89);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_doesScriptVehicleGeneratorExist(bool& success, int32_t _vehicleGenerator) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6086BC836400876);
	ctx->Reset();
	ctx->Push(_vehicleGenerator);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_createScriptVehicleGenerator(bool& success, float _x, float _y, float _z, float _heading, float _p4, float _p5, uint32_t _modelHash, int32_t _p7, int32_t _p8, int32_t _p9, int32_t _p10, uint8_t _p11, uint8_t _p12, uint8_t _p13, uint8_t _p14, uint8_t _p15, int32_t _p16) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DEF883114668116);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_modelHash);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push((int32_t) _p11);
	ctx->Push((int32_t) _p12);
	ctx->Push((int32_t) _p13);
	ctx->Push((int32_t) _p14);
	ctx->Push((int32_t) _p15);
	ctx->Push(_p16);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_deleteScriptVehicleGenerator(bool& success, int32_t _vehicleGenerator) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x22102C9ABFCF125D);
	ctx->Reset();
	ctx->Push(_vehicleGenerator);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setScriptVehicleGenerator(bool& success, int32_t _vehicleGenerator, uint8_t _enabled) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9D620E0AC6DC4B0);
	ctx->Reset();
	ctx->Push(_vehicleGenerator);
	ctx->Push((int32_t) _enabled);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAllVehicleGeneratorsActiveInArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, uint8_t _toggle, uint8_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC12321827687FE4D);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push((int32_t) _toggle);
	ctx->Push((int32_t) _p7);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAllVehicleGeneratorsActive(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34AD89078831A4BC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAllLowPriorityVehicleGeneratorsActive(bool& success, uint8_t _active) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x608207E7A8FB787C);
	ctx->Reset();
	ctx->Push((int32_t) _active);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleGeneratorAreaOfInterest(bool& success, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A75585FB2E54FAD);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearVehicleGeneratorAreaOfInterest(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A436B8643716D14);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_setVehicleOnGroundProperly(bool& success, int32_t _vehicle, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x49733E92263139D1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_setVehicleUseCutsceneWheelCompression(bool& success, int32_t _p0, uint8_t _p1, uint8_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE023E8AC4EF7C117);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isVehicleStuckOnRoof(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB497F06B288DCFDF);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_addVehicleUpsidedownCheck(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB72E26D81006005B);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeVehicleUpsidedownCheck(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC53EB42A499A7E90);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isVehicleStopped(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5721B434AD84D57A);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getVehicleNumberOfPassengers(bool& success, int32_t _vehicle, uint8_t _includeDriver, uint8_t _includeDeadOccupants) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x24CB2137731FFE89);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _includeDriver);
	ctx->Push((int32_t) _includeDeadOccupants);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getVehicleMaxNumberOfPassengers(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7C4F2C6E744A550);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getVehicleModelNumberOfSeats(bool& success, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2AD93716F184EDA4);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isSeatWarpOnly(bool& success, int32_t _vehicle, int32_t _seatIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF7F203E31F96F6A1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_seatIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isTurretSeat(bool& success, int32_t _vehicle, int32_t _seatIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE33FFA906CE74880);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_seatIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_doesVehicleAllowRappel(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E417C547182C84D);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleDensityMultiplierThisFrame(bool& success, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x245A6883D966D537);
	ctx->Reset();
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRandomVehicleDensityMultiplierThisFrame(bool& success, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3B3359379FE77D3);
	ctx->Reset();
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setParkedVehicleDensityMultiplierThisFrame(bool& success, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEAE6DCC7EEE3DB1D);
	ctx->Reset();
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDisableRandomTrainsThisFrame(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4B8E3D1917BC86B);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAmbientVehicleRangeMultiplierThisFrame(bool& success, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90B6DA738A9A25DA);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFarDrawVehicles(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26324F33423F3CC3);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setNumberOfParkedVehicles(bool& success, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCAA15F13EBD417FF);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleDoorsLocked(bool& success, int32_t _vehicle, int32_t _doorLockStatus) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB664292EAECF7FA6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorLockStatus);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleIndividualDoorsLocked(bool& success, int32_t _vehicle, int32_t _doorId, int32_t _doorLockStatus) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE70724027F85BCD);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	ctx->Push(_doorLockStatus);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleHasMutedSirens(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD8050E0EB60CF274);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleDoorsLockedForPlayer(bool& success, int32_t _vehicle, int32_t _player, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x517AAF684BB50CD1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_player);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getVehicleDoorsLockedForPlayer(bool& success, int32_t _vehicle, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6AF6CB341349015);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleDoorsLockedForAllPlayers(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2F80B8D040727CC);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleDoorsLockedForNonScriptPlayers(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9737A37136F07E75);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleDoorsLockedForTeam(bool& success, int32_t _vehicle, int32_t _team, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB81F6D4A8F5EEBA8);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_team);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleDoorsLockedForAllTeams(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x203B527D1B77904C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleDontTerminateTaskWhenAchieved(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x76D26A22750E849E);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_explodeVehicle(bool& success, int32_t _vehicle, uint8_t _isAudible, uint8_t _isInvisible) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA71116ADF5B514C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _isAudible);
	ctx->Push((int32_t) _isInvisible);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleOutOfControl(bool& success, int32_t _vehicle, uint8_t _killDriver, uint8_t _explodeOnImpact) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF19D095E42D430CC);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _killDriver);
	ctx->Push((int32_t) _explodeOnImpact);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleTimedExplosion(bool& success, int32_t _vehicle, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E0A74E1002380B1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addVehiclePhoneExplosiveDevice(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x99AD4CCCB128CBC9);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearVehiclePhoneExplosiveDevice(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA3F739ABDDCF21F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasVehiclePhoneExplosiveDevice(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6ADAABD3068C5235);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_detonateVehiclePhoneExplosiveDevice(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF49CF0270307CBE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTaxiLights(bool& success, int32_t _vehicle, uint8_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x598803E85E8448D9);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _state);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isTaxiLightOn(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7504C0F113AB50FC);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isVehicleInGarageArea(bool& success, const char* _garageName, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCEE4490CD57BB3C2);
	ctx->Reset();
	ctx->Push(SaveString(_garageName));
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleColours(bool& success, int32_t _vehicle, int32_t _colorPrimary, int32_t _colorSecondary) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F1D4BE3A7F24601);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_colorPrimary);
	ctx->Push(_colorSecondary);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleFullbeam(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B7FD87F0DDB421E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleIsRacing(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x07116E24E9D1929D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleCustomPrimaryColour(bool& success, int32_t _vehicle, int32_t _r, int32_t _g, int32_t _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7141766F91D15BEA);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getVehicleCustomPrimaryColour(bool& success, int32_t _vehicle, int32_t& _r, int32_t& _g, int32_t& _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB64CF2CCA9D95F52);
	ctx->Reset();
	ctx->Push(_vehicle);
	auto ptr_r = _r;
	ctx->Push(&ptr_r);
	auto ptr_g = _g;
	ctx->Push(&ptr_g);
	auto ptr_b = _b;
	ctx->Push(&ptr_b);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_r = ptr_r;
	_g = ptr_g;
	_b = ptr_b;
}

void Native_clearVehicleCustomPrimaryColour(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55E1D2758F34E437);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getIsVehiclePrimaryColourCustom(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF095C0405307B21B);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleCustomSecondaryColour(bool& success, int32_t _vehicle, int32_t _r, int32_t _g, int32_t _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36CED73BFED89754);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getVehicleCustomSecondaryColour(bool& success, int32_t _vehicle, int32_t& _r, int32_t& _g, int32_t& _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8389CD56CA8072DC);
	ctx->Reset();
	ctx->Push(_vehicle);
	auto ptr_r = _r;
	ctx->Push(&ptr_r);
	auto ptr_g = _g;
	ctx->Push(&ptr_g);
	auto ptr_b = _b;
	ctx->Push(&ptr_b);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_r = ptr_r;
	_g = ptr_g;
	_b = ptr_b;
}

void Native_clearVehicleCustomSecondaryColour(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FFBDEEC3E8E2009);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getIsVehicleSecondaryColourCustom(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x910A32E7AAD2656C);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleEnveffScale(bool& success, int32_t _vehicle, float _fade) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3AFDC536C3D01674);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_fade);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getVehicleEnveffScale(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA82819CAC9C4C403);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setCanResprayVehicle(bool& success, int32_t _vehicle, uint8_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x52BBA29D5EC69356);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _state);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGoonBossVehicle(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAB31EF4DE6800CE9);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setOpenRearDoorsOnExplosion(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B212B26DD3C04DF);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceSubmarineSurfaceMode(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33506883545AC0DF);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceSubmarineNeurtalBuoyancy(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC67DB108A9ADE3BE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSubmarineCrushDepths(bool& success, int32_t _vehicle, uint8_t _p1, float _depth1, float _depth2, float _depth3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC59872A5134879C7);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	ctx->Push(_depth1);
	ctx->Push(_depth2);
	ctx->Push(_depth3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getSubmarineIsUnderDesignDepth(bool& success, int32_t _submarine) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E71D0B300B7AA79);
	ctx->Reset();
	ctx->Push(_submarine);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getSubmarineNumberOfAirLeaks(bool& success, int32_t _submarine) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x093D6DDCA5B8FBAE);
	ctx->Reset();
	ctx->Push(_submarine);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setBoatIgnoreLandProbes(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED5EDE9E676643C9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBoatAnchor(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75DBEC174AEEAD10);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_canAnchorBoatHere(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26C10ECBDA5D043B);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_canAnchorBoatHereIgnorePlayers(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x24F4121D07579880);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setBoatRemainsAnchoredWhilePlayerIsDriver(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3EBAAE484798530);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setForceLowLodAnchorMode(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB28B1FE5BFADD7F5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBoatLowLodAnchorDistance(bool& success, int32_t _vehicle, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE842A9398079BD82);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isBoatAnchored(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB0AD1238A709B1A2);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setBoatSinksWhenWrecked(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F719973E1445BA2);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBoatWrecked(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD32E46AA95C1DD2);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleSiren(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF4924635A19EB37D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isVehicleSirenOn(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C9BF537BE2634B2);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isVehicleSirenAudioOn(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5CC40FBCB586380);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleStrong(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E8C8727991A8A0B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeVehicleStuckCheck(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8386BFB614D06749);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getVehicleColours(bool& success, int32_t _vehicle, int32_t& _colorPrimary, int32_t& _colorSecondary) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA19435F193E081AC);
	ctx->Reset();
	ctx->Push(_vehicle);
	auto ptr_colorPrimary = _colorPrimary;
	ctx->Push(&ptr_colorPrimary);
	auto ptr_colorSecondary = _colorSecondary;
	ctx->Push(&ptr_colorSecondary);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_colorPrimary = ptr_colorPrimary;
	_colorSecondary = ptr_colorSecondary;
}

uint8_t Native_isVehicleSeatFree(bool& success, int32_t _vehicle, int32_t _seatIndex, uint8_t _isTaskRunning) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x22AC59A870E6A669);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_seatIndex);
	ctx->Push((int32_t) _isTaskRunning);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getPedInVehicleSeat(bool& success, int32_t _vehicle, int32_t _seatIndex, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB40DD2270B65366);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_seatIndex);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getLastPedInVehicleSeat(bool& success, int32_t _vehicle, int32_t _seatIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83F969AA1EE2A664);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_seatIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_getVehicleLightsState(bool& success, int32_t _vehicle, uint8_t& _lightsOn, uint8_t& _highbeamsOn) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB91B4C20085BD12F);
	ctx->Reset();
	ctx->Push(_vehicle);
	auto ptr_lightsOn = (int32_t) _lightsOn;
	ctx->Push(&ptr_lightsOn);
	auto ptr_highbeamsOn = (int32_t) _highbeamsOn;
	ctx->Push(&ptr_highbeamsOn);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_lightsOn = (bool) ptr_lightsOn;
	_highbeamsOn = (bool) ptr_highbeamsOn;
	return ctx->ResultBool();
}

uint8_t Native_isVehicleTyreBurst(bool& success, int32_t _vehicle, int32_t _wheelID, uint8_t _completely) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA291848A0815CA9);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_wheelID);
	ctx->Push((int32_t) _completely);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleForwardSpeed(bool& success, int32_t _vehicle, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAB54A438726D25D5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleForwardSpeedXy(bool& success, int32_t _vehicle, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6501129C9E0FFA05);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_bringVehicleToHalt(bool& success, int32_t _vehicle, float _distance, int32_t _duration, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x260BE8F09E326A20);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_distance);
	ctx->Push(_duration);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleSteerForBuildings(bool& success, int32_t _vehicle, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCE97BDF8A0EABC8);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleCausesSwerving(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9849DE24FCF23CCC);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setIgnorePlanesSmallPitchChange(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8664170EF165C4A6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopBringingVehicleToHalt(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C06330BFDDA182E);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isVehicleBeingBroughtToHalt(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC69BB1D832A710EF);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setForkliftForkHeight(bool& success, int32_t _vehicle, float _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x37EBBF3117BD6A25);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_height);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isEntityAttachedToHandlerFrame(bool& success, int32_t _vehicle, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57715966069157AD);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isAnyEntityAttachedToHandlerFrame(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62CA17B74C435651);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_findHandlerVehicleContainerIsAttachedTo(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x375E7FC44F21C8AB);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isHandlerFrameLinedUpWithContainer(bool& success, int32_t _vehicle, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x89D630CF5EA96D23);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_attachContainerToHandlerFrameWhenLinedUp(bool& success, int32_t _vehicle, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A98C2ECF57FA5D4);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_detachContainerFromHandlerFrame(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C0043FDFF6436BC);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleDisableHeightMapAvoidance(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8AA9180DE2FEDD45);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBoatDisableAvoidance(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A6A279F3AA4FD70);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isHeliLandingAreaBlocked(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x634148744F385576);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setShortSlowdownForLanding(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x107A473D7A6647A9);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setHeliTurbulenceScalar(bool& success, int32_t _vehicle, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6F13851780394DA);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCarBootOpen(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC40CBF7B90CA77C);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleTyreBurst(bool& success, int32_t _vehicle, int32_t _index, uint8_t _onRim, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC6A202EE4960385);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_index);
	ctx->Push((int32_t) _onRim);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleDoorsShut(bool& success, int32_t _vehicle, uint8_t _closeInstantly) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x781B3D62BB013EF5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _closeInstantly);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleTyresCanBurst(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB9DC3C7D8596C46);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getVehicleTyresCanBurst(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x678B9BB8C3F58FEB);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleWheelsCanBreak(bool& success, int32_t _vehicle, uint8_t _enabled) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29B18B4FD460CA8F);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _enabled);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleDoorOpen(bool& success, int32_t _vehicle, int32_t _doorId, uint8_t _loose, uint8_t _openInstantly) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C65DAC73C35C862);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	ctx->Push((int32_t) _loose);
	ctx->Push((int32_t) _openInstantly);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleDoorAutoLock(bool& success, int32_t _vehicle, int32_t _doorId, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3B458DDB57038F08);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFleeingVehiclesUseSwitchedOffNodes(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA247F9EF01D8082E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeVehicleWindow(bool& success, int32_t _vehicle, int32_t _windowIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA711568EEDB43069);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_windowIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_rollDownWindows(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85796B0549DDE156);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_rollDownWindow(bool& success, int32_t _vehicle, int32_t _windowIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7AD9E6CE657D69E3);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_windowIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_rollUpWindow(bool& success, int32_t _vehicle, int32_t _windowIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x602E548F46E24D59);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_windowIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_smashVehicleWindow(bool& success, int32_t _vehicle, int32_t _windowIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9E5B5E4D2CCD2259);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_windowIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_fixVehicleWindow(bool& success, int32_t _vehicle, int32_t _windowIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x772282EBEB95E682);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_windowIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_popOutVehicleWindscreen(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D645D59FB5F5AD3);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_popOffVehicleRoofWithImpulse(bool& success, int32_t _vehicle, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE38CB9D7D39FDBCC);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleLights(bool& success, int32_t _vehicle, int32_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34E710FF01247C5A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleUsePlayerLightSettings(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC45C27EF50F36ADC);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleHeadlightShadows(bool& success, int32_t _vehicle, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1FD09E7390A74D54);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleAlarm(bool& success, int32_t _vehicle, uint8_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCDE5E70C1DDB954C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _state);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_startVehicleAlarm(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8FF7AB45305C345);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isVehicleAlarmActivated(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4319E335B71FFF34);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleInteriorlight(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC2042F090AF6AD3);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleForceInteriorlight(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8821196D91FA2DE5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleLightMultiplier(bool& success, int32_t _vehicle, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB385454F8791F57C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_attachVehicleToTrailer(bool& success, int32_t _vehicle, int32_t _trailer, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C7D42D58F770B54);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_trailer);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_attachVehicleOnToTrailer(bool& success, int32_t _vehicle, int32_t _trailer, float _offsetX, float _offsetY, float _offsetZ, float _coordsX, float _coordsY, float _coordsZ, float _rotationX, float _rotationY, float _rotationZ, float _disableCollisions) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16B5E274BDE402F8);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_trailer);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	ctx->Push(_coordsX);
	ctx->Push(_coordsY);
	ctx->Push(_coordsZ);
	ctx->Push(_rotationX);
	ctx->Push(_rotationY);
	ctx->Push(_rotationZ);
	ctx->Push(_disableCollisions);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stabiliseEntityAttachedToHeli(bool& success, int32_t _vehicle, int32_t _entity, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x374706271354CB18);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_entity);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_detachVehicleFromTrailer(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90532EDF0D2BDD86);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isVehicleAttachedToTrailer(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE7CF3C4F9F489F0C);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setTrailerInverseMassScale(bool& success, int32_t _vehicle, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A8F319B392E7B3F);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTrailerLegsRaised(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95CF53B3D687F9FA);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTrailerLegsLowered(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x878C75C09FBDB942);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleTyreFixed(bool& success, int32_t _vehicle, int32_t _tyreIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E13FC662B882D1D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_tyreIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleNumberPlateText(bool& success, int32_t _vehicle, const char* _plateText) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95A88F0B409CDA47);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(SaveString(_plateText));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

const char* Native_getVehicleNumberPlateText(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7CE1CCB9B293020E);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

int32_t Native_getNumberOfVehicleNumberPlates(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C4D6B2644F458CB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setVehicleNumberPlateTextIndex(bool& success, int32_t _vehicle, int32_t _plateIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9088EB5A43FFB0A1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_plateIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getVehicleNumberPlateTextIndex(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF11BC2DD9A3E7195);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setRandomTrains(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80D9F74197EA47D9);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_createMissionTrain(bool& success, int32_t _unkVariation, float _x, float _y, float _z, uint8_t _direction, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x63C6CCA8E68AE8C8);
	ctx->Reset();
	ctx->Push(_unkVariation);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _direction);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_switchTrainTrack(bool& success, int32_t _trackId, uint8_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD813BB7DB977F20);
	ctx->Reset();
	ctx->Push(_trackId);
	ctx->Push((int32_t) _state);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTrainTrackSpawnFrequency(bool& success, int32_t _trackIndex, int32_t _frequency) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21973BBF8D17EDFA);
	ctx->Reset();
	ctx->Push(_trackIndex);
	ctx->Push(_frequency);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_allowTrainToBeRemovedByPopulation(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2310A8F9421EBF43);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_deleteAllTrains(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x736A718577F39C7D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTrainSpeed(bool& success, int32_t _train, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA0BC91BE0B796E3);
	ctx->Reset();
	ctx->Push(_train);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTrainCruiseSpeed(bool& success, int32_t _train, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16469284DB8C62B5);
	ctx->Reset();
	ctx->Push(_train);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRandomBoats(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84436EC293B1415F);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRandomBoatsMp(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA5E12F728DB30CA);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGarbageTrucks(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2AFD795EEAC8D30D);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesVehicleHaveStuckVehicleCheck(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57E4C39DE5EE8470);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getVehicleRecordingId(bool& success, int32_t _recording, const char* _script) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21543C612379DB3C);
	ctx->Reset();
	ctx->Push(_recording);
	ctx->Push(SaveString(_script));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_requestVehicleRecording(bool& success, int32_t _recording, const char* _script) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF514CABE74CBF15);
	ctx->Reset();
	ctx->Push(_recording);
	ctx->Push(SaveString(_script));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasVehicleRecordingBeenLoaded(bool& success, int32_t _recording, const char* _script) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x300D614A4C785FC4);
	ctx->Reset();
	ctx->Push(_recording);
	ctx->Push(SaveString(_script));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_removeVehicleRecording(bool& success, int32_t _recording, const char* _script) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1160ACCF98A3FC8);
	ctx->Reset();
	ctx->Push(_recording);
	ctx->Push(SaveString(_script));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

vector3_t Native_getPositionOfVehicleRecordingIdAtTime(bool& success, int32_t _id, float _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92523B76657A517D);
	ctx->Reset();
	ctx->Push(_id);
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

vector3_t Native_getPositionOfVehicleRecordingAtTime(bool& success, int32_t _recording, float _time, const char* _script) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD242728AA6F0FBA2);
	ctx->Reset();
	ctx->Push(_recording);
	ctx->Push(_time);
	ctx->Push(SaveString(_script));
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

vector3_t Native_getRotationOfVehicleRecordingIdAtTime(bool& success, int32_t _id, float _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0F2103EFAF8CBA7);
	ctx->Reset();
	ctx->Push(_id);
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

vector3_t Native_getRotationOfVehicleRecordingAtTime(bool& success, int32_t _recording, float _time, const char* _script) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2058206FBE79A8AD);
	ctx->Reset();
	ctx->Push(_recording);
	ctx->Push(_time);
	ctx->Push(SaveString(_script));
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

float Native_getTotalDurationOfVehicleRecordingId(bool& success, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x102D125411A7B6E6);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getTotalDurationOfVehicleRecording(bool& success, int32_t _recording, const char* _script) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0E48D1C262390950);
	ctx->Reset();
	ctx->Push(_recording);
	ctx->Push(SaveString(_script));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getPositionInRecording(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DACD605FC681475);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getTimePositionInRecording(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5746F3A7AB7FE544);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_startPlaybackRecordedVehicle(bool& success, int32_t _vehicle, int32_t _recording, const char* _script, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F878F92B3A7A071);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_recording);
	ctx->Push(SaveString(_script));
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_startPlaybackRecordedVehicleWithFlags(bool& success, int32_t _vehicle, int32_t _recording, const char* _script, int32_t _flags, int32_t _time, int32_t _drivingStyle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D80FD645D4DA346);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_recording);
	ctx->Push(SaveString(_script));
	ctx->Push(_flags);
	ctx->Push(_time);
	ctx->Push(_drivingStyle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forcePlaybackRecordedVehicleUpdate(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F2E4E06DEA8992B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_stopPlaybackRecordedVehicle(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x54833611C17ABDEA);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_pausePlaybackRecordedVehicle(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x632A689BF42301B1);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_unpausePlaybackRecordedVehicle(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8879EE09268305D5);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPlaybackGoingOnForVehicle(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C8A4C2C19E68EEC);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPlaybackUsingAiGoingOnForVehicle(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAEA8FD591FAD4106);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getCurrentPlaybackForVehicle(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42BC05C27A946054);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_skipToEndAndStopPlaybackRecordedVehicle(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAB8E2EDA0C0A5883);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlaybackSpeed(bool& success, int32_t _vehicle, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6683AB880E427778);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_startPlaybackRecordedVehicleUsingAi(bool& success, int32_t _vehicle, int32_t _recording, const char* _script, float _speed, int32_t _drivingStyle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29DE5FA52D00428C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_recording);
	ctx->Push(SaveString(_script));
	ctx->Push(_speed);
	ctx->Push(_drivingStyle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_skipTimeInPlaybackRecordedVehicle(bool& success, int32_t _vehicle, float _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9438F7AD68771A20);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlaybackToUseAi(bool& success, int32_t _vehicle, int32_t _drivingStyle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA549C3B37EA28131);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_drivingStyle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlaybackToUseAiTryToRevertBackLater(bool& success, int32_t _vehicle, int32_t _time, int32_t _drivingStyle, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E63860BBB190730);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_time);
	ctx->Push(_drivingStyle);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAdditionalRotationForRecordedVehiclePlayback(bool& success, int32_t _vehicle, float _x, float _y, float _z, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5845066D8A1EA7F7);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPositionOffsetForRecordedVehiclePlayback(bool& success, int32_t _vehicle, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x796A877E459B99EA);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGlobalPositionOffsetForRecordedVehiclePlayback(bool& success, int32_t _vehicle, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFAF2A78061FD9EF4);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setShouldLerpFromAiToFullRecording(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x063AE2B2CC273588);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_explodeVehicleInCutscene(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x786A4EB67B01BF0B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_addVehicleStuckCheckWithWarp(bool& success, int32_t _p0, float _p1, int32_t _p2, uint8_t _p3, uint8_t _p4, uint8_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FA9923062DD396C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push((int32_t) _p3);
	ctx->Push((int32_t) _p4);
	ctx->Push((int32_t) _p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleModelIsSuppressed(bool& success, uint32_t _model, uint8_t _suppressed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0FC2D89AC25A5814);
	ctx->Reset();
	ctx->Push(_model);
	ctx->Push((int32_t) _suppressed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getRandomVehicleInSphere(bool& success, float _x, float _y, float _z, float _radius, uint32_t _modelHash, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x386F6CE5BAF6091C);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_modelHash);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getRandomVehicleFrontBumperInSphere(bool& success, float _p0, float _p1, float _p2, float _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5574E0AEB86BA68);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getRandomVehicleBackBumperInSphere(bool& success, float _p0, float _p1, float _p2, float _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB50807EABE20A8DC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getClosestVehicle(bool& success, float _x, float _y, float _z, float _radius, uint32_t _modelHash, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF73EB622C4F1689B);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_modelHash);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getTrainCarriage(bool& success, int32_t _train, int32_t _trailerNumber) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x08AAFD0814722BC3);
	ctx->Reset();
	ctx->Push(_train);
	ctx->Push(_trailerNumber);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isMissionTrain(bool& success, int32_t _train) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD464F2E18836BFC);
	ctx->Reset();
	ctx->Push(_train);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_deleteMissionTrain(bool& success, int32_t& _train) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B76B14AE875C795);
	ctx->Reset();
	auto ptr_train = _train;
	ctx->Push(&ptr_train);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_train = ptr_train;
}

void Native_setMissionTrainAsNoLongerNeeded(bool& success, int32_t& _train, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBBE7648349B49BE8);
	ctx->Reset();
	auto ptr_train = _train;
	ctx->Push(&ptr_train);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_train = ptr_train;
}

void Native_setMissionTrainCoords(bool& success, int32_t _train, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x591CA673AA6AB736);
	ctx->Reset();
	ctx->Push(_train);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isThisModelABoat(bool& success, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45A9187928F4B9E3);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isThisModelAJetski(bool& success, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9537097412CF75FE);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isThisModelAPlane(bool& success, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0948AB42D7BA0DE);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isThisModelAHeli(bool& success, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCE4334788AF94EA);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isThisModelACar(bool& success, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F6DB52EEFC96DF8);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isThisModelATrain(bool& success, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAB935175B22E822B);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isThisModelABike(bool& success, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB50C0B0CEDC6CE84);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isThisModelABicycle(bool& success, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF94DD42F63BDED2);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isThisModelAQuadbike(bool& success, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39DAC362EE65FA28);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isThisModelAnAmphibiousCar(bool& success, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x633F6F44A537EBB6);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isThisModelAnAmphibiousQuadbike(bool& success, uint32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1A9FC1C76A6730D);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setHeliBladesFullSpeed(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA178472EBB8AE60D);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setHeliBladesSpeed(bool& success, int32_t _vehicle, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD280B4D7F3ABC4D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_forceSubThrottleForTime(bool& success, int32_t _vehicle, float _p1, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x99CAD8E7AFDB60FA);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleCanBeTargetted(bool& success, int32_t _vehicle, uint8_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3750146A28097A82);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _state);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDontAllowPlayerToEnterVehicleIfLockedForPlayer(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDBC631F109350B8C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleCanBeVisiblyDamaged(bool& success, int32_t _vehicle, uint8_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C7028F78FFD3681);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _state);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleHasUnbreakableLights(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1AA8A837D2169D94);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleRespectsLocksWhenHasDriver(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2311DD7159F00582);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleCanEjectPassengersIfLocked(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x065D03A9D6B2C6B5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getVehicleDirtLevel(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F17BC8BA08DA62B);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setVehicleDirtLevel(bool& success, int32_t _vehicle, float _dirtLevel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x79D3B596FE44EE8B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_dirtLevel);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getDoesVehicleHaveDamageDecals(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBCDC5017D3CE1E9E);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isVehicleDoorFullyOpen(bool& success, int32_t _vehicle, int32_t _doorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E933CFF7B111C22);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleEngineOn(bool& success, int32_t _vehicle, uint8_t _value, uint8_t _instantly, uint8_t _disableAutoStart) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2497C4717C8B881E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _value);
	ctx->Push((int32_t) _instantly);
	ctx->Push((int32_t) _disableAutoStart);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleUndriveable(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8ABA6AF54B942B95);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleProvidesCover(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5AFEEDD9BB2899D7);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleDoorControl(bool& success, int32_t _vehicle, int32_t _doorId, int32_t _speed, float _angle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2BFA0430F0A0FCB);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	ctx->Push(_speed);
	ctx->Push(_angle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleDoorLatched(bool& success, int32_t _vehicle, int32_t _doorId, uint8_t _p2, uint8_t _p3, uint8_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5A9653A8D2CAF48);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	ctx->Push((int32_t) _p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getVehicleDoorAngleRatio(bool& success, int32_t _vehicle, int32_t _doorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFE3F9C29F7B32BD5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

int32_t Native_getPedUsingVehicleDoor(bool& success, int32_t _vehicle, int32_t _doord) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x218297BF0CFD853B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doord);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setVehicleDoorShut(bool& success, int32_t _vehicle, int32_t _doorId, uint8_t _closeInstantly) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93D9BD300D7789E5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	ctx->Push((int32_t) _closeInstantly);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleDoorBroken(bool& success, int32_t _vehicle, int32_t _doorId, uint8_t _deleteDoor) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4D4F6A4AB575A33);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	ctx->Push((int32_t) _deleteDoor);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleCanBreak(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x59BF8C3D52C92F66);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesVehicleHaveRoof(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8AC862B0B32C5B80);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleRemoveAggressiveCarjackMission(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC4B3347BD68BD609);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleAvoidPlayerVehicleRiotVanMission(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3301660A57C9272);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCarjackMissionRemovalParameters(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9562064627FF9DB);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isBigVehicle(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F243D3919F442FE);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getNumberOfVehicleColours(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3B963160CD65D41E);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setVehicleColourCombination(bool& success, int32_t _vehicle, int32_t _colorCombination) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33E8CD3322E2FE31);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_colorCombination);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getVehicleColourCombination(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A842D197F845D56);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setVehicleXenonLightColorIndex(bool& success, int32_t _vehicle, int32_t _colorIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE41033B25D003A07);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_colorIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getVehicleXenonLightColorIndex(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3DFF319A831E0CDB);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setVehicleIsConsideredByPlayer(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x31B927BBC44156CD);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleWillForceOtherVehiclesToStop(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE5C1255A1830FF5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleActAsIfHasSirenOn(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9BECD4B9FEF3F8A6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleUseMoreRestrictiveSpawnChecks(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88BC673CA9E0AE99);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleMayBeUsedByGotoPointAnyMeans(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE851E480B814D4BA);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getRandomVehicleModelInMemory(bool& success, uint8_t _p0, uint32_t& _modelHash, int32_t& _successIndicator) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x055BF0AC0C34F4FD);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	auto ptr_modelHash = _modelHash;
	ctx->Push(&ptr_modelHash);
	auto ptr_successIndicator = _successIndicator;
	ctx->Push(&ptr_successIndicator);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_modelHash = ptr_modelHash;
	_successIndicator = ptr_successIndicator;
}

int32_t Native_getVehicleDoorLockStatus(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25BC98A59C2EA962);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getVehicleIndividualDoorLockStatus(bool& success, int32_t _vehicle, int32_t _doorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA4AC3EAAE46EC7B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isVehicleDoorDamaged(bool& success, int32_t _veh, int32_t _doorID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8E181E559464527);
	ctx->Reset();
	ctx->Push(_veh);
	ctx->Push(_doorID);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setDoorAllowedToBeBrokenOff(bool& success, int32_t _vehicle, int32_t _doorId, uint8_t _isBreakable) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FA133A4A9D37ED8);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	ctx->Push((int32_t) _isBreakable);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isVehicleBumperBouncing(bool& success, int32_t _vehicle, uint8_t _frontBumper) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27B926779DEB502D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _frontBumper);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isVehicleBumperBrokenOff(bool& success, int32_t _vehicle, uint8_t _frontBumper) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x468056A6BB6F3846);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _frontBumper);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isCopVehicleInArea3d(bool& success, float _x1, float _x2, float _y1, float _y2, float _z1, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EEF65D5F153E26A);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_x2);
	ctx->Push(_y1);
	ctx->Push(_y2);
	ctx->Push(_z1);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isVehicleOnAllWheels(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB104CD1BABF302E2);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getVehicleModelValue(bool& success, uint32_t _vehicleModel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5873C14A52D74236);
	ctx->Reset();
	ctx->Push(_vehicleModel);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint32_t Native_getVehicleLayoutHash(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28D37D4F71AC5C58);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint32_t Native_getInVehicleClipsetHashForSeat(bool& success, int32_t _vehicle, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA01BC64DD4BFBBAC);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

void Native_setRenderTrainAsDerailed(bool& success, int32_t _train, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x317B11A312DF5534);
	ctx->Reset();
	ctx->Push(_train);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleExtraColours(bool& success, int32_t _vehicle, int32_t _pearlescentColor, int32_t _wheelColor) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2036F561ADD12E33);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_pearlescentColor);
	ctx->Push(_wheelColor);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getVehicleExtraColours(bool& success, int32_t _vehicle, int32_t& _pearlescentColor, int32_t& _wheelColor) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3BC4245933A166F7);
	ctx->Reset();
	ctx->Push(_vehicle);
	auto ptr_pearlescentColor = _pearlescentColor;
	ctx->Push(&ptr_pearlescentColor);
	auto ptr_wheelColor = _wheelColor;
	ctx->Push(&ptr_wheelColor);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_pearlescentColor = ptr_pearlescentColor;
	_wheelColor = ptr_wheelColor;
}

void Native_setVehicleExtraColour5(bool& success, int32_t _vehicle, int32_t _color) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF40DD601A65F7F19);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_color);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getVehicleExtraColour5(bool& success, int32_t _vehicle, int32_t& _color) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D1464D472D32136);
	ctx->Reset();
	ctx->Push(_vehicle);
	auto ptr_color = _color;
	ctx->Push(&ptr_color);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_color = ptr_color;
}

void Native_setVehicleExtraColour6(bool& success, int32_t _vehicle, int32_t _color) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6089CDF6A57F326C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_color);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getVehicleExtraColour6(bool& success, int32_t _vehicle, int32_t& _color) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB7635E80A5C31BFF);
	ctx->Reset();
	ctx->Push(_vehicle);
	auto ptr_color = _color;
	ctx->Push(&ptr_color);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_color = ptr_color;
}

void Native_stopAllGarageActivity(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F87E938BDF29D66);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleFixed(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x115722B1B9C14C1C);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleDeformationFixed(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x953DA1E1B12C0491);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleCanEngineMissfire(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x206BC5DC9D1AC70A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleCanLeakOil(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x51BB2D88D31A914B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleCanLeakPetrol(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x192547247864DFDD);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDisableVehiclePetrolTankFires(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x465BF26AB9684352);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDisableVehiclePetrolTankDamage(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x37C8252A7C92D017);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDisableVehicleEngineFires(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x91A0BD635321F145);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleLimitSpeedWhenPlayerInactive(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC50CE861B55EAB8B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleStopInstantlyWhenPlayerInactive(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6EBFB22D646FFC18);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDisablePretendOccupants(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25367DE49D64CF16);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeVehiclesFromGeneratorsInArea(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46A1E1A299EC4BBA);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleSteerBias(bool& success, int32_t _vehicle, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42A8EC77D5150CBE);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isVehicleExtraTurnedOn(bool& success, int32_t _vehicle, int32_t _extraId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2E6822DBFD6C8BD);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_extraId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleExtra(bool& success, int32_t _vehicle, int32_t _extraId, uint8_t _disable) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EE3A3C5E4A40CC9);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_extraId);
	ctx->Push((int32_t) _disable);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesExtraExist(bool& success, int32_t _vehicle, int32_t _extraId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1262D55792428154);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_extraId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isExtraBrokenOff(bool& success, int32_t _vehicle, int32_t _extraId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x534E36D4DB9ECC5D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_extraId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setConvertibleRoof(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF39C4F538B5124C2);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_lowerConvertibleRoof(bool& success, int32_t _vehicle, uint8_t _instantlyLower) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDED51F703D0FA83D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _instantlyLower);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_raiseConvertibleRoof(bool& success, int32_t _vehicle, uint8_t _instantlyRaise) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F5FB35D7E88FC70);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _instantlyRaise);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getConvertibleRoofState(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF8C397922FC03F41);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isVehicleAConvertible(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x52F357A30698BCCE);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_transformToSubmarine(bool& success, int32_t _vehicle, uint8_t _noAnimation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE4C854FFDB6EEBE);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _noAnimation);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_transformToCar(bool& success, int32_t _vehicle, uint8_t _noAnimation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A69FFD1B42BFF9E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _noAnimation);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isVehicleInSubmarineMode(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA77DC70BD689A1E5);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isVehicleStoppedAtTrafficLights(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2959F696AE390A99);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleDamage(bool& success, int32_t _vehicle, float _xOffset, float _yOffset, float _zOffset, float _damage, float _radius, uint8_t _focusOnModel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1DD317EA8FD4F29);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push(_damage);
	ctx->Push(_radius);
	ctx->Push((int32_t) _focusOnModel);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleOccupantsTakeExplosiveDamage(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35BB21DE06784373);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getVehicleEngineHealth(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC45D23BAF168AAB8);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setVehicleEngineHealth(bool& success, int32_t _vehicle, float _health) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45F6D8EEF34ABEF1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_health);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlaneEngineHealth(bool& success, int32_t _vehicle, float _health) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A86A0475B6A1434);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_health);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getVehiclePetrolTankHealth(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D5DABE888D2D074);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setVehiclePetrolTankHealth(bool& success, int32_t _vehicle, float _health) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70DB57649FA8D0D8);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_health);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isVehicleStuckTimerUp(bool& success, int32_t _vehicle, int32_t _p1, int32_t _ms) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x679BE1DAF71DA874);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	ctx->Push(_ms);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_resetVehicleStuckTimer(bool& success, int32_t _vehicle, int32_t _nullAttributes) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7591B0065AFAA7A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_nullAttributes);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isVehicleDriveable(bool& success, int32_t _vehicle, uint8_t _isOnFireCheck) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C241E39B23DF959);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _isOnFireCheck);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleHasBeenOwnedByPlayer(bool& success, int32_t _vehicle, uint8_t _owned) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B5F9D2AF1F1722D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _owned);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleNeedsToBeHotwired(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFBA550EA44404EE6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleBlipThrottleRandomly(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F3F689B814F2599);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPoliceFocusWillTrackVehicle(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E74E62E0A97E901);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_startVehicleHorn(bool& success, int32_t _vehicle, int32_t _duration, uint32_t _mode, uint8_t _forever) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C8C6504B5B63D2C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_duration);
	ctx->Push(_mode);
	ctx->Push((int32_t) _forever);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleInCarModShop(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D44FCCE98450843);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleHasStrongAxles(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92F0CF722BC4202F);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

const char* Native_getDisplayNameFromVehicleModel(bool& success, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB215AAC32D25D019);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

const char* Native_getMakeNameFromVehicleModel(bool& success, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF7AF4F159FF99F97);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

vector3_t Native_getVehicleDeformationAtPos(bool& success, int32_t _vehicle, float _offsetX, float _offsetY, float _offsetZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4EC6CFBC7B2E9536);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

void Native_setVehicleLivery(bool& success, int32_t _vehicle, int32_t _livery) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x60BF608F1B8CD1B6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_livery);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getVehicleLivery(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2BB9230590DA5E8A);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getVehicleLiveryCount(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x87B63E25A529D526);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setVehicleLivery2(bool& success, int32_t _vehicle, int32_t _livery) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6D3A8750DC73270);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_livery);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getVehicleLivery2(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x60190048C0764A26);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getVehicleLivery2Count(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5ECB40269053C0D4);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isVehicleWindowIntact(bool& success, int32_t _vehicle, int32_t _windowIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46E571A0E20D01F1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_windowIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_areAllVehicleWindowsIntact(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11D862A3E977A9EF);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_areAnyVehicleSeatsFree(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D34FC3BC4ADB780);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_resetVehicleWheels(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21D2E5662C1F6FED);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isHeliPartBroken(bool& success, int32_t _vehicle, uint8_t _p1, uint8_t _p2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC74B4BE25EB6C8A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

float Native_getHeliMainRotorHealth(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4CB7541F413D2C5);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getHeliTailRotorHealth(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE8CE82A4219AC8C);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getHeliTailBoomHealth(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC51915D27E4A5F7);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setHeliMainRotorHealth(bool& success, int32_t _vehicle, float _health) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4056EA1105F5ABD7);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_health);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setHeliTailRotorHealth(bool& success, int32_t _vehicle, float _health) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFE205F38AAA58E5B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_health);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_setHeliTailBoomCanBreakOff(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3EC8BF18AA453FE9);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleNameDebug(bool& success, int32_t _vehicle, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBFDF984E2C22B94F);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(SaveString(_name));
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleExplodesOnHighExplosionDamage(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71B0892EC081D60A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleExplodesOnExplosionDamageAtZeroBodyHealth(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD565F438137F0E10);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAllowVehicleExplodesOnContact(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3441CAD2F2231923);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleDisableTowing(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B6747FAA9DB9D6B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getVehicleHasLandingGear(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE43701C36CAFF1A4);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_controlLandingGear(bool& success, int32_t _vehicle, int32_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCFC8BE9A5E1FE575);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getLandingGearState(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B0F3DCA3DB0F4CD);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_isAnyVehicleNearPoint(bool& success, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61E1DD6125A3EEE6);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_requestVehicleHighDetailModel(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6E9FDCB2C76785E);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeVehicleHighDetailModel(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x00689CDE5F7C6787);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isVehicleHighDetail(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F25887F3C104278);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_requestVehicleAsset(bool& success, uint32_t _vehicleHash, int32_t _vehicleAsset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x81A15811460FAB3A);
	ctx->Reset();
	ctx->Push(_vehicleHash);
	ctx->Push(_vehicleAsset);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasVehicleAssetLoaded(bool& success, int32_t _vehicleAsset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1BBE0523B8DB9A21);
	ctx->Reset();
	ctx->Push(_vehicleAsset);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_removeVehicleAsset(bool& success, int32_t _vehicleAsset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xACE699C71AB9DEB5);
	ctx->Reset();
	ctx->Push(_vehicleAsset);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleTowTruckArmPosition(bool& success, int32_t _vehicle, float _position) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFE54B92A344583CA);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_position);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_attachVehicleToTowTruck(bool& success, int32_t _towTruck, int32_t _vehicle, uint8_t _rear, float _hookOffsetX, float _hookOffsetY, float _hookOffsetZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29A16F8D621C4508);
	ctx->Reset();
	ctx->Push(_towTruck);
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _rear);
	ctx->Push(_hookOffsetX);
	ctx->Push(_hookOffsetY);
	ctx->Push(_hookOffsetZ);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_detachVehicleFromTowTruck(bool& success, int32_t _towTruck, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC2DB6B6708350ED8);
	ctx->Reset();
	ctx->Push(_towTruck);
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_detachVehicleFromAnyTowTruck(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0E9CE05A1E68CD8);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isVehicleAttachedToTowTruck(bool& success, int32_t _towTruck, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x146DF9EC4C4B9FD4);
	ctx->Reset();
	ctx->Push(_towTruck);
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getEntityAttachedToTowTruck(bool& success, int32_t _towTruck) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEFEA18DCF10F8F75);
	ctx->Reset();
	ctx->Push(_towTruck);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_setVehicleAutomaticallyAttaches(bool& success, int32_t _vehicle, uint8_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8BA6F76BC53A1493);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setVehicleBulldozerArmPosition(bool& success, int32_t _vehicle, float _position, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF8EBCCC96ADB9FB7);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_position);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleTankTurretPosition(bool& success, int32_t _vehicle, float _position, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x56B94C6D7127DFBA);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_position);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleTurretTarget(bool& success, int32_t _vehicle, uint8_t _p1, float _x, float _y, float _z, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0581730AB9380412);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleTankStationary(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x737E398138550FFF);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleTurretSpeedThisFrame(bool& success, int32_t _vehicle, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1093408B4B9D1146);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableVehicleTurretMovementThisFrame(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x32CAEDF24A583345);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleFlightNozzlePosition(bool& success, int32_t _vehicle, float _angleRatio) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x30D779DE7C4F6DD3);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_angleRatio);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleFlightNozzlePositionImmediate(bool& success, int32_t _vehicle, float _angle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9AA47FFF660CB932);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_angle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getVehicleFlightNozzlePosition(bool& success, int32_t _plane) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA62027C8BDB326E);
	ctx->Reset();
	ctx->Push(_plane);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setDisableVerticalFlightModeTransition(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE2B43770B655F8F);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_generateVehicleCreationPosFromPaths(bool& success, vector3_t& _outVec, int32_t _p1, vector3_t& _outVec1, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA4822F1CF23F4810);
	ctx->Reset();
	alt::INative::Vector3 converted_outVec { _outVec.x, 0, _outVec.y, 0, _outVec.z };
	ctx->Push(&converted_outVec);
	ctx->Push(_p1);
	alt::INative::Vector3 converted_outVec1 { _outVec1.x, 0, _outVec1.y, 0, _outVec1.z };
	ctx->Push(&converted_outVec1);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outVec.x = converted_outVec.x;
	_outVec.y = converted_outVec.y;
	_outVec.z = converted_outVec.z;
	_outVec1.x = converted_outVec1.x;
	_outVec1.y = converted_outVec1.y;
	_outVec1.z = converted_outVec1.z;
	return ctx->ResultBool();
}

void Native_setVehicleBurnout(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB8794444A7D60FB);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isVehicleInBurnout(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1297A88E081430EB);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleReduceGrip(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x222FF6A823D122E2);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleReduceGripLevel(bool& success, int32_t _vehicle, int32_t _val) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6DEE944E1EE90CFB);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_val);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleIndicatorLights(bool& success, int32_t _vehicle, int32_t _turnSignal, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5D45264751B7DF0);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_turnSignal);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleBrakeLights(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92B35082E0B42F66);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleHandbrake(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x684785568EF26A22);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleBrake(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4E2FD323574965C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_instantlyFillVehiclePopulation(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48ADC8A773564670);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasInstantFillVehiclePopulationFinished(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x91D6DD290888CBAB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkEnableEmptyCrowdingVehiclesRemoval(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x51DB102F4A3BA5E0);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_networkCapEmptyCrowdingVehiclesRemoval(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA4A9A4C40E615885);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getVehicleTrailerVehicle(bool& success, int32_t _vehicle, int32_t& _trailer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CDD6BADC297830D);
	ctx->Reset();
	ctx->Push(_vehicle);
	auto ptr_trailer = _trailer;
	ctx->Push(&ptr_trailer);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_trailer = ptr_trailer;
	return ctx->ResultBool();
}

void Native_setVehicleUsesLargeRearRamp(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCAC66558B944DA67);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleRudderBroken(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x09606148B6C71DEF);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setConvertibleRoofLatchState(bool& success, int32_t _vehicle, uint8_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A78AD3D8240536F);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _state);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getVehicleEstimatedMaxSpeed(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53AF99BAA671CA47);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getVehicleMaxBraking(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD7E85FC227197C4);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getVehicleMaxTraction(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA132FB5370554DB0);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getVehicleAcceleration(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5DD35C8D074E57AE);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getVehicleModelEstimatedMaxSpeed(bool& success, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF417C2502FFFED43);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getVehicleModelMaxBraking(bool& success, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC53FD41B4ED944C);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getVehicleModelMaxBrakingMaxMods(bool& success, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBFBA3BA79CFF7EBF);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getVehicleModelMaxTraction(bool& success, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x539DE94D44FDFD0D);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getVehicleModelAcceleration(bool& success, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C044C5C84505B6A);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getVehicleModelAccelerationMaxMods(bool& success, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53409B5163D5B846);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getFlyingVehicleModelAgility(bool& success, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6AD107DDC9054CC);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getBoatVehicleModelAgility(bool& success, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5AA3F878A178C4FC);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getVehicleClassEstimatedMaxSpeed(bool& success, int32_t _vehicleClass) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x00C09F246ABEDD82);
	ctx->Reset();
	ctx->Push(_vehicleClass);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getVehicleClassMaxTraction(bool& success, int32_t _vehicleClass) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDBC86D85C5059461);
	ctx->Reset();
	ctx->Push(_vehicleClass);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getVehicleClassMaxAgility(bool& success, int32_t _vehicleClass) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F930AD022D6DE3B);
	ctx->Reset();
	ctx->Push(_vehicleClass);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getVehicleClassMaxAcceleration(bool& success, int32_t _vehicleClass) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F83E7E45D9EA7AE);
	ctx->Reset();
	ctx->Push(_vehicleClass);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getVehicleClassMaxBraking(bool& success, int32_t _vehicleClass) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4BF54C16EC8FEC03);
	ctx->Reset();
	ctx->Push(_vehicleClass);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

int32_t Native_addRoadNodeSpeedZone(bool& success, float _x, float _y, float _z, float _radius, float _speed, uint8_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2CE544C68FB812A0);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_speed);
	ctx->Push((int32_t) _p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_removeRoadNodeSpeedZone(bool& success, int32_t _speedzone) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1033371FC8E842A7);
	ctx->Reset();
	ctx->Push(_speedzone);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_openBombBayDoors(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x87E7F24270732CB1);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_closeBombBayDoors(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3556041742A0DC74);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getAreBombBayDoorsOpen(bool& success, int32_t _aircraft) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0917A423314BBA8);
	ctx->Reset();
	ctx->Push(_aircraft);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isVehicleSearchlightOn(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0F97FCE55094987);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleSearchlight(bool& success, int32_t _heli, uint8_t _toggle, uint8_t _canBeUsedByAI) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14E85C5EE7A4D542);
	ctx->Reset();
	ctx->Push(_heli);
	ctx->Push((int32_t) _toggle);
	ctx->Push((int32_t) _canBeUsedByAI);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesVehicleHaveSearchlight(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x99015ED7DBEA5113);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isEntryPointForSeatClear(bool& success, int32_t _ped, int32_t _vehicle, int32_t _seatIndex, uint8_t _side, uint8_t _onEnter) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x639431E895B9AA57);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_seatIndex);
	ctx->Push((int32_t) _side);
	ctx->Push((int32_t) _onEnter);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

vector3_t Native_getEntryPointPosition(bool& success, int32_t _vehicle, int32_t _doorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0572928C0ABFDA3);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

uint8_t Native_canShuffleSeat(bool& success, int32_t _vehicle, int32_t _seatIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x30785D90C956BF35);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_seatIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getNumModKits(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33F2E3FE70EAAE1D);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setVehicleModKit(bool& success, int32_t _vehicle, int32_t _modKit) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F2AA07F00B3217A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modKit);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getVehicleModKit(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6325D1A044AE510D);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getVehicleModKitType(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC058F5121E54C32);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getVehicleWheelType(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3ED1BFB4BE636DC);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setVehicleWheelType(bool& success, int32_t _vehicle, int32_t _WheelType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x487EB21CC7295BA1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_WheelType);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getNumModColors(bool& success, int32_t _paintType, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA551BE18C11A476D);
	ctx->Reset();
	ctx->Push(_paintType);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setVehicleModColor1(bool& success, int32_t _vehicle, int32_t _paintType, int32_t _color, int32_t _pearlescentColor) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43FEB945EE7F85B8);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_paintType);
	ctx->Push(_color);
	ctx->Push(_pearlescentColor);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleModColor2(bool& success, int32_t _vehicle, int32_t _paintType, int32_t _color) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x816562BADFDEC83E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_paintType);
	ctx->Push(_color);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getVehicleModColor1(bool& success, int32_t _vehicle, int32_t& _paintType, int32_t& _color, int32_t& _pearlescentColor) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE8D65CA700C9A693);
	ctx->Reset();
	ctx->Push(_vehicle);
	auto ptr_paintType = _paintType;
	ctx->Push(&ptr_paintType);
	auto ptr_color = _color;
	ctx->Push(&ptr_color);
	auto ptr_pearlescentColor = _pearlescentColor;
	ctx->Push(&ptr_pearlescentColor);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_paintType = ptr_paintType;
	_color = ptr_color;
	_pearlescentColor = ptr_pearlescentColor;
}

void Native_getVehicleModColor2(bool& success, int32_t _vehicle, int32_t& _paintType, int32_t& _color) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x81592BE4E3878728);
	ctx->Reset();
	ctx->Push(_vehicle);
	auto ptr_paintType = _paintType;
	ctx->Push(&ptr_paintType);
	auto ptr_color = _color;
	ctx->Push(&ptr_color);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_paintType = ptr_paintType;
	_color = ptr_color;
}

const char* Native_getVehicleModColor1Name(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB45085B721EFD38C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

const char* Native_getVehicleModColor2Name(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4967A516ED23A5A1);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

uint8_t Native_haveVehicleModsStreamedIn(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A83F5F9963775EF);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isVehicleModGen9Exclusive(bool& success, int32_t _vehicle, int32_t _modType, int32_t _modIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x00834EAC4A96E010);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	ctx->Push(_modIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleMod(bool& success, int32_t _vehicle, int32_t _modType, int32_t _modIndex, uint8_t _customTires) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6AF0636DDEDCB6DD);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	ctx->Push(_modIndex);
	ctx->Push((int32_t) _customTires);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getVehicleMod(bool& success, int32_t _vehicle, int32_t _modType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x772960298DA26FDB);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getVehicleModVariation(bool& success, int32_t _vehicle, int32_t _modType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3924ECD70E095DC);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getNumVehicleMods(bool& success, int32_t _vehicle, int32_t _modType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE38E9162A2500646);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_removeVehicleMod(bool& success, int32_t _vehicle, int32_t _modType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92D619E420858204);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_toggleVehicleMod(bool& success, int32_t _vehicle, int32_t _modType, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A1F4F37F95BAD08);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isToggleModOn(bool& success, int32_t _vehicle, int32_t _modType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84B233A8C8FC8AE7);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

const char* Native_getModTextLabel(bool& success, int32_t _vehicle, int32_t _modType, int32_t _modValue) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8935624F8C5592CC);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	ctx->Push(_modValue);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

const char* Native_getModSlotName(bool& success, int32_t _vehicle, int32_t _modType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x51F0FEB9F6AE98C0);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

const char* Native_getLiveryName(bool& success, int32_t _vehicle, int32_t _liveryIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4C7A93837C91A1F);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_liveryIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

int32_t Native_getVehicleModModifierValue(bool& success, int32_t _vehicle, int32_t _modType, int32_t _modIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90A38E9838E0A8C1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	ctx->Push(_modIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint32_t Native_getVehicleModIdentifierHash(bool& success, int32_t _vehicle, int32_t _modType, int32_t _modIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4593CF82AA179706);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	ctx->Push(_modIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

void Native_preloadVehicleMod(bool& success, int32_t _vehicle, int32_t _modType, int32_t _modIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x758F49C24925568A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	ctx->Push(_modIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasPreloadModsFinished(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06F43E5175EB6D96);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_releasePreloadMods(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x445D79F995508307);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleTyreSmokeColor(bool& success, int32_t _vehicle, int32_t _r, int32_t _g, int32_t _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5BA80F839791C0F);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getVehicleTyreSmokeColor(bool& success, int32_t _vehicle, int32_t& _r, int32_t& _g, int32_t& _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB635392A4938B3C3);
	ctx->Reset();
	ctx->Push(_vehicle);
	auto ptr_r = _r;
	ctx->Push(&ptr_r);
	auto ptr_g = _g;
	ctx->Push(&ptr_g);
	auto ptr_b = _b;
	ctx->Push(&ptr_b);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_r = ptr_r;
	_g = ptr_g;
	_b = ptr_b;
}

void Native_setVehicleWindowTint(bool& success, int32_t _vehicle, int32_t _tint) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57C51E6BAD752696);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_tint);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getVehicleWindowTint(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0EE21293DAD47C95);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getNumVehicleWindowTints(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D1224004B3A6707);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_getVehicleColor(bool& success, int32_t _vehicle, int32_t& _r, int32_t& _g, int32_t& _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3CC740D36221548);
	ctx->Reset();
	ctx->Push(_vehicle);
	auto ptr_r = _r;
	ctx->Push(&ptr_r);
	auto ptr_g = _g;
	ctx->Push(&ptr_g);
	auto ptr_b = _b;
	ctx->Push(&ptr_b);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_r = ptr_r;
	_g = ptr_g;
	_b = ptr_b;
}

int32_t Native_getVehicleColoursWhichCanBeSet(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEEBFC7A7EFDC35B4);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint32_t Native_getVehicleCauseOfDestruction(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE495D1EF4C91FD20);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

void Native_overridePlaneDamageThrehsold(bool& success, int32_t _vehicle, float _health) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5EE5632F47AE9695);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_health);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getIsLeftVehicleHeadlightDamaged(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5EF77C9ADD3B11A3);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getIsRightVehicleHeadlightDamaged(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7ECB73355EB2F20);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getBothVehicleHeadlightsDamaged(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC69ADF931AAE0C3);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_modifyVehicleTopSpeed(bool& success, int32_t _vehicle, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93A3996368C94158);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleMaxSpeed(bool& success, int32_t _vehicle, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBAA045B4E42F3C06);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleStaysFrozenWhenCleanedUp(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CF38D529D7441D9);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleActAsIfHighSpeedForFragSmashing(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F9FB66F3A3842D2);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedsCanFallOffThisVehicleFromLargeFallDamage(bool& success, int32_t _vehicle, uint8_t _toggle, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x59C3757B3B7408E8);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_addVehicleCombatAngledAvoidanceArea(bool& success, float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x54B0F614960F4A5F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_removeVehicleCombatAvoidanceArea(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE30524E1871F481D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isAnyPedRappellingFromHeli(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x291E373D483E7EE7);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleCheatPowerIncrease(bool& success, int32_t _vehicle, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB59E4BD37AE292DB);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleInfluencesWantedLevel(bool& success, int32_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0AD9E8F87FF7C16F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleIsWanted(bool& success, int32_t _vehicle, uint8_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF7EC25A3EBEEC726);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _state);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_swingBoatBoomToRatio(bool& success, int32_t _vehicle, float _ratio) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF488C566413B4232);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_ratio);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_swingBoatBoomFreely(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC1F981A6F74F0C23);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_allowBoatBoomToAnimate(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F3B4D4E43177236);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getBoatBoomPositionRatio(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6636C535F6CC2725);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_disablePlaneAileron(bool& success, int32_t _vehicle, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23428FC53C60919C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getIsVehicleEngineRunning(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE31E7DF9B5B132E);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleUseAlternateHandling(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D97D1E3A70A649F);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBikeOnStand(bool& success, int32_t _vehicle, float _x, float _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9CFA4896C3A53CBB);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleNotStealableAmbiently(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAB04325045427AAE);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_lockDoorsWhenNoLongerNeeded(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCFD778E7904C255E);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setLastDrivenVehicle(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xACFB2463CC22BED2);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getLastDrivenVehicle(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2D06FAEDE65B577);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_clearLastDrivenVehicle(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE01903C47C7AC89E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleHasBeenDrivenFlag(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02398B627547189C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTaskVehicleGotoPlaneMinHeightAboveTerrain(bool& success, int32_t _plane, int32_t _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB893215D8D4C015B);
	ctx->Reset();
	ctx->Push(_plane);
	ctx->Push(_height);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleLodMultiplier(bool& success, int32_t _vehicle, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93AE6A61BE015BF1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleCanSaveInGarage(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x428BACCDF5E26EAD);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getVehicleNumOfBrokenOffParts(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42A4BEB35D372407);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getVehicleNumOfBrokenLoosenParts(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C8CBFE1EA5FC631);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setForceVehicleEngineDamageByBullet(bool& success, int32_t _p0, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D9D109F63FEE1D4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleGeneratesEngineShockingEvents(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x279D50DE5652D935);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_copyVehicleDamages(bool& success, int32_t _sourceVehicle, int32_t _targetVehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE44A982368A4AF23);
	ctx->Reset();
	ctx->Push(_sourceVehicle);
	ctx->Push(_targetVehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableVehicleExplosionBreakOffParts(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF25E02CB9C5818F8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setLightsCutoffDistanceTweak(bool& success, float _distance) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC3CCA5844452B06);
	ctx->Reset();
	ctx->Push(_distance);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleShootAtTarget(bool& success, int32_t _driver, int32_t _entity, float _xTarget, float _yTarget, float _zTarget) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74CD9A9327A282EA);
	ctx->Reset();
	ctx->Push(_driver);
	ctx->Push(_entity);
	ctx->Push(_xTarget);
	ctx->Push(_yTarget);
	ctx->Push(_zTarget);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getVehicleLockOnTarget(bool& success, int32_t _vehicle, int32_t& _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F5EBAB1F260CFCE);
	ctx->Reset();
	ctx->Push(_vehicle);
	auto ptr_entity = _entity;
	ctx->Push(&ptr_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_entity = ptr_entity;
	return ctx->ResultBool();
}

void Native_setForceHdVehicle(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97CE68CB032583F0);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleCustomPathNodeStreamingRadius(bool& success, int32_t _vehicle, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x182F266C2D9E2BEB);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getVehiclePlateType(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9CCC9525BF2408E0);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_trackVehicleVisibility(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x64473AEFDCF47DCA);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isVehicleVisible(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA0A52D24FB98293);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleGravity(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x89F149B6131E57DA);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setEnableVehicleSlipstreaming(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6C0C80B8C867537);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleSlipstreamingShouldTimeOut(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF051D9BFB6BA39C0);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getVehicleCurrentTimeInSlipStream(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36492C2F0D134C56);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

uint8_t Native_isVehicleProducingSlipStream(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48C633E94A8142A7);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleInactiveDuringPlayback(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06582AFF74894C75);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleActiveDuringPlayback(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFFCEF48E511DB48);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isVehicleSprayable(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D474C8FAEFF6CDE);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleEngineCanDegrade(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x983765856F2564F9);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableVehcileDynamicAmbientScales(bool& success, int32_t _vehicle, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0E4BA16D1DB546C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_enableVehicleDynamicAmbientScales(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF87D9F2301F7D206);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPlaneLandingGearIntact(bool& success, int32_t _plane) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4198AB0022B15F87);
	ctx->Reset();
	ctx->Push(_plane);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_arePlanePropellersIntact(bool& success, int32_t _plane) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x755D6D5267CBBD7E);
	ctx->Reset();
	ctx->Push(_plane);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_setPlanePropellerHealth(bool& success, int32_t _plane, float _health) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C815EB175086F84);
	ctx->Reset();
	ctx->Push(_plane);
	ctx->Push(_health);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleCanDeformWheels(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0CDDA42F9E360CA6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isVehicleStolen(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4AF9BD80EEBEB453);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleIsStolen(bool& success, int32_t _vehicle, uint8_t _isStolen) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x67B2C79AA7FF5738);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _isStolen);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlaneTurbulenceMultiplier(bool& success, int32_t _vehicle, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD2D28A1AFDFF131);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_areWingsOfPlaneIntact(bool& success, int32_t _plane) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5991A01434CE9677);
	ctx->Reset();
	ctx->Push(_plane);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_allowAmbientVehiclesToAvoidAdverseConditions(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB264C4D2F2B0A78B);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_detachVehicleFromCargobob(bool& success, int32_t _vehicle, int32_t _cargobob) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0E21D3DF1051399D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_cargobob);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_detachVehicleFromAnyCargobob(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADF7BE450512C12F);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_detachEntityFromCargobob(bool& success, int32_t _cargobob, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF03011701811146);
	ctx->Reset();
	ctx->Push(_cargobob);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isVehicleAttachedToCargobob(bool& success, int32_t _cargobob, int32_t _vehicleAttached) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD40148F22E81A1D9);
	ctx->Reset();
	ctx->Push(_cargobob);
	ctx->Push(_vehicleAttached);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getVehicleAttachedToCargobob(bool& success, int32_t _cargobob) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x873B82D42AC2B9E5);
	ctx->Reset();
	ctx->Push(_cargobob);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getEntityAttachedToCargobob(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x99093F60746708CA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_attachVehicleToCargobob(bool& success, int32_t _vehicle, int32_t _cargobob, int32_t _p2, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4127F1D84E347769);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_cargobob);
	ctx->Push(_p2);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_attachEntityToCargobob(bool& success, int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1DD82F3CCF9A01E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCargobobForceDontDetachVehicle(bool& success, int32_t _cargobob, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x571FEB383F629926);
	ctx->Reset();
	ctx->Push(_cargobob);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCargobobExcludeFromPickupEntity(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F34B0626C594380);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_canCargobobPickUpEntity(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C1D8B3B19E517CC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

vector3_t Native_getAttachedPickUpHookPosition(bool& success, int32_t _cargobob) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCBDB9B923CACC92D);
	ctx->Reset();
	ctx->Push(_cargobob);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

uint8_t Native_doesCargobobHavePickUpRope(bool& success, int32_t _cargobob) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1821D91AD4B56108);
	ctx->Reset();
	ctx->Push(_cargobob);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_createPickUpRopeForCargobob(bool& success, int32_t _cargobob, int32_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7BEB0C7A235F6F3B);
	ctx->Reset();
	ctx->Push(_cargobob);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removePickUpRopeForCargobob(bool& success, int32_t _cargobob) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9768CF648F54C804);
	ctx->Reset();
	ctx->Push(_cargobob);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPickupRopeLengthForCargobob(bool& success, int32_t _cargobob, float _length1, float _length2, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x877C1EAEAC531023);
	ctx->Reset();
	ctx->Push(_cargobob);
	ctx->Push(_length1);
	ctx->Push(_length2);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPickupRopeLengthWithoutCreatingRopeForCargobob(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0ED6438E6D39BA8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCargobobPickupRopeDampingMultiplier(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF1182F682F65307);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCargobobPickupRopeType(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0D5F65A8F4EBDAB5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesCargobobHavePickupMagnet(bool& success, int32_t _cargobob) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E08BF5B3722BAC9);
	ctx->Reset();
	ctx->Push(_cargobob);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setCargobobPickupMagnetActive(bool& success, int32_t _cargobob, uint8_t _isActive) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A665550F8DA349B);
	ctx->Reset();
	ctx->Push(_cargobob);
	ctx->Push((int32_t) _isActive);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCargobobPickupMagnetStrength(bool& success, int32_t _cargobob, float _strength) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBCBFCD9D1DAC19E2);
	ctx->Reset();
	ctx->Push(_cargobob);
	ctx->Push(_strength);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCargobobPickupMagnetFalloff(bool& success, int32_t _cargobob, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA17BAD153B51547E);
	ctx->Reset();
	ctx->Push(_cargobob);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCargobobPickupMagnetReducedStrength(bool& success, int32_t _cargobob, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66979ACF5102FD2F);
	ctx->Reset();
	ctx->Push(_cargobob);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCargobobPickupMagnetReducedFalloff(bool& success, int32_t _cargobob, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D8EAC07506291FB);
	ctx->Reset();
	ctx->Push(_cargobob);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCargobobPickupMagnetPullStrength(bool& success, int32_t _cargobob, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED8286F71A819BAA);
	ctx->Reset();
	ctx->Push(_cargobob);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCargobobPickupMagnetPullRopeLength(bool& success, int32_t _vehicle, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x685D5561680D088B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCargobobPickupMagnetSetTargetedMode(bool& success, int32_t _vehicle, int32_t _cargobob) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE301BD63E9E13CF0);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_cargobob);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCargobobPickupMagnetSetAmbientMode(bool& success, int32_t _vehicle, uint8_t _p1, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9BDDC73CC6A115D4);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCargobobPickupMagnetEnsurePickupEntityUpright(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x56EB5E94318D3FB6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesVehicleHaveWeapons(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25ECB9F8017D98E0);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleWillTellOthersToHurry(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C4A1590ABF43E8B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_disableVehicleWeapon(bool& success, uint8_t _disabled, uint32_t _weaponHash, int32_t _vehicle, int32_t _owner) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF4FC6A6F67D8D856);
	ctx->Reset();
	ctx->Push((int32_t) _disabled);
	ctx->Push(_weaponHash);
	ctx->Push(_vehicle);
	ctx->Push(_owner);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isVehicleWeaponDisabled(bool& success, uint32_t _weaponHash, int32_t _vehicle, int32_t _owner) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x563B65A643ED072E);
	ctx->Reset();
	ctx->Push(_weaponHash);
	ctx->Push(_vehicle);
	ctx->Push(_owner);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleUsedForPilotSchool(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE05DD0E9707003A3);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleActiveForPedNavigation(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21115BCD6E44656A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getVehicleClass(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29439776AAA00A62);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getVehicleClassFromName(bool& success, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDEDF1C8BD47C2200);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPlayersLastVehicle(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBCDF8BAF56C87B6A);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleCanBeUsedByFleeingPeds(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x300504B23BD3B711);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAircraftPilotSkillNoiseScalar(bool& success, int32_t _vehicle, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE5810AC70602F2F5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleDropsMoneyWhenBlownUp(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x068F64F2470F9656);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleKeepEngineOnWhenAbandoned(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8FBC8B1330CA9B4);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleImpatienceTimer(bool& success, int32_t _vehicle, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A973569BA094650);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleHandlingOverride(bool& success, int32_t _vehicle, uint32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x10655FAB9915623D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleExtendedRemovalRange(bool& success, int32_t _vehicle, int32_t _range) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x79DF7E806202CE01);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_range);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleSteeringBiasScalar(bool& success, int32_t _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9007A2F21DC108D4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setHeliControlLaggingRateScalar(bool& success, int32_t _helicopter, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E0859B530A365CC);
	ctx->Reset();
	ctx->Push(_helicopter);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleFrictionOverride(bool& success, int32_t _vehicle, float _friction) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1837AF7C627009BA);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_friction);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleWheelsCanBreakOffWhenBlowUp(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA37B9A517B133349);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_arePlaneControlPanelsIntact(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF78F94D60248C737);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleCeilingHeight(bool& success, int32_t _vehicle, float _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA46413066687A328);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_height);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleNoExplosionDamageFromDriver(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E569EC46EC21CAE);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearVehicleRouteHistory(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D6AF961B72728AE);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_doesVehicleExistWithDecorator(bool& success, const char* _decorator) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x956B409B984D9BF7);
	ctx->Reset();
	ctx->Push(SaveString(_decorator));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setVehicleAiCanUseExclusiveSeats(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x41062318F23ED854);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleExclusiveDriver(bool& success, int32_t _vehicle, int32_t _ped, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5C51B5502E85E83);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_ped);
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedExclusiveDriverOfVehicle(bool& success, int32_t _ped, int32_t _vehicle, int32_t& _outIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB09D25E77C33EB3F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	auto ptr_outIndex = _outIndex;
	ctx->Push(&ptr_outIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outIndex = ptr_outIndex;
	return ctx->ResultBool();
}

void Native_disableIndividualPlanePropeller(bool& success, int32_t _vehicle, int32_t _propeller) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x500873A45724C863);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_propeller);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleForceAfterburner(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB055A34527CB8FD7);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDontProcessVehicleGlass(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1087BC8EC540DAEB);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDisableWantedConesResponse(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4AD280EB48B2D8E6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setUseDesiredZCruiseSpeedForLanding(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB68CFAF83A02768D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setArriveDistanceOverrideForVehiclePersuitAttack(bool& success, int32_t _vehicle, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0205F5365292D2EB);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleReadyForCleanup(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF9159024555488C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDistantCarsEnabled(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF796359A959DF65D);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleNeonColour(bool& success, int32_t _vehicle, int32_t _r, int32_t _g, int32_t _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8E0A582209A62695);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleNeonIndexColour(bool& success, int32_t _vehicle, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB93B2867F7B479D1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getVehicleNeonColour(bool& success, int32_t _vehicle, int32_t& _r, int32_t& _g, int32_t& _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7619EEE8C886757F);
	ctx->Reset();
	ctx->Push(_vehicle);
	auto ptr_r = _r;
	ctx->Push(&ptr_r);
	auto ptr_g = _g;
	ctx->Push(&ptr_g);
	auto ptr_b = _b;
	ctx->Push(&ptr_b);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_r = ptr_r;
	_g = ptr_g;
	_b = ptr_b;
}

void Native_setVehicleNeonEnabled(bool& success, int32_t _vehicle, int32_t _index, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2AA720E4287BF269);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_index);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getVehicleNeonEnabled(bool& success, int32_t _vehicle, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C4B92553E4766A5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setAmbientVehicleNeonEnabled(bool& success, uint8_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35E0654F4BAD7971);
	ctx->Reset();
	ctx->Push((int32_t) _p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_suppressNeonsOnVehicle(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83F813570FF519DE);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDisableSuperdummy(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB088E9A47AE6EDD5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_requestVehicleDial(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDBA3C090E3D74690);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getVehicleBodyHealth(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF271147EB7B40F12);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setVehicleBodyHealth(bool& success, int32_t _vehicle, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB77D05AC8C78AADB);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_getVehicleSize(bool& success, int32_t _vehicle, vector3_t& _out1, vector3_t& _out2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF7E3EEB29642C38);
	ctx->Reset();
	ctx->Push(_vehicle);
	alt::INative::Vector3 converted_out1 { _out1.x, 0, _out1.y, 0, _out1.z };
	ctx->Push(&converted_out1);
	alt::INative::Vector3 converted_out2 { _out2.x, 0, _out2.y, 0, _out2.z };
	ctx->Push(&converted_out2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
	_out1.x = converted_out1.x;
	_out1.y = converted_out1.y;
	_out1.z = converted_out1.z;
	_out2.x = converted_out2.x;
	_out2.y = converted_out2.y;
	_out2.z = converted_out2.z;
}

float Native_getFakeSuspensionLoweringAmount(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53952FD2BAA19F17);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setCarHighSpeedBumpSeverityMultiplier(bool& success, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84FD40F56075E816);
	ctx->Reset();
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getNumberOfVehicleDoors(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92922A607497B14D);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setHydraulicsControl(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28B18377EB6E25F6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCanAdjustGroundClearance(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7DCDF4DED40A8F4);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getVehicleHealthPercentage(bool& success, int32_t _vehicle, float _maxEngineHealth, float _maxPetrolTankHealth, float _maxBodyHealth, float _maxMainRotorHealth, float _maxTailRotorHealth, float _maxUnkHealth) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8EF61207C2393A9);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_maxEngineHealth);
	ctx->Push(_maxPetrolTankHealth);
	ctx->Push(_maxBodyHealth);
	ctx->Push(_maxMainRotorHealth);
	ctx->Push(_maxTailRotorHealth);
	ctx->Push(_maxUnkHealth);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

uint8_t Native_getVehicleIsMercenary(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4C4642CB7F50B5D);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleBrokenPartsDontAffectAiHandling(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC361AA040D6637A8);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleKersAllowed(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x99C82F8A139F3E4E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getVehicleHasKers(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50634E348C8D44EF);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setPlaneResistToExplosion(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE16142B94664DEFD);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setHeliResistToExplosion(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8074CC1886802912);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDisableBmxExtraTrickForces(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26D99D5A82FD18E8);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setHydraulicSuspensionRaiseFactor(bool& success, int32_t _vehicle, int32_t _wheelId, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84EA99C62CB3EF0C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_wheelId);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getHydraulicSuspensionRaiseFactor(bool& success, int32_t _vehicle, int32_t _wheelId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BB5CBDDD0F25AE3);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_wheelId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setCanUseHydraulics(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1201E8A3290A3B98);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setHydraulicVehicleState(bool& success, int32_t _vehicle, int32_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8EA86DF356801C7D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setHydraulicWheelState(bool& success, int32_t _vehicle, int32_t _wheelId, int32_t _state, float _value, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC24075310A8B9CD1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_wheelId);
	ctx->Push(_state);
	ctx->Push(_value);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasVehiclePetroltankSetOnFireByEntity(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BA68A0840D546AC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_clearVehiclePetroltankFireCulprit(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4419966C9936071A);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleBobbleheadVelocity(bool& success, float _x, float _y, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x870B8B7A766615C8);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getVehicleIsDummy(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8533CAFDE1F0F336);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_setVehicleDamageScale(bool& success, int32_t _vehicle, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E20D2A627011E8E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_setVehicleWeaponDamageScale(bool& success, int32_t _vehicle, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45A561A9421AB6AD);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_setDisableDamageWithPickedUpEntity(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4196117AF7BB974);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setVehicleUsesMpPlayerDamageMultiplier(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB2333BB87DDD87F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setBikeEasyToLand(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x73561D4425A021A2);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setInvertVehicleControls(bool& success, int32_t _vehicle, uint8_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B91B229243351A8);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _state);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSpeedBoostEffectDisabled(bool& success, uint8_t _disabled) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7BBE7FF626A591FE);
	ctx->Reset();
	ctx->Push((int32_t) _disabled);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSlowDownEffectDisabled(bool& success, uint8_t _disabled) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x65B080555EA48149);
	ctx->Reset();
	ctx->Push((int32_t) _disabled);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setFormationLeader(bool& success, int32_t _vehicle, float _x, float _y, float _z, float _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x428AD3E26C8D9EB0);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetFormationLeader(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE2F53F172B45EDE1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getIsBoatCapsized(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA91D045575699AD);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setAllowRammingSoopOrRamp(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80E3357FDEF45C21);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setScriptRampImpulseScale(bool& success, int32_t _vehicle, float _impulseScale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEFC13B1CE30D755D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_impulseScale);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getIsDoorValid(bool& success, int32_t _vehicle, int32_t _doorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x645F4B6E8499F632);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setScriptRocketBoostRechargeTime(bool& success, int32_t _vehicle, float _seconds) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE00F2AB100B76E89);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_seconds);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getHasRocketBoost(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36D782F68B309BDA);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isRocketBoostActive(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3D34E80EED4AE3BE);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setRocketBoostActive(bool& success, int32_t _vehicle, uint8_t _active) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x81E1552E35DC3839);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _active);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getHasRetractableWheels(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCA174A42133F08C);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getIsWheelsRetracted(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DA0DA9CB3F0C8BF);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setWheelsExtendedInstantly(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF660602546D27BA8);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setWheelsRetractedInstantly(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5335BE58C083E74E);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getCarHasJump(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9078C0C5EF8C19E9);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setUseHigherCarJump(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF06A16CA55D138D8);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setClearFreezeWaitingOnCollisionOncePlayerEnters(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2E0C0D6922D31F2);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleWeaponRestrictedAmmo(bool& success, int32_t _vehicle, int32_t _weaponIndex, int32_t _capacity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44CD1F493DB2A0A6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_weaponIndex);
	ctx->Push(_capacity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getVehicleWeaponRestrictedAmmo(bool& success, int32_t _vehicle, int32_t _weaponIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8181CE2F25CB9BB7);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_weaponIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_getVehicleHasParachute(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC9CFF381338CB4F);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getVehicleCanDeployParachute(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA916396DF4154EE3);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_vehicleStartParachuting(bool& success, int32_t _vehicle, uint8_t _active) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BFFB028B3DD0A97);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _active);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isVehicleParachuteDeployed(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3DE51E9C80B116CF);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_vehicleSetRampAndRammingCarsTakeDamage(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28D034A93FE31BF5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_vehicleSetEnableRampCarSideImpulse(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1BBAC99C0BC53656);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_vehicleSetEnableNormaliseRampCarVerticalVeloctiy(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x756AE6E962168A04);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_vehicleSetJetWashForceEnabled(bool& success, int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D30687C57BAA0BB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleWeaponCanTargetObjects(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x86B4B6212CB8B627);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleUseBoostButtonForWheelRetract(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x41290B40FA63E6DA);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_vehicleSetParachuteModelOverride(bool& success, int32_t _vehicle, uint32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D610C6B56031351);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_vehicleSetParachuteModelTintIndex(bool& success, int32_t _vehicle, int32_t _textureVariation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA74AD2439468C883);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_textureVariation);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_vehicleSetOverrideExtenableSideRatio(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0419B167EE128F33);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_vehicleSetExtenableSideTargetRatio(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3B0E0AED097A3F5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_vehicleSetOverrideSideRatio(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3E51C0AB8C26EEE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getAllVehicles(bool& success, int32_t& _vehsStruct) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B8E1BF04B51F2E8);
	ctx->Reset();
	auto ptr_vehsStruct = _vehsStruct;
	ctx->Push(&ptr_vehsStruct);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_vehsStruct = ptr_vehsStruct;
	return ctx->ResultInt();
}

void Native_setCargobobExtaPickupRange(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x72BECCF4B829522E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setOverrideVehicleDoorTorque(bool& success, int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66E3AAFACE2D1EB8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setWheelieEnabled(bool& success, int32_t _vehicle, uint8_t _enabled) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1312DDD8385AEE4E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _enabled);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDisableHeliExplodeFromBodyDamage(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEDBC8405B3895CC9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDisableExplodeFromBodyDamageOnCollision(bool& success, int32_t _vehicle, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26E13D440E7F6064);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTrailerAttachmentEnabled(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FA2494B47FDD009);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setRocketBoostFill(bool& success, int32_t _vehicle, float _percentage) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFEB2DDED3509562E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_percentage);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGliderActive(bool& success, int32_t _vehicle, uint8_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x544996C0081ABDEB);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _state);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setShouldResetTurretInScriptedCameras(bool& success, int32_t _vehicle, uint8_t _shouldReset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78CEEE41F49F421F);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _shouldReset);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleDisableCollisionUponCreation(bool& success, int32_t _vehicle, uint8_t _disable) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF60E6A2936F982A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _disable);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setGroundEffectReducesDrag(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x430A7631A84C9BE7);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDisableMapCollision(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75627043C6AA90AD);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDisablePedStandOnTop(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8235F1BEAD557629);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleDamageScales(bool& success, int32_t _vehicle, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9640E30A7F395E4B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlaneSectionDamageScale(bool& success, int32_t _vehicle, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BBB9A7A8FFE931B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setHeliCanPickupEntityThatHasPickUpDisabled(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x94A68DA412C4007D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleBombAmmo(bool& success, int32_t _vehicle, int32_t _bombCount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF4B2ED59DEB5D774);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_bombCount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getVehicleBombAmmo(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA12BD130D7569A1);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setVehicleCountermeasureAmmo(bool& success, int32_t _vehicle, int32_t _counterMeasureCount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9BDA23BF666F0855);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_counterMeasureCount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getVehicleCountermeasureAmmo(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF846AA63DF56B804);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setHeliCombatOffset(bool& success, int32_t _vehicle, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A3F820A9A9A9AC5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getCanVehicleBePlacedHere(bool& success, int32_t _vehicle, float _x, float _y, float _z, float _rotX, float _rotY, float _rotZ, int32_t _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x51F30DB60626A20E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setDisableAutomaticCrashTask(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97841634EF7DF1D6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSpecialFlightModeRatio(bool& success, int32_t _vehicle, float _ratio) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD138FA15C9776837);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_ratio);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSpecialFlightModeTargetRatio(bool& success, int32_t _vehicle, float _targetRatio) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x438B3D7CA026FE91);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_targetRatio);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setSpecialFlightModeAllowed(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1211889DF15A763);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDisableHoverModeFlight(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D55FE374D5FDB91);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getOutriggersDeployed(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A9128352EAC9E85);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

vector3_t Native_findSpawnCoordinatesForHeli(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8DC9675797123522);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return { 0, 0, 0 };
	}
	success = true;
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

void Native_setDeployFoldingWings(bool& success, int32_t _vehicle, uint8_t _deploy, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB251E0B33E58B424);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _deploy);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_areFoldingWingsDeployed(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAEF12960FA943792);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setDipStraightDownWhenCrashingPlane(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA653AE61924B0A0);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTurretHidden(bool& success, int32_t _vehicle, int32_t _index, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC60060EB0D8AC7B1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_index);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setHoverModeWingRatio(bool& success, int32_t _vehicle, float _ratio) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70A252F60A3E036B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_ratio);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDisableTurretMovement(bool& success, int32_t _vehicle, int32_t _turretId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE615BB7A7752C76A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_turretId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setForceFixLinkMatrices(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x887FA38787DE8C72);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTransformRateForAnimation(bool& success, int32_t _vehicle, float _transformRate) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x498218259FB7C72D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_transformRate);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTransformToSubmarineUsesAlternateInput(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x41B9FB92EDED32A6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleCombatMode(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36DE109527A2C0C4);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleDetonationMode(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x82E0AC411E41A5B4);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setVehicleShuntOnStick(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x99A05839C46CE316);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getIsVehicleShunting(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2459F72C14E2E8D);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getHasVehicleBeenHitByShunt(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE8718FAF591FD224);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getLastShuntVehicle(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x04F2FA6E234162F7);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setDisableVehicleExplosionsDamage(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x143921E45EC44D62);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setOverrideNitrousLevel(bool& success, int32_t _vehicle, uint8_t _toggle, float _level, float _power, float _rechargeTime, uint8_t _disableSound) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8E9B6B71B8E660D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	ctx->Push(_level);
	ctx->Push(_power);
	ctx->Push(_rechargeTime);
	ctx->Push((int32_t) _disableSound);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setIncreaseWheelCrushDamage(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2970EAA18FD5E42F);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDisableWeaponBladeForces(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x211E95CE9903940C);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setUseDoubleClickForCarJump(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BBCF35BF6E456F7);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getDoesVehicleHaveTombstone(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71AFB258CCED3A27);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_hideTombstone(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE71FB656C600587);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getIsVehicleDisabledByEmp(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0506ED94363AD905);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setDisableRetractingWeaponBlades(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F0D5BA1C2CC91D7);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getTyreHealth(bool& success, int32_t _vehicle, int32_t _wheelIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55EAB010FAEE9380);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_wheelIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setTyreHealth(bool& success, int32_t _vehicle, int32_t _wheelIndex, float _health) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74C68EF97645E79D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_wheelIndex);
	ctx->Push(_health);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getTyreWearRate(bool& success, int32_t _vehicle, int32_t _wheelIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E387895952F4F71);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_wheelIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setTyreWearRate(bool& success, int32_t _vehicle, int32_t _wheelIndex, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01894E2EDE923CA2);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_wheelIndex);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setTyreMaximumGripDifferenceDueToWearRate(bool& success, int32_t _vehicle, int32_t _wheelIndex, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC970D0E0FC31D768);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_wheelIndex);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setAircraftIgnoreHightmapOptimisation(bool& success, int32_t _vehicle, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF8B49F5BA7F850E7);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setReducedSuspensionForce(bool& success, int32_t _vehicle, uint8_t _enable) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A375167F5782A65);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _enable);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDriftTyres(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5AC79C98C5C17F05);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getDriftTyresSet(bool& success, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F5A72430E78C8D3);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_networkUseHighPrecisionTrainBlending(bool& success, int32_t _vehicle, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC0C1D4922AF9754);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCheckForEnoughRoomForPed(bool& success, int32_t _vehicle, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF9D388F8D377F44);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getWaterHeight(bool& success, float _x, float _y, float _z, float& _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6829842C06AE524);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	auto ptr_height = _height;
	ctx->Push(&ptr_height);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_height = ptr_height;
	return ctx->ResultBool();
}

uint8_t Native_getWaterHeightNoWaves(bool& success, float _x, float _y, float _z, float& _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8EE6B53CE13A9794);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	auto ptr_height = _height;
	ctx->Push(&ptr_height);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_height = ptr_height;
	return ctx->ResultBool();
}

uint8_t Native_testProbeAgainstWater(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, vector3_t& _result) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFFA5D878809819DB);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	alt::INative::Vector3 converted_result { _result.x, 0, _result.y, 0, _result.z };
	ctx->Push(&converted_result);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_result.x = converted_result.x;
	_result.y = converted_result.y;
	_result.z = converted_result.z;
	return ctx->ResultBool();
}

int32_t Native_testProbeAgainstAllWater(bool& success, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _flags, float& _waterHeight) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8974647ED222EA5F);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_flags);
	auto ptr_waterHeight = _waterHeight;
	ctx->Push(&ptr_waterHeight);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_waterHeight = ptr_waterHeight;
	return ctx->ResultInt();
}

int32_t Native_testVerticalProbeAgainstAllWater(bool& success, float _x, float _y, float _z, int32_t _flags, float& _waterHeight) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B3451FA1E3142E2);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_flags);
	auto ptr_waterHeight = _waterHeight;
	ctx->Push(&ptr_waterHeight);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_waterHeight = ptr_waterHeight;
	return ctx->ResultInt();
}

void Native_modifyWater(bool& success, float _x, float _y, float _radius, float _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC443FD757C3BA637);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_radius);
	ctx->Push(_height);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_addExtraCalmingQuad(bool& success, float _xLow, float _yLow, float _xHigh, float _yHigh, float _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFDBF4CDBC07E1706);
	ctx->Reset();
	ctx->Push(_xLow);
	ctx->Push(_yLow);
	ctx->Push(_xHigh);
	ctx->Push(_yHigh);
	ctx->Push(_height);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_removeExtraCalmingQuad(bool& success, int32_t _calmingQuad) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1252E3E59A82AAF);
	ctx->Reset();
	ctx->Push(_calmingQuad);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setDeepOceanScaler(bool& success, float _intensity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB96B00E976BE977F);
	ctx->Reset();
	ctx->Push(_intensity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getDeepOceanScaler(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B2A2CC86778B619);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setCalmedWaveHeightScaler(bool& success, float _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x547237AA71AB44DE);
	ctx->Reset();
	ctx->Push(_height);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_resetDeepOceanScaler(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E5E99285AE812DB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_enableLaserSightRendering(bool& success, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8B46D7727D864AA);
	ctx->Reset();
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint32_t Native_getWeaponComponentTypeModel(bool& success, uint32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0DB57B41EC1DB083);
	ctx->Reset();
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint32_t Native_getWeapontypeModel(bool& success, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF46CDC33180FDA94);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint32_t Native_getWeapontypeSlot(bool& success, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4215460B9B8B7FA0);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint32_t Native_getWeapontypeGroup(bool& success, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3287EE3050FB74C);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

int32_t Native_getWeaponComponentVariantExtraCount(bool& success, uint32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6558AC7C17BFEF58);
	ctx->Reset();
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint32_t Native_getWeaponComponentVariantExtraModel(bool& success, uint32_t _componentHash, int32_t _extraComponentIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D1CB8DC40208A17);
	ctx->Reset();
	ctx->Push(_componentHash);
	ctx->Push(_extraComponentIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

void Native_setCurrentPedWeapon(bool& success, int32_t _ped, uint32_t _weaponHash, uint8_t _bForceInHand) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADF692B254977C0C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push((int32_t) _bForceInHand);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getCurrentPedWeapon(bool& success, int32_t _ped, uint32_t& _weaponHash, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A87E44BB9A01D54);
	ctx->Reset();
	ctx->Push(_ped);
	auto ptr_weaponHash = _weaponHash;
	ctx->Push(&ptr_weaponHash);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_weaponHash = ptr_weaponHash;
	return ctx->ResultBool();
}

int32_t Native_getCurrentPedWeaponEntityIndex(bool& success, int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3B390A939AF0B5FC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint32_t Native_getBestPedWeapon(bool& success, int32_t _ped, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8483E98E8B888AE2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint8_t Native_setCurrentPedVehicleWeapon(bool& success, int32_t _ped, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75C55983C2C39DAA);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getCurrentPedVehicleWeapon(bool& success, int32_t _ped, uint32_t& _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1017582BCD3832DC);
	ctx->Reset();
	ctx->Push(_ped);
	auto ptr_weaponHash = _weaponHash;
	ctx->Push(&ptr_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_weaponHash = ptr_weaponHash;
	return ctx->ResultBool();
}

void Native_setPedCycleVehicleWeaponsOnly(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50276EF8172F5F12);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedArmed(bool& success, int32_t _ped, int32_t _typeFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x475768A975D5AD17);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_typeFlags);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isWeaponValid(bool& success, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x937C71165CF334B3);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_hasPedGotWeapon(bool& success, int32_t _ped, uint32_t _weaponHash, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8DECB02F88F428BC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedWeaponReadyToShoot(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB80CA294F2F26749);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint32_t Native_getPedWeapontypeInSlot(bool& success, int32_t _ped, uint32_t _weaponSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEFFED78E9011134D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponSlot);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

int32_t Native_getAmmoInPedWeapon(bool& success, int32_t _ped, uint32_t _weaponhash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x015A522136D7F951);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponhash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_addAmmoToPed(bool& success, int32_t _ped, uint32_t _weaponHash, int32_t _ammo) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78F0424C34306220);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_ammo);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedAmmo(bool& success, int32_t _ped, uint32_t _weaponHash, int32_t _ammo, uint8_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14E56BC5B5DB6A19);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_ammo);
	ctx->Push((int32_t) _p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedInfiniteAmmo(bool& success, int32_t _ped, uint8_t _toggle, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3EDCB0505123623B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedInfiniteAmmoClip(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x183DADC6AA953186);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedStunGunFiniteAmmo(bool& success, int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x24C024BA8379A70A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_giveWeaponToPed(bool& success, int32_t _ped, uint32_t _weaponHash, int32_t _ammoCount, uint8_t _isHidden, uint8_t _bForceInHand) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF0FD6E56C964FCB);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_ammoCount);
	ctx->Push((int32_t) _isHidden);
	ctx->Push((int32_t) _bForceInHand);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_giveDelayedWeaponToPed(bool& success, int32_t _ped, uint32_t _weaponHash, int32_t _ammoCount, uint8_t _bForceInHand) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB282DC6EBD803C75);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_ammoCount);
	ctx->Push((int32_t) _bForceInHand);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeAllPedWeapons(bool& success, int32_t _ped, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF25DF915FA38C5F3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeWeaponFromPed(bool& success, int32_t _ped, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4899CB088EDF59B8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_hidePedWeaponForScriptedCutscene(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F6981D2253C208F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedCurrentWeaponVisible(bool& success, int32_t _ped, uint8_t _visible, uint8_t _deselectWeapon, uint8_t _p3, uint8_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0725A4CCFDED9A70);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _visible);
	ctx->Push((int32_t) _deselectWeapon);
	ctx->Push((int32_t) _p3);
	ctx->Push((int32_t) _p4);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedDropsWeaponsWhenDead(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x476AE72C1D19D1A8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasPedBeenDamagedByWeapon(bool& success, int32_t _ped, uint32_t _weaponHash, int32_t _weaponType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D343D2219CD027A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_weaponType);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_clearPedLastWeaponDamage(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0E98F88A24C5F4B8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasEntityBeenDamagedByWeapon(bool& success, int32_t _entity, uint32_t _weaponHash, int32_t _weaponType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x131D401334815E94);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_weaponHash);
	ctx->Push(_weaponType);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_clearEntityLastWeaponDamage(bool& success, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC678E40BE7C74D2);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedDropsWeapon(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B7513D9966FBEC0);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedDropsInventoryWeapon(bool& success, int32_t _ped, uint32_t _weaponHash, float _xOffset, float _yOffset, float _zOffset, int32_t _ammoCount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x208A1888007FC0E6);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push(_ammoCount);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getMaxAmmoInClip(bool& success, int32_t _ped, uint32_t _weaponHash, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA38DCFFCEA8962FA);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_getAmmoInClip(bool& success, int32_t _ped, uint32_t _weaponHash, int32_t& _ammo) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E1202248937775C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	auto ptr_ammo = _ammo;
	ctx->Push(&ptr_ammo);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_ammo = ptr_ammo;
	return ctx->ResultBool();
}

uint8_t Native_setAmmoInClip(bool& success, int32_t _ped, uint32_t _weaponHash, int32_t _ammo) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCD2A934D65CB497);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_ammo);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_getMaxAmmo(bool& success, int32_t _ped, uint32_t _weaponHash, int32_t& _ammo) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC16122C7A20C933);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	auto ptr_ammo = _ammo;
	ctx->Push(&ptr_ammo);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_ammo = ptr_ammo;
	return ctx->ResultBool();
}

uint8_t Native_getMaxAmmoByType(bool& success, int32_t _ped, uint32_t _ammoTypeHash, int32_t& _ammo) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x585847C5E4E11709);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_ammoTypeHash);
	auto ptr_ammo = _ammo;
	ctx->Push(&ptr_ammo);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_ammo = ptr_ammo;
	return ctx->ResultBool();
}

void Native_addPedAmmoByType(bool& success, int32_t _ped, uint32_t _ammoTypeHash, int32_t _ammo) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2472622CE1F2D45F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_ammoTypeHash);
	ctx->Push(_ammo);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedAmmoByType(bool& success, int32_t _ped, uint32_t _ammoTypeHash, int32_t _ammo) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FD1E1F011E76D7E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_ammoTypeHash);
	ctx->Push(_ammo);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPedAmmoByType(bool& success, int32_t _ped, uint32_t _ammoTypeHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39D22031557946C1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_ammoTypeHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPedAmmoToDrop(bool& success, int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA4EFEF9440A5B0EF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPickupAmmoAmountScaler(bool& success, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE620FD3512A04F18);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint32_t Native_getPedAmmoTypeFromWeapon(bool& success, int32_t _ped, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FEAD38B326B9F74);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint32_t Native_getPedOriginalAmmoTypeFromWeapon(bool& success, int32_t _ped, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF489B44DD5AF4BD9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

uint8_t Native_getPedLastWeaponImpactCoord(bool& success, int32_t _ped, vector3_t& _coords) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C4D0409BA1A2BC2);
	ctx->Reset();
	ctx->Push(_ped);
	alt::INative::Vector3 converted_coords { _coords.x, 0, _coords.y, 0, _coords.z };
	ctx->Push(&converted_coords);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_coords.x = converted_coords.x;
	_coords.y = converted_coords.y;
	_coords.z = converted_coords.z;
	return ctx->ResultBool();
}

void Native_setPedGadget(bool& success, int32_t _ped, uint32_t _gadgetHash, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0D7B1E680ED4A1A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_gadgetHash);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getIsPedGadgetEquipped(bool& success, int32_t _ped, uint32_t _gadgetHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF731332072F5156C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_gadgetHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint32_t Native_getSelectedPedWeapon(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A6DB4965674D243);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

void Native_explodeProjectiles(bool& success, int32_t _ped, uint32_t _weaponHash, uint8_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC4BD125DE7611E4);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push((int32_t) _p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeAllProjectilesOfType(bool& success, uint32_t _weaponHash, uint8_t _explode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC52E0F37E446528);
	ctx->Reset();
	ctx->Push(_weaponHash);
	ctx->Push((int32_t) _explode);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

float Native_getLockonDistanceOfCurrentPedWeapon(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x840F03E9041E2C9C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

float Native_getMaxRangeOfCurrentPedWeapon(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x814C9D19DFD69679);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

uint8_t Native_hasVehicleGotProjectileAttached(bool& success, int32_t _driver, int32_t _vehicle, uint32_t _weaponHash, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x717C8481234E3B88);
	ctx->Reset();
	ctx->Push(_driver);
	ctx->Push(_vehicle);
	ctx->Push(_weaponHash);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_giveWeaponComponentToPed(bool& success, int32_t _ped, uint32_t _weaponHash, uint32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD966D51AA5B28BB9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeWeaponComponentFromPed(bool& success, int32_t _ped, uint32_t _weaponHash, uint32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E8BE90C74FB4C09);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasPedGotWeaponComponent(bool& success, int32_t _ped, uint32_t _weaponHash, uint32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC593212475FAE340);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isPedWeaponComponentActive(bool& success, int32_t _ped, uint32_t _weaponHash, uint32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0D78DE0572D3969E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_refillAmmoInstantly(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C0D57EA686FAD87);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_makePedReload(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20AE33F3AC9C0033);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_requestWeaponAsset(bool& success, uint32_t _weaponHash, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5443438F033E29C3);
	ctx->Reset();
	ctx->Push(_weaponHash);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasWeaponAssetLoaded(bool& success, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36E353271F0E90EE);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_removeWeaponAsset(bool& success, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA08EF13F341C8FC);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_createWeaponObject(bool& success, uint32_t _weaponHash, int32_t _ammoCount, float _x, float _y, float _z, uint8_t _showWorldModel, float _scale, int32_t _p7, int32_t _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9541D3CF0D398F36);
	ctx->Reset();
	ctx->Push(_weaponHash);
	ctx->Push(_ammoCount);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push((int32_t) _showWorldModel);
	ctx->Push(_scale);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_giveWeaponComponentToWeaponObject(bool& success, int32_t _weaponObject, uint32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33E179436C0B31DB);
	ctx->Reset();
	ctx->Push(_weaponObject);
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_removeWeaponComponentFromWeaponObject(bool& success, int32_t _object, uint32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF7D82B0D66777611);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_hasWeaponGotWeaponComponent(bool& success, int32_t _weapon, uint32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x76A18844E743BF91);
	ctx->Reset();
	ctx->Push(_weapon);
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_giveWeaponObjectToPed(bool& success, int32_t _weaponObject, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1FA61371AF7C4B7);
	ctx->Reset();
	ctx->Push(_weaponObject);
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesWeaponTakeWeaponComponent(bool& success, uint32_t _weaponHash, uint32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CEE3DF569CECAB0);
	ctx->Reset();
	ctx->Push(_weaponHash);
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_getWeaponObjectFromPed(bool& success, int32_t _ped, uint8_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCAE1DC9A0E22A16D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_giveLoadoutToPed(bool& success, int32_t _ped, uint32_t _loadoutHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x68F8BE6AF5CDF8A6);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_loadoutHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPedWeaponTintIndex(bool& success, int32_t _ped, uint32_t _weaponHash, int32_t _tintIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50969B9B89ED5738);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_tintIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPedWeaponTintIndex(bool& success, int32_t _ped, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B9EEDC07BD06B9F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setWeaponObjectTintIndex(bool& success, int32_t _weapon, int32_t _tintIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF827589017D4E4A9);
	ctx->Reset();
	ctx->Push(_weapon);
	ctx->Push(_tintIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getWeaponObjectTintIndex(bool& success, int32_t _weapon) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD183314F7CD2E57);
	ctx->Reset();
	ctx->Push(_weapon);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getWeaponTintCount(bool& success, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5DCF6C5CAB2E9BF7);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setPedWeaponComponentTintIndex(bool& success, int32_t _ped, uint32_t _weaponHash, uint32_t _camoComponentHash, int32_t _colorIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9FE5633880ECD8ED);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_camoComponentHash);
	ctx->Push(_colorIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getPedWeaponComponentTintIndex(bool& success, int32_t _ped, uint32_t _weaponHash, uint32_t _camoComponentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0A60040BE558F2D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_camoComponentHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setWeaponObjectComponentTintIndex(bool& success, int32_t _weaponObject, uint32_t _camoComponentHash, int32_t _colorIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5DA825A85D0EA6E6);
	ctx->Reset();
	ctx->Push(_weaponObject);
	ctx->Push(_camoComponentHash);
	ctx->Push(_colorIndex);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getWeaponObjectComponentTintIndex(bool& success, int32_t _weaponObject, uint32_t _camoComponentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3EA4FEABF41464B);
	ctx->Reset();
	ctx->Push(_weaponObject);
	ctx->Push(_camoComponentHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getPedWeaponCamoIndex(bool& success, int32_t _ped, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2C9AC24B4061285);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setWeaponObjectCamoIndex(bool& success, int32_t _weaponObject, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x977CA98939E82E4B);
	ctx->Reset();
	ctx->Push(_weaponObject);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_getWeaponHudStats(bool& success, uint32_t _weaponHash, int32_t& _outData) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD92C739EE34C9EBA);
	ctx->Reset();
	ctx->Push(_weaponHash);
	auto ptr_outData = _outData;
	ctx->Push(&ptr_outData);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outData = ptr_outData;
	return ctx->ResultBool();
}

uint8_t Native_getWeaponComponentHudStats(bool& success, uint32_t _componentHash, int32_t& _outData) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3CAF387AE12E9F8);
	ctx->Reset();
	ctx->Push(_componentHash);
	auto ptr_outData = _outData;
	ctx->Push(&ptr_outData);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outData = ptr_outData;
	return ctx->ResultBool();
}

float Native_getWeaponDamage(bool& success, uint32_t _weaponHash, uint32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3133B907D8B32053);
	ctx->Reset();
	ctx->Push(_weaponHash);
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

int32_t Native_getWeaponClipSize(bool& success, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x583BE370B1EC6EB4);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

float Native_getWeaponTimeBetweenShots(bool& success, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x065D2AACAD8CF7A4);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0.f;
	}
	success = true;
	return ctx->ResultFloat();
}

void Native_setPedChanceOfFiringBlanks(bool& success, int32_t _ped, float _xBias, float _yBias) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8378627201D5497D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_xBias);
	ctx->Push(_yBias);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_setPedShootOrdnanceWeapon(bool& success, int32_t _ped, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4C8D77C80C0421E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_requestWeaponHighDetailModel(bool& success, int32_t _weaponObject) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48164DBB970AC3F0);
	ctx->Reset();
	ctx->Push(_weaponObject);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setWeaponDamageModifier(bool& success, uint32_t _weaponHash, float _damageMultiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4757F00BC6323CFE);
	ctx->Reset();
	ctx->Push(_weaponHash);
	ctx->Push(_damageMultiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setWeaponAoeModifier(bool& success, uint32_t _weaponHash, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4AE5AC8B852D642C);
	ctx->Reset();
	ctx->Push(_weaponHash);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setWeaponEffectDurationModifier(bool& success, uint32_t _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6D2CEDD370FF98E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isPedCurrentWeaponSilenced(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x65F0C5AE05943EC7);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_isFlashLightOn(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4B7620C47217126C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

uint8_t Native_setFlashLightFadeDistance(bool& success, float _distance) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCEA66DAD478CD39B);
	ctx->Reset();
	ctx->Push(_distance);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setFlashLightActiveHistory(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x988DB6FE9B3AC000);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setWeaponAnimationOverride(bool& success, int32_t _ped, uint32_t _animStyle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1055AC3A667F09D9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_animStyle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getWeaponDamageType(bool& success, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3BE0BB12D25FB305);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_setEqippedWeaponStartSpinningAtFullSpeed(bool& success, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4DCEC7FD5B739A5);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_canUseWeaponOnParachute(bool& success, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC7BE5ABC0879F74);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

int32_t Native_createAirDefenceSphere(bool& success, float _x, float _y, float _z, float _radius, float _p4, float _p5, float _p6, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x91EF34584710BE99);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_createAirDefenceAngledArea(bool& success, float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6, float _p7, float _p8, float _radius, uint32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DA58CDBF6BDBC08);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_radius);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

uint8_t Native_removeAirDefenceSphere(bool& success, int32_t _zoneId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0ABF535877897560);
	ctx->Reset();
	ctx->Push(_zoneId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_removeAllAirDefenceSpheres(bool& success) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E45B34ADEBEE48E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setPlayerTargettableForAirDefenceSphere(bool& success, int32_t _player, int32_t _zoneId, uint8_t _enable) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xECDC202B25E5CF48);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_zoneId);
	ctx->Push((int32_t) _enable);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_isAirDefenceSphereInArea(bool& success, float _x, float _y, float _z, float _radius, int32_t& _outZoneId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDAB963831DBFD3F4);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	auto ptr_outZoneId = _outZoneId;
	ctx->Push(&ptr_outZoneId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	_outZoneId = ptr_outZoneId;
	return ctx->ResultBool();
}

void Native_fireAirDefenceSphereWeaponAtPosition(bool& success, int32_t _zoneId, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44F1012B69313374);
	ctx->Reset();
	ctx->Push(_zoneId);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint8_t Native_doesAirDefenceSphereExist(bool& success, int32_t _zoneId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD79A550999D7D4F);
	ctx->Reset();
	ctx->Push(_zoneId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultBool();
}

void Native_setCanPedSelectInventoryWeapon(bool& success, int32_t _ped, uint32_t _weaponHash, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4771B9AAF4E68E4);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_setCanPedSelectAllWeapons(bool& success, int32_t _ped, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEFF296097FF1E509);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getZoneAtCoords(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27040C25DE6CB2F4);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getZoneFromNameId(bool& success, const char* _zoneName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x98CD1D2934B76CC1);
	ctx->Reset();
	ctx->Push(SaveString(_zoneName));
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

int32_t Native_getZonePopschedule(bool& success, int32_t _zoneId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4334BC40AA0CB4BB);
	ctx->Reset();
	ctx->Push(_zoneId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

const char* Native_getNameOfZone(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD90657D4C30E1CA);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return nullptr;
	}
	success = true;
	return AllocateString(ctx->ResultString());
}

void Native_setZoneEnabled(bool& success, int32_t _zoneId, uint8_t _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA5ECEEA120E5611);
	ctx->Reset();
	ctx->Push(_zoneId);
	ctx->Push((int32_t) _toggle);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

int32_t Native_getZoneScumminess(bool& success, int32_t _zoneId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F7B268D15BA0739);
	ctx->Reset();
	ctx->Push(_zoneId);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultInt();
}

void Native_overridePopscheduleVehicleModel(bool& success, int32_t _scheduleId, uint32_t _vehicleHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F7D596BAC2E7777);
	ctx->Reset();
	ctx->Push(_scheduleId);
	ctx->Push(_vehicleHash);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

void Native_clearPopscheduleOverrideVehicleModel(bool& success, int32_t _scheduleId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C0DE367AA0D911C);
	ctx->Reset();
	ctx->Push(_scheduleId);
	if (!native->Invoke(ctx)) {
		success = false;
		return ;
	}
	success = true;
}

uint32_t Native_getHashOfMapAreaAtCoords(bool& success, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EE64D51E8498728);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		success = false;
		return 0;
	}
	success = true;
	return ctx->ResultUint();
}

inline uint64_t hashes[] = {
    0x4EDE34FBADD967A6UL,
    0xE81651AD79516E48UL,
    0xB8BA7F44DF1575E1UL,
    0xEB1C67C3A5333A92UL,
    0xC4BB298BD441BE78UL,
    0x83666F9FB8FEBD4BUL,
    0xC9D9444186B5A374UL,
    0xC1B1E9A034A63A62UL,
    0x5AE11BC36633DE4EUL,
    0x0000000050597EE2UL,
    0x0BADBFA3B172435FUL,
    0xD0FFB162F40A139CUL,
    0x71D93B57D07F9804UL,
    0xE3621CC40F31FE2EUL,
    0xE816E655DE37FE20UL,
    0x652D2EEEF1D3E62CUL,
    0xA8CEACB4F35AE058UL,
    0x2A488C176D52CCA5UL,
    0xB7A628320EFF8E47UL,
    0xEDD95A39E5544DE8UL,
    0x97EF1E5BCE9DC075UL,
    0xF34EE736CF047844UL,
    0x11E019C8F43ACC8AUL,
    0xF2DB717A73826179UL,
    0xBBDA792448DB5A89UL,
    0x42B65DEEF2EDF2A1UL,
    0x846AA8E7D55EE5B6UL,
    0xD3A58A12C77D9D4BUL,
    0x1514FB24C02C2322UL,
    0x749B023950D2311CUL,
    0x607E8E3D3E4F9611UL,
    0x25D7687C68E0DAA4UL,
    0x3FF2FCEC4B7721B4UL,
    0xCFD0406ADAF90D2BUL,
    0x262AB456A3D21F93UL,
    0x5FE1DF3342DB7DBAUL,
    0xE41C65E07A5F05FCUL,
    0xE8E3FCF72EAC0EF8UL,
    0x71EEE69745088DA0UL,
    0xCA52279A7271517FUL,
    0x95C5D356CDA6E85FUL,
    0xC9853A2BE3DED1A6UL,
    0x44151AEA95C8A003UL,
    0x175B6BFC15CDD0C5UL,
    0x7FDFADE676AA3CB0UL,
    0xD8B9A8AC5608FF94UL,
    0xAAD68E1AB39DA632UL,
    0x083A2CA4F2E573BDUL,
    0x73B1189623049839UL,
    0x3903E216620488E8UL,
    0xA3BB2E9555C05A8FUL,
    0x6B7256074AE34680UL,
    0xAC26716048436851UL,
    0x29280002282F1928UL,
    0x736D7AA1B750856BUL,
    0xD3A9971CADAC7252UL,
    0x23BA6B0C2AD7B0D3UL,
    0xC5C8F970D4EDFF71UL,
    0x1DD2139A9A20DCE8UL,
    0x90A78ECAA4E78453UL,
    0x0A46AF8A78DC5E0AUL,
    0x4862437A486F91B0UL,
    0x1670F8D05056F257UL,
    0x7FA5D82B8F58EC06UL,
    0x5B0316762AFD4A64UL,
    0x346EF3ECAAAB149EUL,
    0xA67C35C56EB1BD9DUL,
    0x0D6CA79EEEBD8CA3UL,
    0xD801CC02177FA3F1UL,
    0x1BBC135A4D25EDDEUL,
    0xF3F776ADA161E47DUL,
    0x3DEC726C25A11BACUL,
    0x0C0C4E81E1AC60A0UL,
    0x759650634F07B6B4UL,
    0xCB82A0BF0E3E3265UL,
    0x6A12D88881435DCAUL,
    0x1072F115DAB0717EUL,
    0x34D23450F028B0BFUL,
    0xDC54A7AF8B3A14EFUL,
    0x473151EBC762C6DAUL,
    0x2A893980E96B659AUL,
    0xF5BED327CEA362B1UL,
    0x4AF92ACD3141D96CUL,
    0xE791DF1F73ED2C8BUL,
    0xEC72C258667BE5EAUL,
    0x40AFB081F8ADD4EEUL,
    0xF49E9A9716A04595UL,
    0xF2A1B2771A01DBD4UL,
    0xD0F64B265C8C8B33UL,
    0x5BCA583A583194DBUL,
    0xC9B18B4619F48F7BUL,
    0xDEADC0DEDEADC0DEUL,
    0x9641588DAB93B4B5UL,
    0x393BD2275CEB7793UL,
    0x28477EC23D892089UL,
    0xE82728F0DE75D13AUL,
    0x799017F9E3B10112UL,
    0x0134F0835AB6BFCBUL,
    0x4B5B4DA5D79F1943UL,
    0x44621483FF966526UL,
    0x2707AAE9D9297D89UL,
    0x7167371E8AD747F7UL,
    0xB9EA40907C680580UL,
    0xF51D36185993515DUL,
    0xFCF6788FC4860CD4UL,
    0x615D3925E87A3B26UL,
    0xDB1EA9411C8911ECUL,
    0x3C788E7F6438754DUL,
    0xF5ED37F54CD4D52EUL,
    0x22A249A53034450AUL,
    0xDC459CFA0CCE245BUL,
    0xDFA2EF8E04127DD5UL,
    0x0145F696AAAAD2E4UL,
    0xBE2CACCF5A8AA805UL,
    0x3A618A217E5154F0UL,
    0xC6372ECD45D73BCDUL,
    0x61BB1D9B3A95D802UL,
    0xB8A850F20A067EB6UL,
    0xE3A3DB414A373DABUL,
    0xF5A2C681787E579DUL,
    0x6DD8F5AA635EB4B2UL,
    0xBAF107B6BB2C97F0UL,
    0xE7FFAE5EBF23D890UL,
    0x2D3B147AFAD49DE0UL,
    0x2BC54A8188768488UL,
    0x95812F9B26074726UL,
    0x9CD43EEE12BF4DD0UL,
    0xE0E8BEECCA96BA31UL,
    0x1D5F595CCAE2E238UL,
    0xAA0008F3BBB8F416UL,
    0xFF0B610F6BE0D7AFUL,
    0x338D9F609FD632DBUL,
    0x70D2CC8A542A973CUL,
    0x63606A61DE68898AUL,
    0x04D950EEFA4EED8CUL,
    0x7118E83EEB9F7238UL,
    0x0CB6B3446855B57AUL,
    0x8E17DDD6B9D5BF29UL,
    0xAFF33B1178172223UL,
    0x845BAD77CC770633UL,
    0xF816F2933752322DUL,
    0x113D2C5DC57E1774UL,
    0x6805D58CAA427B72UL,
    0xB66064452270E8F1UL,
    0xEB119AA014E89183UL,
    0x9B6E70C5CEEF4EEBUL,
    0x888D57E407E63624UL,
    0x873C9F3104101DD3UL,
    0xF1307EF624A80D87UL,
    0xB2EBE8CBC58B90E9UL,
    0x30CF4BDA4FCB1905UL,
    0x84ED31191CC5D2C9UL,
    0xEFABC7722293DA7CUL,
    0x18F621F7A5B1F85DUL,
    0x35FB78DC42B7BD21UL,
    0x2202A3F42C8E5F79UL,
    0xEF398BEEE4EF45F9UL,
    0x814AF7DCAACC597BUL,
    0x43FA7CBE20DAB219UL,
    0xE787BF1C5CF823C9UL,
    0xCB6A7C3BB17A0C67UL,
    0x34E82F05DF2974F5UL,
    0x35736EE65BD00C11UL,
    0x95EB5E34F821BABEUL,
    0xE2892E7E55D7073AUL,
    0x0AB84296FED9CFC6UL,
    0x3669F1B198DCAA4FUL,
    0x1268615ACE24D504UL,
    0xE2B187C0939B3D32UL,
    0xC35A6D07C93802B2UL,
    0xE2C9439ED45DEA60UL,
    0x164ECBB3CF750CB0UL,
    0xC45CCDAAC9221CA8UL,
    0xB25DC90BAD56CA42UL,
    0xBE197EAA669238F4UL,
    0x61F95E5BB3E0A8C6UL,
    0xAE51BC858F32BA66UL,
    0x649C97D52332341AUL,
    0x2C42340F916C5930UL,
    0x14FC5833464340A8UL,
    0x0218BA067D249DEAUL,
    0x1612C45F9E3E0D44UL,
    0x5DEBD9C4DC995692UL,
    0xAAE9BE70EC7C69ABUL,
    0x6D955F6A9E0295B1UL,
    0x302C91AB2D477F7EUL,
    0x03FC694AE06C5A20UL,
    0xD2936CAB8B58FCBDUL,
    0x5F0F3F56635809EFUL,
    0x5E9DAF5A20F15908UL,
    0x36F6626459D91457UL,
    0x259BA6D4E6F808F1UL,
    0x80ECBC0C856D3B0BUL,
    0x25FC3E33A31AD0C9UL,
    0xB11D94BC55F41932UL,
    0x27CB772218215325UL,
    0x6DDBF9DFFC4AC080UL,
    0xD39D13C9FEBF0511UL,
    0x02AC28F3A01FA04AUL,
    0x0AE73D8DF3A762B2UL,
    0xCA465D9CC0D231BAUL,
    0xA51C4B86B71652AEUL,
    0x312342E1A4874F3FUL,
    0x2485D34E50A22E84UL,
    0x12995F2E53FFA601UL,
    0xDBAA5EC848BA2D46UL,
    0xC0416B061F2B7E5EUL,
    0xB1BB03742917A5D6UL,
    0x9CFDD90B2B844BF7UL,
    0x06F761EA47C1D3EDUL,
    0xA4819F5E23E2FFADUL,
    0xA4664972A9B8F8BAUL,
    0x7E08924259E08CE0UL,
    0x44B80ABAB9D80BD3UL,
    0x70A64C0234EF522CUL,
    0xA78DE25577300BA1UL,
    0x9D75795B9DC6EBBFUL,
    0x43DBAE39626CE83FUL,
    0x0C8FAC83902A62DFUL,
    0xFF5992E1C9E65D05UL,
    0xFEBFBFDFB66039DEUL,
    0x19E50EB6E33E1D28UL,
    0x1636D7FC127B10D2UL,
    0xD7D0B00177485411UL,
    0x1086127B3A63505EUL,
    0xB3C641F3630BF6DAUL,
    0xE59343E9E96529E7UL,
    0x6A51F78772175A51UL,
    0xE63D7C6EECECB66BUL,
    0xE3E2C1B4C59DBC77UL,
    0xA328A24AAA6B7FDCUL,
    0xEFACC8AEF94430D5UL,
    0xDE81239437E8C5A8UL,
    0x5CCABFFCA31DDE33UL,
    0x7B226C785A52A0A9UL,
    0xDFC252D8A3E15AB7UL,
    0xEB3DAC2C86001E5EUL,
    0xE1C8709406F2C41CUL,
    0x851CD923176EBA7CUL,
    0xBA3D65906822BED5UL,
    0xB569F41F3E7E83A4UL,
    0x7AC24EAB6D74118DUL,
    0xBCEDB009461DA156UL,
    0x27FEB5254759CDE3UL,
    0x25129531F77B9ED3UL,
    0xF56B8137DF10135DUL,
    0x0E7E72961BA18619UL,
    0xA41B6A43642AC2CFUL,
    0x0D53A3B8DA0809D2UL,
    0xC95EB1DB6E92113DUL,
    0x02B1F2A72E0F5325UL,
    0x26143A59EF48B262UL,
    0x77168D722C58B2FCUL,
    0x1E2E01C00837D26EUL,
    0x8CDE909A0370BB3AUL,
    0xE184F4F0DC5910E7UL,
    0xF28DA9F38CD1787CUL,
    0x1AE42C1660FD6517UL,
    0xC6EB449E33977F0BUL,
    0x6F60E89A7B64EE1DUL,
    0xDDE23F30CC5A0F03UL,
    0x8F75998877616996UL,
    0xC401503DFE8D53CFUL,
    0xB8FEAEEBCC127425UL,
    0xDD19FA1C6D657305UL,
    0xBA0127DA25FD54C9UL,
    0x74AFEF0D2E1E409BUL,
    0xF7DDEBEC43483C43UL,
    0x5F0C4B5B1C393BE2UL,
    0x7F8F65877F88783BUL,
    0x726845132380142EUL,
    0xB44250AAA456492DUL,
    0xDCB194B85EF7B541UL,
    0xEEC4047028426510UL,
    0xACEE6F360FC1F6B6UL,
    0x96EF97DAEB89BEF5UL,
    0x2A251AA48B2B46DBUL,
    0x908311265D42A820UL,
    0xCFD16F0DB5A3535CUL,
    0x5F6DF3D92271E8A1UL,
    0x2B40A97646381508UL,
    0xD821490579791273UL,
    0x9DCE1F0F78260875UL,
    0x27E32866E9A5C416UL,
    0xBB90E12CAC1DAB25UL,
    0xCA4AE345A153D573UL,
    0x54E22EA2C1956A8DUL,
    0x949F397A288B28B3UL,
    0xBA3D194057C79A7BUL,
    0x5DBF05DB5926D089UL,
    0xC6730E0D14E50703UL,
    0x9B079E5221D984D3UL,
    0x6C38AF3693A69A91UL,
    0xEA1E2D93F6F75ED9UL,
    0x89C8553DD3274AAEUL,
    0xA46B73FAA3460AE1UL,
    0xF78B803082D4386FUL,
    0x9C30613D50A6ADEFUL,
    0x5B712761429DBC14UL,
    0xD77EDADB0420E6E0UL,
    0x5D6B2D4830A67C62UL,
    0xCCF71CBDDF5B6CB9UL,
    0xA6F6F70FDC6D144CUL,
    0xE91F1B65F2B48D57UL,
    0xB302244A1839BDADUL,
    0x4F5212C7AD880DF8UL,
    0x126D7F89FE859A5EUL,
    0x99AC7F0D8B9C893DUL,
    0x967278682CB6967AUL,
    0x0A123435A26C36CDUL,
    0xED3F346429CCD659UL,
    0xC694D74949CAFD0CUL,
    0x323F647679A09103UL,
    0xD9454B5752C857DCUL,
    0x27CFB1B1E078CB2DUL,
    0x4B5CFC83122DF602UL,
    0x2F09F7976C512404UL,
    0x8A35C742130C6080UL,
    0xB7ED70C49521A61DUL,
    0x84C8D7C2D30D3280UL,
    0x428BDCB9DA58DA53UL,
    0x82ACC484FFA3B05FUL,
    0xD2300034310557E4UL,
    0xFE26117A5841B2FFUL,
    0x060D935D3981A275UL,
    0x0E4299C549F0D1F1UL,
    0x02369D5C8A51FDCFUL,
    0x46D1A61A21F566FCUL,
    0x2A2A52824DB96700UL,
    0x1600FD8CF72EBC12UL,
    0xEFB55E7C25D3B3BEUL,
    0xA44FF770DFBC5DAEUL,
    0xC9F98AC1884E73A2UL,
    0x03300B57FCAC6DDBUL,
    0x98EDF76A7271E4F2UL,
    0xAEEDAD1420C65CC0UL,
    0x4CC7F0FEA5283FE0UL,
    0xEFD97FF47B745B8DUL,
    0xD7021272EB0A451EUL,
    0x2C933ABF17A1DF41UL,
    0x82E7FFCD5B2326B3UL,
    0x3BCF567485E1971CUL,
    0x1CBA05AE7BD7EE05UL,
    0x0F07E7745A236711UL,
    0xFDF3D97C674AFB66UL,
    0x459FD2C8D0AB78BCUL,
    0x98D18905BF723B99UL,
    0x58F735290861E6B4UL,
    0x3C8938D7D872211EUL,
    0xBBF327DED94E4DEBUL,
    0xBDEB86F4D5809204UL,
    0xBF59707B3E5ED531UL,
    0x1A8E2C8B9CF4549CUL,
    0x15E33297C3E8DC60UL,
    0x5096FD9CCB49056DUL,
    0x92CCC17A7A2285DAUL,
    0xBB0527EC6341496DUL,
    0x2C328AF17210F009UL,
    0x2BF72AD5B41AA739UL,
    0x11FE353CF9733E6FUL,
    0xC514489CFB8AF806UL,
    0xBD06C611BB9048C2UL,
    0x85F01B8D5B90570EUL,
    0x2FCB133CA50A49EBUL,
    0x86255B1FC929E33EUL,
    0x0C1C5D756FB5F337UL,
    0x8217150E1217EBFDUL,
    0x1D132D614DD86811UL,
    0x6D8EB211944DCE08UL,
    0x32F34FF7F617643BUL,
    0xE6A9F00D4240B519UL,
    0x54972ADAF0294A93UL,
    0x0DF606929C105BE1UL,
    0xCF537FDE4FBD4CE5UL,
    0x87D51D72255D4E78UL,
    0x1CE592FDC749D6F5UL,
    0xFBD96D87AC96D533UL,
    0xD0837058AE2E4BEEUL,
    0x51BC1ED3CC44E8F7UL,
    0xEF662D8D57E290B1UL,
    0x98C494FD5BDFBFD5UL,
    0xF6E48914C7A8694EUL,
    0xAB58C27C2E6123C6UL,
    0xB9449845F73F5E9CUL,
    0xC6796A8FFA375E53UL,
    0xC50AA39A577AF886UL,
    0x768FF8961BA904D6UL,
    0x2DE7EFA66B906036UL,
    0xD80A80346A45D761UL,
    0xE1E258829A885245UL,
    0xC3D0841A0CC546A6UL,
    0xD69736AAE04DB51AUL,
    0xC58424BA936EB458UL,
    0x80338406F3475E55UL,
    0x362E2D3FE93A9959UL,
    0xAE4E8157D9ECF087UL,
    0x77FE3402004CD1B0UL,
    0xBA7148484BD90365UL,
    0xE83A3E3557A56640UL,
    0x5E657EF1099EDD65UL,
    0xEC52C631A1831C03UL,
    0x9304881D6F6537EAUL,
    0xDF6E5987D2B4D140UL,
    0xF44A5456AC3F4F97UL,
    0xD1C7CB175E012964UL,
    0xBAABBB23EB6E484EUL,
    0xFC1E275A90D39995UL,
    0x2982BF73F66E9DDCUL,
    0x2170813D3DD8661BUL,
    0xFDDC2B4ED3C69DF0UL,
    0xF7B38B8305F1FE8BUL,
    0x2201C576FACAEBE8UL,
    0xBEB3D46BB7F043C0UL,
    0x1F710BFF7DAE6261UL,
    0x0AD973CA1E077B60UL,
    0x74C180030FDE4B69UL,
    0xD1C55B110E4DF534UL,
    0x30432A0118736E00UL,
    0x873FA65C778AD970UL,
    0xD3A10FC7FD8D98CDUL,
    0xF1CEA8A4198D8E9AUL,
    0x98C4FE6EC34154CAUL,
    0x7A42B2E236E71415UL,
    0x108BE26959A9D9BBUL,
    0xA356990E161C9E65UL,
    0x1C4FC5752BCD8E48UL,
    0x5CE62918F8D703C7UL,
    0x2206BF9A37B7F724UL,
    0x068E835A1D0DC0E3UL,
    0xE35B38A27E8E7179UL,
    0x36AD3E690DA5ACEBUL,
    0xB4EDDC19532BFB85UL,
    0xD2209BE128B5418CUL,
    0xF9E56683CA8E11A5UL,
    0x1E8E5E20937E3137UL,
    0x6C5AE23EFA885092UL,
    0x7497D2CE2C30D24CUL,
    0xC8B1B2425604CDD0UL,
    0xD2C91A0B572AAE56UL,
    0xC5EF963405593646UL,
    0x95D9F4BC443956E7UL,
    0x33E3C6C6F2F0B506UL,
    0x892B6AB8F33606F5UL,
    0xB6AE90EDDE95C762UL,
    0x0B568201DD99F0EBUL,
    0x61631F5DF50D1C34UL,
    0x252E5F915EABB675UL,
    0x6004BCB0E226AAEAUL,
    0x6B17C62C9635D2DCUL,
    0x3B3CAD6166916D87UL,
    0x23641AFE870AF385UL,
    0xE73364DB90778FFAUL,
    0x16754C556D2EDE3DUL,
    0xDF0D54BE7A776737UL,
    0x480357EE890C295AUL,
    0x8530AD776CD72B12UL,
    0x9AEB285D1818C9ACUL,
    0xD79DEEFB53455EBAUL,
    0x9663FE6B7A61EB00UL,
    0xA018A12E5C5C2FA6UL,
    0x8A694D7A68F8DC38UL,
    0xAA19F5572C38B564UL,
    0xB542DE8C3D1CB210UL,
    0xC6ED9D5092438D91UL,
    0xA8638BE228D4751AUL,
    0x7345BDD95E62E0F2UL,
    0xFE02FFBED8CA9D99UL,
    0x2F844A8B08D76685UL,
    0x40763EA7B9B783E7UL,
    0x8F8C0E370AE62F5CUL,
    0xFB380A29641EC31AUL,
    0x0EC92A1BF0857187UL,
    0x65475A218FFAA93DUL,
    0x77ED170667F50170UL,
    0x7A2D8AD0A9EB9C3FUL,
    0x19AF7ED9B9D23058UL,
    0x9AC92EED5E4793ABUL,
    0x11579D940949C49EUL,
    0x430386FE9BF80B45UL,
    0x353FC880830B88FAUL,
    0x7FF4944CC209192DUL,
    0x67C540AA08E4A6F5UL,
    0xCADA5A0D0702381EUL,
    0xE65F427EB70AB1EDUL,
    0x5B9853296731E88DUL,
    0x8D8686B622B88120UL,
    0x7EC3C679D0E7E46BUL,
    0xA3B0C41BA5CC0BB5UL,
    0x2DE3F0A134FFBC0DUL,
    0x75262FD12D0A1C84UL,
    0xAD6B3148A78AE9B6UL,
    0x2F9D3834AEB9EF79UL,
    0xF2A9CDABCEA04BD6UL,
    0x733ADF241531E5C2UL,
    0xFCBDCE714A7C88E5UL,
    0x8E04FEDD28D42462UL,
    0xC6941B4A3A8FBBB9UL,
    0x3523634255FC3318UL,
    0xED640017ED337E45UL,
    0x13AD665062541A7EUL,
    0xE78503B10C4314E0UL,
    0xEA241BB04110F091UL,
    0xBC9AE166038A5CECUL,
    0xCE4AC0439F607045UL,
    0xD01005D2BA2EB778UL,
    0xDDC635D5B3262C56UL,
    0x6C8065A3B780185BUL,
    0x9A53DED9921DE990UL,
    0x5E203DA2BA15D436UL,
    0x40CF0D12D142A9E8UL,
    0x1B7ABE26CBCBF8C7UL,
    0x7CDC8C3B89F661B3UL,
    0x0BABC1345ABBFB16UL,
    0xA5342D390CDA41D6UL,
    0x7A73D05A607734C7UL,
    0xB8BEC0CA6F0EDB0FUL,
    0x9072C8B49907BFADUL,
    0xCC9AA18DCC7084F4UL,
    0x729072355FA39EC9UL,
    0x30CA2EF91D15ADF8UL,
    0x49B99BF3FDA89A7AUL,
    0x049E937F18F4020CUL,
    0x95D2D383D5396B8AUL,
    0xEE066C7006C49C0AUL,
    0xC265DF9FB44A9FBDUL,
    0xCC97B29285B1DC3BUL,
    0xB35CE999E8EF317EUL,
    0xBF286C554784F3DFUL,
    0xE8AF77C4C06ADC93UL,
    0xF6D733C32076AD03UL,
    0xB28ECA15046CA8B9UL,
    0xA571991A7FE6CCEBUL,
    0xA151A7394A214E65UL,
    0x0626A247D2405330UL,
    0xFF266D1D0EB1195DUL,
    0xDD6BCF9E94425DF9UL,
    0xC69EDA28699D5107UL,
    0x1B9C0099CB942AC6UL,
    0x3E45765F3FBB582FUL,
    0x0BE4BE946463F917UL,
    0xC1805D05E6D4FE10UL,
    0xACF57305B12AF907UL,
    0x399D2D3B33F1B8EBUL,
    0x651D3228960D08AFUL,
    0xA619B168B8A8570FUL,
    0xF7F26C6E9CC9EBB8UL,
    0xB165AB7C248B2DC1UL,
    0x66E49BF55B4B1874UL,
    0x50B196FC9ED6545BUL,
    0xCD536C4D33DCC900UL,
    0x6DDBBDD98E2E9C25UL,
    0x344F393B027E38C3UL,
    0xFC00454CF60B91DDUL,
    0xC1AA9F53CE982990UL,
    0x88795F13FACDA88DUL,
    0x19F21E63AE6EAE4EUL,
    0xB39786F201FEE30BUL,
    0x2CB0075110BE1E56UL,
    0x55ECF4D13D9903B0UL,
    0xBB6F1CAEC68B0BCEUL,
    0x032A116663A4D5ACUL,
    0x1098355A16064BB3UL,
    0x109697E2FFBAC8A1UL,
    0x5F43D83FD6738741UL,
    0x3B988190C0AA6C0BUL,
    0xDA07819E452FFE8FUL,
    0x4E404A9361F75BB2UL,
    0x1654F24A88A8E3FEUL,
    0xF1620ECB50E01DE7UL,
    0x8D67489793FF428BUL,
    0x774BD811F656A122UL,
    0x2C96CDB04FCA358EUL,
    0x031ACB6ABA18C729UL,
    0xFF5E5EA2DCEEACF3UL,
    0x47AED84213A47510UL,
    0x477D9DB48F889591UL,
    0x4CAFEBFA21EC188DUL,
    0x2B1784DB08AFEA79UL,
    0xC64A06D939F826F5UL,
    0x4E0AF9114608257CUL,
    0x3E65CDE5215832C1UL,
    0x34D66BC058019CE0UL,
    0xF3365489E0DD50F9UL,
    0xBDA07E5950085E46UL,
    0x218DD44AAAC964FFUL,
    0x9748FA4DE50CCE3EUL,
    0x120C48C614909FA4UL,
    0x1D6650420CEC9D3BUL,
    0xF3638DAE8C4045E1UL,
    0x01E2817A479A7F9BUL,
    0x5D2BFAAB8D956E0EUL,
    0x3B4BF5F0859204D9UL,
    0xBCC29F935ED07688UL,
    0xDFEBD56D9BD1EB16UL,
    0xB4F90FAF7670B16FUL,
    0x1B9025BDA76822B6UL,
    0x3CDC1E622CCE0356UL,
    0x9D6BFC12B05C6121UL,
    0x395BF71085D1B1D9UL,
    0x02E93C796ABD3A97UL,
    0x58BB377BEC7CD5F4UL,
    0x9BD7BD55E4533183UL,
    0xD11FA52EB849D978UL,
    0x4E72BBDBCA58A3DBUL,
    0x1F1F957154EC51DFUL,
    0x59C16B79F53B3712UL,
    0x89049DD63C08B5D1UL,
    0xB70374A758007DFAUL,
    0xEBAA9B64D76356FDUL,
    0x58FCE43488F9F5F4UL,
    0x21442F412E8DE56BUL,
    0xA4718A1419D18151UL,
    0x9D64D7405520E3D3UL,
    0xF8AD2EED7C47E8FEUL,
    0xAB6781A5F3101470UL,
    0xA9A41C1E940FB0E8UL,
    0x932C2D096A2C3FFFUL,
    0xA8A7D434AFB4B97BUL,
    0x2ACABED337622DF2UL,
    0x1FEF0683B96EBCF2UL,
    0xF584CF8529B51434UL,
    0x66C3FB05206041BAUL,
    0x9C11908013EA4715UL,
    0x76D683C108594D0EUL,
    0xE5564483E407F914UL,
    0x9D3AF56E94C9AE98UL,
    0xFA932DE350266EF8UL,
    0x4F0C413926060B38UL,
    0xCA4CEA6AE0000A7EUL,
    0xF1F8157B8C3F171CUL,
    0xD2DCCD8E16E20997UL,
    0x97FFB4ADEED08066UL,
    0x5DB8010EE71FDEF2UL,
    0x59E7B488451F4D3AUL,
    0x01BB4D577D38BD9EUL,
    0x1C073274E065C6D2UL,
    0x2BE4BC731D039D5AUL,
    0x4A04DE7CAB2739A1UL,
    0x6FDDAD856E36988AUL,
    0x06C0023BED16DD6BUL,
    0x3A539D52857EA82DUL,
    0x62A456AA4769EF34UL,
    0xC15907D667F7CFB2UL,
    0x6D28DC1671E334FDUL,
    0x3BD3F52BA9B1E4E8UL,
    0xB138AAB8A70D3C69UL,
    0x19A30C23F5827F8AUL,
    0x6F259F82D873B8B8UL,
    0xF154B8D1775B2DECUL,
    0x013A80FC08F6E4F2UL,
    0xDFE8422B3B94E688UL,
    0xBAC7FC81A75EC1A1UL,
    0xB65B60556E2A9225UL,
    0xEF21A9EF089A2668UL,
    0xA5F377B175A699C5UL,
    0x153973AB99FE8980UL,
    0x18EB48CFC41F2EA0UL,
    0x845FFC3A4FEEFA3EUL,
    0x2DD39BF3E2F9C47FUL,
    0x1E5185B72EF5158AUL,
    0x5B17A90291133DA5UL,
    0x706D57B0F50DA710UL,
    0xA097AB275061FB21UL,
    0xE7A0D23DC414507BUL,
    0x159B7318403A1CD8UL,
    0xFBE20329593DEC9DUL,
    0xB32209EFFDC04913UL,
    0x70B8EC8FC108A634UL,
    0x149AEE66F0CB3A99UL,
    0x8BF907833BE275DEUL,
    0x062D5EAD4DA2FA6AUL,
    0x9D74AE343DB65533UL,
    0x0355EF116C4C97B2UL,
    0xA1CADDCD98415A41UL,
    0x2F794A877ADD4C92UL,
    0x226435CB96CCFC8CUL,
    0x02165D55000219ACUL,
    0xACB5DCCA1EC76840UL,
    0xF54BB7B61036F335UL,
    0x0653B735BFBDFE87UL,
    0x29DA3CA8D8B2692DUL,
    0xD2CC78CD3D0B50F9UL,
    0xBF4DC1784BE94DFAUL,
    0x75773E11BA459E90UL,
    0xD57AAAE0E2214D11UL,
    0x552369F549563AD5UL,
    0x43FA0DFC5DF87815UL,
    0xB81CF134AEB56FFBUL,
    0xB9EFD5C25018725AUL,
    0xC7ABCACA4985A766UL,
    0x029FE7CD1B7E2E75UL,
    0x8B2FD4560E55DD2DUL,
    0x92D6A88E64A94430UL,
    0xC8EDE9BDBCCBA6D4UL,
    0x950A154B8DAB6185UL,
    0x12561FCBB62D5B9CUL,
    0x044DBAD7A7FA2BE5UL,
    0xB4BBFD9CD8B3922BUL,
    0xE4E6DD5566D28C82UL,
    0x3A48AB4445D499BEUL,
    0x4ADA3F19BE4A6047UL,
    0x0150B6FF25A9E2E5UL,
    0xBEF34B1D9624D5DDUL,
    0x806058BBDC136E06UL,
    0x544810ED9DB6BBE6UL,
    0x5B50ABB1FE3746F4UL,
    0xD53F3A29BCE2580EUL,
    0x0350E7E17BA767D0UL,
    0x4EE5367468A65CCCUL,
    0x0BE84C318BA6EC22UL,
    0xCCBA154209823057UL,
    0x3CDC7136613284BDUL,
    0xC5042CC6F5E3D450UL,
    0x67AA4D73F0CFA86BUL,
    0x14D8518E9760F08FUL,
    0x0B40ED49D7D6FF84UL,
    0x4D953DF78EBF8158UL,
    0x6D6840CEE8845831UL,
    0x6E91B04E08773030UL,
    0x07E5B515DB0636FCUL,
    0xC819F3CBB62BF692UL,
    0xC3981DCE61D9E13FUL,
    0xB51194800B257161UL,
    0x5E3CF89C6BCCA67DUL,
    0x6ABFA3E16460F22DUL,
    0x865908C81A2C22E9UL,
    0x8E5FB15663F79120UL,
    0xA7A932170592B50EUL,
    0x026FB97D0A425F84UL,
    0xDFB2B516207D3534UL,
    0x02EC0AF5C5A49B7AUL,
    0x5234F9F10919EABAUL,
    0xBAC038F7459AE5AEUL,
    0x7D304C1C955E3E12UL,
    0xC3330A45CCCDB26AUL,
    0xC520A34DAFBF24B1UL,
    0xB60A9CFEB21CA6AAUL,
    0xC2612D223D915A1CUL,
    0x255F8DAFD540D397UL,
    0x06D153C0B99B6128UL,
    0xBFD8727AEA3CCEBAUL,
    0x4D41783FB745E42EUL,
    0x85973643155D0B07UL,
    0xB13C14F66A00D047UL,
    0xC7848EFCCC545182UL,
    0xAE306F2A904BF86EUL,
    0xAABD62873FFB1A33UL,
    0x6F0F77FBA9A8F2E6UL,
    0x3FA4BF0A7AB7DE2CUL,
    0xEDD91296CD01AEE0UL,
    0x5EE29B4D7D5DF897UL,
    0x3CF48F6F96E749DCUL,
    0x16A96863A17552BBUL,
    0xA13B0222F3D94A94UL,
    0x731A880555DA3647UL,
    0xF55E4046F6F831DCUL,
    0xE111A7C0D200CBC5UL,
    0x7DD234D6F3914C5BUL,
    0x47B595D60664CFFAUL,
    0xC669EEA5D031B7DEUL,
    0xC3654A441402562DUL,
    0x2C654B4943BDDF7CUL,
    0xFEDB7D269E8C60E3UL,
    0x61A3DBA14AB7F411UL,
    0x149916F50C34A40DUL,
    0x202A5ED9CE01D6E7UL,
    0x8DB3F12A02CAEF72UL,
    0xA2FABBE87F4BAD82UL,
    0x45F1DE9C34B93AE6UL,
    0xF75497BB865F0803UL,
    0x5640BFF86B16E8DCUL,
    0x68B2B5F33BA63C41UL,
    0xF33AB75780BA57DEUL,
    0x8C1DC7770C51DC8DUL,
    0x661B5C8654ADD825UL,
    0xA2767257A320FC82UL,
    0x271017B9BA825366UL,
    0x1B93E0107865DD40UL,
    0x77C3CEC46BE286F6UL,
    0x8609C75EC438FB3BUL,
    0x0A9F2A468B328E74UL,
    0x0FB82563989CF4FBUL,
    0x609278246A29CA34UL,
    0x242B5874F0A4E052UL,
    0xB5349E36C546509AUL,
    0xD9D0E694C8282C96UL,
    0x1381539FEE034CDAUL,
    0xD1B0F412F109EA5DUL,
    0xB22B17DF858716A6UL,
    0x83B8201ED82A9A2DUL,
    0xA6385DEB180F319FUL,
    0x40B62FA033EB0346UL,
    0x7DCF7C708D292D55UL,
    0x7BF1A54AE67AC070UL,
    0x0290F35C0AD97864UL,
    0x9FBDA379383A52A4UL,
    0x036F97C908C2B52CUL,
    0x6A25241C340D3822UL,
    0xA2746EEAE3E577CDUL,
    0x6B24BFE83A2BE47BUL,
    0xD93DB43B82BC0D00UL,
    0xBDECF64367884AC3UL,
    0xF4C8CF9E353AFECAUL,
    0xC2EAE3FB8CDBED31UL,
    0xC912AF078AF19212UL,
    0x1C9D7949FA533490UL,
    0x5D96CFB59DA076A0UL,
    0x9A2D0FB2E7852392UL,
    0xC90621D8A0CEECF2UL,
    0x4145A4C44FF3B5A6UL,
    0xA10B2DB49E92A6B0UL,
    0xE32EFE9AB4A9AA0CUL,
    0x503F5920162365B2UL,
    0xE827B9382CFB41BAUL,
    0xF9D02130ECDD1D77UL,
    0xC91C6C55199308CAUL,
    0xC8B5C4A79CC18B94UL,
    0x5C48A1D6E3B33179UL,
    0xB16FCE9DDC7BA182UL,
    0x5A859503B0C08678UL,
    0x797AC7CB535BA28FUL,
    0x5C544BC6C57AC575UL,
    0xD4E8E24955024033UL,
    0x891B5B39AC6302AFUL,
    0xDCD4EA924F42D01AUL,
    0x4879E4FE39074CDFUL,
    0x14D6F5678D8F1B37UL,
    0x837765A25378F0BBUL,
    0x65019750A0324133UL,
    0x487A82C650EB7799UL,
    0x0225778816FDC28CUL,
    0x743607648ADD4587UL,
    0xB4EC2312F4E5B1F1UL,
    0x3A6867B4845BEDA2UL,
    0x6D0858B8EDFD2B7DUL,
    0x7295C203DD659DFEUL,
    0x48608C3464F58AB4UL,
    0x28B022A17B068A3AUL,
    0x103991D4A307D472UL,
    0x759E13EBC1C15C5AUL,
    0x469F2ECDEC046337UL,
    0xFD55E49555E017CFUL,
    0x016C090630DF1F89UL,
    0xA87E00932DB4D85DUL,
    0x0EF93E9F3D08C178UL,
    0x8BBACBF51DA047A8UL,
    0x39B5D1B10383F0C8UL,
    0x3044240D2E0FA842UL,
    0x705A276EBFF3133DUL,
    0xDB90C6CCA48940F1UL,
    0xEA7F0AD7E9BA676FUL,
    0x70FDA869F3317EA9UL,
    0x2AED6301F67007D5UL,
    0x49482F9FCD825AAAUL,
    0xA7092AFE81944852UL,
    0xFD3151CD37EA2245UL,
    0xB1381B97F70C7B30UL,
    0xDD79DF9F4D26E1C9UL,
    0xE33D59DA70B58FDFUL,
    0xC6D3D26810C8E0F9UL,
    0x44A113DD6FFC48D1UL,
    0x271401846BD26E92UL,
    0xC8391C309684595AUL,
    0x8F993D26E0CA5E8EUL,
    0xA516C198B7DCA1E1UL,
    0xDF2E1F7742402E81UL,
    0xE9EA16D6E54CDCA4UL,
    0xDE2EF5DA284CC8DFUL,
    0x59424BD75174C9B1UL,
    0x9F97DA93681F87EAUL,
    0x33E6C8EFD0CD93E9UL,
    0x8D4D46230B2C353AUL,
    0x5A4F9EDF1673F704UL,
    0xCBBDE6D335D6D496UL,
    0x91EF6EE6419E5B97UL,
    0x9DFE13ECDC1EC196UL,
    0x79C0E43EB9B944E2UL,
    0xEE82280AB767B690UL,
    0x19464CB6E4078C8AUL,
    0xA4FF579AC0E3AAAEUL,
    0xAC253D7842768F48UL,
    0xEE778F8C7E1142E2UL,
    0x2A2173E46DAECD12UL,
    0x19CAFA3C87F7C2FFUL,
    0x6493CF69859B116AUL,
    0x425A920FDB9A0DDAUL,
    0x0AA27680A0BD43FAUL,
    0x5C90CAB09951A12FUL,
    0x68EDDA28A5976D07UL,
    0x74BD83EA840F6BC9UL,
    0x5E346D934122613FUL,
    0x1A31FE0049E542F6UL,
    0x7EC52CC40597D170UL,
    0x70894BD0915C5BCAUL,
    0xCED08CBE8EBB97C7UL,
    0x2F7F2B26DD3F18EEUL,
    0xBCFC632DB7673BF0UL,
    0x0AF7B437918103B3UL,
    0x42156508606DE65EUL,
    0x4008EDF7D6E48175UL,
    0x380B4968D1E09E55UL,
    0xA200EB1EE790F448UL,
    0x5B4E4C817FCC2DFBUL,
    0x26903D9CD1175F2CUL,
    0x80EC114669DAEFF4UL,
    0x5F35F6732C3FBBA0UL,
    0xD0082607100D7193UL,
    0xDFC8CBC606FDB0FCUL,
    0xA03502FC581F7D9BUL,
    0x9780F32BCAF72431UL,
    0x162F9D995753DC19UL,
    0xD51ADCD2D8BC0FB3UL,
    0x2B486269ACD548D3UL,
    0xA2297E18F3E71C2EUL,
    0x83E87508A2CA2AC6UL,
    0x189E955A8313E298UL,
    0xE520FF1AD2785B40UL,
    0xF46C581C61718916UL,
    0xCCD078C2665D2973UL,
    0x247ACBC4ABBC9D1CUL,
    0xBF72910D0F26F025UL,
    0x513403FB9C56211FUL,
    0xF8BDBF3D573049A1UL,
    0xD1F8363DFAD03848UL,
    0x5D7B620DAE436138UL,
    0xC92717EF615B6704UL,
    0xE3433EADAAF7EE40UL,
    0x51669F7D1FB53D9FUL,
    0xB15162CB5826E9E8UL,
    0xDCE214D9ED58F3CFUL,
    0xBBC08F6B4CB8FF0AUL,
    0xC724C701C30B2FE7UL,
    0x2238E588E588A6D7UL,
    0xADFF1B2A555F5FBAUL,
    0x62ECFCFDEE7885D6UL,
    0x9E4CFFF989258472UL,
    0xF4F2C0D4EE209E20UL,
    0xCA9D2AA3E326D720UL,
    0x4F32C0D5A90A9B40UL,
    0x741B0129D4560F31UL,
    0xCC9F3371A7C28BC9UL,
    0x7660C6E75D3A078EUL,
    0xA41BCD7213805AACUL,
    0xDC9DA9E8789F5246UL,
    0xDCF0754AC3D6FD4EUL,
    0x1F2300CB7FA7B7F6UL,
    0x17FCA7199A530203UL,
    0xD7360051C885628BUL,
    0xF5F1E89A970B7796UL,
    0x7B8A361C1813FBEFUL,
    0xDB629FFD9285FA06UL,
    0x324C5AA411DA7737UL,
    0x12DED8CA53D47EA5UL,
    0x89215EC747DF244AUL,
    0x5A43C76F7FC7BA5FUL,
    0x80C8B1846639BB19UL,
    0x5C41E6BABC9E2112UL,
    0x21E253A7F8DA5DFBUL,
    0x11FA5D3479C7DD47UL,
    0xEAF0FA793D05C592UL,
    0x62374889A4D59F72UL,
    0x8BFCEB5EA1B161B6UL,
    0x47C3B5848C3E45D8UL,
    0x4055E40BD2DBEC1DUL,
    0xC8CA9670B9D83B3BUL,
    0xD716F30D8C8980E2UL,
    0x25223CA6B4D20B7FUL,
    0x13D2B8ADD79640F2UL,
    0x494E97C2EF27C470UL,
    0xB096419DF0D06CE7UL,
    0xD972E4BD7AEB235FUL,
    0x3D10BC92A4DB1D35UL,
    0xBBC72712E80257A1UL,
    0x961777E64BDAF717UL,
    0x2F8B4D1C595B11DBUL,
    0xDA488F299A5B164EUL,
    0x8117E09A19EEF4D3UL,
    0x50C7A99057A69748UL,
    0x7A86743F475D9E09UL,
    0xC23DE0E91C30B58CUL,
    0x440AF51A3462B86FUL,
    0xC59F528E9AB9F339UL,
    0x228D3D94F8A11C3CUL,
    0x8D9DF6ECA8768583UL,
    0xB56BBBCC2955D9CBUL,
    0x71B74D2AE19338D0UL,
    0x4C61C75BEE8184C2UL,
    0x06A3524161C502BAUL,
    0xA1C996C2A744262EUL,
    0xD00D76A7DFC9D852UL,
    0x0ABC54DE641DC0FCUL,
    0x186D5CB5E7B0FF7BUL,
    0x1C9ADDA3244A1FBFUL,
    0xC7272775B4DC786EUL,
    0xD220BDD222AC4A1EUL,
    0xB812B3FD1C01CF27UL,
    0x011883F41211432AUL,
    0xE625BEABBAFFDAB9UL,
    0xEE53B14A19E480D4UL,
    0x971D7B15BCDBEF99UL,
    0x40C8656EDAEDD569UL,
    0x7C0A893088881D57UL,
    0x991251AFC3981F84UL,
    0xD3C2E180A40F031EUL,
    0x49010A6A396553D8UL,
    0x0A2E9FDB9A8C62F6UL,
    0x583DF8E3D4AFBD98UL,
    0x4CEBC1ED31E8925EUL,
    0x4FCD976DA686580CUL,
    0xE40C1C56DF95C2E8UL,
    0xC0741A26499654CDUL,
    0x7F96F23FA9B73327UL,
    0x9896CE4721BE84BAUL,
    0x645D0B458D8E17B5UL,
    0x4C6A6451C79E4662UL,
    0xB2CBCD0930DFB420UL,
    0xC61B86C9F61EB404UL,
    0x8093F23ABACCC7D4UL,
    0x20746F7B1032A3C7UL,
    0x06EE9048FD080382UL,
    0xA0FE76168A189DDBUL,
    0x2F137B508DE238F2UL,
    0xE36A98D8AB3D3C66UL,
    0x5EDEF0CF8C1DAB3CUL,
    0x41FAA8FB2ECE8720UL,
    0x2131046957F31B04UL,
    0xBA01E7B6DEEFBBC9UL,
    0x2A56C06EBEF2B0D9UL,
    0x499EF20C5DB25C59UL,
    0x0546524ADE2E9723UL,
    0x708BDD8CD795B043UL,
    0xAD6875BBC0FC899CUL,
    0x6CC86E78358D5119UL,
    0xFCCAE5B92A830878UL,
    0x15FF52B809DB2353UL,
    0xF8CC1EBE0B62E29FUL,
    0x22DA66936E0FFF37UL,
    0x8F5EA1C01D65A100UL,
    0xC84527E235FCA219UL,
    0xA5EFC3E847D60507UL,
    0x648E7A5434AF7969UL,
    0x4645DE9980999E93UL,
    0x692D808C34A82143UL,
    0xA69AC4ADE82B57A4UL,
    0x9CB0BFA7A9342C3DUL,
    0x52818819057F2B40UL,
    0x01095C95CD46B624UL,
    0xC5238C011AF405E4UL,
    0xD27058A1CA2B13EEUL,
    0x9AB9C1CFC8862DFBUL,
    0x2ED61456317B8178UL,
    0xC55854C7D7274882UL,
    0x906B778CA1DC72B6UL,
    0x83BCCE3224735F05UL,
    0x4DFDD9EB705F8140UL,
    0xBEDB96A7584AA8CFUL,
    0xA6EEF01087181EDDUL,
    0x6AD0BD5E087866CBUL,
    0xDBF860CF1DB8E599UL,
    0x35124302A556A325UL,
    0xE7E035450A7948D5UL,
    0xC27E1CC2D795105EUL,
    0x8FF3847DADD8E30CUL,
    0x4CD49B76338C7DEEUL,
    0xA358F56F10732EE1UL,
    0x5B11728527CA6E5FUL,
    0x1186940ED72FFEECUL,
    0x78F06F6B1FB5A80CUL,
    0x06610343E73B9727UL,
    0x3D2FD9E763B24472UL,
    0x46CD3CB66E0825CCUL,
    0xB6B9DDC412FCEEE2UL,
    0x7A983AA9DA2659EDUL,
    0x031C55ED33227371UL,
    0xF8B0F5A43E928C76UL,
    0xCABDB751D86FE93BUL,
    0x57A995FD75D37F56UL,
    0x2F0661C155AEEEAAUL,
    0x407F8D034F70F0C2UL,
    0x6889498B3E19C797UL,
    0x50C1B2874E50C114UL,
    0x3E5AE19425CD74BEUL,
    0xC0C527B525D7CFB5UL,
    0xD3F2FFEB8D836F52UL,
    0x8D2064E5B64A628AUL,
    0x8B5FADCC4E3A145FUL,
    0x065DB281590CEA2DUL,
    0x3A0014ADB172A3C5UL,
    0x95AED7B8E39ECAA4UL,
    0x6B1E8E2ED1335B71UL,
    0x211AB1DD8D0F363AUL,
    0x0CE3AA5E1CA19E10UL,
    0xDACE671663F2F5DBUL,
    0x6524A2F114706F43UL,
    0xA06C969B02A97298UL,
    0x05661B80A8C9165FUL,
    0x00EE9F297C738720UL,
    0x9FD90732F56403CEUL,
    0x4F14F9F870D6FBC8UL,
    0xA9D14EEA259F9248UL,
    0x241FCA5B1AA14F75UL,
    0x812595A0644CE1DEUL,
    0xF2E07819EF1A5289UL,
    0x9489659372A81585UL,
    0xA213B11DFF526300UL,
    0x8D30F648014A92B5UL,
    0x10D0A8F259E93EC9UL,
    0xC4637A6D03C24CC3UL,
    0x46E2B844905BC5F0UL,
    0xD7C10C4A637992C9UL,
    0x0888C3502DBBEEF5UL,
    0x7239B21A38F536BAUL,
    0xDDE6DF5AE89981D2UL,
    0x060D6E96F8B8E48DUL,
    0xDA95EA3317CC5064UL,
    0x764EB96874EFFDC1UL,
    0x2158E81A6AF65EA9UL,
    0x20B711662962B472UL,
    0x95EB9964FF5C5C65UL,
    0x605F5A140F202491UL,
    0xDFD5033FDBA0A9C8UL,
    0xC86D67D52A707CF8UL,
    0xFCDFF7B72D23A1ACUL,
    0x394BDE2A7BBA031EUL,
    0x0267D00AF114F17AUL,
    0x8BAD02F0368D9E14UL,
    0x5C3D0A935F535C4CUL,
    0xE465D4AB7CA6AE72UL,
    0x40FDEDB72F8293B2UL,
    0x346D81500D088F42UL,
    0x50BD2730B191E360UL,
    0xFEDDF04D62B8D790UL,
    0x48C2BED9180FE123UL,
    0x3FEF770D40960D5AUL,
    0x0A794A5A57F8DF91UL,
    0x8BB4EF4214E0E6D5UL,
    0x866A4A5FAE349510UL,
    0xE83D4F9BA2A38914UL,
    0x846BF6291198A71EUL,
    0xEEF059FAD016D209UL,
    0x15D757606D170C3CUL,
    0x166E7CF68597D8B5UL,
    0x5A504562485944DDUL,
    0x1DD55701034110E5UL,
    0xECB2FC7235A7D137UL,
    0x9F47B058362C84B5UL,
    0x2274BC1C4885E333UL,
    0x1899F328B0E12848UL,
    0xD45DC2893621E1FEUL,
    0x7B3703D2D32DFA18UL,
    0x831E0242595560DFUL,
    0xAFBD61CC738D9EB9UL,
    0x213B91045D09B983UL,
    0xA6E9C38DB51D7748UL,
    0xD5037BA82E12416FUL,
    0x9A8D700A51CB7B0DUL,
    0x95EED5A694951F9FUL,
    0x4805D2B1D8CF94A9UL,
    0xD7E3B9735C0F89D6UL,
    0x04A2A40C73395041UL,
    0x4B53F92932ADFAC0UL,
    0x44A8FCB8ED227738UL,
    0x7196842CB375CDB3UL,
    0x4DC9A62F844D9337UL,
    0x8ACD366038D14505UL,
    0xF6F5161F4534EDFFUL,
    0x731EC8A916BD11A1UL,
    0x524AC5ECEA15343EUL,
    0x0A7B270912999B3CUL,
    0x6AC7003FA6E5575EUL,
    0x8D68C8FD0FACA94EUL,
    0x20B60995556D004FUL,
    0x751B70C3D034E187UL,
    0xB346476EF1A64897UL,
    0xCF511840CEEDE0CCUL,
    0xB1632E9A5F988D11UL,
    0x26AA915AD89BFB4BUL,
    0xEFBE71898A993728UL,
    0x5F9532F3B5CC2551UL,
    0x886E37EC497200B6UL,
    0x51210CED3DA1C78AUL,
    0x54736AA40E271165UL,
    0xB6463CF6AF527071UL,
    0xCFB0A0D8EDD145A3UL,
    0xE81AFC1BC4CC41CEUL,
    0x694E00132F2823EDUL,
    0xE659E47AF827484BUL,
    0x1F0B79228E461EC9UL,
    0x1218E6886D3D8327UL,
    0x17FFC1B2BA35A494UL,
    0x0F42323798A58C8CUL,
    0x5333F526F6AB19AAUL,
    0x1DBD58820FA61D71UL,
    0x47D6F43D77935C75UL,
    0xD796CB5BA8F20E32UL,
    0xE31C2C72B8692B64UL,
    0xEE5D2A122E09EC42UL,
    0xD05BFF0C0A12C68FUL,
    0x18FF00FC7EFF559EUL,
    0xC5F68BE9613E2D18UL,
    0x6B9BBD38AB0796DFUL,
    0x5C48B75732C8456CUL,
    0xFD1695C5D3B05439UL,
    0xC3675780C92F90F9UL,
    0xF4080490ADC51C6FUL,
    0xFB71170B7E76ACBAUL,
    0xA72CD9CA74A5ECBAUL,
    0xAE3CBE5BF394C9C9UL,
    0x961AC54BF0613F5DUL,
    0x428CA6DBD1094446UL,
    0x3910051CCECDB00CUL,
    0x7FB218262B810701UL,
    0xC77720A12FE14A86UL,
    0xB9C54555ED30FBC4UL,
    0x11E79CAB7183B6F5UL,
    0x28004F88151E03E0UL,
    0x43D3807C077261E3UL,
    0xEAF4CD9EA3E7E922UL,
    0x07F1BE2BCCAA27A7UL,
    0x4487C259F0F70977UL,
    0x28D1A16553C51776UL,
    0xAD738C3085FE7E11UL,
    0xB736A491E64A32CFUL,
    0x2595DD4236549CE3UL,
    0x629BFA74418D6239UL,
    0x3AE22DEB5BA5A3E6UL,
    0x1760FFA8AB074D66UL,
    0xD95CC5D2AB15A09FUL,
    0xE22D8FDE858B8119UL,
    0x352E2B5CF420BF3BUL,
    0xD3997889736FD899UL,
    0x1A9205C1B9EE827FUL,
    0xCCF1E97BEFDAE480UL,
    0x9EBC85ED0FFFE51CUL,
    0x06843DA7060A026BUL,
    0x621873ECE1178967UL,
    0x239A3351AC1DA385UL,
    0x1718DE8E3F2823CAUL,
    0x8E2530AA8ADA980EUL,
    0x6B76DC1F3AE6E6A3UL,
    0x3882114BDE571AD4UL,
    0xEA02E132F5C68722UL,
    0x7CFBA6A80BDF3874UL,
    0x0DC7CABAB1E9B67EUL,
    0xE9676F61BC0B3321UL,
    0x0E46A3FCBDE2A1B1UL,
    0x79F020FF9EDC0748UL,
    0x7022BD828FA0B082UL,
    0xFAEE099C6F890BB8UL,
    0xBE8CD9BE829BBEBFUL,
    0x77B21BE7AC540F07UL,
    0x0A50A1EEDAD01E65UL,
    0x8524A8B0171D5E07UL,
    0xEA1C610A04DB6BBBUL,
    0xC34BC448DA29F5E9UL,
    0xE66377CDDADA4810UL,
    0x1C99BB7B6E96D16FUL,
    0x8339643499D1222EUL,
    0x4A4722448F18EEF5UL,
    0x5927F96A78577363UL,
    0x4159C2762B5791D6UL,
    0x44A0870B7E92D7C0UL,
    0x5A47B3B5E63E94C6UL,
    0x9B1E824FFBB7027AUL,
    0x490861B88F4FD846UL,
    0xCEA7C8E1B48FF68CUL,
    0x5C3B791D580E0BC2UL,
    0xACAD101E1FB66689UL,
    0x730F5F8D3F0F2050UL,
    0x57C5DB656185EAC4UL,
    0x78E8E3A640178255UL,
    0x92C47782FDA8B2A3UL,
    0x033C0F9A64E229AEUL,
    0x8A97BCA30A0CE478UL,
    0x3A52AE588830BF7FUL,
    0xD9E3006FB3CBD765UL,
    0x150E808B375A385AUL,
    0x61B6775E83C0DB6FUL,
    0xA53ED5520C07654AUL,
    0x295D82A8559F9150UL,
    0xE12ABE5E3A389A6CUL,
    0xA80AE305E0A3044FUL,
    0xDC6F8601FAF2E893UL,
    0x2C2E3DC128F44309UL,
    0x1A092BB0C3808B96UL,
    0xCE6294A232D03786UL,
    0x46F8696933A63C9BUL,
    0xBD8D32550E5CEBFEUL,
    0xB328DCC3A3AA401BUL,
    0x6CE177D014502E8AUL,
    0xB17BC6453F6CF5ACUL,
    0x68B562E124CC0AEFUL,
    0x36F32DE87082343EUL,
    0x1F922734E259BD26UL,
    0xD7B80E7C3BEFC396UL,
    0xB604A2942ADED0EEUL,
    0x4FC9381A7AEE8968UL,
    0xE42FCDFD0E4196F7UL,
    0xD7CD9CF34F2C99E8UL,
    0xD9F8455409B525E9UL,
    0x7FD8F3BE76F89422UL,
    0x1374ABB7C15BAB92UL,
    0x2CDA538C44C6CCE5UL,
    0xEAABE8FDFA21274CUL,
    0x340F1415B68AEADEUL,
    0x2F9A292AD0A3BD89UL,
    0x3FD2EC8BF1F1CF30UL,
    0x5F3B7749C112D552UL,
    0x278F76C3B0A8F109UL,
    0xFF56381874F82086UL,
    0x10144267DD22866CUL,
    0x1E8C308FD312C036UL,
    0xEB0A2B758F7B850FUL,
    0x50F457823CE6EB5FUL,
    0x9BDF59818B1E38C1UL,
    0x249E310B2D920699UL,
    0x96E2929292A4DB77UL,
    0x74C0E2A57EC66760UL,
    0xDE44A00999B2837DUL,
    0x6CEBE002E58DEE97UL,
    0x5D5CAFF661DDF6FCUL,
    0x0368B3A838070348UL,
    0x5D6160275CAEC8DDUL,
    0xC17AD0E5752BECDAUL,
    0xD40AAC51E8E4C663UL,
    0x6E11F282F11863B6UL,
    0xD81B7F27BC773E66UL,
    0xC6B9DB42C04DD8C3UL,
    0x017568A8182D98A6UL,
    0x6C93ED8C2F74859BUL,
    0xE1CA84EBF72E691DUL,
    0x341DE7ED1D2A1BFDUL,
    0x7796B21B76221BC5UL,
    0xD726BAB4554DA580UL,
    0xF3FBE2D50A6A8C28UL,
    0x6D793F03A631FE56UL,
    0xB7952076E444979DUL,
    0x073CA26B079F956EUL,
    0xA9F9C2E0FDE11CBBUL,
    0x19F2A026EDF0013FUL,
    0xA7A866D21CD2329BUL,
    0xECC01B7C5763333CUL,
    0x33468EDC08E371F6UL,
    0x5549EE11FA22FCF2UL,
    0xEE47635F352DA367UL,
    0x4160B65AE085B5A9UL,
    0x79923CD21BECE14EUL,
    0x310836EE7129BA33UL,
    0x405425358A7D61FEUL,
    0xAD2A7A6DFF55841BUL,
    0x6CF598A2957C2BF8UL,
    0x31D5E073B6F93CDCUL,
    0xD4D7B033C3AA243CUL,
    0x0564B9FF9631B82CUL,
    0xC098810437312FFFUL,
    0x6BEDF5769AC2DC07UL,
    0x3C1978285B036B25UL,
    0x6B83617E04503888UL,
    0x7FF548385680673FUL,
    0xF6A9D9708F6F23DFUL,
    0x7F0DD2EBBB651AFFUL,
    0x28D3FED7190D3A0BUL,
    0x50CAD495A460B305UL,
    0x8F390AC4155099BAUL,
    0x056A8A219B8E829FUL,
    0x352A9F6BCF90081FUL,
    0xE3AD2BDBAEE269ACUL,
    0x172AA1B624FA1013UL,
    0x36DD3FE58B5E5212UL,
    0x2E2EBA0EE7CED0E0UL,
    0x6070104B699B2EF4UL,
    0xAB0F816885B0E483UL,
    0xB3CD51E3DB86F176UL,
    0xA079A6C51525DC4BUL,
    0x14BA4BA137AF6CECUL,
    0xABA17D7CE615ADBFUL,
    0xBD12F8228410D9B4UL,
    0x10D373323E5B9C0DUL,
    0xC65AB383CD91DF98UL,
    0xD422FCC5F239A915UL,
    0xB2A592B04648A9CBUL,
    0x9245E81072704B8AUL,
    0xAAE7CE1D63167423UL,
    0x8DB8CFFD58B62552UL,
    0x98215325A695E78AUL,
    0x3D9ACB1EB139E702UL,
    0x632B2940C67F4EA9UL,
    0x6F1554B0CC2089FAUL,
    0x55598D21339CB998UL,
    0x32888337579A5970UL,
    0x25F87B30C382FCA7UL,
    0x15CFA549788D35EFUL,
    0xA8FDB297A8D25FBAUL,
    0xBE4390CB40B3E627UL,
    0xA13C11E1B5C06BFCUL,
    0x583049884A2EEE3CUL,
    0xFDB423997FA30340UL,
    0xE1CD1E48E025E661UL,
    0xA9CBFD40B3FA3010UL,
    0xD4438C0564490E63UL,
    0xB695E2CD0A2DA9EEUL,
    0x82352748437638CAUL,
    0x56C8B608CFD49854UL,
    0xADED7F5748ACAFE6UL,
    0x92F0DA1E27DB96DCUL,
    0x17430B918701C342UL,
    0x17AD8C9706BDD88AUL,
    0x4A0C7C9BB10ABB36UL,
    0xFDD85225B2DEA55EUL,
    0xFDEC055AB549E328UL,
    0x80FE4F3AB4E1B62AUL,
    0xBAE4F9B97CD43B30UL,
    0x317EBA71D7543F52UL,
    0x202709F4C58A0424UL,
    0x2B7E9A4EAAA93C89UL,
    0x1CCD9A37359072CFUL,
    0xC6F580E4C94926ACUL,
    0x1E6611149DB3DB6BUL,
    0x5CBF7BADE20DB93EUL,
    0x531B84E7DA981FB6UL,
    0x2ED7843F8F801023UL,
    0x44FA03975424A0EEUL,
    0x378E809BF61EC840UL,
    0xAA295B6F28BD587DUL,
    0x97C9E4E7024A8F2CUL,
    0x137BC35589E34E1EUL,
    0x33EE12743CCD6343UL,
    0xC8F3AAF93D0600BFUL,
    0x7AE0589093A2E088UL,
    0xF020C96915705B3AUL,
    0x8EFCCF6EC66D85E4UL,
    0xB6871B0555B02996UL,
    0xD202B92CBF1D816FUL,
    0xDD6CB2CCE7C2735CUL,
    0xB87A37EEB7FAA67DUL,
    0x9D77056A530643F6UL,
    0x853648FD1063A213UL,
    0x8A9BA1AB3E237613UL,
    0x25FBB336DF1804CBUL,
    0xCD015E5BB0D96A57UL,
    0x54CE8AC98E120CABUL,
    0x85F061DA64ED2F67UL,
    0x521FB041D93DD0E4UL,
    0x9040DFB09BE75706UL,
    0x8509B634FBE7DA11UL,
    0x238FFE5C7B0498A6UL,
    0x0A24DA3A41B718F5UL,
    0x10BDDBFC529428DDUL,
    0xF9113A30DE5C6670UL,
    0xBC38B49BCB83BC9BUL,
    0x23D69E0465570028UL,
    0xCFDBDF5AE59BA0F4UL,
    0xE124FA80A759019CUL,
    0xFCC75460ABA29378UL,
    0x8F9EE5687F8EECCDUL,
    0xA86911979638106FUL,
    0x03B504CF259931BCUL,
    0xE7DCB5B874BCD96EUL,
    0xC63CD5D2920ACBE7UL,
    0x17299B63C7683A2BUL,
    0x80EAD8E2E1D5D52EUL,
    0x6C188BE134E074AAUL,
    0x1115F16B8AB9E8BFUL,
    0x0E4C749FF9DE9CC4UL,
    0x761B77454205A61DUL,
    0x94CF4AC034C9C986UL,
    0x5F68520888E69014UL,
    0x39BBF623FC803EACUL,
    0x169BD9382084C8C0UL,
    0xB2798643312205C5UL,
    0xCE94AEBA5D82908AUL,
    0x7B5280EBA9840C72UL,
    0xCC33FA791322B9D9UL,
    0x9D292F73ADBD9313UL,
    0x6178F68A87A4D3A0UL,
    0xCF708001E1E536DDUL,
    0x2CEA2839313C09ACUL,
    0x1C7302E725259789UL,
    0x71A78003C8E71424UL,
    0x6009F9F1AE90D8A6UL,
    0x02245FE4BED318B8UL,
    0x2A179DF17CCF04CDUL,
    0x8B6817B71B85EBF0UL,
    0xADBF060E2B30C5BCUL,
    0x7984C03AA5CC2F41UL,
    0xAC09CA973C564252UL,
    0x98C3CF913D895111UL,
    0x801BD273D3A23F74UL,
    0xF030907CCBB8A9FDUL,
    0x43E4111189E54F0EUL,
    0xD0EF8A959B8A4CB9UL,
    0x1930DFA731813EC4UL,
    0x9EB6522EA68F22FEUL,
    0xAD6DACA4BA53E0A4UL,
    0xA6294919E56FF02AUL,
    0x7669F9E39DC17063UL,
    0x402F9ED62087E898UL,
    0xA0EBB943C300E693UL,
    0xCD74233600C4EA6BUL,
    0xC2D2AD9EAAE265B8UL,
    0xA86478C6958735C5UL,
    0x157F93B036700462UL,
    0xAF754F20EB5CD51AUL,
    0x0C698D8F099174C7UL,
    0xE4C3B169876D33D7UL,
    0xEB81A3DADD503187UL,
    0x4F7D8A9BFB0B43E9UL,
    0xD12882D3FF82BF11UL,
    0x837155CD2F63DA09UL,
    0x2790F4B17D098E26UL,
    0x6CDD58146A436083UL,
    0xD1942374085C8469UL,
    0x60296AF4BA14ABC5UL,
    0x57D760D55F54E071UL,
    0xBD12C5EEE184C337UL,
    0x096EF57A0C999BBAUL,
    0xF98E4B3E56AFC7B1UL,
    0xCB7CC0D58405AD41UL,
    0xD2049635DEB9C375UL,
    0x7C9C91AB74A0360FUL,
    0xD68A5FF8A3A89874UL,
    0x16A304E6CB2BFAB9UL,
    0x1CCC708F0F850613UL,
    0xF314CF4F0211894EUL,
    0x1DFEDD15019315A9UL,
    0x889329C80FE5963CUL,
    0x02CFBA0C9E9275CEUL,
    0x9969599CCFF5D85EUL,
    0xA18AFB39081B6A1FUL,
    0xBA8D65C1C65702E5UL,
    0x2ACCB195F3CCD9DEUL,
    0xDB88A37483346780UL,
    0x07C837F9A01C34C9UL,
    0xBE6B23FFA53FB442UL,
    0xC02F4DBFB51D988BUL,
    0x6B3C4650BC8BEE47UL,
    0x4E096588B13FFECAUL,
    0x63145D9C883A1A70UL,
    0xA50ABC31E3CDFAFFUL,
    0x038C1F517D7FDCF8UL,
    0x66E0276CC5F6B9DAUL,
    0x1CA3E9EAC9D93E5EUL,
    0x465C84BC39F1C351UL,
    0x2513DFB0FB8400FEUL,
    0x441603240D202FA6UL,
    0x5F15302936E07111UL,
    0x52F0982D7FD156B6UL,
    0x57D9C12635E25CE3UL,
    0x78DCDC15C9F116B4UL,
    0xE9F6FFE837354DD4UL,
    0xF6C09E276AEB3F2DUL,
    0x1A6478B61C6BDC3BUL,
    0x113750538FA31298UL,
    0x8DFCED7A656F8802UL,
    0xDAD37F45428801AEUL,
    0x214CD562A939246AUL,
    0x4D79439A6B55AC67UL,
    0x327EDEEEAC55C369UL,
    0xB9C362BABECDDC7AUL,
    0x4A9923385BDB9DADUL,
    0x186E5D252FA50E7DUL,
    0x9A3FF3DE163034E8UL,
    0x14F96AA50D6FBEA7UL,
    0x1BEDE233E6CD2A1FUL,
    0xD484BF71050CA1EEUL,
    0xFA7C7F0AADF25D09UL,
    0x1E314167F701DC3BUL,
    0xBE9B0959FFD0779BUL,
    0x4BA4E2553AFEDC2CUL,
    0x9B6786E4C03DD382UL,
    0xBC8DBDCA2436F7E8UL,
    0x46818D79B1F7499AUL,
    0xCE5D0E5E315DB238UL,
    0x5CDE92C702A8FCE7UL,
    0xBE339365C863BD36UL,
    0x5A039BB0BCA604B6UL,
    0x72DD432F3CDFC0EEUL,
    0x60734CC207C9833CUL,
    0xAE2AF67E9D9AF65DUL,
    0x586AFE3FF72D996EUL,
    0xDF735600A4696DAFUL,
    0x1FC877464A04FC4FUL,
    0x9FCB3CBFB3EAD69AUL,
    0xB7B873520C84C118UL,
    0xEAA0FFE120D92784UL,
    0x127DE7B20C60A6A3UL,
    0x45FF974EEE1C8734UL,
    0x970F608F0EE6C885UL,
    0x2AEE8F8390D2298CUL,
    0x2C173AE2BDB9385EUL,
    0xF87683CDF73C3F6EUL,
    0xA8B6AFDAC320AC87UL,
    0x003E92BA477F9D7FUL,
    0xD3CD6FD297AE87CCUL,
    0xAA51DB313C010A7EUL,
    0x03D7FB09E75D6B7EUL,
    0x14892474891E09EBUL,
    0xDF729E8D20CF7327UL,
    0x729B5F1EFBC0AAEEUL,
    0xDA5F8727EB75B926UL,
    0xE41CA53051197A27UL,
    0xDD2238F57B977751UL,
    0x54318C915D27E4CEUL,
    0xE2590BC29220CEBBUL,
    0x24AC0137444F9FD5UL,
    0x26F49BF3381D933DUL,
    0x5C90988E7C8E1AF4UL,
    0x4167EFE0527D706EUL,
    0xF1A6C18B35BCADE6UL,
    0xC772A904CDE1186FUL,
    0x2916A928514C9827UL,
    0xB552929B85FC27ECUL,
    0xB14552383D39CE3EUL,
    0x2E8D9498C56DD0D1UL,
    0xA5E41FD83AD6CEF0UL,
    0xBE8BE4FE60E27B72UL,
    0xD38744167B2FA257UL,
    0xCD6524439909C979UL,
    0xAE9FC9EF6A9FAC79UL,
    0x9029B2F3DA924928UL,
    0x234CDD44D996FD9AUL,
    0x86A652570E5F25DDUL,
    0x6F6F290102C02AB4UL,
    0x742D6FD43115AF73UL,
    0xA3C0B359DCB848B6UL,
    0x532CFF637EF80148UL,
    0x75A16C3DA34F1245UL,
    0x74513EA3E505181EUL,
    0xCAC2031EBF79B1A8UL,
    0x5FBCA48327B914DFUL,
    0xB81656BC81FE24D1UL,
    0x23C3EB807312F01AUL,
    0xDCFB5D4DB8BF367EUL,
    0xC4278F70131BAA6DUL,
    0x4B5B620C9B59ED34UL,
    0x2C9F302398E13141UL,
    0x2B6D467DAB714E8DUL,
    0x25615540D894B814UL,
    0xA6DB27D19ECBB7DAUL,
    0xA7E4E2D361C2627FUL,
    0xD8E694757BCEA8E9UL,
    0x81FA173F170560D1UL,
    0x1DD1F58F493F1DA5UL,
    0xFE43368D2AA4F2FCUL,
    0xB203913733F27884UL,
    0x13127EC3665E8EE1UL,
    0xC594B315EDF2D4AFUL,
    0xF83D0FEBE75E62C9UL,
    0x35A3CD97B2C0A6D2UL,
    0x8410C5E0CD847B9DUL,
    0x75A9A10948D1DEA6UL,
    0x6B50FC8749632EC1UL,
    0x60E892BA4F5BDCA4UL,
    0xDCD4EC3F419D02FAUL,
    0x41350B4FC28E3941UL,
    0x4B0311D3CDC4648FUL,
    0x59E727A1C9D3E31AUL,
    0x504DFE62A1692296UL,
    0x7EC8ABA5E74B3D7AUL,
    0xE81B7D2A3DAB2D81UL,
    0x77E2DD177910E1CFUL,
    0xA17784FCA9548D15UL,
    0x9049FE339D5F6F6FUL,
    0x5FBAE526203990C9UL,
    0x20FE7FDFEEAD38C0UL,
    0x5E1460624D194A38UL,
    0x6D14BFDC33B34F55UL,
    0x55F5A5F07134DE60UL,
    0xC3B07BA00A83B0F1UL,
    0x276B6CE369C33678UL,
    0x96DEC8D5430208B7UL,
    0x170F541E1CADD1DEUL,
    0x0772DF77852C2E30UL,
    0xA5E78BA2B1331C55UL,
    0x73115226F4814E62UL,
    0x719FF505F097FD20UL,
    0xE67C6DFD386EA5E7UL,
    0xC2D15BEF167E27BCUL,
    0x95CF81BD06EE1887UL,
    0xDD21B55DF695CD0AUL,
    0xC7C6789AA1CFEDD0UL,
    0xFD1D220394BCB824UL,
    0x968F270E39141ECAUL,
    0xD46923FC481CA285UL,
    0x801879A9B4F4B2FBUL,
    0x960C9FF8F616E41CUL,
    0xEB354E5376BC81A7UL,
    0x488043841BBE156FUL,
    0x0AFC4AF510774B47UL,
    0xA48931185F0536FEUL,
    0x72C1056D678BB7D8UL,
    0xA13E93403F26C812UL,
    0x14C9FDCC41F81F63UL,
    0x5B440763A4C8D15BUL,
    0x21986729D6A3A830UL,
    0x1EAC5F91BCBC5073UL,
    0x7AA5B4CE533C858BUL,
    0xDB34E8D56FC13B08UL,
    0x311438A071DD9B1AUL,
    0x900086F371220B6FUL,
    0xE6DE0561D9232A64UL,
    0x3D3D15AF7BCAAF83UL,
    0xA905192A6781C41BUL,
    0x3DDA37128DD1ACA8UL,
    0x67EEDEA1B9BAFD94UL,
    0xFF4FB7C8CDFA3DA7UL,
    0x320D0E0D936A0E9BUL,
    0x7B21E0BB01E8224AUL,
    0xF2DD778C22B15BDAUL,
    0x6B1DE27EE78E6A19UL,
    0x6AFDFB93754950C7UL,
    0x1A5CD7752DD28CD3UL,
    0x5F28ECF5FC84772FUL,
    0xE45087D85F468BC2UL,
    0x817B86108EB94E51UL,
    0x58FADDED207897DCUL,
    0x9133955F1A2DA957UL,
    0xF8DEE0A5600CBB93UL,
    0xE0130B41D3CF4574UL,
    0x6E31B91145873922UL,
    0x62E849B7EB28E770UL,
    0x0923DBF87DFF735EUL,
    0x71BDB63DBAF8DA59UL,
    0x35EDD5B2E3FF01C0UL,
    0x299FAEBB108AE05BUL,
    0x8183455E16C42E3AUL,
    0x1279E861A329E73FUL,
    0x3E93E06DB8EF1F30UL,
    0xD201F3FF917A506DUL,
    0x3F5CC444DCAAA8F2UL,
    0x975D66A0BC17064CUL,
    0x06A320535F5F0248UL,
    0x231C8F89D0539D8FUL,
    0xBC4C9EA5391ECC0DUL,
    0xDD100EB17A94FF65UL,
    0xE374C498D8BADC14UL,
    0x4F38DCA127DAAEA2UL,
    0x09C0403ED9A751C2UL,
    0x6806C51AD12B83B8UL,
    0x0B4DF1FA60C0E664UL,
    0xA4DEDE28B1814289UL,
    0x12782CE0A636E9F0UL,
    0x450930E616475D0DUL,
    0xAABB1F56E2A17CEDUL,
    0x223CA69A8C4417FDUL,
    0xB57D8DD645CFA2CFUL,
    0xF9904D11F1ACBEC3UL,
    0x523A590C1A3CC0D3UL,
    0xEE4C0E6DBC6F2C6FUL,
    0x9135584D09A3437EUL,
    0x2432784ACA090DA4UL,
    0x7679CC1BCEBE3D4CUL,
    0x784BA7E0ECEB4178UL,
    0xB094BC1DB4018240UL,
    0x788E7FD431BD67F1UL,
    0x50085246ABD3FEFAUL,
    0x6DD05E9D83EFA4C9UL,
    0x6E0EB3EB47C8D7AAUL,
    0xBFEFE3321A3F5015UL,
    0x31698AA80E0223F8UL,
    0x4E929E7A5796FD26UL,
    0x595B5178E412E199UL,
    0x63BB75ABEDC1F6A0UL,
    0xEE76FF7E6A0166B0UL,
    0xA67F9C46D612B6F1UL,
    0xD29EC58C2F6B5014UL,
    0x1563FE35E9928E67UL,
    0x613ED644950626AEUL,
    0x3158C77A7E888AB4UL,
    0xD48FE545CD46F857UL,
    0xCF228E2AA03099C3UL,
    0x9C16459B2324B2CFUL,
    0xDEA2B8283BAA3944UL,
    0xEB709A36958ABE0DUL,
    0x7B7723747CCB55B6UL,
    0x01A358D9128B7A86UL,
    0x97D47996FC48CBADUL,
    0xE3B05614DCE1D014UL,
    0xB99C4E4D9499DF29UL,
    0xAF42195A42C63BBAUL,
    0x7B1776B3B53F8D74UL,
    0xDC38CC1E35B6A5D7UL,
    0x701919482C74B5ABUL,
    0x38B55259C2E078EDUL,
    0x15803FEC3B9A872BUL,
    0x81DF9ABA6C83DFF9UL,
    0x0C5A80A9E096D529UL,
    0xDAF87174BE7454FFUL,
    0x6EF54AB721DC6242UL,
    0xE18B138FABC53103UL,
    0x7792424AA0EAC32EUL,
    0x5354C5BA2EA868A4UL,
    0x1EAE6DD17B7A5EFAUL,
    0x551DF99658DB6EE8UL,
    0x2708FC083123F9FFUL,
    0x1121BFA1A1A522A8UL,
    0x3F0CF9CB7E589B88UL,
    0x82CEDC33687E1F50UL,
    0x211C4EF450086857UL,
    0xBF4F34A85CA2970CUL,
    0xEF01D36B9C9D0C7BUL,
    0x10706DC6AD2D49C0UL,
    0x2309595AD6145265UL,
    0xDF47FC56C71569CFUL,
    0x6D3465A73092F0E6UL,
    0xBA751764F0821256UL,
    0xCC3FDDED67BCFC63UL,
    0x745711A75AB09277UL,
    0xB0034A223497FFCBUL,
    0x2F057596F2BD0061UL,
    0x272ACD84970869C5UL,
    0x5BFF36D6ED83E0AEUL,
    0x1C491717107431C7UL,
    0x2162C446DFDF38FDUL,
    0x77F16B447824DA6CUL,
    0xCDCA26E80FAECB8FUL,
    0x2DE6C5E2E996F178UL,
    0xDD564BDD0472C936UL,
    0x444D8CF241EC25C5UL,
    0x84698AB38D0C6636UL,
    0x2A25ADC48F87841FUL,
    0xDE03620F8703A9DFUL,
    0x359AF31A4B52F5EDUL,
    0x13C4B962653A5280UL,
    0xC8E1071177A23BE5UL,
    0x4895BDEA16E7C080UL,
    0xC78E239AC5B2DDB9UL,
    0xF06EBB91A81E09E3UL,
    0x3BAB9A4E4F2FF5C7UL,
    0xEC9264727EEC0F28UL,
    0x14621BB1DF14E2B2UL,
    0x66E7CB63C97B7D20UL,
    0x593FEAE1F73392D4UL,
    0x4E3CD0EF8A489541UL,
    0xF284AC67940C6812UL,
    0x2E22FEFA0100275EUL,
    0x0CF54F20DE43879CUL,
    0x36C1451A88A09630UL,
    0x7E17BE53E1AAABAFUL,
    0xA238192F33110615UL,
    0xEF4CED81CEBEDC6DUL,
    0xCA6B2F7CE32AB653UL,
    0x90A6526CF0381030UL,
    0x24A49BEAF468DC90UL,
    0x5FBD7095FE7AE57FUL,
    0x8F08017F9D7C47BDUL,
    0x052991E59076E4E4UL,
    0x5E62BE5DC58E9E06UL,
    0xAC0BFBDC3BE00E14UL,
    0x3CA6050692BC61B0UL,
    0xECF128344E9FF9F1UL,
    0x805D7CBB36FD6C4CUL,
    0xF13FE2A80C05C561UL,
    0x6F72CD94F7B5B68CUL,
    0x75D3691713C3B05AUL,
    0xD2B32BE3FC1626C6UL,
    0x9E778248D6685FE0UL,
    0xC406BE343FC4B9AFUL,
    0x1185A8087587322CUL,
    0x8817605C2BA76200UL,
    0x577599CCED639CA2UL,
    0x6A1738B4323FE2D9UL,
    0xB118AF58B5F332A1UL,
    0x1AC8F4AD40E22127UL,
    0x7C226D5346D4D10AUL,
    0xF47E567B3630DD12UL,
    0x1DB21A44B09E8BA3UL,
    0xCEF214315D276FD1UL,
    0xD30C50DF888D58B5UL,
    0xB13DCB4C6FAAD238UL,
    0x15B8ECF844EE67EDUL,
    0xE52B8E7F85D39A08UL,
    0x3EED80DFF7325CAAUL,
    0x0C4BBF625CA98C4EUL,
    0x97C65887D4B37FA9UL,
    0xFCFACD0DB9D7A57DUL,
    0x7CD934010E115C2CUL,
    0x56176892826A4FE8UL,
    0xA277800A9EAE340EUL,
    0x2632482FD6B9AB87UL,
    0x808519373FD336A3UL,
    0x04655F9D075D0AE5UL,
    0x243296A510B562B6UL,
    0xF49B58631D9E22D9UL,
    0x252BDC06B73FA6EAUL,
    0xE4A84ABF135EF91AUL,
    0x9E3B3E6D66F6E22FUL,
    0xBC72B5D7A1CBD54DUL,
    0x26B0E73D7EAAF4D3UL,
    0xB365FC0C4E27FFA7UL,
    0x52923C4710DD9907UL,
    0x47C2A06D4F5F424BUL,
    0x399685DB942336BCUL,
    0x2107BA504071A6BBUL,
    0x82EBB79E258FA2B7UL,
    0x85D5422B2039A70DUL,
    0x38C1CB1CB119A016UL,
    0x920D853F3E17F1DAUL,
    0xAF348AFCB575A441UL,
    0x405DC2AEF6AF95B9UL,
    0xA6575914D2A0B450UL,
    0x23B59D8912F94246UL,
    0xE7D267EC6CA966C3UL,
    0xB0F7F8663821D9C3UL,
    0x3F6167F351168730UL,
    0x2CA429C029CCF247UL,
    0x261CCE7EED010641UL,
    0x6726BDCCC1932F0EUL,
    0x4C2330E61D3DEB56UL,
    0x05B7A89BD78797FCUL,
    0xF0F77ADB9F67E79DUL,
    0x483ACA1176CA93F1UL,
    0xEEA5AC2EDA7C33E8UL,
    0xEC4CF9FCB29A4424UL,
    0x7ECDF98587E92DECUL,
    0x55E86AF2712B36A1UL,
    0x420BD37289EEE162UL,
    0x35F7DD45E8C0A16DUL,
    0xC1F1920BAF281317UL,
    0x41F37C3427C75AE0UL,
    0xA97F257D0151A6ABUL,
    0x50C375537449F369UL,
    0x6170941419D7D8ECUL,
    0xBC5115A5A939DD15UL,
    0xD9175F941610DB54UL,
    0x92BAC8ACF88CEC26UL,
    0x9E6542F0CE8E70A3UL,
    0x7241CCB7D020DB69UL,
    0x35AD299F50D91B24UL,
    0xDE18220B1C183EDAUL,
    0xB1B1EA596344DFABUL,
    0xE3945201F14637DDUL,
    0x25E68244B0177686UL,
    0xD9127E83ABF7C631UL,
    0x7A197E2521EE2BABUL,
    0x2D0FC594D1E9C107UL,
    0x41BC0D722FC04221UL,
    0xF2CA003F167E21D2UL,
    0xEF7D17BC6C85264CUL,
    0xB0C56BD3D808D863UL,
    0x8AA464D4E0F6ACCDUL,
    0xFC309E94546FCDB5UL,
    0xC6DC823253FBB366UL,
    0xC7E7181C09F33B69UL,
    0xFA1E0E893D915215UL,
    0x497420E022796B3FUL,
    0x2BDD44CC428A7EAEUL,
    0xA8AE43AEC1A61314UL,
    0x8B3CA62B1EF19B62UL,
    0xFEAD16FC8F9DFC0FUL,
    0x444D98F98C11F3ECUL,
    0x1D408577D440E81EUL,
    0xC4301E5121A0ED73UL,
    0xA33CDCCDA663159EUL,
    0x971927086CFD2158UL,
    0xD2D57F1D764117B1UL,
    0x24DA7D7667FD7B09UL,
    0x4DCDF92BF64236CDUL,
    0x31125FD509D9043FUL,
    0xEBD3205A207939EDUL,
    0x97E7E2C04245115BUL,
    0x916CA67D26FD1E37UL,
    0xEB078CA2B5E82ADDUL,
    0x703CC7F60CBB2B57UL,
    0x8951EB9C6906D3C8UL,
    0xBA4B8D83BDC75551UL,
    0xE8B9C0EC9E183F35UL,
    0x65D2EBB47E1CEC21UL,
    0x6F2135B6129620C1UL,
    0x8D74E26F54B4E5C3UL,
    0xB335F761606DB47CUL,
    0x564B884A05EC45A3UL,
    0x711327CD09C8F162UL,
    0x44F28F86433B10A9UL,
    0x2FAA3A30BEC0F25DUL,
    0x704983DF373B198FUL,
    0xED712CA327900C8AUL,
    0x29B487C359E19889UL,
    0xFB5045B7C42B75BFUL,
    0x8B05F884CF7E8020UL,
    0xCCC39339BEF76CF5UL,
    0x0CF97F497FE7D048UL,
    0xF3BBE884A14BB413UL,
    0x578C752848ECFA0CUL,
    0xA43D5C6FE51ADBEFUL,
    0x1178E104409FE58CUL,
    0x338D2E3477711050UL,
    0xB8F87EAD7533B176UL,
    0xC3EAD29AB273ECE8UL,
    0xA7A1127490312C36UL,
    0x31727907B2C43C55UL,
    0x405591EC8FD9096DUL,
    0xF751B16FB32ABC1DUL,
    0xB3E6360DDE733E82UL,
    0x7C9C0B1EEB1F9072UL,
    0x6216B116083A7CB4UL,
    0x9F5E6BB6B34540DAUL,
    0xB9854DFDE0D833D6UL,
    0xC54A08C85AE4D410UL,
    0xA8434F1DFF41D6E7UL,
    0xC3C221ADDDE31A11UL,
    0xAC3A74E8384A9919UL,
    0xEE09ECEDBABE47FCUL,
    0xA8CF1CC0AFCD3F12UL,
    0xEB0F4468467B4528UL,
    0x1F400FEF721170DAUL,
    0x643E26EA6E024D92UL,
    0x96695E368AD855F3UL,
    0x7F06937B0CDCBC1AUL,
    0xC5868A966E5BE3AEUL,
    0xF6062E089251C898UL,
    0x02DEAAC8F8EA7FE7UL,
    0x11B56FBBF7224868UL,
    0xFC4842A34657BFCBUL,
    0xA74802FB8D0B7814UL,
    0x957E790EA1727B64UL,
    0xF36199225D6D8C86UL,
    0x20AC25E781AE4A84UL,
    0x9CD27B0045628463UL,
    0x15C40837039FFAF7UL,
    0xE599A503B3837E1BUL,
    0xFC8202EFC642E6F2UL,
    0x313CE5879CEB6FCDUL,
    0xD53343AA4FB7DD28UL,
    0xF2D49816A804D134UL,
    0xC906A7DAB05C8D2BUL,
    0x8BDC7BFC57A81E76UL,
    0x9E82F0F362881B29UL,
    0xC843060B5765DCE7UL,
    0x1D08B970013C34B6UL,
    0x632106CC96E82E91UL,
    0xA9D1795CD5043663UL,
    0x8927CBF9D22261A4UL,
    0xF1B760881820C952UL,
    0x186FC4BE848E1C92UL,
    0x2FFB6B224F4B2926UL,
    0x7F8F6405F4777AF6UL,
    0x21C235BC64831E5AUL,
    0xF56DFB7B61BE7276UL,
    0xA0AD167E4B39D9A2UL,
    0x933D6A9EEC1BACD0UL,
    0xE80492A9AC099A93UL,
    0xD24D37CC275948CCUL,
    0xF2F6A2FA49278625UL,
    0xA61B4DF533DCB56EUL,
    0x39455BF4F4F55186UL,
    0xADCDE75E1C60F32DUL,
    0xE54E209C35FFA18DUL,
    0xA56F01F3765B93A0UL,
    0x957838AAF91BD12DUL,
    0x01C7B9B38428AEB6UL,
    0x11DB3500F042A8AAUL,
    0xDD9B9B385AAC7F5BUL,
    0xBE31FD6CE464AC59UL,
    0x04F8FC8FCF58F88DUL,
    0x0A1CB9094635D1A6UL,
    0x7EC6F9A478A6A512UL,
    0xC9BF75D28165FF77UL,
    0x397BAA01068BAA96UL,
    0xB938B7E6D3C0620CUL,
    0xB51B9AB9EF81868CUL,
    0x075F1D57402C93BAUL,
    0x9DC711BC69C548DFUL,
    0x9243BAC96D64C050UL,
    0x1F464EF988465A81UL,
    0xC8535819C450EBA8UL,
    0x452736765B31FC4BUL,
    0x23285DED6EBD7EA3UL,
    0x706B5EDCAA7FA663UL,
    0xA2716D40842EAF79UL,
    0x2C2B3493FBF51C71UL,
    0x21FFB63D8C615361UL,
    0x4A18E01DF2C87B86UL,
    0x1E0B4DC0D990A4E7UL,
    0xDA66D2796BA33F12UL,
    0xF3D78F59DFE18D79UL,
    0xC0714D0A7EEECA54UL,
    0x4F548CABEAE553BCUL,
    0x1162EA8AE9D24EEAUL,
    0xA4A0065E39C9F25CUL,
    0x50EEAAD86232EE55UL,
    0x6E04F06094C87047UL,
    0x69240733738C19A0UL,
    0x2107A3773771186DUL,
    0x06462A961E94B67CUL,
    0xE0E500246FF73D66UL,
    0x69FE6DC87BD2A5E9UL,
    0xA23E821FBDF8A5F2UL,
    0xD642319C54AADEB6UL,
    0x5B1F2E327B6B6FE1UL,
    0x2B626A0150E4D449UL,
    0xDC9274A7EF6B2867UL,
    0x8098C8D6597AAE18UL,
    0x1B1AB132A16FDA55UL,
    0x72DE52178C291CB5UL,
    0x44A0BDC559B35F6EUL,
    0xEB2104E905C6F2E9UL,
    0x2B5E102E4A42F2BFUL,
    0x8A75CE2956274ADDUL,
    0x867654CBC7606F2CUL,
    0xE3A7742E0B7A2F8BUL,
    0xBFE5756E7407064AUL,
    0x03E8D3D5F549087AUL,
    0x1454F2448DE30163UL,
    0x4C9296CBCD1B971EUL,
    0xF14878FC50BEC6EEUL,
    0xDEA36202FC3382DFUL,
    0x19E00D7322C6F85BUL,
    0x2B4A15E44DE0F478UL,
    0x7B30F65D7B710098UL,
    0x61A23B7EDA9BDA24UL,
    0xD3D15555431AB793UL,
    0xC488FF2356EA7791UL,
    0x0C515FAB3FF9EA92UL,
    0x1E34710ECD4AB0EBUL,
    0xF0D31AD191A74F87UL,
    0x73D57CFFDD12C355UL,
    0xFEFCF11B01287125UL,
    0x5270A8FBC098C3F8UL,
    0x2E0DC353342C4A6DUL,
    0xF0BC12401061DEA0UL,
    0x34318593248C8FB2UL,
    0x8D7A43EC6A5FEA45UL,
    0xDFB4138EEFED7B81UL,
    0x82FDE6A57EE4EE44UL,
    0x1A8B5F3C01E2B477UL,
    0x3F2023999AD51C1FUL,
    0xDE0F6D7450D37351UL,
    0x9870ACFB89A90995UL,
    0xDC8C5D7CFEAB8394UL,
    0xA72BC0B675B1519EUL,
    0x4D982ADB1978442DUL,
    0xF6201B4DAF662A9DUL,
    0xCCA1072C29D096C2UL,
    0x48AF36444B965238UL,
    0x0A27B2B6282F7169UL,
    0x9F1935CA1F724008UL,
    0xB8C0BB75D8A77DB3UL,
    0x138679CA01E21F53UL,
    0xC545AB1CF97ABB34UL,
    0xF911E695C1EB8518UL,
    0x807ABE1AB65C24D2UL,
    0xF22B6C47C6EAB066UL,
    0xCA042B6957743895UL,
    0x5A5F40FE637EB584UL,
    0x8EF07E15701D61EDUL,
    0x53158863FCC0893AUL,
    0x1A992DA297A4630CUL,
    0xBBE5D803A5360CBFUL,
    0xFB80AB299D2EE1BDUL,
    0xDC518000E39DAE1FUL,
    0xE369A5783B866016UL,
    0xA5272EBEDD4747F6UL,
    0xD79185689F8FD5DFUL,
    0x7A3F19700A4D0525UL,
    0x2272B0A1343129F4UL,
    0x996DD1E1E02F1008UL,
    0x6856EC3D35C81EA4UL,
    0xE6B7B0ACD4E4B75EUL,
    0x577D1284D6873711UL,
    0xAA391C728106F7AFUL,
    0xB98236CAAECEF897UL,
    0x071E2A839DE82D90UL,
    0x557E43C447E700A8UL,
    0xFA3FFB0EEBC288A3UL,
    0x9BAE5AD2508DF078UL,
    0xC5F0A8EBD3F361CEUL,
    0x7EA2B6AF97ECA6EDUL,
    0x7472BB270D7B4F3EUL,
    0xCBAD6729F7B1F4FCUL,
    0x740E14FAD5842351UL,
    0xA9575F812C6A7997UL,
    0x74E20C9145FB66FDUL,
    0xA09F896CE912481FUL,
    0x34C9EE5986258415UL,
    0xA735353C77334EA0UL,
    0x10C2FA78D0E128A1UL,
    0x7CAEC29ECB5DFEBBUL,
    0xC8F4131414C835A1UL,
    0xEDB1232C5BEAE62FUL,
    0x6F7794F28C6B2535UL,
    0x48F069265A0E4BECUL,
    0x8269816F6CFD40F8UL,
    0xFAA457EF263E8763UL,
    0xBF737600CDDBEADDUL,
    0xEB1774DF12BB9F12UL,
    0x60FE567DF1B1AF9DUL,
    0x04456F95153C6BE4UL,
    0x213AEB2B90CBA7ACUL,
    0xDC0F817884CDD856UL,
    0x9B2BD3773123EA2FUL,
    0xEB4A0C2D56441717UL,
    0x3F892CAF67444AE7UL,
    0x05983472F0494E60UL,
    0x556C1AA270D5A207UL,
    0xC8BC6461E629BEAAUL,
    0xB08B85D860E7BA3CUL,
    0xD261BA3E7E998072UL,
    0x6874E2190B0C1972UL,
    0x67F6413D3220E18DUL,
    0x1327E2FE9746BAEEUL,
    0xB129E447A2EDA4BFUL,
    0x1312F4B242609CE3UL,
    0x32C7A7E8C43A1F80UL,
    0x171BAFB3C60389F4UL,
    0xE6869BECDD8F2403UL,
    0x28A04B411933F8A6UL,
    0x5D5479D115290C3FUL,
    0xE266ED23311F24D4UL,
    0x17DF68D720AA77F8UL,
    0x19BFED045C647C49UL,
    0xE95B0C7D5BA3B96BUL,
    0x8FA9C42FC5D7C64BUL,
    0x54F157E0336A3822UL,
    0x5896F2BD5683A4E1UL,
    0xD10F442036302D50UL,
    0x77A84429DD9F0A15UL,
    0x6FE601A64180D423UL,
    0xEB2DB0CAD13154B3UL,
    0x44F7CBC1BEB3327DUL,
    0x48838ED9937A15D1UL,
    0x918C7B2D2FF3928BUL,
    0x2D4259F1FEB81DA9UL,
    0x264AC28B01B353A5UL,
    0xAC7BFD5C1D83EA75UL,
    0xD9F692D349249528UL,
    0xE532EC1A63231B4FUL,
    0xB8721407EE9C3FF6UL,
    0xB3CD58CCA6CDA852UL,
    0x2587A48BC88DFADFUL,
    0xCA78CFA0366592FEUL,
    0x00DC833F2568DBF6UL,
    0x0CF2B696BBF945AEUL,
    0x8362B09B91893647UL,
    0x58A39BE597CE99CDUL,
    0x3ED1438C1F5C6612UL,
    0xA6A12939F16D85BEUL,
    0x3F60413F5DF65748UL,
    0x1EAE0A6E978894A2UL,
    0xA66C71C98D5F2CFBUL,
    0x11879CDD803D30F4UL,
    0xFF1BED81BFDC0FE0UL,
    0x57FFF03E423A4C0BUL,
    0x438822C279B73B93UL,
    0xA1183BCFEE0F93D1UL,
    0x6FDDF453C0C756ECUL,
    0xFB00CA71DA386228UL,
    0x5AA3BEFA29F03AD4UL,
    0xE3D969D2785FFB5EUL,
    0xC0AA53F866B3134DUL,
    0x0A60017F841A54F2UL,
    0x1FF6BF9A63E5757FUL,
    0x1BB299305C3E8C13UL,
    0x8EF5573A1F801A5CUL,
    0x92790862E36C2ADAUL,
    0xC7DB36C24634F52BUL,
    0x437138B6A830166AUL,
    0x37DEB0AA183FB6D8UL,
    0xEA2F2061875EED90UL,
    0x3BBBD13E5041A79EUL,
    0xA049A5BE0F04F2F8UL,
    0x4750FC27570311ECUL,
    0x1B2366C3F2A5C8DFUL,
    0xE574A662ACAEFBB1UL,
    0xEB6891F03362FB12UL,
    0x14832BF2ABA53FC5UL,
    0xC79AE21974B01FB2UL,
    0x684A41975F077262UL,
    0xABB2FA71C83A1B72UL,
    0x4EBB7E87AA0DBED4UL,
    0x9689123E3F213AA5UL,
    0x9D8D44ADBBA61EF2UL,
    0x23227DF0B2115469UL,
    0xD10282B6E3751BA0UL,
    0x693478ACBD7F18E7UL,
    0x4B82FA6F2D624634UL,
    0xECF041186C5A94DCUL,
    0xA4E8E696C532FBC7UL,
    0x3BC861DF703E5097UL,
    0xCBDD322A73D6D932UL,
    0xBB779C0CA917E865UL,
    0x1CEFB61F193070AEUL,
    0x693A5C6D6734085BUL,
    0x584FDFDA48805B86UL,
    0xF511F759238A5122UL,
    0xC4E2813898C97A4BUL,
    0x375A706A5C2FD084UL,
    0x95C9E72F3D7DEC9BUL,
    0x44E44169EF70138EUL,
    0xFDE8F069C542D126UL,
    0x015C49A93E3E086EUL,
    0xA2CCBE62CD4C91A4UL,
    0x1B0B4AEED5B9B41CUL,
    0x53F4892D18EC90A4UL,
    0x3117D84EFA60F77BUL,
    0x15E69E2802C24B8DUL,
    0xAC2890471901861CUL,
    0xD6ADE981781FCA09UL,
    0xF1E22DC13F5EEBADUL,
    0x466DA42C89865553UL,
    0x439E9BC95B7E7FBEUL,
    0xB4A53E05F68B6FA1UL,
    0x3DA5ECD1A56CBA6DUL,
    0x05A50AF38947EB8DUL,
    0x821418C727FCACD7UL,
    0xFB2456B2040A6A67UL,
    0xA921DED15FDF28F5UL,
    0xFB18DF9CB95E0105UL,
    0x56A3B51944C50598UL,
    0x1C2473301B1C66BAUL,
    0xF9C812CD7C46E817UL,
    0x18B7AE224B087E26UL,
    0x81404F3DC124FE5BUL,
    0x3A54E33660DED67FUL,
    0x158C16F5E4CF41F8UL,
    0x394DCDB9E836B7A9UL,
    0xF62F6D9528358FE4UL,
    0x8968D4D8C6C40C11UL,
    0x3BD101471C7F9EECUL,
    0xED44897CB336F480UL,
    0xCD0F5B5D932AE473UL,
    0x9777734DAD16992FUL,
    0xED1517D3AF17C698UL,
    0xA03D4ACE0A3284CEUL,
    0xFA700D8A9905F78AUL,
    0xF514621E8EA463D0UL,
    0xB1CC1B9EC3007A2AUL,
    0x827A5BA1A44ACA6DUL,
    0xB2CC4836834E8A98UL,
    0xDEBBF584665411D0UL,
    0xC8407624CEF2354BUL,
    0x61326EE6DF15B0CAUL,
    0x2B171E6B2F64D8DFUL,
    0x131BB5DA15453ACFUL,
    0xF92A014A634442D6UL,
    0x45B8154E077D9E4DUL,
    0x849648349D77F5C5UL,
    0x515B4A22E4D3C6D7UL,
    0x4337511FA8221D36UL,
    0x02CE1D6AC0FC73EAUL,
    0xB539BD8A4C1EECF8UL,
    0x3F4D00167E41E0ADUL,
    0x6EA318C91C1A8786UL,
    0xFB6DB092FBAE29E6UL,
    0x6816FB4416760775UL,
    0x9D4FDBB035229669UL,
    0x11B0A20C493F7E36UL,
    0xCDA1C62BE2777802UL,
    0x08B0CA7A6AB3AC32UL,
    0x0CB1BE0633C024A8UL,
    0x3E4ADAFF1830F146UL,
    0xECA658CE2A4E5A72UL,
    0x84C0116D012E8FC2UL,
    0x6B7E4FB50D5F3D65UL,
    0x31BA138F6304FB9FUL,
    0x55A1E095DB052FA5UL,
    0x8586789730B10CAFUL,
    0xEDEAD9A91EC768B3UL,
    0xDEE612F2D71B0308UL,
    0xF6B170F9A02E9E87UL,
    0x42FCE14F50F27291UL,
    0xA75EAC69F59E96E7UL,
    0xC5156361F26E2212UL,
    0x0B39CF0D53F1C883UL,
    0x1FDA0AA679C9919BUL,
    0xFFFBA1B1F7C0B6F4UL,
    0xAB3CAA6B422164DAUL,
    0x7303E27CC6532080UL,
    0xF0077C797F66A355UL,
    0x17C3A7D31EAE39F9UL,
    0x5FD5ED82CBBE9989UL,
    0x9346E14F2AF74D46UL,
    0x1C436FD11FFA692FUL,
    0xD99DB210089617FEUL,
    0xEE99784E4467689CUL,
    0xD9B067E55253E3DDUL,
    0x763B4BD305338F19UL,
    0xA3EDDAA42411D3B9UL,
    0x81AA4610E3FD3A69UL,
    0xB162DC95C0A3317BUL,
    0x7B718E197453F2D9UL,
    0x650A08A280870AF6UL,
    0x75AF80E61248EEBDUL,
    0x7BF1D73DB2ECA492UL,
    0x524EE43A37232C00UL,
    0xA6DD8458CE24012CUL,
    0x289016EC778D60E0UL,
    0xE404BFB981665BF0UL,
    0x995A65F15F581359UL,
    0xE7B80E2BF9D80BD6UL,
    0xE1B13771A843C4F6UL,
    0xA628A745E2275C5DUL,
    0x6E176F1B18BC0637UL,
    0xEC03C719DB2F4306UL,
    0x6B38ECB05A63A685UL,
    0x7FE61782AD94CC09UL,
    0xD9B86B9872039763UL,
    0x6D3A430D1A809179UL,
    0xCA230C9682556CF1UL,
    0xB21B89501CFAC79EUL,
    0x812F5488B1B2A299UL,
    0x9FF28D88C766E3E8UL,
    0xACDE7185B374177CUL,
    0x29B260B84947DFCCUL,
    0x6A445B64ED7ABEB5UL,
    0x9B5016A6433A68C5UL,
    0x20194D48EAEC9A41UL,
    0x7C99101F7FCE2EE5UL,
    0xD5BB406F4E04019FUL,
    0x948705F6F9C50824UL,
    0x8204DA7934DF3155UL,
    0x9D26502BB97BFE62UL,
    0x8A7B3952DD64D2B5UL,
    0x7C4FCCD2E4DEB394UL,
    0x28F174A67B8D0C2FUL,
    0xFFBE02CD385356BDUL,
    0x08A1B82B91900682UL,
    0xDBC966A01C02BCA7UL,
    0xE7DF4E0545DFB56EUL,
    0xFC4EE00A7B3BFB76UL,
    0x30FD873ECE50E9F6UL,
    0x112209CE0290C03AUL,
    0xED5FD7AF10F5E262UL,
    0x0D30EB83668E63C5UL,
    0xB49ECA122467D05FUL,
    0xE23ADC6FCB1F29AEUL,
    0x0FE8E1FCD2B86B33UL,
    0x69EF772B192614C1UL,
    0x8E243837643D9583UL,
    0xBD0EFB25CCA8F97AUL,
    0xA95F667A755725DAUL,
    0x33981D6804E62F49UL,
    0x4128464231E3CA0BUL,
    0x2FAB6614CE22E196UL,
    0x05F04155A226FBBFUL,
    0xE8B0B270B6E7C76EUL,
    0x5BCDE0F640C773D2UL,
    0x998E18CEB44487FCUL,
    0xFA07759E6FDDD7CFUL,
    0x6FD97159FE3C971AUL,
    0x675D19C6067CAE08UL,
    0xA51B086B0B2C0F7AUL,
    0xD7CCCBA28C4ECAF0UL,
    0x0035BB914316F1E3UL,
    0x5F456788B05FAEACUL,
    0xA75CCF58A60A5FD1UL,
    0xB4C2EC463672474EUL,
    0x2AFC2D19B50797F2UL,
    0xC1952F3773BA18FEUL,
    0xCCB339CC970452DAUL,
    0x615EB504B0788DAFUL,
    0xB18AC2ECBB15CB6AUL,
    0xB1F1346FD57685D7UL,
    0xAC272C0AE01B4BD8UL,
    0x365E877C61D6988BUL,
    0x12D148D26538D0F9UL,
    0x0C82D21A77C22D49UL,
    0x9251B6ABF2D0A5B4UL,
    0x5D97630A8A0EF123UL,
    0x7A5349B773584675UL,
    0x35F8DA0E8A31EF1BUL,
    0x005ACA7100BD101DUL,
    0x4EA3F425C7744D21UL,
    0x3DD3F33A5D55EA6FUL,
    0x0CCE73BC7A11E885UL,
    0x165E135D6DFA2907UL,
    0x5BBBD92186E1F1C5UL,
    0x771ADB0E7635B7BFUL,
    0xDA947AE8880D5C18UL,
    0x487009DD91D93429UL,
    0x0E1E2FF3F4EC11AAUL,
    0x5B669CF2299A271FUL,
    0x2DCB19ABAB0380A8UL,
    0x15BB2A5C757EB91FUL,
    0xCAC672087B4A24ABUL,
    0x128A747F4A230952UL,
    0xA9A31475F530DFDAUL,
    0x2597A0D4A4FC2C77UL,
    0x1B882107C23A9022UL,
    0xA19EC0786E326E06UL,
    0x5ECE6FD7B4EC8D6AUL,
    0xED26584F6BDCBBFDUL,
    0xA9160796D47A2CF8UL,
    0x1C121FC9545E0D52UL,
    0x2A7CEC72C3443BCCUL,
    0xE0F82D68C7039158UL,
    0xB4DEAE67F35E2ACDUL,
    0xFDD8D2440DAF1590UL,
    0x2A93C46AAB1EACC9UL,
    0x226C284C830D0CA8UL,
    0xE8815FE993896AD3UL,
    0xED76D195E6E3BF7FUL,
    0x1DC9B749E7AE282BUL,
    0xC6E74CF8C884C880UL,
    0x65482BFD0923C8A1UL,
    0xE284D46FFDB82E36UL,
    0x876056684281655DUL,
    0xDD21B016E4289465UL,
    0x1BEA0CD93470BB1FUL,
    0xF6C8A544E4CF14FCUL,
    0x14EAEA58F93B55AFUL,
    0xE08256F972C7BB2CUL,
    0x0F99F70C61F14619UL,
    0xE5F5A060439C2F5DUL,
    0x40D5DA9550B7CB46UL,
    0x037ABB06825D7AB1UL,
    0x7049BF858601DC0FUL,
    0x9A5BD1D0000B339CUL,
    0x676C48776CACBB5AUL,
    0x619496D837EFD920UL,
    0x631F1CB8FB4130AAUL,
    0x5E7AE8AABE8B7C0DUL,
    0xA82959062361B259UL,
    0xDFF49EE984E7AAE8UL,
    0x5128DF14A5BB86FCUL,
    0xFBBE0570EDF39D46UL,
    0x34A6FC4D06C4DA0FUL,
    0x4740D62BC1B4EBEAUL,
    0x88BF9B612B84D3C3UL,
    0x0819DB99FD2FBBD8UL,
    0x5517F90043466049UL,
    0x83AD64F53F4E9483UL,
    0x8BCB27A057DF7B7FUL,
    0x566FD402B25787DEUL,
    0xAC95ED552157E092UL,
    0x09E8F18641BE2575UL,
    0x973A9781A34F8DEBUL,
    0x870289A558348378UL,
    0x5574637681911FDAUL,
    0xD30E8392F407C328UL,
    0xB5B58E24868CB09EUL,
    0xEAD3D81F2C3A1458UL,
    0x43AA7FAC4E6D6687UL,
    0x72E7C7B9615FA3C3UL,
    0x4C3B75694F7E0D9CUL,
    0xD29334ED1A256DBFUL,
    0xA95CFB4E02390842UL,
    0x0DD362F14F18942AUL,
    0x3EC7471E6909798AUL,
    0x84FF63BD4966F33DUL,
    0x5C9B198AF5A54FA6UL,
    0xDE68E30D89F97132UL,
    0xE2E244AB823B4483UL,
    0x54ABA22FA6371249UL,
    0x6C8BC1488527AAABUL,
    0xC991C255AA6D90B2UL,
    0x90CD7C6871FBF1B4UL,
    0x89049A84065CE68EUL,
    0xE86689E5F82DE429UL,
    0xD21D111C46BA9F15UL,
    0xA51338E0DCCD4065UL,
    0xE2BB399D90942091UL,
    0x1464E17207CD36E2UL,
    0x925227803A0EAA1BUL,
    0x9BEA350D7C48061BUL,
    0xD1E46824E6FB92B5UL,
    0xEEB7E5D1FEB20869UL,
    0xDD829AA198FDC46CUL,
    0x36A7FD5A7194B03EUL,
    0xC66D1CF99ED7FE25UL,
    0xBC6227792A188E2EUL,
    0x533073E8A596008CUL,
    0xFE65AFE7308E32B2UL,
    0xB846F547D3792DF6UL,
    0xBCB266247193AC61UL,
    0xC10322A8D3E061EEUL,
    0x93AA4165CB67E925UL,
    0xB9F7A469460E7A4AUL,
    0x7E2F4E8F44CAF4E0UL,
    0xEA8CD3C9B3C35884UL,
    0x6CCA64840589A3B6UL,
    0x1B2120405080125CUL,
    0xBF8793B91EA094A7UL,
    0xD9DF467CBE4398C8UL,
    0xD86581F9E7CDA383UL,
    0x61A2DF64ED2D396EUL,
    0xEBD482B82ACB8BADUL,
    0x923AEA8E78F8DF0BUL,
    0x02D24A35A9CC3503UL,
    0x2CEB0E0BC2A77C05UL,
    0x663B4B9D11742A12UL,
    0x146D4EB6D22A403FUL,
    0x38482AD49CB905C7UL,
    0x7397A115030F1BE3UL,
    0xE29F3D5FA63B1B82UL,
    0x88D6C327D6C57C45UL,
    0x6283E5DE4C4460C6UL,
    0xBA154373C5FE51E8UL,
    0xF4A8E57460BF2037UL,
    0x5B4DBDED84D6A420UL,
    0x235D41210B3A1A5EUL,
    0xD07C7C3F1995108CUL,
    0x1254B5B3925EFD3DUL,
    0x92D1CFDA1227FF1CUL,
    0x45087AE480B233ACUL,
    0x2C5809EB9DF57257UL,
    0x71BEC32FA466E105UL,
    0x59498BC8B1C8B15CUL,
    0x76EF28DA05EA395AUL,
    0xA40F9C2623F6A8B5UL,
    0x5CBAD97E059E1B94UL,
    0x5D1E75F91C07DEE5UL,
    0x4F54F3B6C202FB4EUL,
    0xF9B10B529DCFB33BUL,
    0xA6FA3979BED01B81UL,
    0x700AF71AE615E6DDUL,
    0xED5AB8860415BABAUL,
    0xA31FD6A0865B6D14UL,
    0xDC18531D7019A535UL,
    0x13A8DE2FD77D04F3UL,
    0x08E8EEADFD0DC4A0UL,
    0x5D17BE59D2123284UL,
    0xEA560AC9EEB1E19BUL,
    0xF70EFA14FE091429UL,
    0xE260E0BB9CD995ACUL,
    0xE154B48B68EF72BCUL,
    0x6FCF8DDEA146C45BUL,
    0x7D2708796355B20BUL,
    0xBD4D7EAF8A30F637UL,
    0x247F0F73A182EA0BUL,
    0xC27009422FCCA88DUL,
    0x3C4487461E9B0DCBUL,
    0x2B949A1E6AEC8F6AUL,
    0x85F6C9ABA1DE2BCFUL,
    0x357B152EF96C30B6UL,
    0xCF38DAFBB49EDE5EUL,
    0xE3E5A7C64CA2C6EDUL,
    0x0395CB47B022E62CUL,
    0xA135AC892A58FC07UL,
    0x72EB7BA9B69BF6ABUL,
    0x170910093218C8B9UL,
    0xC13C38E47EA5DF31UL,
    0xB24F0944DA203D9EUL,
    0x74A0FD0688F1EE45UL,
    0x2F41D51BA3BCD1F1UL,
    0x810E8431C0614BF9UL,
    0x35A1B3E1D1315CFAUL,
    0x613F125BA3BD2EB9UL,
    0x897433D292B44130UL,
    0x279F08B1A4B29B7EUL,
    0xFA336E7F40C0A0D0UL,
    0xA65568121DF2EA26UL,
    0xF30980718C8ED876UL,
    0x27F76CC6C55AD30EUL,
    0xE1A0450ED46A7812UL,
    0x39BE7CEA8D9CC8E6UL,
    0x3C5FD37B5499582EUL,
    0xE2A99A9B524BEFFFUL,
    0x51F1A8E48C3D2F6DUL,
    0x0A6D923DFFC9BD89UL,
    0x112CEF1615A1139FUL,
    0xD47A2C1BA117471DUL,
    0xC2F7FE5309181C7DUL,
    0x23789E777D14CE44UL,
    0x350AA5EBC03D3BD2UL,
    0x498C1E05CE5F7877UL,
    0x9507D4271988E1AEUL,
    0xFCA9373EF340AC0AUL,
    0x054354A99211EB96UL,
    0x1077788E268557C2UL,
    0xBD545D44CCE70597UL,
    0xEBCAB9E5048434F4UL,
    0x74FB3E29E6D10FA9UL,
    0x7808619F31FF22DBUL,
    0xA0FA4EC6A05DA44EUL,
    0x85443FF4C328F53BUL,
    0x8D11E61A4ABF49CCUL,
    0x9A4CF4F48AD77302UL,
    0x67A5589628E0CFF6UL,
    0xBA9775570DB788CFUL,
    0x8DB296B814EDDA07UL,
    0x8251FB94DC4FDFC8UL,
    0x4237E822315D8BA9UL,
    0x25CB5A9F37BFD063UL,
    0x1353F87E89946207UL,
    0x72D918C99BCACC54UL,
    0xAEEF48CDF5B6CE7CUL,
    0x78321BEA235FD8CDUL,
    0x595F028698072DD9UL,
    0x83F28CE49FBBFFBAUL,
    0x07EAB372C8841D99UL,
    0x906CA41A4B74ECA4UL,
    0x023ACAB2DC9DC4A4UL,
    0x76BF03FADBF154F5UL,
    0x9614B71F8ADB982BUL,
    0x0CF6CC51AA18F0F8UL,
    0x64E5C4CC82847B73UL,
    0x1F7BC3539F9E0224UL,
    0xDE9225854F37BF72UL,
    0x5EA784D197556507UL,
    0xA8ACB6459542A8C8UL,
    0x83FE8D7229593017UL,
    0x7788DFE15016A182UL,
    0x53C10C8BD774F2C9UL,
    0x580CE4438479CC61UL,
    0x95914459A87EBA28UL,
    0x283B6062A2C01E9BUL,
    0x8B4FFC790CA131EFUL,
    0xC3BFED92026A2AADUL,
    0x04918A41BC9B8157UL,
    0xAF50DA1A3F8B1BA4UL,
    0x9747292807126EDAUL,
    0x7E782A910C362C25UL,
    0x330ED4D05491934FUL,
    0x2CFC76E0D087C994UL,
    0x94BC51E9449D917FUL,
    0xBE3E347A87ACEB82UL,
    0x6F3D4ED9BEE4E61DUL,
    0xED34C0C02C098BB7UL,
    0xB9CFD27A5D578D83UL,
    0xFBCFA2EA2E206890UL,
    0x74732C6CA90DA2B4UL,
    0xF3929C2379B60CCEUL,
    0xCEF70AA5B3F89BA1UL,
    0xA02E59562D711006UL,
    0xB9351A07A0D458B1UL,
    0xFA8904DC5F304220UL,
    0xD6D09A6F32F49EF1UL,
    0x041C7F2A6C9894E6UL,
    0x59DF79317F85A7E0UL,
    0xFFE1E5B792D92B34UL,
    0x49EC8030F5015F8BUL,
    0x8B6A4DD0AF9CE215UL,
    0x56CE820830EF040BUL,
    0xCAE55F48D3D7875CUL,
    0xF49ABC20D8552257UL,
    0x4811BBAC21C5FCD5UL,
    0x5539C3EBF104A53AUL,
    0x702BC4D605522539UL,
    0x3F52E880AAF6C8CAUL,
    0xF1EEA2DDA9FFA69DUL,
    0x59D421683D31835AUL,
    0x1153FA02A659051CUL,
    0xC19F6C8E7865A6FFUL,
    0x236406F60CF216D6UL,
    0x058F43EC59A8631AUL,
    0x6D03BFBD643B2A02UL,
    0x600F8CB31C7AAB6EUL,
    0xDFFA5BE8381C3314UL,
    0xE532D6811B3A4D2AUL,
    0xF7B2CFDE5C9F700DUL,
    0xDDDF64C91BFCF0AAUL,
    0xF9B83B77929D8863UL,
    0xA1B043EE79A916FBUL,
    0x9DCFF2AFB68B3476UL,
    0x6D14CCEE1B40381AUL,
    0x85A0EF54A500882CUL,
    0x2CC848A861D01493UL,
    0x94A8394D150B013AUL,
    0x5AE17C6B0134B7F1UL,
    0x02A8BEC6FD9AF660UL,
    0x86E0660E4F5C956DUL,
    0xC6F8AB8A4189CF3AUL,
    0x2FBF47B1B36D36F9UL,
    0xA29177F7703B5644UL,
    0xAC8C7B9B88C4A668UL,
    0xC42DD763159F3461UL,
    0x62A0296C1BB1CEB3UL,
    0x23DFB504655D0CE4UL,
    0xE57397B4A3429DD0UL,
    0xD313DE83394AF134UL,
    0xBDB6F89C729CF388UL,
    0xA0682D67EF1FBA3DUL,
    0x34F9E9049454A7A0UL,
    0xCFEB8AF24FC1D0BBUL,
    0x68980414688F7F9DUL,
    0xF814FEC6A19FD6E0UL,
    0x6B07B9CE4D390375UL,
    0x7AC752103856FB20UL,
    0x74698374C45701D2UL,
    0x140E6A44870A11CEUL,
    0xC74C33FCA52856D5UL,
    0x3442775428FD2DAAUL,
    0x10FAB35428CCC9D7UL,
    0xD83C2B94E7508980UL,
    0xCA97246103B63917UL,
    0x9DE624D2FC4B603FUL,
    0xF4435D66A8E2905EUL,
    0x4EEBC3694E49C572UL,
    0x4C9034162368E206UL,
    0x271CC6AB59EBF9A5UL,
    0xBA416D68C631496AUL,
    0xA73667484D7037C3UL,
    0xB4AB419E0D86ACAEUL,
    0x53AFD64C6758F2F9UL,
    0x9C1556705F864230UL,
    0x6793E42BE02B575DUL,
    0xABD5E88B8A2D3DB2UL,
    0x7F8413B7FC2AA6B9UL,
    0x5B8ED3DB018927B1UL,
    0x855BC38818F6F684UL,
    0xB5D3453C98456528UL,
    0xEF0912DDF7C4CB4BUL,
    0x3A214F2EC889B100UL,
    0x75138790B4359A74UL,
    0x12103B9E0C9F92FBUL,
    0x0E4F77F7B9D74D84UL,
    0x9D277B76D1D12222UL,
    0x73E2B500410DA5A2UL,
    0x2763BBAA72A7BCB9UL,
    0xA60BB5CE242BB254UL,
    0x71FB0EBCD4915D56UL,
    0xA091A5E44F0072E5UL,
    0x9C4AB58491FDC98AUL,
    0xA06509A691D12BE4UL,
    0x1888694923EF4591UL,
    0xB13E88E655E5A3BCUL,
    0x6512765E3BE78C50UL,
    0x0DBD5D7E3C5BEC3BUL,
    0x5DC577201723960AUL,
    0x5A6AA44FF8E931E6UL,
    0x617F49C2668E6155UL,
    0x261E97AD7BCF3D40UL,
    0x39917E1B4CB0F911UL,
    0x2CE9D95E4051AECDUL,
    0xEF26739BCD9907D5UL,
    0xFB3272229A82C759UL,
    0x4A595C32F77DFF76UL,
    0xCA2C8073411ECDB6UL,
    0xD23A1A815D21DB19UL,
    0x2DCF46CB1A4F0884UL,
    0xA2E9C1AB8A92E8CDUL,
    0x023782EFC70585EEUL,
    0xEAA572036990CD1BUL,
    0x3E9BB38102A589B0UL,
    0x4665F51EFED00034UL,
    0x3AAD8B2FCA1E289FUL,
    0x9E80A5BA8109F974UL,
    0x9D7696D8F4FA6CB7UL,
    0x73B000F7FBC55829UL,
    0x521638ADA1BA0D18UL,
    0xEBEFC2E77084F599UL,
    0x31D1D2B858D25E6BUL,
    0x5728BB6D63E3FF1DUL,
    0x0B824797C9BF2159UL,
    0x6B5C83BA3EFE6A10UL,
    0x65042B9774C4435EUL,
    0x68049AEFF83D8F0AUL,
    0x53FA83401D9C07FEUL,
    0x520F3282A53D26B7UL,
    0x292564C735375EDFUL,
    0xC571D0E77D8BBC29UL,
    0x1398582B7F72B3EDUL,
    0x1F8E00FB18239600UL,
    0xF6F4383B7C92F11AUL,
    0x2B3A8F7CA3A38FDEUL,
    0x43F4DBA69710E01EUL,
    0x37A4494483B9F5C9UL,
    0x0C978FDA19692C2CUL,
    0xD0A484CB2F829FBEUL,
    0x30DE938B516F0AD2UL,
    0xEEEDA5E6D7080987UL,
    0x973D76AA760A6CB6UL,
    0x9AC9CCBFA8C29795UL,
    0x2615AA2A695930C1UL,
    0x9D060B08CD63321AUL,
    0x7284A47B3540E6CFUL,
    0x3F9990BF5F22759CUL,
    0x05095437424397FAUL,
    0x236905C700FDB54DUL,
    0x4A9FDE3A5A6D0437UL,
    0xC3C7A6AFDB244624UL,
    0xC116FF9B4D488291UL,
    0x1171A97A3D3981B6UL,
    0x742B58F723233ED9UL,
    0xCEFA968912D0F78DUL,
    0xFA91550DF9318B22UL,
    0xF0210268DB0974B1UL,
    0xDFF09646E12EC386UL,
    0x4962CC4AA2F345B7UL,
    0x38D5B0FEBB086F75UL,
    0x26E1CD96B0903D60UL,
    0x24409FC4C55CB22DUL,
    0xD39B3FFF8FFDD5BFUL,
    0x728C4CC7920CD102UL,
    0x3DBF2DF0AEB7D289UL,
    0x8806CEBFABD3CE05UL,
    0x76D9B976C4C09FDEUL,
    0xC88156EBB786F8D5UL,
    0x439BFDE3CD0610F6UL,
    0xEBF8284D8CADEB53UL,
    0x7524B431B2E6F7EEUL,
    0x726E0375C7A26368UL,
    0xF083835B70BA9BFEUL,
    0x9D80CD1D0E6327DEUL,
    0x4D86CD31E8976ECEUL,
    0x71DC455F5CD1C2B1UL,
    0x3855FB5EB2C5E8B2UL,
    0x74881E6BCAE2327CUL,
    0x7206F674F2A3B1BBUL,
    0x66F010A4B031A331UL,
    0x44B37CDCAE765AAEUL,
    0x4AD490AE1536933BUL,
    0x0D77A82DC2D0DA59UL,
    0xCBBD7C4991B64809UL,
    0x716B6DB9D1886106UL,
    0xE26CCFF8094D8C74UL,
    0x796A87B3B68D1F3DUL,
    0x2FC5650B0271CB57UL,
    0x01ABCE5E7CBDA196UL,
    0x120364DE2845DAF8UL,
    0xFD8B834A8BA05048UL,
    0x8DE9945BCC9AEC52UL,
    0x2BF66D2E7414F686UL,
    0x14922ED3E38761F0UL,
    0x6CE50E47F5543D0CUL,
    0xFA2888E3833C8E96UL,
    0x25D990F8E0E3F13CUL,
    0xF1B84178F8674195UL,
    0x599E4FA1F87EB5FFUL,
    0xE30CF56F1EFA5F43UL,
    0x655B91F1495A9090UL,
    0x172F75B6EE2233BAUL,
    0x19D8DA0E5A68045AUL,
    0x46FB3ED415C7641CUL,
    0xA12D3A5A3753CC23UL,
    0xF287F506767CC8A9UL,
    0x472841A026D26D8BUL,
    0xEC5E3AF5289DCA81UL,
    0x7F562DBC212E81F9UL,
    0x791EDB5803B2F468UL,
    0x03B2F03A53D85E41UL,
    0xE66C690248F11150UL,
    0x1CA59E306ECB80A5UL,
    0xD1110739EEADB592UL,
    0x2910669969E9535EUL,
    0xA6C90FBC38E395EEUL,
    0x18D0456E86604654UL,
    0x57D158647A6BFABFUL,
    0x3E9B2F01C50DF595UL,
    0x3364AA97340CA215UL,
    0xEA8C0DDB10E2822AUL,
    0xD6D7478CA62B8D41UL,
    0x64F62AFB081E260DUL,
    0x5D10B3795F3FC886UL,
    0x24FB80D107371267UL,
    0x1B84DF6AF2A46938UL,
    0x6C0E2E0125610278UL,
    0xA4A79DD2D9600654UL,
    0x93DC1BE4E1ABE9D1UL,
    0xCF61D4B4702EE9EBUL,
    0x6FF8FF40B6357D45UL,
    0xB8DFD30D6973E135UL,
    0x3CA58F6CB7CBD784UL,
    0x83CD99A1E6061AB5UL,
    0xC7B4D79B01FA7A5CUL,
    0x1D6A14F1F9A736FCUL,
    0x3B3D11CD9FFCDFC9UL,
    0x9D40DF90FAD26098UL,
    0xDA7DE67F5FE5EE13UL,
    0x560B423D73015E77UL,
    0x3658E8CD94FC121AUL,
    0x638A3A81733086DBUL,
    0x257ED0FADF750BCFUL,
    0x1AD5B71586B94820UL,
    0x2302C0264EA58D31UL,
    0x741A3D8380319A81UL,
    0x90986E8876CE0A83UL,
    0x57A3BDDAD8E5AA0AUL,
    0x2DA41ED6E1FCD7A5UL,
    0x7A1ADEEF01740A24UL,
    0xC434133D9BA52777UL,
    0x83660B734994124DUL,
    0x4CACA84440FA26F6UL,
    0x42B2DAA6B596F5F8UL,
    0x2C863ACDCD12B3DBUL,
    0xAA6D5451DC3448B6UL,
    0x8C70252FC40F320BUL,
    0xEA23C49EAA83ACFBUL,
    0x2D95C7E2D7E07307UL,
    0x8A8694B48715B000UL,
    0x9DD368BF06983221UL,
    0xF0BC9BCD24A511D5UL,
    0x524FF0AEFF9C3973UL,
    0xB07D3185E11657A5UL,
    0xA11700682F3AD45CUL,
    0xCE4E5D9B0A4FF560UL,
    0xC7827959479DCC78UL,
    0x0991549DE4D64762UL,
    0x06FAACD625D80CAAUL,
    0x7368E683BB9038D6UL,
    0x38CE16C96BD11344UL,
    0x18A47D074708FD68UL,
    0xA670B3662FAFFBD0UL,
    0x4D36070FE0215186UL,
    0x7242F8B741CE1086UL,
    0xB69317BF5E782347UL,
    0x870DDFD5A4A796E4UL,
    0x01BF60A500E28887UL,
    0x5BC9495F0B3B6FA6UL,
    0xCB3C68ADB06195DFUL,
    0xC01E93FAC20C3346UL,
    0xB4C94523F023419CUL,
    0x0EDEC3C276198689UL,
    0x99BFDC94A603E541UL,
    0x367B936610BA360CUL,
    0xBDCD95FC216A8B3EUL,
    0xD8515F5FEA14CB3FUL,
    0xBFFEAB45A9A9094AUL,
    0xE86051786B66CD8EUL,
    0xDCD51DD8F87AEC5CUL,
    0xA0FD21BED61E5C4CUL,
    0x388EB2B86C73B6B3UL,
    0xBC1D768F2F5D6C05UL,
    0x58575AC3CF2CA8ECUL,
    0xD45CB817D7E177D2UL,
    0x9F0C0A981D73FA56UL,
    0xB071E27958EF4CF0UL,
    0xFD00798DBA7523DDUL,
    0x426141162EBE5CDBUL,
    0xD66C9E72B3CC4982UL,
    0x58CC181719256197UL,
    0x57DBA049E110F217UL,
    0x6F79B93B0A8E4133UL,
    0xCE5F689CF5A0A49DUL,
    0xC82630132081BB6FUL,
    0x0F10B05DDF8D16E9UL,
    0x859ED1CEA343FCA8UL,
    0x7718D2E2060837D2UL,
    0x4927FC39CD0869A0UL,
    0x544ABDDA3B409B6DUL,
    0x565E430DB3B05BECUL,
    0x815F18AD865F057FUL,
    0x37D5F739FD494675UL,
    0x7E58745504313A2EUL,
    0xAFEBB0D5D8F687D2UL,
    0x203F1CFD823B27A4UL,
    0xE11EBBB2A783FE8BUL,
    0x4164F227D052E293UL,
    0x425A44533437B64DUL,
    0x87EB7A3FFCB314DBUL,
    0x2EA9A3BEDF3F17B8UL,
    0x57005C18827F3A28UL,
    0x1A24A179F9B31654UL,
    0x0BE73DA6984A6E33UL,
    0x6EA101606F6E4D81UL,
    0x8E02D73914064223UL,
    0xBAD8F2A42B844821UL,
    0x1B857666604B1A74UL,
    0x82377B65E943F72DUL,
    0xC927EC229934AF60UL,
    0x4C2A9FDC22377075UL,
    0xB309EBEA797E001FUL,
    0x26F07DD83A5F7F98UL,
    0xE870F9F1F7B4F1FAUL,
    0x7D395EA61622E116UL,
    0xC0D2AF00BCC234CAUL,
    0xF2FD55CB574BCC55UL,
    0x71C33B22606CD88AUL,
    0x559EBF901A8C68E0UL,
    0x8F5D1AD832AEB06CUL,
    0xA150A4F065806B1FUL,
    0xCE60DE011B6C7978UL,
    0xDF02A2C93F1F26DAUL,
    0xE944C4F5AF1B5883UL,
    0x15337C7C268A27B2UL,
    0xB57A49545BA53CE7UL,
    0xCCA4318E1AB03F1FUL,
    0x07DD29D5E22763F1UL,
    0x135F9B7B7ADD2185UL,
    0x021ABCBD98EC4320UL,
    0x421E34C55F125964UL,
    0x031E11F3D447647EUL,
    0x3FB99A8B08D18FD6UL,
    0x8C71288AE68EDE39UL,
    0x9D6981DFC91A8604UL,
    0x57AF1F8E27483721UL,
    0x87F395D957D4353DUL,
    0x21A1684A25C2867FUL,
    0xCBF12D65F95AD686UL,
    0x84F0F13120B4E098UL,
    0xBABEC9E69A91C57BUL,
    0xCFEB46DCD7D8D5EBUL,
    0xAF66059A131AA269UL,
    0xD5B4883AC32F24C3UL,
    0x265559DA40B3F327UL,
    0x4348BFDA56023A2FUL,
    0x6F697A66CE78674EUL,
    0x70DA3BF8DACD3210UL,
    0x3C5C1E2C2FF814B1UL,
    0x9D7AFCBF21C51712UL,
    0xF46A1E03E8755980UL,
    0x6A5D89D7769A40D8UL,
    0x3039AE5AD2C9C0C4UL,
    0x97DD4C5944CC2E6AUL,
    0x57B192B4D4AD23D5UL,
    0xDDF73E2B1FEC5AB4UL,
    0x0FF2862B61A58AF9UL,
    0xEF6212C2EFEF1A23UL,
    0xE036A705F989E049UL,
    0xDBD2056652689917UL,
    0xF03755696450470CUL,
    0x5E3AA4CA2B6FB0EEUL,
    0xCA575C391FEA25CCUL,
    0xADB57E5B663CCA8BUL,
    0x8EF52ACAECC51D9CUL,
    0x5FCF4D7069B09026UL,
    0x593850C16A36B692UL,
    0x9ECA15ADFE141431UL,
    0xF808475FA571D823UL,
    0x1DCCACDCFC569362UL,
    0x3E200C2BCF4164EBUL,
    0x5ED0356A0CE3A34FUL,
    0x9769F811D1785B03UL,
    0xBF22E0F32968E967UL,
    0x715135F4B82AC90DUL,
    0x17C9E241111A674DUL,
    0x2E4C123D1C8A710EUL,
    0x579CCED0265D4896UL,
    0xB124B57F571D8F18UL,
    0xEEE6EACBE8874FBAUL,
    0x7543BB439F63792BUL,
    0xF45352426FF3A4F0UL,
    0x1F471B79ACC90BEFUL,
    0x48DE78AF2C8885B8UL,
    0xA989044E70010ABEUL,
    0x5B9E023DC6EBEDC0UL,
    0xB3F64A6A91432477UL,
    0xBB6E6FEE99D866B2UL,
    0xAAB11F6C4ADBC2C1UL,
    0x48A59CF88D43DF0EUL,
    0xC8BC2011F67B3411UL,
    0x9FAAA4F4FC71F87FUL,
    0x729E3401F0430686UL,
    0x2B51EDBEFC301339UL,
    0xC32EA7A2F6CA7557UL,
    0x5835D9CD92E83184UL,
    0x13518FF1C6B28938UL,
    0xA134777FF7F33331UL,
    0x113E6E3E50E286B0UL,
    0x9AA46BADAD0E27EDUL,
    0x042E4B70B93E6054UL,
    0xCE86D8191B762107UL,
    0xB5074DB804E28CE7UL,
    0x5B4F04F19376A0BAUL,
    0xC080FF658B2E41DAUL,
    0x299EEB23175895FCUL,
    0xE05E81A888FA63C8UL,
    0xA8A024587329F36AUL,
    0x9D724B400A7E8FFCUL,
    0xD830567D88A1E873UL,
    0x0379DAF89BA09AA5UL,
    0xF1CA12B18AEF5298UL,
    0xA6928482543022B4UL,
    0x32EBD154CB6B8B99UL,
    0x76B3F29D3F967692UL,
    0xAAA553E7DD28A457UL,
    0x66D6A5E9C511214AUL,
    0x3FA36981311FA4FFUL,
    0xA1607996431332DFUL,
    0xD1065D68947E7B6EUL,
    0xE5F773C1A1D9D168UL,
    0x7619364C82D3BF14UL,
    0x12B37D54667DB0B8UL,
    0xFAA10F1FAFB11AF2UL,
    0x416DBD4CD6ED8DD2UL,
    0xDE564951F95E09EDUL,
    0x1F4ED342ACEFE62DUL,
    0x631DC5DFF4B110E3UL,
    0x422F32CC7E56ABADUL,
    0xE73092F4157CD126UL,
    0xE0031D3C8F36AB82UL,
    0xE135A9FF3F5D05D8UL,
    0x241E289B5C059EDCUL,
    0x6E192E33AD436366UL,
    0xD45B1FFCCD52FF19UL,
    0xB2092A1EAA7FD45FUL,
    0xBEC0816FF5ACBCDAUL,
    0xD82CF8E64C8729D8UL,
    0xDC3A310219E5DA62UL,
    0x4E5C93BD0C32FBF8UL,
    0xB60FEBA45333D36FUL,
    0x76B02E21ED27A469UL,
    0x797F9C5E661D920EUL,
    0x2C8DF5D129595281UL,
    0x42613035157E4208UL,
    0x800DD4721A8B008BUL,
    0xBCBF4FEF9FA5D781UL,
    0x7277F1F2E085EE74UL,
    0x0A49D1CB6E34AF72UL,
    0xE16AA70CE9BEEDC3UL,
    0x69778E7564BADE6DUL,
    0xAA81B5F10BC43AC2UL,
    0x1F13D5AE5CB17E17UL,
    0xCF3A965906452031UL,
    0x12B6281B6C6706C0UL,
    0xCB215C4B56A7FAE7UL,
    0x0CD9AB83489430EAUL,
    0xE42D626EEC94E5D9UL,
    0xC7BE335216B5EC7CUL,
    0x0C1F7D49C39D2289UL,
    0x0AFCE529F69B21FFUL,
    0xA72835064DD63E4CUL,
    0xBA7F0B77D80A4EB7UL,
    0x0F1A4B45B7693B95UL,
    0xC6FCEE21C6FCEE21UL,
    0x7A5487FE9FAA6B48UL,
    0x89023FBBF9200E9FUL,
    0x46718ACEEDEAFC84UL,
    0x017008CCDAD48503UL,
    0xCB2CF5148012C8D0UL,
    0xDE350F8651E4346CUL,
    0xF5BC95857BD6D512UL,
    0xA2C6FC031D46FFF0UL,
    0x9E23B1777A927DADUL,
    0xF12E6CD06C73D69EUL,
    0x9A73240B49945C76UL,
    0xAC97AF97FA68E5D5UL,
    0x423DE3854BB50894UL,
    0x419594E137637120UL,
    0xFC18DB55AE19E046UL,
    0x5C707A667DF8B9FAUL,
    0x048746E388762E11UL,
    0x9CA5DE655269FEC4UL,
    0x6CC27C9FA2040220UL,
    0x63F9EE203C3619F2UL,
    0xFAC18E7356BD3210UL,
    0xEC51713AB6EC36E8UL,
    0x6274C4712850841EUL,
    0xA2A707979FE754DCUL,
    0x838DA0936A24ED4DUL,
    0x5FFE9B4144F9712FUL,
    0x21D04D7BC538C146UL,
    0x13F1FCB111B820B0UL,
    0xA7C511FA1C5BDA38UL,
    0x658500AE6D723A7EUL,
    0x17330EBF2F2124A8UL,
    0x4BA166079D658ED4UL,
    0xD7B6C73CAD419BCFUL,
    0x7EF7649B64D7FF10UL,
    0x77758139EC9B66C7UL,
    0x7CD6BC4C2BBDD526UL,
    0x742A637471BCECD9UL,
    0xA5EAFE473E45C442UL,
    0xF2404D68CBC855FAUL,
    0x45F35C0EDC33B03BUL,
    0xCF8BD3B0BD6D42D7UL,
    0x478DCBD2A98B705AUL,
    0x9A1B3FCDB36C8697UL,
    0xC254481A4574CB2FUL,
    0x02C40BF885C567B6UL,
    0xC9B43A33D09CADA7UL,
    0x144DA052257AE7D8UL,
    0xFB1F9381E80FA13FUL,
    0x5A6FFA2433E2F14CUL,
    0x4BA92A18502BCA61UL,
    0x3C891A251567DFCEUL,
    0xFB8F2A6F3DF08CBEUL,
    0x371EA43692861CF1UL,
    0x6C34F1208B8923FDUL,
    0x17E0198B3882C2CBUL,
    0xFB680D403909DC70UL,
    0xD0AFAFF5A51D72F7UL,
    0xADA24309FE08DACFUL,
    0xB37E4E6A2388CA7BUL,
    0x35F0B98A8387274DUL,
    0x3B39236746714134UL,
    0x9DE986FC9A87C474UL,
    0xFEA7A352DDB34D52UL,
    0xBBDF066252829606UL,
    0x919B3C98ED8292F9UL,
    0x1632BE0AC1E62876UL,
    0x71302EC70689052AUL,
    0xE679E3E06E363892UL,
    0x42BF1D2E723B6D7EUL,
    0xD972DF67326F966EUL,
    0xD7C95D322FF57522UL,
    0x494C8FB299290269UL,
    0x376C6375BA60293AUL,
    0x25B99872D588A101UL,
    0x2B1C623823DB0D9DUL,
    0x93CF869BAA0C4874UL,
    0xE64A3CA08DFA37A9UL,
    0x4DF7CFFF471A7FB1UL,
    0x4A2D4E8BF4265B0FUL,
    0x2B1813ABA29016C5UL,
    0xA6FCECCF4721D679UL,
    0x95BAF97C82464629UL,
    0x924426BFFD82E915UL,
    0x8132C0EB8B2B3293UL,
    0x42FB3B532D526E6CUL,
    0x0467C11ED88B7D28UL,
    0x10BD227A753B0D84UL,
    0x85E5F8B9B898B20AUL,
    0x8BE1146DFD5D4468UL,
    0xE5608CA7BC163A5FUL,
    0xAA6A47A573ABB75AUL,
    0xE4E53E1419D81127UL,
    0xFAFC23AEE23868DBUL,
    0x40FCE03E50E8DBE8UL,
    0x3A8B55FDA4C8DDEFUL,
    0x972BC203BBC4C4D5UL,
    0x1950DAE9848A4739UL,
    0xEA16B69D93D71A45UL,
    0x697F508861875B42UL,
    0xC7420099936CE286UL,
    0x187382F8A3E0A6C3UL,
    0x7DB53B37A2F211A0UL,
    0x72433699B4E6DD64UL,
    0xD38C4A6D047C019DUL,
    0x2E0BF682CC778D49UL,
    0x0EDE326D47CD0F3EUL,
    0x890E2C5ABED7236DUL,
    0x38B7C51AB1EDC7D8UL,
    0x3FC795691834481DUL,
    0x301A42153C9AD707UL,
    0x2A5E0621DD815A9AUL,
    0xCD71A4ECAB22709EUL,
    0xA7E30DE9272B6D49UL,
    0xE6717E652B8C8D8AUL,
    0x407091CF6037118EUL,
    0x1775961C2FBBCB5CUL,
    0xC2B82527CA77053EUL,
    0x367EF5E2F439B4C6UL,
    0x94538037EE44F5CFUL,
    0xBD0BE0BFC927EAC1UL,
    0x237D5336A9A54108UL,
    0x99B72C7ABDE5C910UL,
    0xF2EAC213D5EA0623UL,
    0xEA14EEF5B7CD2C30UL,
    0xB606E6CC59664972UL,
    0x1D4DC17C38FEAFF0UL,
    0x662635855957C411UL,
    0xB4271092CA7EDF48UL,
    0xCA94551B50B4932CUL,
    0x2A7776C709904AB0UL,
    0x6F44CBF56D79FAC0UL,
    0x58C21165F6545892UL,
    0x2EAC52B4019E2782UL,
    0x9641A9FF718E9C5EUL,
    0xA2F952104FC6DD4BUL,
    0x72D0706CD6CCDB58UL,
    0x722F5D28B61C5EA8UL,
    0x883D79C4071E18B3UL,
    0x265635150FB0D82EUL,
    0x444C4525ECE0A4B9UL,
    0x59328EB08C5CEB2BUL,
    0xFAE628F1E9ADB239UL,
    0x754615490A029508UL,
    0x155467ACA0F55705UL,
    0xC64DED7EF0D2FE37UL,
    0x4C61B39930D045DAUL,
    0x3A3D5568AF297CD5UL,
    0x4F18196C8D38768DUL,
    0xC7ABAC5DE675EE3BUL,
    0x0B0CC10720653F3BUL,
    0x8B0C2964BA471961UL,
    0x88B588B41FF7868EUL,
    0x67FC09BC554A75E5UL,
    0x966DD84FB6A46017UL,
    0x152D90E4C1B4738AUL,
    0x9FEDF86898F100E9UL,
    0x5E24341A7F92A74BUL,
    0x24E4E51FC16305F9UL,
    0xFBC5E768C7A77A6AUL,
    0xC55A0B40FFB1ED23UL,
    0x17440AA15D1D3739UL,
    0x9BF438815F5D96EAUL,
    0x692D58DF40657E8CUL,
    0x158EC424F35EC469UL,
    0xC7397A83F7A2A462UL,
    0x6D4CB481FAC835E8UL,
    0xD5A4B59980401588UL,
    0x3195F8DD0D531052UL,
    0xF9E1CCAE8BA4C281UL,
    0x9F6E2821885CAEE2UL,
    0x678BB03C1A3BD51EUL,
    0x815E5E3073DA1D67UL,
    0xB8322EEB38BE7C26UL,
    0xA7862BC5ED1DFD7EUL,
    0x97A770BEEF227E2BUL,
    0x5324A0E3E4CE3570UL,
    0xE9B99B6853181409UL,
    0xD53ACDBEF24A46E8UL,
    0x02ADA21EA2F6918FUL,
    0x941E5306BCD7C2C7UL,
    0xC87E740D9F3872CCUL,
    0xEDF7F927136C224BUL,
    0xE0A6138401BCB837UL,
    0x769951E2455E2EB5UL,
    0x3A17A27D75C74887UL,
    0xBA96394A0EECFA65UL,
    0xCD67AD041A394C9CUL,
    0x584770794D758C18UL,
    0x8C8D2739BA44AF0FUL,
    0x703F12425ECA8BF5UL,
    0xAEAB987727C5A8A4UL,
    0xA7BAB11E7C9C6C5AUL,
    0x55AA95F481D694D2UL,
    0xC0173D6BFF4E0348UL,
    0xBF09786A7FCAB582UL,
    0x7CF0448787B23758UL,
    0xBAF6BABF9E7CCC13UL,
    0xCFD115B373C0DF63UL,
    0x37025B27D9B658B1UL,
    0x1D610EB0FEA716D9UL,
    0x7FCC39C46C3C03BDUL,
    0x32DD916F3F7C9672UL,
    0x3054F114121C21EAUL,
    0xA9240A96C74CCA13UL,
    0x1ACCFBA3D8DAB2EEUL,
    0x759299C5BB31D2A9UL,
    0x87E5C46C187FE0AEUL,
    0x4E548C0D7AE39FF9UL,
    0x70EA8DA57840F9BEUL,
    0x993CBE59D350D225UL,
    0x171DF6A0C07FB3DCUL,
    0x7FD2990AF016795EUL,
    0x5E0165278F6339EEUL,
    0x2D5DC831176D0114UL,
    0xEBFA8D50ADDC54C4UL,
    0x162C23CA83ED0A62UL,
    0x40F7E66472DF3E5CUL,
    0x5A34CD9C3C5BEC44UL,
    0x68103E2247887242UL,
    0x1DE0F5F50D723CAAUL,
    0x274A1519DFC1094FUL,
    0xD05D1A6C74DA3498UL,
    0x45E816772E93A9DBUL,
    0x299EF3C576773506UL,
    0x793FF272D5B365F4UL,
    0x5A0A3D1A186A5508UL,
    0xA1E5E0204A6FCC70UL,
    0xB746D20B17F2A229UL,
    0x63B406D7884BFA95UL,
    0x4D02279C83BE69FEUL,
    0x597F8DBA9B206FC7UL,
    0x5CAE833B0EE0C500UL,
    0x61A885D3F7CFEE9AUL,
    0xF98DDE0A8ED09323UL,
    0xFD75DABC0957BF33UL,
    0xF53E48461B71EECBUL,
    0x098AB65B9ED9A9ECUL,
    0xDC48473142545431UL,
    0x0AE1F1653B554AB9UL,
    0x62B9FEC9A11F10EFUL,
    0xA75E2B6733DA5142UL,
    0x43865688AE10F0D7UL,
    0x16160DA74A8E74A2UL,
    0x0B203B4AFDE53A4FUL,
    0x308F96458B7087CCUL,
    0x487EB90B98E9FB19UL,
    0x5776ED562C134687UL,
    0x3448505B6E35262DUL,
    0x8BD6C6DEA20E82C6UL,
    0x60EDD13EB3AC1FF3UL,
    0x82A2B386716608F1UL,
    0xEFFB25453D8600F9UL,
    0x66B59CFFD78467AFUL,
    0x606E4D3E3CCCF3EBUL,
    0x8020A73847E0CA7DUL,
    0xA0AD7E2AF5349F61UL,
    0x5F91D5D0B36AA310UL,
    0x422D396F80A96547UL,
    0xA699957E60D80214UL,
    0xC22912B1D85F26B1UL,
    0x593570C289A77688UL,
    0x91B87C55093DE351UL,
    0x36391F397731595DUL,
    0xDEB2B99A1AF1A2A6UL,
    0x9465E683B12D3F6BUL,
    0xCA59CCAE5D01E4CEUL,
    0x659CF2EF7F550C4FUL,
    0xB7C7F6AD6424304BUL,
    0xC505036A35AFD01BUL,
    0x267C78C60E806B9AUL,
    0x6BFF5F84102DF80AUL,
    0x5C497525F803486BUL,
    0x6FB7BB3607D27FA2UL,
    0x45A83257ED02D9BCUL,
    0x16D3D49902F697BBUL,
    0xD414BE129BB81B32UL,
    0x0E3A041ED6AC2B45UL,
    0x350C23949E43686CUL,
    0xFF8FCF9FFC458A1CUL,
    0x3765C3A3E8192E10UL,
    0x52C1EADAF7B10302UL,
    0x5626D9D6810730D5UL,
    0x64D779659BC37B19UL,
    0x125E6D638B8605D4UL,
    0x33DE49EDF4DDE77AUL,
    0xAA5FAFCD2C5F5E47UL,
    0xAEDF1BC1C133D6E3UL,
    0x2555CF7DA5473794UL,
    0x6FD992C4A1C1B986UL,
    0xDB663CC9FF3407A9UL,
    0xC1447451DDB512F0UL,
    0x509D5878EB39E842UL,
    0x9A294B2138ABB884UL,
    0x539E0AE3E6634B9FUL,
    0x58A850EAEE20FAA3UL,
    0xD76EEEF746057FD6UL,
    0xAFE24E4D29249E4AUL,
    0x2FDFF4107B8C1147UL,
    0x8A7391690F5AFD81UL,
    0x77F33F2CCF64B3AAUL,
    0xE143FA2249364369UL,
    0x8ABFB70C49CC43E2UL,
    0x761B0E69AC4D007EUL,
    0x46494A2475701343UL,
    0x2542269291C6AC84UL,
    0x163E252DE035A133UL,
    0x163F8B586BC95F2AUL,
    0xF82D8F1926A02C3DUL,
    0xEDC1A5B84AEF33FFUL,
    0x9B12F9A24FABEDB0UL,
    0x006E4B040ED37EC3UL,
    0x6F8838D03D1DC226UL,
    0x464D8E1427156FE4UL,
    0x6BAB9442830C7F53UL,
    0x160AA1B32F6139B8UL,
    0x4BC2854478F3A749UL,
    0x03C27E13B42A0E82UL,
    0x9BA001CB45CBF627UL,
    0xB6E6FBA95C7324ACUL,
    0xE851471AEFC3374FUL,
    0x65499865FCA6E5ECUL,
    0xC485E07E4F0B7958UL,
    0xD9B71952F78A2640UL,
    0xA85A21582451E951UL,
    0xC153C43EA202C8C1UL,
    0xC531EE8A1145A149UL,
    0xC7F29CA00F46350EUL,
    0x701FDA1E82076BA4UL,
    0xDF97CDD4FC08FD34UL,
    0x589F80B325CC82C5UL,
    0x90E47239EA1980B8UL,
    0x024A60DEB0EA69F0UL,
    0x1761DC5D8471CBAAUL,
    0x85B6C850546FDDE2UL,
    0x673ED815D6E323B7UL,
    0x372EF6699146A1E4UL,
    0xF0EED5A6BC7B237AUL,
    0xDA05194260CDCDF9UL,
    0x190428512B240692UL,
    0x659F9D71F52843F8UL,
    0xF2E1A7133DD356A6UL,
    0x66A49D021870FE88UL,
    0xBFA48E2FF417213FUL,
    0x2A70BAE8883E4C81UL,
    0x4D89D607CB3DD1D2UL,
    0xF6DF6E90DE7DF90FUL,
    0xB6FBFD079B8D0596UL,
    0x406137F8EF90EAF5UL,
    0x397DC58FF00298D1UL,
    0x8C90FE4B381BA60AUL,
    0x4A39DB43E47CF3AAUL,
    0xE7E4C198B0185900UL,
    0xE05F6AEEFEB0BB02UL,
    0xF9C1681347C8BD15UL,
    0xB252BC036B525623UL,
    0x8B32ACE6326A7546UL,
    0xC6033D32241F6FB5UL,
    0xEB6F1A9B5510A5D2UL,
    0xABDABF4E1EDECBFAUL,
    0xBCE595371A5FBAAFUL,
    0xB48FCED898292E52UL,
    0x5C29F698D404C5E1UL,
    0x899BA936634A322EUL,
    0x52AF537A0C5B8AADUL,
    0x260EE4FDBDF4DB01UL,
    0xFBA08C503DD5FA58UL,
    0x891804727E0A98B7UL,
    0x394CD08E31313C28UL,
    0x826D1EE4D1CAFC78UL,
    0x673966A0C0FD7171UL,
    0x9C93764223E29C50UL,
    0x1E3F1B1B891A2AAAUL,
    0x2EAF1FDB2FB55698UL,
    0x125494B98A21AAF7UL,
    0x8DC39368BDD57755UL,
    0xCF463D1E9A0AECB1UL,
    0x5CE2E45A5CE2E45AUL,
    0x867458251D47CCB2UL,
    0x0BF3B3BD47D79C08UL,
    0x78857FC65CADB909UL,
    0x6E16BC2503FF1FF0UL,
    0xD4A7A435B3710D05UL,
    0xB7C6D80FB371659AUL,
    0x225B8B35C88029B3UL,
    0x8DCA505A5C196F05UL,
    0x27F9D613092159CFUL,
    0x80EC48E6679313F9UL,
    0x3288D8ACAECD2AB2UL,
    0x0589B5E791CE9B2BUL,
    0xAFC1CA75AD4074D1UL,
    0xD9EFB6DBF7DAAEA3UL,
    0x5099BC55630B25AEUL,
    0xFC481C641EBBD27DUL,
    0x0378C08504160D0DUL,
    0xF9C36251F6E48E33UL,
    0x78015C9B4B3ECC9DUL,
    0x758A5C1B3B1E1990UL,
    0x616093EC6B139DD9UL,
    0x88EAEC617CD26926UL,
    0xFDC07C58E8AAB715UL,
    0x53E0DF1A2A3CF0CAUL,
    0x92AEFB5F6E294023UL,
    0x27F248C3FEBFAAD3UL,
    0x0596843B34B95CE5UL,
    0xA08FE5E49BDC39DDUL,
    0x62454A641B41F3C5UL,
    0x39A5FB7EAF150840UL,
    0x834344A414C7C85DUL,
    0xDB41D07A45A6D4B7UL,
    0x318516E02DE3ECE2UL,
    0xB3ECA65C7317F174UL,
    0x31F924B53EADDF65UL,
    0x1C1B69FAE509BA97UL,
    0x858EC9FD25DE04AAUL,
    0x3ED2B83AB2E82799UL,
    0x8881C98A31117998UL,
    0x8CFF648FBD7330F1UL,
    0x46F3ADD1E2D5BAF2UL,
    0x641F272B52E2F0F8UL,
    0x4C134B4DF76025D0UL,
    0xAA059C615DE9DD03UL,
    0xF92099527DB8E2A7UL,
    0xA2C1F5E92AFE49EDUL,
    0x762DB2D380B48D04UL,
    0x3430676B11CDF21DUL,
    0x7813E8B8C4AE4799UL,
    0xBFFE53AE7E67FCDCUL,
    0xD05A3241B9A86F19UL,
    0xB2D0BDE54F0E8E5AUL,
    0x08F96CA6C551AD51UL,
    0xD6429A016084F1A5UL,
    0x11D1E53A726891FEUL,
    0xE84EB93729C5F36AUL,
    0x971DA0055324D033UL,
    0xF12E33034D887F66UL,
    0x5F048334B4A4E774UL,
    0xADF084FB8F075D06UL,
    0x3B2FD68DB5F8331CUL,
    0x96EE0EBA0163DF80UL,
    0xDF6CA0330F2E737BUL,
    0x5EAAD83F8CFB4575UL,
    0xF538081986E49E9DUL,
    0xADBE4809F19F927AUL,
    0x8CAAB2BD3EA58BD4UL,
    0x63ECF581BC70E363UL,
    0x911024442F4898F0UL,
    0xB20834A7DD3D8896UL,
    0x734E1714D077DA9AUL,
    0x1A6CBB06E2D0D79DUL,
    0x43C677F1E1158005UL,
    0x3BD770D281982DB5UL,
    0x1C57C94A6446492AUL,
    0xB5B7742424BD4445UL,
    0x1CEA6BFDF248E5D9UL,
    0xF3A21BCD95725A4AUL,
    0x648EE3E7F38877DDUL,
    0x580417101DDB492FUL,
    0x50F940259D3841E6UL,
    0xD95E79E8686D2C27UL,
    0xEC3C9B8D5327B563UL,
    0x5B73C77D9EB66E24UL,
    0x5B84D09CEC5209C5UL,
    0xE8A25867FBA3B05EUL,
    0xE2587F8CBBD87B1DUL,
    0xFB6C4072E9A32E92UL,
    0x91AEF906BCA88877UL,
    0x305C8DCD79DA8B0FUL,
    0x11E65974A982637CUL,
    0x4F8A26A890FD62FBUL,
    0xD7D22F5592AED8BAUL,
    0xA571D46727E2B718UL,
    0x13337B38DB572509UL,
    0xFC695459D4D0E219UL,
    0x23F09EADC01449D6UL,
    0x6CD79468A1E595C6UL,
    0x0499D7B09FC9B407UL,
    0x80C2FD58D720C801UL,
    0x8290252FFF36ACB5UL,
    0xCB0360EFEFB2580DUL,
    0x48B3886C1358D0D5UL,
    0x14D29BB12D47F68CUL,
    0x38C16A305E8CDC8DUL,
    0xF239400E16C23E08UL,
    0xA0CEFCEA390AAB9BUL,
    0x77B612531280010DUL,
    0xE1615EC03B3BB4FDUL,
    0xBB41AFBBBC0A0287UL,
    0x59B9A7AF4C95133CUL,
    0x25AAA32BDC98F2A3UL,
    0x0F70731BACCFBB96UL,
    0xFC859E2374407556UL,
    0x798FDEB5B1575088UL,
    0xEDE476E5EE29EDB1UL,
    0xFE99B66D079CF6BCUL,
    0x351220255D64C155UL,
    0x5F4B6931816E599BUL,
    0xA5FFE9B05F199DE7UL,
    0x3D42B92563939375UL,
    0x4683149ED1DDE7A1UL,
    0x643ED62D5EA3BEBDUL,
    0x7F4724035FDCA1DDUL,
    0xBF1A602B5BA52FEEUL,
    0x1A5AA1208AF5DB59UL,
    0x34F060F4BF92E018UL,
    0xB61C8E878A4199CAUL,
    0x240A18690AE96513UL,
    0x2EABE3B06F58C1BEUL,
    0xFF071FB798B803B0UL,
    0xE50E52416CCF948BUL,
    0x22D7275A79FE8215UL,
    0x80CA6A8B6C094CC4UL,
    0x6448050E9C2A7207UL,
    0x45905BE8654AE067UL,
    0x0568566ACBB5DEDCUL,
    0x1EAF30FCFBF5AF74UL,
    0x703123E5E7D429C2UL,
    0xA2AE5C478B96E3B6UL,
    0x4F5070AA58F69279UL,
    0x132F52BBA570FE92UL,
    0x228E5C6AD4D74BFDUL,
    0xF74B1FFA4A15FBEAUL,
    0xF7B79A50B905A30DUL,
    0x07FB139B592FA687UL,
    0x1EE7063B80FFC77CUL,
    0x0027501B9F3B407EUL,
    0x0B919E1FB47CC4E0UL,
    0xAA76052DDA9BFC3EUL,
    0xE04B48F2CC926253UL,
    0x93E0DB8440B73A7DUL,
    0x2EB41072B4C1E4C0UL,
    0xF90125F1F79ECDF8UL,
    0x72751156E7678833UL,
    0x1FC289A0C3FF470FUL,
    0xDC20483CD3DD5201UL,
    0xBBB45C3CF5C8AA85UL,
    0xF3162836C28F9DA5UL,
    0x869DAACBBE9FA006UL,
    0xA0F8A7517A273C05UL,
    0x16F46FB18C8009E4UL,
    0x125BF4ABFC536B09UL,
    0xD3A6A0EF48823A8CUL,
    0xD0BC1C6FB18EE154UL,
    0x2801D0012266DF07UL,
    0x387EAD7EE42F6685UL,
    0x916F0A3CDEC3445EUL,
    0x705A844002B39DC0UL,
    0x4C8872D8CDBE1B8BUL,
    0x8415D95B194A3AEAUL,
    0xF813C7E63F9062A5UL,
    0x01708E8DD3FF8C65UL,
    0xFCD5C8E06E502F5AUL,
    0x109E99373F290687UL,
    0x46399A7895957C0EUL,
    0x0EAEB0DB4B132399UL,
    0x29C24BFBED8AB8FBUL,
    0x8ABE8608576D9CE3UL,
    0x336511A34F2E5185UL,
    0x3599D741C9AC6310UL,
    0xADD95C7005C4A197UL,
    0xD49F9B0955C367DEUL,
    0x9614299DCB53E54BUL,
    0xEF29A16337FACADBUL,
    0x668FD40BCBA5DE48UL,
    0xE952D6431689AD9AUL,
    0x148B08C2D2ACB884UL,
    0xA3EE4A07279BB9DBUL,
    0x796D90EFB19AA332UL,
    0x997ABD671D25CA0BUL,
    0x16EC4839969F9F5EUL,
    0x84A2DD9AC37C35C1UL,
    0x5983BB449D7FDB12UL,
    0xD839450756ED5A80UL,
    0x3317DEDB88C95038UL,
    0xE0A0AEC214B1FABAUL,
    0x3998B1276A3300E5UL,
    0x24B100C68C645951UL,
    0x12534C348C6CB68BUL,
    0x7DD959874C1FD534UL,
    0xAA5A7ECE2AA8FE70UL,
    0xFF287323B0E2C69AUL,
    0xD71649DB0A545AA3UL,
    0x4E209B2C1EAD5159UL,
    0x530944F6F4B8A214UL,
    0x7E9DFE24AC1E58EFUL,
    0xA0D3D71EA1086C55UL,
    0x34616828CD07F1A1UL,
    0x7AEFB85C1D49DEB6UL,
    0x37F4AD56ECBC0CD6UL,
    0x87DDEB611B329A9CUL,
    0xC9D55B1A358A5BF7UL,
    0x2D05CED3A38D0F3AUL,
    0xAC6D445B994DF95EUL,
    0x5BA652A0CD14DF2FUL,
    0xCEA04D83135264CCUL,
    0xF75B0D629E1C063DUL,
    0x3C028C636A414ED9UL,
    0x3E8349C08E4B82E4UL,
    0xB4AC7D0CF06BFE8FUL,
    0x9B62392B474F44A0UL,
    0xB8EB95E5B4E56978UL,
    0xEACEEDA81751915CUL,
    0x9E8C908F41584ECDUL,
    0xC1670E958EEE24E5UL,
    0xF2BEBCDFAFDAA19EUL,
    0x6D9F5FAA7488BA46UL,
    0xB980061DA992779DUL,
    0x9A9112A0FE9A4713UL,
    0xBB8DE8CF6A8DD8BBUL,
    0x95E3D6257B166CF2UL,
    0x7A556143A1C03898UL,
    0x5A7F62FDA59759BDUL,
    0x5086C7843552CF85UL,
    0xEE01041D559983EAUL,
    0x2E05208086BA0651UL,
    0x4759CC730F947C81UL,
    0x460BC76A0E10655EUL,
    0xE7E11B8DCBED1058UL,
    0x67722AEB798E5FABUL,
    0xEC5F66E459AF3BB2UL,
    0xA9C8960E8684C1B5UL,
    0x3F69145BBA87BAE7UL,
    0xFF4803BC019852D9UL,
    0x6B0E6172C9A4D902UL,
    0x9911F4A24485F653UL,
    0xEBD76F2359F190ACUL,
    0xAFC976FD0580C7B3UL,
    0xA808AA1D79230FC2UL,
    0x826AA586EDB9FEF8UL,
    0x01FEE67DB37F59B2UL,
    0x94495889E22C6479UL,
    0xC70B5FAE151982D8UL,
    0xCD5003B097200F36UL,
    0x2E0E1C2B4F6CB339UL,
    0xFBFC01CCFB35D99EUL,
    0x298B91AE825E5705UL,
    0x5FFF4CFC74D8FB80UL,
    0x9134873537FA419CUL,
    0x56CEF0AC79073BDEUL,
    0x65671A4FB8218930UL,
    0xD718A22995E2B4BCUL,
    0x9483AF821605B1D8UL,
    0xEDF4079F9D54C9A1UL,
    0xC7EF1BA83230BA07UL,
    0xD75960F6BD9EA49CUL,
    0x8EF6B7AC68E2F01BUL,
    0x1B1E2A40A65B8521UL,
    0xEA16670E7BA4743CUL,
    0x66460DEDDD417254UL,
    0x46E56A7CD1D63C3FUL,
    0x2F3C3D9F50681DE4UL,
    0x63F58F7C80513AADUL,
    0xBF1CA77833E58F2CUL,
    0x66B57B72E0836A76UL,
    0x061CB768363D6424UL,
    0xFD325494792302D7UL,
    0x0BD04E29640C9C12UL,
    0x16E42E800B472221UL,
    0x7DCE8BDA0F1C1200UL,
    0xFB92A102F1C4DFA3UL,
    0xCEDABC5900A0BF97UL,
    0x412F1364FA066CFBUL,
    0x451D05012CCEC234UL,
    0x53E8CB4F48BFE623UL,
    0x117C70D1F5730B5EUL,
    0x5527B8246FEF9B11UL,
    0x433DDFFE2044B636UL,
    0x26AF0E8E30BD2A2CUL,
    0x79CFD9827CC979B6UL,
    0x8B9F1FC6AE8166C0UL,
    0x333FC8DB079B7186UL,
    0xEAF5F7E5AE7C6C9DUL,
    0xE88DA0751C22A2ADUL,
    0x8C4F3BF23B6237DBUL,
    0x030983CA930B692DUL,
    0xD125AE748725C6BCUL,
    0x6E575D6A898AB852UL,
    0xF107E836A70DCE05UL,
    0x52D59AB61DDC05DDUL,
    0x2F074C904D85129EUL,
    0xEC4B4B3B9908052AUL,
    0x733C87D4CE22BEA2UL,
    0xF29CF591C4BF6CEEUL,
    0x33A8F7F7D5F7F33CUL,
    0x2DB492222FB21E26UL,
    0x70793BDCA1E854D4UL,
    0x7A276EB2C224D70FUL,
    0x78D0B67629D75856UL,
    0x9C74B0BC831B753AUL,
    0x3B6405E8AB34A907UL,
    0xEF2C71A32CAD5FBDUL,
    0x88CBB5CEB96B7BD2UL,
    0x7C2AC9CA66575FBFUL,
    0x90370EBE0FEE1A3DUL,
    0x2A7819605465FBCEUL,
    0x9F3480FE65DB31B5UL,
    0x2E2F4240B3F24647UL,
    0x8EB2F69076AF7053UL,
    0xED74007FFB146BC2UL,
    0x9BB01E3834671191UL,
    0x1C86D8AEF8254B78UL,
    0x4102C7858CFEE4E4UL,
    0xFA0675AB151073FAUL,
    0xD6A86331A537A7B9UL,
    0x4859F1FC66A6278EUL,
    0x32C27A11307B01CCUL,
    0xEAD42DE3610D0721UL,
    0xB2C086CC1BF8F2BFUL,
    0x4AE4FF911DFB61DAUL,
    0x9A497FE2DF198913UL,
    0x4FBACCE3B4138EE8UL,
    0x9B128DC36C1E04CFUL,
    0x5486A79D9FBD342DUL,
    0xBBCCE00B381F8482UL,
    0x60DFD0691A170B88UL,
    0x845333B3150583ABUL,
    0x6A03BF943D767C93UL,
    0x9F65DBC537E59AD5UL,
    0xAAD6D1ACF08F4612UL,
    0x6F4C85ACD641BCD2UL,
    0x814FA8BE5449445DUL,
    0x93C8B64DEB84728CUL,
    0x16FFE42AB2D2DC59UL,
    0x1E98817B311AE98AUL,
    0x5407B7288D0478B7UL,
    0x336B3D200AB007CBUL,
    0xADB3F206518799E8UL,
    0xC80A74AC829DDD92UL,
    0xBF25EB89375A37ADUL,
    0x5E29243FB56FC6D4UL,
    0xF372BC22FCB88606UL,
    0xB6BA2444AB393DA2UL,
    0xCC6E3B6BB69501F1UL,
    0xEBA5AD3A0EAF7121UL,
    0x42FDD0F017B1E38EUL,
    0x7DBDD04862D95F04UL,
    0x9E6B70061662AE5CUL,
    0x5615E0C5EB2BC6E2UL,
    0xAD27D957598E49E9UL,
    0x4328652AE5769C71UL,
    0x112942C6E708F70BUL,
    0x625B774D75C87068UL,
    0xBA656A3BB01BDEA3UL,
    0x9AC577F5A12AD8A9UL,
    0x614DA022990752DCUL,
    0xFF41B4B141ED981CUL,
    0x52DFF8A10508090AUL,
    0x8DE69FE35CA09A45UL,
    0x7C6B0C22F9F40BBEUL,
    0xF162E133B4E7A675UL,
    0x5891CAC5D4ACFF74UL,
    0x6A3975DEA89F9A17UL,
    0xCE2F5FC3AF7E8C1EUL,
    0x1D9D45004C28C916UL,
    0x63DAB4CCB3273205UL,
    0x6094AD011A2EA87DUL,
    0xF92691AED837A5FCUL,
    0x9FF447B6B6AD960AUL,
    0x697157CED63F18D4UL,
    0x36B77BB84687C318UL,
    0xDA1F1B7BE1A8766FUL,
    0x3DBFC55D5C9BB447UL,
    0xFF059E1E4C01E63CUL,
    0xBB03C38DD3FB7FFDUL,
    0xB3352E018D6F89DFUL,
    0xF5F6378C4F3419D3UL,
    0x4700A416E8324EF3UL,
    0x43C851690662113DUL,
    0x6BA428C528D9E522UL,
    0x2735233A786B1BEFUL,
    0x952F06BEECD775CCUL,
    0xE6CA85E7259CE16BUL,
    0xB282749D5E028163UL,
    0x7A6535691B477C48UL,
    0x51AC07A44D4F5B8AUL,
    0x45BBCBA77C29A841UL,
    0x87052FE446E07247UL,
    0x51455483CF23ED97UL,
    0x5CCE68DBD5FE93ECUL,
    0x971D38760FBC02EFUL,
    0x49E50BDB8BA4DAB2UL,
    0x9DE327631295B4C2UL,
    0xC024869A53992F34UL,
    0x9AFEFF481A85AB2EUL,
    0x2A30922C90C9B42CUL,
    0x102E68B2024D536DUL,
    0x8A4986851C4EF6E7UL,
    0x444CB7D7DBE6973DUL,
    0x5EE2CAFF7F17770DUL,
    0x02A0C9720B854BFAUL,
    0x1CCE141467FF42A2UL,
    0x6F972C1AB75A1ED0UL,
    0xBB062B2B5722478EUL,
    0x44D28D5DDFE5F68CUL,
    0xDF1AF8B5D56542FAUL,
    0xC52E0F855C58FC2EUL,
    0xF99F62004024D506UL,
    0xB3B1CB349FF9C75DUL,
    0xF6AA118530443FD2UL,
    0xDBA71115ED9941A6UL,
    0xBC0ED94165A48BC2UL,
    0xAF8A94EDE7712BEFUL,
    0xAA74EC0CB0AAEA2CUL,
    0x29A28F3F8CF6D854UL,
    0x20510814175EA477UL,
    0x2622E35B77D3ACA2UL,
    0x97B0DB5B4AA74E77UL,
    0xED34AB6C5CB36520UL,
    0x4AFE3690D7E0B5ACUL,
    0x9DBA107B4937F809UL,
    0xC79196DCB36F6121UL,
    0x80054D7FCC70EEC6UL,
    0x530071295899A8C6UL,
    0x22EF8FF8778030EBUL,
    0x6EC47A344923E1EDUL,
    0x6C60394CB4F75E9AUL,
    0x8844BBFCE30AA9E9UL,
    0x90A43CC281FFAB46UL,
    0xD8D19675ED5FBDCEUL,
    0xDDF803377F94AAA8UL,
    0xBE22B26DD764C040UL,
    0x4B805E6046EE9E47UL,
    0x67F3780DD425D4FCUL,
    0x27561561732A7842UL,
    0x04A355E041E004E6UL,
    0x8F7156A3142A6BADUL,
    0x5FAF9754E789FB47UL,
    0xA6E7F1CEB523E171UL,
    0xE3DD5F2A84B42281UL,
    0x9E30E91FB03A2CAFUL,
    0x1E77FA7A62EE6C4CUL,
    0xF033419D1B81FAE8UL,
    0xE825F6B6CEA7671DUL,
    0x262B14F48D29DE80UL,
    0xC8A9481A01E63C28UL,
    0xC44AA05345C992C6UL,
    0x45EEE61580806D63UL,
    0x137BBD05230DB22DUL,
    0x9414E18B9434C2FEUL,
    0x2746BD9D88C5C5D0UL,
    0x723538F61C647C5AUL,
    0x50B56988B170AFDFUL,
    0x76BBA2CEE66D47E9UL,
    0x48F44967FA05CC1EUL,
    0xA60EF3B6461A4D43UL,
    0xCF1CE768BB43480EUL,
    0x497BF74A7B9CB952UL,
    0x4CFFC65454C93A49UL,
    0xE5C0CF872C2AD150UL,
    0xD1F7CA1535D22818UL,
    0x4852FC386E2E1BB5UL,
    0x013E5CFC38CD5387UL,
    0xED6D8E27A43B8CDEUL,
    0xEA9960D07DADCF10UL,
    0x3E802F11FBE27674UL,
    0xF41B5D290C99A3D6UL,
    0xE0D36E5D9E99CC21UL,
    0xAAA6A3698A69E048UL,
    0x0525A2C2562F3CD4UL,
    0x604E810189EE3A59UL,
    0x09E7ECA981D9B210UL,
    0xC56FBF2F228E1DACUL,
    0x71A5C1DBA060049EUL,
    0x654CD0A825161131UL,
    0x4668D80430D6C299UL,
    0xCC9682B8951C5229UL,
    0xA21C118553BBDF02UL,
    0x68D353AB88B97E0CUL,
    0x5EF37013A6539C9DUL,
    0x39D55A620FCB6A3AUL,
    0x66680A92700F43DFUL,
    0x5AAB586FFEC0FD96UL,
    0x2B16A3BFF1FBCE49UL,
    0x784002A632822099UL,
    0xF79F9DEF0AADE61AUL,
    0x898CC20EA75BACD8UL,
    0x93376B65A266EB5FUL,
    0x6FD7816A36615F48UL,
    0x0943E5B8E078E76EUL,
    0xCD8A7537A9B52F06UL,
    0xAFF4710E2A0A6C12UL,
    0xE131A28626F81AB2UL,
    0x1280804F7CFD2D6CUL,
    0x36C6984C3ED0C911UL,
    0xB50EB4CCB29704ACUL,
    0xFEC9A3B1820F3331UL,
    0x9F8AA94D6D97DBF4UL,
    0x4F5F651ACCC9C4CFUL,
    0x2F25D9AEFA34FBA2UL,
    0x9222F300BF8354FEUL,
    0x876046A8E3A4B71CUL,
    0xC33AB876A77F8164UL,
    0x14F19A8782C8071EUL,
    0x03EA03AF85A85CB7UL,
    0xDED5AF5A0EA4B297UL,
    0xB195FFA8042FC5C3UL,
    0xA731F608CA104E3CUL,
    0x128F79EDCECE4FD5UL,
    0xAE99FB955581844AUL,
    0xD76632D99E4966C8UL,
    0xF0A4F1BBF4FA7497UL,
    0x47E4E977581C5B55UL,
    0xE3B6097CC25AA69EUL,
    0x01F6594B923B9251UL,
    0x9FA4664CF62E47E8UL,
    0xB128377056A54E2AUL,
    0xD1871251F3B5ACD7UL,
    0x2AFE52F782F25775UL,
    0xA3F3564A5B3646C0UL,
    0x26695EC767728D84UL,
    0xD86D101FCFD00A4BUL,
    0xC7F76DF27A5045A1UL,
    0x9D3151A373974804UL,
    0xF9B8F91AAD3B953EUL,
    0xE4723DB6E736CCFFUL,
    0x4EF47FE21698A8B6UL,
    0x413C6C763A4AFFADUL,
    0x74D4E028107450A9UL,
    0x3C06B8786DD94CD1UL,
    0xBA63D9FE45412247UL,
    0x8421EB4DA7E391B9UL,
    0xFDDB234CF74073D9UL,
    0x8D8ACD8388CD99CEUL,
    0x71BC8E838B9C6035UL,
    0x98EFA132A4117BE1UL,
    0xE0AF41401ADF87E3UL,
    0x5BA7919BED300023UL,
    0x97A790315D3831FDUL,
    0xF9ACF4A08098EA25UL,
    0x3AC1F7B898F30C05UL,
    0x816F6981C60BF53BUL,
    0x83F7E01C7B769A26UL,
    0x3311E47B91EDCBBCUL,
    0xEF0D582CBF2D9B0FUL,
    0x397C38AA7B4A5F83UL,
    0x46DF918788CB093FUL,
    0x8FE22675A5A45817UL,
    0x56E3B78C5408D9F4UL,
    0x62AB793144DE75DCUL,
    0x523C79AEEFCC4A2AUL,
    0x71EAB450D86954A1UL,
    0x2B694AFCF64E6994UL,
    0x9C720776DAA43E7EUL,
    0x44CB6447D2571AA0UL,
    0xB5485E4907B53019UL,
    0x6585D955A68452A5UL,
    0x27B0405F59637D1FUL,
    0x5F5D1665E352A839UL,
    0x5619BFA07CFD7833UL,
    0x9FD452BFBE7A7A8BUL,
    0x0E5173C163976E38UL,
    0xE3B27E70CEAB9F0CUL,
    0x11B499C1E0FF8559UL,
    0x17C07FC640E86B4EUL,
    0x418EF2A1BCE56685UL,
    0xB158DFCCC56E5C5BUL,
    0x1B5C85C612E5256EUL,
    0xD37401D78A929A49UL,
    0x31D16B74C6E29D66UL,
    0x28157D43CF600981UL,
    0x8A24B067D175A7BDUL,
    0x1BF094736DD62C2EUL,
    0x57AB4A3080F85143UL,
    0xFE07FF6495D52E2AUL,
    0x9A77DFD295E29B09UL,
    0x25361A96E0F7E419UL,
    0xEC6935EBE0847B90UL,
    0xA3A9299C4F2ADB98UL,
    0xF1C03A5352243A30UL,
    0xEEED8FAFEC331A70UL,
    0x425AECF167663F48UL,
    0x5B6010B3CBC29095UL,
    0xCEDA60A74219D064UL,
    0xC30BDAEE47256C13UL,
    0xE1E65CA8AC9C00EDUL,
    0x5687C7F05B39E401UL,
    0xFFC24B988B938B38UL,
    0x726256CC1EEB182FUL,
    0xBAF20C5432058024UL,
    0xF833DDBA3B104D43UL,
    0x33A60D8BDD6E508CUL,
    0x6373D1349925A70EUL,
    0x0EB0585D15254740UL,
    0xC2EE020F5FB4DB53UL,
    0x6C3B4D6D13B4C841UL,
    0xC11C18092C5530DCUL,
    0x73518ECE2485412BUL,
    0xF2B7106D37947CE0UL,
    0xF5846EDB26A98A24UL,
    0x6647C5F6F5792496UL,
    0xEC4686EC06434678UL,
    0x5CD3CB88A7F8850DUL,
    0x813A0A7C9D2E831FUL,
    0xCD17B554996A8D9EUL,
    0x78C4E9961DB3EB5BUL,
    0x82A3D6D9CC2CB8E3UL,
    0xA660FAF550EB37E5UL,
    0x1913FE4CBF41C463UL,
    0xC1E8A365BF3B29F2UL,
    0x7EE53118C892B513UL,
    0xAF9E59B1B1FBF2A0UL,
    0x0BDDB8D9EC6BCF3CUL,
    0x6B7A646C242A7059UL,
    0x414641C26E105898UL,
    0x96A05E4FB321B1BAUL,
    0xE163A4BCE4DE6F11UL,
    0xB47BD05FA66B40CFUL,
    0x638C03B0F9878F57UL,
    0x7FB17BA2E7DECA5BUL,
    0xE43A13C9E4CCCBCFUL,
    0x3E9679C1DFCF422CUL,
    0xDF993EE5E90ABA25UL,
    0x54C7C4A94367717EUL,
    0xA7B2458D0AD6DED8UL,
    0x14590DDBEDB1EC85UL,
    0x560A43136EB58105UL,
    0xC0E78D5C2CE3EB25UL,
    0x26D83693ED99291CUL,
    0x3F7325574E41B44DUL,
    0xB9496CE47546DB2CUL,
    0xF1550C4BD22582E2UL,
    0xF33BDFE19B309B19UL,
    0x687C0B594907D2E8UL,
    0x451294E859ECC018UL,
    0x9D728C1E12BF5518UL,
    0xF2385935BFFD4D92UL,
    0x332B562EEDA62399UL,
    0xCB7553CDCEF4A735UL,
    0xC514825C507E3736UL,
    0x94D94BF1A75AED3DUL,
    0xC396F5B86FF9FEBDUL,
    0x0A986918B102B448UL,
    0xED7F7EFE9FABF340UL,
    0xEEB64139BA29A7CFUL,
    0x1A330D297AAC6BC1UL,
    0xC158D28142A34608UL,
    0x5917BBA32D06C230UL,
    0x4D9CA1009AFBD057UL,
    0xDEA92412FCAEB3F5UL,
    0xC7622C0D36B2FDA8UL,
    0x3C606747B23E497BUL,
    0xF9D9F7F2DB8E2FA0UL,
    0x9F7794730795E019UL,
    0x0703B9079823DA4AUL,
    0xDCCA191DF9980FD7UL,
    0xFD4CCDBCC59941B7UL,
    0xEBD0EDBA5BE957CFUL,
    0x863B23EFDE9C5DF2UL,
    0x18A3E9EE1297FD39UL,
    0xF9800AA1A771B000UL,
    0x7F08E26039C7347CUL,
    0x61767F73EACEED21UL,
    0x70A2D1137C8ED7C9UL,
    0xA549131166868ED3UL,
    0x2016C603D6B8987CUL,
    0x46F2193B3AD1D891UL,
    0x1509C089ADC208BFUL,
    0xEB6FB9D48DDE23ECUL,
    0xA9B61A329BFDCBEAUL,
    0x570389D1C3DE3C6BUL,
    0x576594E8D64375E2UL,
    0xA52D5247A4227E14UL,
    0x083961498679DC9FUL,
    0x2208438012482A1AUL,
    0xFCF37A457CB96DC0UL,
    0x7D7A2E43E74E2EB8UL,
    0x2BC338A7B21F4608UL,
    0xCD018C591F94CB43UL,
    0x75BA1CB3B7D40CAFUL,
    0x91C8E617F64188ACUL,
    0x511F1A683387C7E2UL,
    0x4C5E1F087CD10BB7UL,
    0x8507BCB710FA6DC0UL,
    0x6CD5A433374D4CFBUL,
    0x9C6A6C19B6C0C496UL,
    0x2DFC81C9B9608549UL,
    0x3F428D08BE5AAE31UL,
    0x2057EF813397A772UL,
    0xBF29516833893561UL,
    0x9C14D30395A51A3CUL,
    0xD2C5AA0C0E8D0F1EUL,
    0x110F526AB784111FUL,
    0xD69411AA0CEBF9E9UL,
    0x4E90D746056E273DUL,
    0x1461B28A06717D68UL,
    0x81AA517FBBA05D39UL,
    0xE906EC930F5FE7C8UL,
    0x1216E0BFA72CC703UL,
    0x2B5AA717A181FB4CUL,
    0xB8B52E498014F5B0UL,
    0x8C18E0F9080ADD73UL,
    0x62EC273D00187DCAUL,
    0x25D39B935A038A26UL,
    0x6ACF6B7225801CD7UL,
    0x734292F4F0ABF6D0UL,
    0xE4A310B1D7FA73CCUL,
    0xB6C49F8A5E295A5DUL,
    0xD80932D577274D40UL,
    0xD9A897A4C6C2974FUL,
    0x62522002E0C391BAUL,
    0x394B9CD12435C981UL,
    0x7F2F4F13AC5257EFUL,
    0x272E4723B56A3B96UL,
    0x6D38F1F04CBB37EAUL,
    0xCD9CC7E200A52A6FUL,
    0xF28965D04F570DCAUL,
    0xF60165E1D2C5370BUL,
    0x433083750C5E064AUL,
    0x01A898D26E2333DDUL,
    0x085BF80FA50A39D1UL,
    0x0B3E35AC043707D9UL,
    0x46B05BCAE43856B0UL,
    0xCFF869CBFA210D82UL,
    0x23F8F5FC7E8C4A6BUL,
    0x7350823473013C02UL,
    0x00E73468D085F745UL,
    0xD75ACCF5E0FB5367UL,
    0x781DE8FA214E87D2UL,
    0x364DF566EC833DE2UL,
    0x4462658788425076UL,
    0xBA8805A1108A2515UL,
    0x953563CE563143AFUL,
    0x96B1361D9B24C2FFUL,
    0xA0A9668F158129A2UL,
    0x7085228842B13A67UL,
    0xDB4EACD4AD0A5D6BUL,
    0xF0DAEF2F545BEE25UL,
    0x5D517B27CF6ECD04UL,
    0xEBB376779A760AA8UL,
    0x876928DDDFCCC9CDUL,
    0xE8A169E666CBC541UL,
    0xC1F6EBF9A3D55538UL,
    0x600048C60D5C2C51UL,
    0x2DF9038C90AD5264UL,
    0xB2AFF10216DEFA2FUL,
    0xFEE4A5459472A9F8UL,
    0x3C67506996001F5EUL,
    0xA586FBEB32A53DBBUL,
    0xF445DE8DA80A1792UL,
    0xA635C11B8C44AFC2UL,
    0x280C7E3AC7F56E90UL,
    0xB782F8238512BAD5UL,
    0xC32779C16FCEECD9UL,
    0xED3C76ADFA6D07C4UL,
    0x290E2780BB7AA598UL,
    0xE4B5F4BF2CB24E65UL,
    0x13E940F88470FA51UL,
    0x2A0A62FCDEE16D4FUL,
    0xE977FC5B08AF3441UL,
    0x9219857D21F0E842UL,
    0xDC2C5C242AAC342BUL,
    0xE861D0B05C7662B8UL,
    0x129466ED55140F8DUL,
    0xCB968B53FC7F916DUL,
    0x68772DB2B2526F9FUL,
    0x820E9892A77E97CDUL,
    0x06087579E7AA85A9UL,
    0xD8C3BE3EE94CAF2DUL,
    0xD33DAA36272177C4UL,
    0x711794453CFD692BUL,
    0x83A169EABCDB10A2UL,
    0x288DF530C92DAD6FUL,
    0x3795688A307E1EB6UL,
    0x0F62619393661D6EUL,
    0xDFE68C4B787E1BFBUL,
    0xEE2476B9EE4A094FUL,
    0x88274C11CF0D866DUL,
    0x637822DC2AFEEBF8UL,
    0xFAB944D4D481ACCBUL,
    0xE832D760399EB220UL,
    0x52B4829281364649UL,
    0xAA5D6B1888E4DB20UL,
    0xFD5448BE3111ED96UL,
    0xA1AE736541B0FCA3UL,
    0xF159A63806BB5BA8UL,
    0xCBB203C04D1ABD27UL,
    0x2B320CF14146B69AUL,
    0x4B5AE2EEE4A8F180UL,
    0x3655F544CD30F0B5UL,
    0x3D95EC8B6D940AC3UL,
    0x4B490A6832559A65UL,
    0xBCF3026912A8647DUL,
    0xC8D667EE52114ABAUL,
    0xDC57A637A20006EDUL,
    0x36CCB9BE67B970FDUL,
    0x84DE3B5FB3E666F0UL,
    0x21BB0FBD3E217C2DUL,
    0xEA61CA8E80F09E4DUL,
    0x1461C72C889E343EUL,
    0xCB2D4AB84A19AA7CUL,
    0x538D1179EC1AA9A9UL,
    0xFFF3A50779EFBBB3UL,
    0x5389D48EFA2F079AUL,
    0x9B9039DBF2D258C1UL,
    0xF2D0E6A75CC05597UL,
    0x6CE36C35C1AC8163UL,
    0x271C9D3ACA5D6409UL,
    0xBC0CE682D4D05650UL,
    0xB1B6216CA2E7B55EUL,
    0xB743F735C03D7810UL,
    0x73040398DFF9A4A6UL,
    0xD009F759A723DB1BUL,
    0xC16DE94D9BEA14A0UL,
    0xE37F721824571784UL,
    0xEEA3B200A6FEB65BUL,
    0x710311ADF0E20730UL,
    0xD8FA3908D7B86904UL,
    0x8214A4B5A7A33612UL,
    0xBE520D9761FF811FUL,
    0x2E648D16F6E308F3UL,
    0x0C112765300C7E1EUL,
    0x5CEC1A84620E7D5BUL,
    0xCC6E963682533882UL,
    0x01BA3AED21C16CFBUL,
    0x15F944730C832252UL,
    0x9EBD751E5787BAF2UL,
    0xAA6A6098851C396FUL,
    0x43A66C31C68491C0UL,
    0x50FAC3A3E030A6E1UL,
    0x00A1CADD00108836UL,
    0x048189FAC643DEEEUL,
    0xE902EF951DCE178FUL,
    0x407C7F91DDB46C16UL,
    0x37039302F4E0A008UL,
    0x0299FA38396A4940UL,
    0x1FC200409F10E6F1UL,
    0x6D0DE6A7B5DA71F8UL,
    0x085DEB493BE80812UL,
    0x0C92BA89F1AF26F8UL,
    0x520E541A97A13354UL,
    0xFDD179EAF45B556CUL,
    0x39FF19C64EF7DA5BUL,
    0x340E61DE7F471565UL,
    0xE0A7D1E497FFCD6FUL,
    0xAFAF86043E5874E9UL,
    0x0A6EB355EE14A2DBUL,
    0x7E07C78925D5FD96UL,
    0xDB172424876553F4UL,
    0x238DB2A2C23EE9EFUL,
    0xB302540597885499UL,
    0x424D4687FA1E5652UL,
    0xFA1E2BF8B10598F9UL,
    0x8D32347D6D4C40A2UL,
    0xE28E54788CE8F12DUL,
    0xAA5F02DB48D704B9UL,
    0x43286D561B72B8BFUL,
    0x32C62AA929C2DA6AUL,
    0x5E9564D8246B909AUL,
    0x8EEDA153AD141BA4UL,
    0x056E0FE8534C2949UL,
    0x471D2FF42A94B4F2UL,
    0xDE45D1A1EF45EE61UL,
    0xC3376F42B1FACCC6UL,
    0xFAC75988A7D078D3UL,
    0x596976B02B6B5700UL,
    0x020E5F00CDA207BAUL,
    0x9B0BB33B04405E7AUL,
    0xB9D0DD990DC141DDUL,
    0xA72200F51875FEA4UL,
    0x49B856B1360C47C7UL,
    0x823EC8E82BA45986UL,
    0xBF9BD71691857E48UL,
    0xE9B09589827545E7UL,
    0x9A987297ED8BD838UL,
    0xBC9490CA15AEA8FBUL,
    0x4669B3ED80F24B4EUL,
    0x2F41A3BAE005E5FAUL,
    0xAD73CE5A09E42D12UL,
    0x36F1B38855F2A8DFUL,
    0xDC64D2C53493ED12UL,
    0xB45EFF719D8427A6UL,
    0x0032A6DBA562C518UL,
    0xDE7465A27D403C06UL,
    0x908CBECC2CAA3690UL,
    0x7912F7FC4F6264B6UL,
    0x13EDE1A5DBF797C9UL,
    0x2E397FD2ECD37C87UL,
    0x3C06B5C839B38F7BUL,
    0x2975C866E6713290UL,
    0x29961D490E5814FDUL,
    0x6E8834B52EC20C77UL,
    0xD5E460AD7020A246UL,
    0xD465A8599DFF6814UL,
    0x462E0DB9B137DC5FUL,
    0x78CFE51896B6B8A4UL,
    0xA01B8075D8B92DF4UL,
    0xA6F312FCCE9C1DFEUL,
    0xA352C1B864CAFD33UL,
    0x3F9F16F8E65A7ED7UL,
    0x1885BC9B108B4C99UL,
    0xA1FCF8E6AF40B731UL,
    0xA0D3E4F7AAFB7E78UL,
    0x0D127585F77030AFUL,
    0x92659B4CE1863CB3UL,
    0x49C32D60007AFA47UL,
    0x7C814D2FB49F40C0UL,
    0x8A876A65283DD7D7UL,
    0x95E8F73DC65EFB9CUL,
    0x388A47C51ABDAC8EUL,
    0x2D03E13C460760D6UL,
    0xB6997A7EB3F5C8C0UL,
    0xA5EDC40EF369B48DUL,
    0x41BD2A6B006AF756UL,
    0x9EC6603812C24710UL,
    0x5D35ECF3A81A0EE0UL,
    0xE36A25322DC35F42UL,
    0xD559D2BE9E37853BUL,
    0xDB89591E290D9182UL,
    0xDCCFD3F106C36AB4UL,
    0x4F8644AF03D0E0D6UL,
    0xD80958FC74E988A6UL,
    0xEE68096F9F37341EUL,
    0xC968670BFACE42D9UL,
    0xBC8983F38F78ED51UL,
    0x4C68DDDDF0097317UL,
    0xF745B37630DF176BUL,
    0x9A41CF4674A12272UL,
    0x8026FF78F208978AUL,
    0x1DE37BBF9E9CC14AUL,
    0xBEC7076D64130195UL,
    0xC2AFFFDABBDC2C5CUL,
    0x1C186837D0619335UL,
    0x867365E111A3B6EBUL,
    0xF25D331DC2627BBCUL,
    0x74556E1420867ECAUL,
    0x94DD7888C10A979EUL,
    0x5D511E3867C87139UL,
    0x239528EACDC3E7DEUL,
    0xB721981B2B939E07UL,
    0xDCC07526B8EC45AFUL,
    0x6BC97F4F4BB3C04BUL,
    0xCAC57395B151135FUL,
    0xF3AC26D3CC576528UL,
    0x3C49C870E66F0A28UL,
    0x5C8B2F450EE4328EUL,
    0xB1906895227793F3UL,
    0x5702B917B99DB1CDUL,
    0xB9CF1F793A9F1BF1UL,
    0xCB645E85E97EA48BUL,
    0xF0B67A4DE6AB5F98UL,
    0x20CE80B0C2BF4ACCUL,
    0x4AACB96203D11A31UL,
    0xE4B90F367BD81752UL,
    0xCA7DC8329F0A1E9EUL,
    0xA91C6F0FF7D16A13UL,
    0x6DB47AA77FD94E09UL,
    0x5063F92F07C2A316UL,
    0xC7034807558DDFCAUL,
    0xAEBF081FFC0A0E5EUL,
    0x8621390F0CDCFE1FUL,
    0x0FEE4F80AC44A726UL,
    0x75E7D505F2B15902UL,
    0x7651BC64AE59E128UL,
    0x5E6CC07646BBEAB8UL,
    0xB885852C39CC265DUL,
    0x2E8AABFA40A84F8CUL,
    0x77DFCCF5948B8C71UL,
    0x821FDC827D6F4090UL,
    0xB214D570EAD7F81AUL,
    0x17F7471EACA78290UL,
    0xD6A953C6D1492057UL,
    0x9CB5CE07A3968D5AUL,
    0x375F0E738F861A94UL,
    0xC9A763D8FE87436AUL,
    0x2E7B9B683481687DUL,
    0xF113E3AA9BC54613UL,
    0xF733F45FA4497D93UL,
    0xED481732DFF7E997UL,
    0xB7B0870EB531D08DUL,
    0xA0696A65F009EE18UL,
    0x3DACA8DDC6FD4980UL,
    0x1D506DBBBC51E64BUL,
    0x6A09D0D590A47D13UL,
    0xF145F3BE2EFA9A3BUL,
    0xC6017F6A6CDFA694UL,
    0x3E5F7FC85D854E15UL,
    0x05A1FE504B7F2587UL,
    0x181EC197DAEFE121UL,
    0xB1D200FE26AEF3CBUL,
    0xA49C426ED0CA4AB7UL,
    0xFFEE8FA29AB9A18EUL,
    0x5FC472C501CCADB3UL,
    0xF10B44FD479D69F3UL,
    0xDD2620B7B9D16FF1UL,
    0xAD15F075A4DA0FDEUL,
    0xE23D5873C2394C61UL,
    0xC449EDED9D73009CUL,
    0x02B15662D7F8886FUL,
    0x2F395D61F3A1F877UL,
    0x5DB660B38DD98A31UL,
    0x8BC515BAE4AAF8FFUL,
    0xC388A0F065F5BC34UL,
    0xEFD79FA81DFBA9CBUL,
    0xCE07B9F7817AADA3UL,
    0x2D83BC011CA14A3CUL,
    0xBCFDE9EDE4CF27DCUL,
    0x4A3DC7ECCC321032UL,
    0xAE540335B4ABC4E2UL,
    0xA50E117CDDF82F0CUL,
    0x4C60E6EFDAFF2462UL,
    0x8D768602ADEF2245UL,
    0xD821056B9ACF8052UL,
    0x31E90B8873A4CD3BUL,
    0xA3D0E54541D9A5E5UL,
    0x75D3F7A1B0D9B145UL,
    0xAF04C87F5DC1DF38UL,
    0xD5A016BC3C09CF40UL,
    0x93B0FB27C9A04060UL,
    0x6E9C742F340CE5A2UL,
    0x7DDAB28D31FAC363UL,
    0x5DDFE2FF727F3CA3UL,
    0xF401B182DBA8AF53UL,
    0x8217FD371A4625CFUL,
    0xEF56DBABD3CD4887UL,
    0x11D5F725F0E780E0UL,
    0xDB89EF50FF25FCE9UL,
    0xB2C1A29588A9F47CUL,
    0xF297383AA91DCA29UL,
    0x477D5D63E63ECA5DUL,
    0x19531C47A2ABD691UL,
    0x9F343285A00B4BB6UL,
    0xD2B315B6689D537DUL,
    0x4E9021C1FCDD507AUL,
    0x690A61A6D13583F6UL,
    0x9EDD76E87D5D51BAUL,
    0xC54C95DA968EC5B5UL,
    0x749FADDF97DFE930UL,
    0x9F7BBA2EA6372500UL,
    0x14D913B777DFF5DAUL,
    0xED51733DC73AED51UL,
    0x1DD5897E2FA6E7C9UL,
    0xD705740BB0A1CF4CUL,
    0x38D28DA81E4E9BF9UL,
    0xBC0753C9CA14B506UL,
    0x5006D96C995A5827UL,
    0xDA1DF03D5A315F4EUL,
    0x4EC12697209F2196UL,
    0xD55DDFB47991A294UL,
    0xFF300C7649724A0BUL,
    0xD9284A8C0D48352CUL,
    0x0F4CC924CF8C7B21UL,
    0x977DB4641F6FC3DBUL,
    0x0764486AEDE748DBUL,
    0xC219887CA3E65C41UL,
    0x37FAAA68DCA9D08DUL,
    0x8753997EB5F6EE3FUL,
    0x290D248E25815AE8UL,
    0xDC80A4C2F18A2B64UL,
    0x10C54E4389C12B42UL,
    0xC142BE3BB9CE125FUL,
    0x2F7CEB6520288061UL,
    0x5DC40A8869C22141UL,
    0x65FAEE425DE637B0UL,
    0x5501B7A5CDB79D37UL,
    0x56105E599CAB0EFAUL,
    0x55FCC0C390620314UL,
    0x2382AB11450AE7BAUL,
    0x6E4361FF3E8CD7CAUL,
    0x237440E46D918649UL,
    0xEE4EBDD2593BA844UL,
    0x9097EB6D4BB9A12AUL,
    0x9F260BFB59ADBCA3UL,
    0x7BAE68775557AE0BUL,
    0x7148E0F43D11F0D9UL,
    0x70A382ADEC069DD3UL,
    0x48621C9FCA3EBD28UL,
    0x81CBAE94390F9F89UL,
    0x13B350B8AD0EEE10UL,
    0x293220DA1B46CEBCUL,
    0x208784099002BC30UL,
    0xEB2D525B57F42B40UL,
    0xF854439EFBB3B583UL,
    0xAF66DCEE6609B148UL,
    0x66972397E0757E7AUL,
    0xC3AC2FFF9612AC81UL,
    0x071A5197D6AFC8B3UL,
    0x88BB3507ED41A240UL,
    0x644546EC5287471BUL,
    0x1897CA71995A90B4UL,
    0xDF4B952F7D381B95UL,
    0x4282E08174868BE3UL,
    0x33D47E85B476ABCDUL,
    0x7E2BD3EF6C205F09UL,
    0x95AB8B5C992C7B58UL,
    0x5AD3932DAEB1E5D3UL,
    0xE058175F8EAFE79AUL,
    0x3353D13F09307691UL,
    0x49DA8145672B2725UL,
    0x6EB5F71AA68F2E8EUL,
    0xC90D2DCACD56184CUL,
    0xE6CC9F3BA0FB9EF1UL,
    0xFC04745FBE67C19AUL,
    0xD62A67D26D9653E6UL,
    0xC5BC038960E9DB27UL,
    0x5F0F0C783EB16C04UL,
    0xF86AA3C56BA31381UL,
    0xC8B189ED9138BCD4UL,
    0x46E9AE36D8FA6417UL,
    0x05A42BA9FC8DA96BUL,
    0xDADFADA5A20143A8UL,
    0x30B4FA1C82DD4B9FUL,
    0xC30338E8088E2E21UL,
    0x1090044AD1DA76FAUL,
    0x2C83A9DA6BFFC4F9UL,
    0x442E0A7EDE4A738AUL,
    0x8A1C8B1738FFE87EUL,
    0x5F92A689A06620AAUL,
    0x936E6168A9BCEDB5UL,
    0xD8F66A3A60C62153UL,
    0x2902843FCD2B2D79UL,
    0x5AE99C571D5BBE5DUL,
    0x078EBE9809CCD637UL,
    0x5262CC1995D07E09UL,
    0x18C1270EA7F199BCUL,
    0xB1577667C3708F9BUL,
    0x836B62713E0534CAUL,
    0x760910B49D2B98EAUL,
    0x75B18E49607874C7UL,
    0x107E5CC7CA942BC1UL,
    0x9D5A25BADB742ACDUL,
    0xDC2BACD920D0A0DDUL,
    0x0F6F1EBBC4E1D5E6UL,
    0x22E21FBCFC88C149UL,
    0x829CD22E043A2577UL,
    0x7EE9F5D83DD4F90EUL,
    0x377906D8A31E5586UL,
    0x052837721A854EC7UL,
    0xFE466162C4401D18UL,
    0x37181417CE7C8900UL,
    0x28579D1B8F8AAC80UL,
    0xE6AC6C45FBE83004UL,
    0xFF6BE494C7987F34UL,
    0x3D87450E15D98694UL,
    0x65287525D951F6BEUL,
    0x2B3334BCA57CD799UL,
    0x03A93FF1A2CA0864UL,
    0xBB8EA16ECBC976C4UL,
    0x93028F1DB42BFD08UL,
    0x2C015348CF19CA1DUL,
    0xA00EFE4082C4056EUL,
    0xFFE5C16F402D851DUL,
    0x7572EF42FC6A9B6DUL,
    0x9A2C8064B6C1E41AUL,
    0xF3E31D16CBDCB304UL,
    0xDA024BDBD600F44AUL,
    0xA68D3D229F4F3B06UL,
    0x69D82604A1A5A254UL,
    0x6AFD2CD753FEEF83UL,
    0x87E0052F08BD64E6UL,
    0x040ADDCBAFA1018AUL,
    0x16DA8172459434AAUL,
    0x7DB18CA8CAD5B098UL,
    0x4737980E8A283806UL,
    0x44ACA259D67651DBUL,
    0x2330C12A7A605D16UL,
    0x55DF6DB45179236EUL,
    0x116FB94DC4B79F17UL,
    0x07DBD622D9533857UL,
    0xBFA0A56A817C6C7DUL,
    0xBC1CC91205EC8D6EUL,
    0xDF649C4E9AFDD788UL,
    0x1F1E9682483697C7UL,
    0xC4C4575F62534A24UL,
    0x287F1F75D2803595UL,
    0x487912FD248EFDDFUL,
    0xC85A7127E7AD02AAUL,
    0xA770C8EEC6FB2AC5UL,
    0x8416FE4E4629D7D7UL,
    0x7FFCBFEE44ECFABFUL,
    0x2D874D4AE612A65FUL,
    0x75632C5ECD7ED843UL,
    0xEB2BF817463DFA28UL,
    0x1753344C770358AEUL,
    0x82E4A58BABC15AE7UL,
    0x85535ACF97FC0969UL,
    0x930DE22F07B1CCE3UL,
    0xF6BAAAF762E1BF40UL,
    0xF22CA0FD74B80E7AUL,
    0x9237E334F6E43156UL,
    0x700569DBA175A77CUL,
    0x1D4446A62D35B0D0UL,
    0x2E89990DDFF670C3UL,
    0xD0EE05FE193646EAUL,
    0x1989C6E6F67E76A8UL,
    0x07C61676E5BB52CDUL,
    0x8147FFF6A718E1ADUL,
    0x0F73393BAC7E6730UL,
    0xD302E99EDF0449CFUL,
    0x5C4EBFFA98BDB41CUL,
    0xFF8F3A92B75ED67AUL,
    0x4ED9C8D6DA297639UL,
    0x710BCDA8071EDED1UL,
    0x50A8A36201DBF83EUL,
    0x9DE5D2F723575ED0UL,
    0xC2C97EA97711D1AEUL,
    0x450819D8CF90C416UL,
    0x4A7D6E727F941747UL,
    0xE75A4A2E5E316D86UL,
    0x2570E26BE63964E3UL,
    0x1D12A56FC95BE92EUL,
    0x33DF47CC0642061BUL,
    0xA468E0BE12B12C70UL,
    0x8CC469AB4D349B7CUL,
    0xC5A35C73B68F3C49UL,
    0x699E4A5C8C893A18UL,
    0x19853B5B17D77BCAUL,
    0x6BFB12CE158E3DD4UL,
    0xFE4C1D0D3B9CC17EUL,
    0xD8122C407663B995UL,
    0x3001BEF2FECA3680UL,
    0x92DA6E70EF249BD1UL,
    0x675721C9F644D161UL,
    0xE4F6E8D07A2F0F51UL,
    0x8A4416C0DB05FA66UL,
    0xEA95C0853A27888EUL,
    0x198D161F458ECC7FUL,
    0x225798743970412BUL,
    0x418DC16FAE452C1CUL,
    0xEB0A72181D4AA4ADUL,
    0xA651443F437B1CE6UL,
    0xE07BCA305B82D2FDUL,
    0x5688585E6D563CD8UL,
    0xA1750FFAFA181661UL,
    0x7D3A583856F2C5ACUL,
    0xBBB6AD006F1BBEA3UL,
    0x49A49BED12794D70UL,
    0x0D0A9F0E7BD91E3CUL,
    0x7F2C4CDF2E82DF4CUL,
    0xE496A53BA5F50A56UL,
    0xF434A10BA01C37D0UL,
    0x6A7F19756F1A9016UL,
    0x7E6946F68A38B74FUL,
    0xA8733668D1047B51UL,
    0xECB41AC6AB754401UL,
    0x9B4BD21D69B1E609UL,
    0xC0E0D686DDFC6EAEUL,
    0xB3271D7AB655B441UL,
    0x4851997F37FE9B3CUL,
    0x4B33C4243DE0C432UL,
    0x17695002FD8B2AE0UL,
    0x2C29BFB64F4FCBE4UL,
    0xA87B2335D12531D7UL,
    0xDB283FDE680FE72EUL,
    0x7BBB1B54583ED410UL,
    0x8CDDF1E452BABE11UL,
    0xC2F84B7F9C4D0C61UL,
    0x767FBC2AC802EF3DUL,
    0xD7AE6C9C9C6AC54CUL,
    0x11B5E6D2AE73F48EUL,
    0x8B0FACEFC36C824BUL,
    0xE50384ACC2C3DB74UL,
    0x350F82CCB186AA1BUL,
    0x655185A06D9EEAABUL,
    0x2365C388E393BBE2UL,
    0x5473D4195058B2E4UL,
    0x69FF13266D7296DAUL,
    0x9B5A68C6489E9909UL,
    0x5A556B229A169402UL,
    0xB1D2BB1E1631F5B1UL,
    0xBED9F5693F34ED17UL,
    0x26D7399B9587FE89UL,
    0xA78B8FA58200DA56UL,
    0xE0E854F5280FB769UL,
    0xF2D4B2FE415AAFC3UL,
    0x7583B4BE4C5A41B5UL,
    0x2CE056FF3723F00BUL,
    0x68F01422BE1D838FUL,
    0xC01D2470F22CDE5AUL,
    0x94F12ABF9C79E339UL,
    0x61E111E323419E07UL,
    0xD16C2AD6B8E32854UL,
    0x2B4CDCA6F07FF3DAUL,
    0x0BC900A6FE73770CUL,
    0x1581503AE529CD2EUL,
    0x5009DFD741329729UL,
    0x93054C88E6AA7C44UL,
    0x46F917F6B4128FE4UL,
    0xC7F2DE41D102BFB4UL,
    0x098760C7461724CDUL,
    0xA071E0ED98F91286UL,
    0xC5BE134EC7BA96A0UL,
    0xC19A2925C34D2231UL,
    0x7C4BB33A8CED7324UL,
    0xC900596A63978C1DUL,
    0x71862B1D855F32E1UL,
    0x121FB4DDDC2D5291UL,
    0x9C375C315099DDE4UL,
    0x6DEE77AFF8C21BD1UL,
    0xBC80E22DED931E3DUL,
    0x176852ACAAC173D1UL,
    0x1CAE5D2E3F9A07F0UL,
    0xAFC7E5E075A96F46UL,
    0xCB00196B31C39EB1UL,
    0x2B69F5074C894811UL,
    0xADDD1C754E2E2914UL,
    0x79AB33F0FBFAC40CUL,
    0xDDF24D535060F811UL,
    0x0F71DE29AB2258F1UL,
    0x69DEA3E9DB727B4CUL,
    0xBA739D6D5A05D6E7UL,
    0x34B973047A2268B9UL,
    0xE95C8A1875A02CA4UL,
    0x6058665D72302D3FUL,
    0xF8C54A461C3E11DCUL,
    0xF5BB8DAC426A52C0UL,
    0xA736CF7FB7C5BFF4UL,
    0x14E0B2D1AD1044E0UL,
    0x90D0622866E80445UL,
    0x5DA3A8DE8CB6226FUL,
    0xD1032E482629049EUL,
    0xF4FF020A08BC8863UL,
    0x46326E13DA4E0546UL,
    0x47B32F5611E6E483UL,
    0x9572BD4DD6B72122UL,
    0x6A60E43998228229UL,
    0xBFAFDB5FAAA5C5ABUL,
    0x8C9D11605E59D955UL,
    0x3DE3AA516FB126A4UL,
    0xBAA2F0490E146BE8UL,
    0x1A7CE7CD3E653485UL,
    0x419615486BBF1956UL,
    0x84DFC579C2FC214CUL,
    0x0A9C7F36E5D7B683UL,
    0x164C5FF663790845UL,
    0xEDBF6C9B0D2C65C8UL,
    0x6551B1F7F6CD46EAUL,
    0x2CD90358F67D0AA8UL,
    0x203B381133817079UL,
    0x117B45156D7EFF2EUL,
    0xC4B5467A1886EA7EUL,
    0xBF4FEF46DB7894D3UL,
    0xA34CB6E6F0DF4A0BUL,
    0x7CCE5C737A665701UL,
    0xAC392C8483342AC2UL,
    0xA31FD15197B192BDUL,
    0x2FB19228983E832CUL,
    0x918B101666F9CB83UL,
    0xC30713A383BFBF0EUL,
    0xA9CDB1E3F0A49883UL,
    0xBA2C7DB0C129449AUL,
    0x5CE587FB5A42C8C4UL,
    0x7EEC7E4F6984A16AUL,
    0xE662C8B759D08F3CUL,
    0xC38DC1E90D22547CUL,
    0xF1AE5DCDBFCA2721UL,
    0xA0F93D5465B3094DUL,
    0x71B008056E5692D6UL,
    0x34770B9CE0E03B91UL,
    0x88578F6EC36B4A3AUL,
    0x38491439B6BA7F7DUL,
    0xAE2206545888AE49UL,
    0x0BCA1D2C47B0D269UL,
    0x2E65248609523599UL,
    0xB9BB18E2C40142EDUL,
    0xD4B02A6B476E1FDCUL,
    0x8EC74CEB042E7CFFUL,
    0x9C51349BE6CDFE2CUL,
    0xF04C1C27DA35F6C8UL,
    0x58A651CD201D89ADUL,
    0x9120E8DBA3D69273UL,
    0x11FF1C80276097EDUL,
    0x30A6614C1F7799B8UL,
    0x6483C25849031C4FUL,
    0x5EAD2BF6484852E4UL,
    0xC141B8917E0017ECUL,
    0xB475F27C6A994D65UL,
    0xC67E2DA1CBE759E2UL,
    0xF1A1803D3476F215UL,
    0x38BAAA5DD4C9D19FUL,
    0x55384438FC55AD8EUL,
    0x723C1CE13FBFDB67UL,
    0x0D01D20616FC73FBUL,
    0x79D310A861697CC9UL,
    0x428EAF89E24F6C36UL,
    0x047CBED6F6F8B63CUL,
    0xC980E62E33DF1D5CUL,
    0x6F361B8889A792A3UL,
    0xC847B43F369AC0B5UL,
    0xA5C80D8E768A9E66UL,
    0x9A62EC95AE10E011UL,
    0x4C89FE2BDEB3F169UL,
    0xC6E0E2616A7576BBUL,
    0x5BD5F255321C4AAFUL,
    0xDEAAF77EB3687E97UL,
    0x886913BBEACA68C1UL,
    0x4FEF53183C3C6414UL,
    0x567384DFA67029E6UL,
    0x3270F67EED31FBC1UL,
    0xCE5AA445ABA8DEE0UL,
    0x98E2BC1CA26287C3UL,
    0x629526ABA383BCAAUL,
    0xBE3DB208333D9844UL,
    0x33D72899E24C3365UL,
    0xA761D4AC6115623DUL,
    0xF11F01D98113536AUL,
    0x8B9CDBD6C566C38CUL,
    0xE8853FBCE7D8D0D6UL,
    0xA943FD1722E11EFDUL,
    0x84A810B375E69C0EUL,
    0x9EC8858184CD253AUL,
    0xBA9749CC94C1FD85UL,
    0x55A8BECAF28A4EB7UL,
    0x32CAC93C9DE73D32UL,
    0xAFF47709F1D5DCCEUL,
    0x6E0A5253375C4584UL,
    0x1A8EA222F9C67DBBUL,
    0xF9F2922717B819ECUL,
    0x0B8B7F74BF061C6DUL,
    0xB3DA2606774A8E2DUL,
    0xDAC073C7901F9E15UL,
    0xF6792800AC95350DUL,
    0x6BC0ACD0673ACEBEUL,
    0x8D8ADB562F09A245UL,
    0xD1A1EE3B4FA8E760UL,
    0x88087EE1F28024AEUL,
    0xFCC228E07217FCACUL,
    0x678F86D8FC040BDBUL,
    0xA6F54BB2FFCA35EAUL,
    0x5FF2C33B13A02A11UL,
    0x282B6739644F4347UL,
    0xF06A6F41CB445443UL,
    0x7B18DA61F6BAE9D5UL,
    0x06EAF70AE066441EUL,
    0x14EDA9EE27BD1626UL,
    0x930F504203F561C9UL,
    0xE3261D791EB44ACBUL,
    0x73001E34F85137F8UL,
    0x53CAE13E9B426993UL,
    0x7D36291161859389UL,
    0xBE509B0A3693DE8BUL,
    0xD6781E42755531F7UL,
    0xC729991A9065376EUL,
    0x2605663BD4F23B5DUL,
    0x04D90BA8207ADA2DUL,
    0x60EEDC12AF66E846UL,
    0x3EBEAC6C3F81F6BDUL,
    0x96E6D5150DBF1C09UL,
    0xA3C53804BDB68ED2UL,
    0x6BCCF9948492FD85UL,
    0x792271AB35C356A4UL,
    0xCEA553E35C2246E1UL,
    0xD1C9B92BDD3F151DUL,
    0x44919CC079BB60BFUL,
    0x7033EEFD9B28088EUL,
    0xAA525DFF66BB82F5UL,
    0x015B03EE1C43E6ECUL,
    0x928DBFB892638EF3UL,
    0x8A800DACCC0DA55DUL,
    0xBF371CD2B64212FDUL,
    0x7D8BA05688AD64C7UL,
    0x0B565B0AAE56A0E8UL,
    0x28ECB8AC2F607DB2UL,
    0x0A50D2604E05CB94UL,
    0xCC25A4553DFBF9EAUL,
    0xF534D94DFA2EAD26UL,
    0xD558BEC0BBA7E8D2UL,
    0x501478855A6074CEUL,
    0x03C2EEBB04B3FB72UL,
    0x8989CBD7B4E82534UL,
    0x27AA1C973CACFE63UL,
    0xB7257BA2550EA10AUL,
    0x848B66100EE33B05UL,
    0x516FC96EB88EEFE5UL,
    0x0EACDF8487D5155AUL,
    0xDAF80797FC534BECUL,
    0x316DB59CD14C1774UL,
    0x2D7A9B577E72385EUL,
    0x830C3A44EB3F2CF9UL,
    0xB26F670685631727UL,
    0xC14BD9F5337219B2UL,
    0x35E39E5570358630UL,
    0x320C35147D5B5DDDUL,
    0xD8AFB345A9C5CCBBUL,
    0x1E1497D0D2108115UL,
    0x0BC254FF3A911501UL,
    0x878FF156D36E9956UL,
    0x66C7BB2416ED3FCEUL,
    0x6731DE84A38BFAD0UL,
    0x6F4F599753F8200AUL,
    0xB479D9F0D48A1BC5UL,
    0x35EEC6C2BC821A71UL,
    0xCD0A8A9338681CF2UL,
    0xFCCCAC2BD3C1F180UL,
    0x0999F3F090EC5012UL,
    0x95101C443A84E7F1UL,
    0x3EAE97309727E7ADUL,
    0xF740FB339D471C35UL,
    0xEF5EC67D392B830AUL,
    0x049F059625058A86UL,
    0x0C432C1435F5E4FAUL,
    0x6572ABA3DE1197FCUL,
    0xD5451C7BF151EB6FUL,
    0xC9001364B4388F22UL,
    0xE60054A0FAE8227FUL,
    0x23A3CBCD50D54E47UL,
    0x533A7D1EA58DF958UL,
    0x4FCDBD3F0A813C25UL,
    0x1A0D4A6C336B7BC5UL,
    0xDFBD93BF2943E29BUL,
    0x92FC0EEDFAC04A14UL,
    0x0077F15613D36993UL,
    0xF9096193DF1F99D4UL,
    0x2E0259BABC27A327UL,
    0x53C31853EC9531FFUL,
    0x810B5FCC52EC7FF0UL,
    0x5BF29846C6527C54UL,
    0xC03FAB2C2F92289BUL,
    0x5CDAED54B34B0ED0UL,
    0x4AFF7E02E485E92BUL,
    0x46A70777BE6CEAB9UL,
    0xDFCDB14317A9B361UL,
    0xC1E963C58664B556UL,
    0x2FA3173480008493UL,
    0xD4367D310F079DB0UL,
    0x4DC416F246A41FC8UL,
    0x2818FF6638CB09DEUL,
    0xD6CA58B3B53A0F22UL,
    0x1A67DFBF1F5C3835UL,
    0xBBA55BE9AAAABF44UL,
    0xFA5B74BAB8A7EF99UL,
    0xFF14D6FEEC507BBEUL,
    0x1187CB58D7F3BED7UL,
    0x69C922B677621428UL,
    0x70F52471E758EBAEUL,
    0xFEA3F7E83C0610FAUL,
    0x5A46ACE5C4661132UL,
    0x887DAD63CF5B7908UL,
    0xBD6E84632DD4CB3FUL,
    0x4448EB75B4904BDBUL,
    0xC4582015556D1C46UL,
    0x41CA5A33160EA4ABUL,
    0xE37B76C387BE28EDUL,
    0x963D27A58DF860ACUL,
    0xA0261AEF7ACFC51EUL,
    0x98A4EB5D89A0C952UL,
    0x8A7A40100EDFEC58UL,
    0xE532F5D78798DAABUL,
    0x35B9E0803292B641UL,
    0xC0296A2EDF545E92UL,
    0x75816577FEA6DAD5UL,
    0x19AAC8F07BFEC53EUL,
    0x07503F7948F491A7UL,
    0x923CB32A3B874FCBUL,
    0x22CCA434E368F03AUL,
    0xC9156DC11411A9EAUL,
    0x2DA49C3B79856961UL,
    0xD3BD40951412FEF6UL,
    0xD031A9162D01088CUL,
    0xF66A602F829E2A06UL,
    0x6EA47DAE7FAD0EEDUL,
    0xC4EA073D86FB29B0UL,
    0x16350528F93024B3UL,
    0xD2A71E1A77418A49UL,
    0x318234F4F3738AF3UL,
    0x01F73A131C18CD94UL,
    0x41B4893843BBDB74UL,
    0xEE6C5AD3ECE0A82DUL,
    0x88A741E44A2B3495UL,
    0x6E0C692677008888UL,
    0x7E3F55ED251B76D3UL,
    0xF741BD853611592DUL,
    0x717CD6E6FAEBBEDCUL,
    0x77B5F9A36BF96710UL,
    0x80C527893080CCF3UL,
    0x42CBE54462D92634UL,
    0x4060057271CEBC89UL,
    0x944955FB2A3935C8UL,
    0xCA7D9B86ECA7481BUL,
    0x88C6814073DD4A73UL,
    0xB80D8756B4668AB6UL,
    0x8702416E512EC454UL,
    0x5F61EBBE1A00F96DUL,
    0xCB9E1EB3BE2AF4E9UL,
    0x8C95333CFC3340F3UL,
    0x31B73D1EA9F01DA2UL,
    0xBB7454BAFF08FE25UL,
    0x198F77705FA0931DUL,
    0x2DDFF3FB9075D747UL,
    0x0811381EF5062FECUL,
    0xAF12610C644A35C9UL,
    0x4E52E752C76E7E7AUL,
    0x219C7B8D53E429FDUL,
    0x1F3F018BC3AFA77CUL,
    0x0AD9710CEE2F590FUL,
    0x1EE7D8DF4425F053UL,
    0x7D41E9D2D17C5B2DUL,
    0x07C313F94746702CUL,
    0xBC9823AB80A3DCACUL,
    0x212A8D0D2BABFAC2UL,
    0xACCFB4ACF53551B0UL,
    0xC197616D221FF4A4UL,
    0xA41A05B6CB741B85UL,
    0x01B8247A7A8B9AD1UL,
    0x71E7B2E657449AADUL,
    0xFAA23F2CBA159D67UL,
    0x95C0A5BBDC189AA1UL,
    0xD9D2CFFF49FAB35FUL,
    0xB3C94A90D9FC9E62UL,
    0xB5D7B26B45720E05UL,
    0x470555300D10B2A5UL,
    0x20F898A5D9782800UL,
    0x5F2013F8BC24EE69UL,
    0x78C0D93253149435UL,
    0xC208B673CE446B61UL,
    0x0FDE9DBFC0A6BC65UL,
    0x43D1680C6D19A8E9UL,
    0x74DE2E8739086740UL,
    0x8E2A065ABDAE6994UL,
    0xAD5FDF34B81BFE79UL,
    0xDFA80CB25D0A19B3UL,
    0xD4793DFF3AF2ABCDUL,
    0xBD605B8E0E18B3BBUL,
    0xAAB3200ED59016BCUL,
    0xD8295AF639FD9CB8UL,
    0x933BBEEB8C61B5F4UL,
    0x08C2D6C52A3104BBUL,
    0x5B48A06DD0E792A5UL,
    0x5B74EA8CFD5E3E7EUL,
    0x1E9057A74FD73E23UL,
    0x0C15B0E443B2349DUL,
    0xA76359FC80B2438EUL,
    0xBED8CA5FF5E04113UL,
    0x472397322E92A856UL,
    0x40AEFD1A244741F2UL,
    0x03F1A106BDA7DD3EUL,
    0x95A7DABDDBB78AE7UL,
    0x63EB2B972A218CACUL,
    0xFB199266061F820AUL,
    0xF4A0DADB70F57FA6UL,
    0x5068F488DDB54DD8UL,
    0x3D245789CE12982CUL,
    0xD0263801A4C5B0BBUL,
    0x9BADDC94EF83B823UL,
    0x0A41540E63C9EE17UL,
    0xA74A541C6884E7B8UL,
    0xEF39EE20C537E98CUL,
    0xBEB2D9A1D9A8F55AUL,
    0x20C6C7E4EB082A7FUL,
    0xF8155A7F03DDFC8EUL,
    0xB85F26619073E775UL,
    0xCE58B1CFB9290813UL,
    0xB5A4DB34FE89B88AUL,
    0xCCE26000E9A6FAD7UL,
    0x0BC3144DEB678666UL,
    0xF086AD9354FAC3A3UL,
    0x3D3D8B3BE5A83D35UL,
    0x9A9D1BA639675CF1UL,
    0xE73A266DB0CA9042UL,
    0x919BE13EED931959UL,
    0x0AE4086104E067B1UL,
    0x3EB1FE9E8E908E15UL,
    0xF2EAB31979A7F910UL,
    0xA98FCAFD7893C834UL,
    0x965791A9A488A062UL,
    0xC20E50AA46D09CA8UL,
    0xD3DBCE61A490BE02UL,
    0x9C00E77AF14B2DFFUL,
    0x601736CFE536B0A0UL,
    0xD2F1C53C97EE81ABUL,
    0xB33E291AFA6BD03AUL,
    0xC313379AF0FCEDA7UL,
    0x0729BAC1B8C64317UL,
    0x09693B0312F91649UL,
    0xE2A2AA2F659D77A7UL,
    0x158BB33F920D360CUL,
    0x480142959D337D00UL,
    0x304AE42E357B8C7EUL,
    0xD76B57B44F1E6F8BUL,
    0x61E360B7E040D12EUL,
    0x93B93A37987F1F3DUL,
    0x841142A1376E9006UL,
    0x1E7889778264843AUL,
    0x595583281858626EUL,
    0x6A071245EB0D1882UL,
    0x94587F17E9C365D5UL,
    0x22B0D0E37CCB840DUL,
    0x72C896464915D1B1UL,
    0x452419CBD838065BUL,
    0xE054346CA3A0F315UL,
    0xBB9CE077274F6A1BUL,
    0x6919A2F136426098UL,
    0x0F3E34E968EA374EUL,
    0xAA5DC05579D60BD9UL,
    0x965FEC691D55E9BFUL,
    0x15D3A79D4E44B913UL,
    0x17F58B88D085DBACUL,
    0x8E06A6FE76C9EFF4UL,
    0x77A5B103C87F476EUL,
    0xE361C5C71C431A4FUL,
    0x88E32DB8C1A4AA4BUL,
    0xF35425A4204367ECUL,
    0x38FE1EC73743793CUL,
    0x4455517B28441E60UL,
    0x6C6B148586F934F7UL,
    0xC6F5C0BCDC74D62DUL,
    0x632E831F382A0FA8UL,
    0x3E38E28A1D80DDF6UL,
    0x5BC448CB78FA3E88UL,
    0x1DD45F9ECFDB1BC9UL,
    0xB8ECD61F531A7B02UL,
    0xEA47FE3719165B94UL,
    0x83CDB10EA29B370BUL,
    0x97FF36A1D40EA00AUL,
    0x126EF75F1E17ABE5UL,
    0x77A1EEC547E7FCF1UL,
    0xEE08C992D238C5D1UL,
    0x207F1A47C0342F48UL,
    0xDDF3CB5A0A4C0B49UL,
    0x032D49C5E359C847UL,
    0x70033C3CC29A1FF4UL,
    0x8FBB6758B3B3E9ECUL,
    0x3FA00D4F4641BFAEUL,
    0xB8EBB1E9D3588C10UL,
    0x47619ABE8B268C60UL,
    0x1EE0F68A7C25DEC6UL,
    0x69F5C3BD0F3EBD89UL,
    0x6FA46612594F7973UL,
    0x69F4BE8C8CC4796CUL,
    0x0F804F1DB19B9689UL,
    0xE8854A4326B9E12BUL,
    0x39E72BC99E6360CBUL,
    0x5ABA3986D90D8A3BUL,
    0x8C33220C8D78CA0DUL,
    0x3841422E9C488D8CUL,
    0x58C70CF3A41E4AE7UL,
    0x00A9010CFE1E3533UL,
    0xB0760331C7AA4155UL,
    0x77F1BEB8863288D5UL,
    0x534AEBA6E5ED4CABUL,
    0x504D54DF3F6F2247UL,
    0x7A192BE16D373D00UL,
    0x8605AF0DE8B3A5ACUL,
    0x9724FB59A3E72AD0UL,
    0x3A8CADC7D37AACC5UL,
    0x9B53BB6E8943AF53UL,
    0x5AD23D40115353ACUL,
    0x6671F3EEC681BDA1UL,
    0x46A6CC01E0826106UL,
    0x7AA80209BDA643EBUL,
    0xE1EF3C1216AFF2CDUL,
    0x176CECF6F920D707UL,
    0x7F93691AB4B92272UL,
    0xE39B4FF4FDEBDE27UL,
    0x338E7EF52B6095A9UL,
    0x1DDA930A0AC38571UL,
    0xC429DCEEB339E129UL,
    0x659427E0EF36BCDEUL,
    0x9454528DF15D657AUL,
    0xF0AF20AA7731F8C3UL,
    0x0FA6E4B75F302400UL,
    0xFC545A9F0626E3B6UL,
    0x3C08A8E30363B353UL,
    0x1E09C32048FEFD1CUL,
    0xCC665AAC360D31E7UL,
    0x639B642FACBE4EDDUL,
    0xAC83B1DB38D0ADA0UL,
    0x2D2386F273FF7A25UL,
    0xBF19721FA34D32C0UL,
    0x6100B3CEFD43452EUL,
    0xDBBC7A2432524127UL,
    0x53DDC75BC3AC0A90UL,
    0xF7F9DCCA89E7505BUL,
    0xC22B40579A498CA4UL,
    0xDAD029E187A2BEB4UL,
    0xB385523325077210UL,
    0x23703CD154E83B88UL,
    0x92C360B5F15D2302UL,
    0x15C86013127CE63FUL,
    0x2F8AF0E82773A171UL,
    0xE5B302114D8162EEUL,
    0xC35B5CDB2824CF69UL,
    0x8785E6E40C7A8818UL,
    0xDCFE42068FE0135AUL,
    0xCCD892192C6D2BB9UL,
    0xA320EF046186FA3BUL,
    0xBD2A8EC3AF4DE7DBUL,
    0x5EE02954A14C69DBUL,
    0x8C338E0263E4FD19UL,
    0x9A7D091411C5F684UL,
    0x08DA95E8298AE772UL,
    0x89D9FCC2435112F1UL,
    0xB6C987F9285A3814UL,
    0xEAF66ACDDC794793UL,
    0x9D252648778160DFUL,
    0xAAA34F8A7CB32098UL,
    0x89221B16730234F0UL,
    0xF1B9F16E89E2C93AUL,
    0x1E982AC8716912C5UL,
    0x8517D4A6CA8513EDUL,
    0xA9DA48FAB8A76C12UL,
    0xEB8517DDA73720DAUL,
    0x933C06518B52A9A4UL,
    0x95A6C46A31D1917DUL,
    0xD04FE6765D990A06UL,
    0x5A4A6A6D3DC64F52UL,
    0xD5C12A75C7B9497FUL,
    0xAE287C923D891715UL,
    0xA98B8E3C088E5A31UL,
    0x594A1028FC2A3E85UL,
    0x28B7B9BFDAF274AAUL,
    0xF166E48407BAC484UL,
    0x944F30DCB7096BDEUL,
    0x75AC2B60386D89F2UL,
    0x84D32B3BEC531324UL,
    0xD43D95C7A869447FUL,
    0x39246A6958EF072CUL,
    0x4172393E6BE1FECEUL,
    0x6E01E9E8D89F8276UL,
    0x79B258E397854D29UL,
    0x1C6CD14A876FFE39UL,
    0xAC96609B9995EDF8UL,
    0x4A58A47A72E3FCB4UL,
    0xD2A207EEBDF9889BUL,
    0xC946FE14BE0EB5E2UL,
    0xAE032F8BBA959E90UL,
    0x5C9B84BD7D31D908UL,
    0x404A5AA9B9F0B746UL,
    0xDACE1BE37D88AF67UL,
    0x45C597097DD7CB81UL,
    0xDB6708C0B46F56D8UL,
    0xFA83CA6776038F64UL,
    0x1F351CF1C6475734UL,
    0x142A02425FF02BD9UL,
    0xFA4EFC79F69D4F07UL,
    0x277F471BA9DB000BUL,
    0x58E2E0F23F6B76C3UL,
    0x9FDA1B3D7E7028B3UL,
    0x97A28E63F0BA5631UL,
    0x5A59271FFADD33C1UL,
    0x0A9D0C2A3BBC86C1UL,
    0x788756D73AC2E07CUL,
    0x295E3CCEC879CCD7UL,
    0x748040460F8DF5DCUL,
    0xF9034C136C9E00D3UL,
    0x367A09DED4E05B99UL,
    0x02C8E5B49848664EUL,
    0xDD902D0349AFAD3AUL,
    0x535E97E1F7FC0C6AUL,
    0x4202BBCB8684563DUL,
    0x3A815DB3EA088722UL,
    0xEB47EC4E34FB7EE1UL,
    0x0D40EE2A7F2B2D6DUL,
    0xAA135F9482C82CC3UL,
    0x621C6E4729388E41UL,
    0x8FD89A6240813FD0UL,
    0x4CF5F55DAC3280A0UL,
    0x7BF835BB9E2698C8UL,
    0x2BBA30B854534A0CUL,
    0x7285951DBF6B5A51UL,
    0xA21C51255B205245UL,
    0x62D2916F56B9CD2DUL,
    0x2A74E1D5F2F00EECUL,
    0xCDDC2B77CE54AC6EUL,
    0xDEB6D52126E7D640UL,
    0xA36BFB5EE89F3D82UL,
    0xB043ECA801B8CBC1UL,
    0x8EDF950167586B7CUL,
    0x23083260DEC3A551UL,
    0xAF8A443CCC8018DCUL,
    0x7767DD9D65E91319UL,
    0x52F734CEBE20DFBAUL,
    0xBDA5DF49D080FE4EUL,
    0xE5DA8615A6180789UL,
    0x5CF0D8F9BBA0DD75UL,
    0x85F462BADC7DA47FUL,
    0x10AB107B887214D8UL,
    0xE41885592B08B097UL,
    0x5190796ED39C9B6DUL,
    0x447C1E9EF844BC0FUL,
    0x195AEEB13CEFE2EEUL,
    0x11315AB3385B8AC0UL,
    0xB2A16444EAD9AE47UL,
    0xA55547801EB331FCUL,
    0x04701832B739DCE5UL,
    0x97465886D35210E9UL,
    0x8C825BDC7741D37CUL,
    0x9EEFB62EB27B5792UL,
    0xCB4E8BE8A0063C5DUL,
    0xFF1B8B4AA1C25DC8UL,
    0x5343532C01A07234UL,
    0x2FB897405C90B361UL,
    0x005622AEBC33ACA9UL,
    0xB629A298081F876FUL,
    0x0759591819534F7BUL,
    0xE03B3F2D3DC59B64UL,
    0x2720AAA75001E094UL,
    0xE6A877C64CAF1BC5UL,
    0xED98E10B0AFCE4B4UL,
    0xA5B769058763E497UL,
    0x701375A7D43F01CBUL,
    0x0F342546AA06FED5UL,
    0x244F70C84C547D2DUL,
    0x7D7D2B47FA788E85UL,
    0x6599D834B12D0800UL,
    0x5A353B8E6B1095B5UL,
    0x20E330937C399D29UL,
    0x8968400D900ED8B3UL,
    0xE70BA7B90F8390DCUL,
    0x057A25CFCC9DB671UL,
    0x47EFA040EBB8E2EAUL,
    0x817268968605947AUL,
    0x3548536485DD792BUL,
    0x60F9A4393A21F741UL,
    0xD5002D78B7162E1BUL,
    0x13945951E16EF912UL,
    0x3123FAA6DB1CF7EDUL,
    0xF5134943EA29868CUL,
    0x9824CFF8FC66E159UL,
    0x416B62AC8B9E5BBDUL,
    0x8A4E6AC373666BC5UL,
    0xDC04FCAA7839D492UL,
    0x5CEB25A7D2848963UL,
    0x121F0593E0A431D7UL,
    0x90D2156198831D69UL,
    0x4F056E1AFFEF17ABUL,
    0x2D537BA194896636UL,
    0xD5B35BEA41919ACBUL,
    0x3D45B0B355C5E0C9UL,
    0x29682E2CCF21E9B5UL,
    0x921CE12C489C4C41UL,
    0x30ED88D5E0C56A37UL,
    0xD01015C7316AE176UL,
    0xAB13A5565480B6D9UL,
    0x717E4D1F2048376DUL,
    0x8423541E8B3A1589UL,
    0xD5BB4025AE449A4EUL,
    0x373EF409B82697A3UL,
    0x8634CEF2522D987BUL,
    0xB0A6CFD2C69C1088UL,
    0x44AB0B3AFECCE242UL,
    0xA7FFBA498E4AAF67UL,
    0xB4F47213DF45A64CUL,
    0x0FFB3C758E8C07B9UL,
    0x349CE7B56DAFD95CUL,
    0xF133BBBE91E1691FUL,
    0xD4D8636C0199A939UL,
    0x24A2AD74FA9814E2UL,
    0xAC29253EEF8F0180UL,
    0xDE4C184B2B9B071AUL,
    0xC5286FFC176F28A2UL,
    0x57E457CD2C0FC168UL,
    0xE45B7F222DE47E09UL,
    0xEEA929141F699854UL,
    0x19D1B791CB3670FEUL,
    0x2047C02158D6405AUL,
    0xE4973DBDBE6E44B3UL,
    0x7AFE8FDC10BC07D2UL,
    0xBB106883F5201FC4UL,
    0xF3B9A78A178572B1UL,
    0x3DC52677769B4AE0UL,
    0x90A09F3A45FED688UL,
    0x67406F2C8F87FC4FUL,
    0x74E559B3BC910685UL,
    0xAF35D0D2583051B0UL,
    0xEA386986E786A54FUL,
    0x7D6F9A3EF26136A0UL,
    0x1DDA078D12879EEEUL,
    0x5D14D4154BFE7B2CUL,
    0xE6B0E8CFC3633BF0UL,
    0x6EAAEFC76ACC311FUL,
    0x407DC5E97DB1A4D3UL,
    0x423E8DE37D934D89UL,
    0xF6086BC836400876UL,
    0x9DEF883114668116UL,
    0x22102C9ABFCF125DUL,
    0xD9D620E0AC6DC4B0UL,
    0xC12321827687FE4DUL,
    0x34AD89078831A4BCUL,
    0x608207E7A8FB787CUL,
    0x9A75585FB2E54FADUL,
    0x0A436B8643716D14UL,
    0x49733E92263139D1UL,
    0xE023E8AC4EF7C117UL,
    0xB497F06B288DCFDFUL,
    0xB72E26D81006005BUL,
    0xC53EB42A499A7E90UL,
    0x5721B434AD84D57AUL,
    0x24CB2137731FFE89UL,
    0xA7C4F2C6E744A550UL,
    0x2AD93716F184EDA4UL,
    0xF7F203E31F96F6A1UL,
    0xE33FFA906CE74880UL,
    0x4E417C547182C84DUL,
    0x245A6883D966D537UL,
    0xB3B3359379FE77D3UL,
    0xEAE6DCC7EEE3DB1DUL,
    0xD4B8E3D1917BC86BUL,
    0x90B6DA738A9A25DAUL,
    0x26324F33423F3CC3UL,
    0xCAA15F13EBD417FFUL,
    0xB664292EAECF7FA6UL,
    0xBE70724027F85BCDUL,
    0xD8050E0EB60CF274UL,
    0x517AAF684BB50CD1UL,
    0xF6AF6CB341349015UL,
    0xA2F80B8D040727CCUL,
    0x9737A37136F07E75UL,
    0xB81F6D4A8F5EEBA8UL,
    0x203B527D1B77904CUL,
    0x76D26A22750E849EUL,
    0xBA71116ADF5B514CUL,
    0xF19D095E42D430CCUL,
    0x2E0A74E1002380B1UL,
    0x99AD4CCCB128CBC9UL,
    0xAA3F739ABDDCF21FUL,
    0x6ADAABD3068C5235UL,
    0xEF49CF0270307CBEUL,
    0x598803E85E8448D9UL,
    0x7504C0F113AB50FCUL,
    0xCEE4490CD57BB3C2UL,
    0x4F1D4BE3A7F24601UL,
    0x8B7FD87F0DDB421EUL,
    0x07116E24E9D1929DUL,
    0x7141766F91D15BEAUL,
    0xB64CF2CCA9D95F52UL,
    0x55E1D2758F34E437UL,
    0xF095C0405307B21BUL,
    0x36CED73BFED89754UL,
    0x8389CD56CA8072DCUL,
    0x5FFBDEEC3E8E2009UL,
    0x910A32E7AAD2656CUL,
    0x3AFDC536C3D01674UL,
    0xA82819CAC9C4C403UL,
    0x52BBA29D5EC69356UL,
    0xAB31EF4DE6800CE9UL,
    0x1B212B26DD3C04DFUL,
    0x33506883545AC0DFUL,
    0xC67DB108A9ADE3BEUL,
    0xC59872A5134879C7UL,
    0x3E71D0B300B7AA79UL,
    0x093D6DDCA5B8FBAEUL,
    0xED5EDE9E676643C9UL,
    0x75DBEC174AEEAD10UL,
    0x26C10ECBDA5D043BUL,
    0x24F4121D07579880UL,
    0xE3EBAAE484798530UL,
    0xB28B1FE5BFADD7F5UL,
    0xE842A9398079BD82UL,
    0xB0AD1238A709B1A2UL,
    0x8F719973E1445BA2UL,
    0xBD32E46AA95C1DD2UL,
    0xF4924635A19EB37DUL,
    0x4C9BF537BE2634B2UL,
    0xB5CC40FBCB586380UL,
    0x3E8C8727991A8A0BUL,
    0x8386BFB614D06749UL,
    0xA19435F193E081ACUL,
    0x22AC59A870E6A669UL,
    0xBB40DD2270B65366UL,
    0x83F969AA1EE2A664UL,
    0xB91B4C20085BD12FUL,
    0xBA291848A0815CA9UL,
    0xAB54A438726D25D5UL,
    0x6501129C9E0FFA05UL,
    0x260BE8F09E326A20UL,
    0xDCE97BDF8A0EABC8UL,
    0x9849DE24FCF23CCCUL,
    0x8664170EF165C4A6UL,
    0x7C06330BFDDA182EUL,
    0xC69BB1D832A710EFUL,
    0x37EBBF3117BD6A25UL,
    0x57715966069157ADUL,
    0x62CA17B74C435651UL,
    0x375E7FC44F21C8ABUL,
    0x89D630CF5EA96D23UL,
    0x6A98C2ECF57FA5D4UL,
    0x7C0043FDFF6436BCUL,
    0x8AA9180DE2FEDD45UL,
    0x0A6A279F3AA4FD70UL,
    0x634148744F385576UL,
    0x107A473D7A6647A9UL,
    0xE6F13851780394DAUL,
    0xFC40CBF7B90CA77CUL,
    0xEC6A202EE4960385UL,
    0x781B3D62BB013EF5UL,
    0xEB9DC3C7D8596C46UL,
    0x678B9BB8C3F58FEBUL,
    0x29B18B4FD460CA8FUL,
    0x7C65DAC73C35C862UL,
    0x3B458DDB57038F08UL,
    0xA247F9EF01D8082EUL,
    0xA711568EEDB43069UL,
    0x85796B0549DDE156UL,
    0x7AD9E6CE657D69E3UL,
    0x602E548F46E24D59UL,
    0x9E5B5E4D2CCD2259UL,
    0x772282EBEB95E682UL,
    0x6D645D59FB5F5AD3UL,
    0xE38CB9D7D39FDBCCUL,
    0x34E710FF01247C5AUL,
    0xC45C27EF50F36ADCUL,
    0x1FD09E7390A74D54UL,
    0xCDE5E70C1DDB954CUL,
    0xB8FF7AB45305C345UL,
    0x4319E335B71FFF34UL,
    0xBC2042F090AF6AD3UL,
    0x8821196D91FA2DE5UL,
    0xB385454F8791F57CUL,
    0x3C7D42D58F770B54UL,
    0x16B5E274BDE402F8UL,
    0x374706271354CB18UL,
    0x90532EDF0D2BDD86UL,
    0xE7CF3C4F9F489F0CUL,
    0x2A8F319B392E7B3FUL,
    0x95CF53B3D687F9FAUL,
    0x878C75C09FBDB942UL,
    0x6E13FC662B882D1DUL,
    0x95A88F0B409CDA47UL,
    0x7CE1CCB9B293020EUL,
    0x4C4D6B2644F458CBUL,
    0x9088EB5A43FFB0A1UL,
    0xF11BC2DD9A3E7195UL,
    0x80D9F74197EA47D9UL,
    0x63C6CCA8E68AE8C8UL,
    0xFD813BB7DB977F20UL,
    0x21973BBF8D17EDFAUL,
    0x2310A8F9421EBF43UL,
    0x736A718577F39C7DUL,
    0xAA0BC91BE0B796E3UL,
    0x16469284DB8C62B5UL,
    0x84436EC293B1415FUL,
    0xDA5E12F728DB30CAUL,
    0x2AFD795EEAC8D30DUL,
    0x57E4C39DE5EE8470UL,
    0x21543C612379DB3CUL,
    0xAF514CABE74CBF15UL,
    0x300D614A4C785FC4UL,
    0xF1160ACCF98A3FC8UL,
    0x92523B76657A517DUL,
    0xD242728AA6F0FBA2UL,
    0xF0F2103EFAF8CBA7UL,
    0x2058206FBE79A8ADUL,
    0x102D125411A7B6E6UL,
    0x0E48D1C262390950UL,
    0x2DACD605FC681475UL,
    0x5746F3A7AB7FE544UL,
    0x3F878F92B3A7A071UL,
    0x7D80FD645D4DA346UL,
    0x1F2E4E06DEA8992BUL,
    0x54833611C17ABDEAUL,
    0x632A689BF42301B1UL,
    0x8879EE09268305D5UL,
    0x1C8A4C2C19E68EECUL,
    0xAEA8FD591FAD4106UL,
    0x42BC05C27A946054UL,
    0xAB8E2EDA0C0A5883UL,
    0x6683AB880E427778UL,
    0x29DE5FA52D00428CUL,
    0x9438F7AD68771A20UL,
    0xA549C3B37EA28131UL,
    0x6E63860BBB190730UL,
    0x5845066D8A1EA7F7UL,
    0x796A877E459B99EAUL,
    0xFAF2A78061FD9EF4UL,
    0x063AE2B2CC273588UL,
    0x786A4EB67B01BF0BUL,
    0x2FA9923062DD396CUL,
    0x0FC2D89AC25A5814UL,
    0x386F6CE5BAF6091CUL,
    0xC5574E0AEB86BA68UL,
    0xB50807EABE20A8DCUL,
    0xF73EB622C4F1689BUL,
    0x08AAFD0814722BC3UL,
    0xAD464F2E18836BFCUL,
    0x5B76B14AE875C795UL,
    0xBBE7648349B49BE8UL,
    0x591CA673AA6AB736UL,
    0x45A9187928F4B9E3UL,
    0x9537097412CF75FEUL,
    0xA0948AB42D7BA0DEUL,
    0xDCE4334788AF94EAUL,
    0x7F6DB52EEFC96DF8UL,
    0xAB935175B22E822BUL,
    0xB50C0B0CEDC6CE84UL,
    0xBF94DD42F63BDED2UL,
    0x39DAC362EE65FA28UL,
    0x633F6F44A537EBB6UL,
    0xA1A9FC1C76A6730DUL,
    0xA178472EBB8AE60DUL,
    0xFD280B4D7F3ABC4DUL,
    0x99CAD8E7AFDB60FAUL,
    0x3750146A28097A82UL,
    0xDBC631F109350B8CUL,
    0x4C7028F78FFD3681UL,
    0x1AA8A837D2169D94UL,
    0x2311DD7159F00582UL,
    0x065D03A9D6B2C6B5UL,
    0x8F17BC8BA08DA62BUL,
    0x79D3B596FE44EE8BUL,
    0xBCDC5017D3CE1E9EUL,
    0x3E933CFF7B111C22UL,
    0x2497C4717C8B881EUL,
    0x8ABA6AF54B942B95UL,
    0x5AFEEDD9BB2899D7UL,
    0xF2BFA0430F0A0FCBUL,
    0xA5A9653A8D2CAF48UL,
    0xFE3F9C29F7B32BD5UL,
    0x218297BF0CFD853BUL,
    0x93D9BD300D7789E5UL,
    0xD4D4F6A4AB575A33UL,
    0x59BF8C3D52C92F66UL,
    0x8AC862B0B32C5B80UL,
    0xC4B3347BD68BD609UL,
    0xD3301660A57C9272UL,
    0xB9562064627FF9DBUL,
    0x9F243D3919F442FEUL,
    0x3B963160CD65D41EUL,
    0x33E8CD3322E2FE31UL,
    0x6A842D197F845D56UL,
    0xE41033B25D003A07UL,
    0x3DFF319A831E0CDBUL,
    0x31B927BBC44156CDUL,
    0xBE5C1255A1830FF5UL,
    0x9BECD4B9FEF3F8A6UL,
    0x88BC673CA9E0AE99UL,
    0xE851E480B814D4BAUL,
    0x055BF0AC0C34F4FDUL,
    0x25BC98A59C2EA962UL,
    0xCA4AC3EAAE46EC7BUL,
    0xB8E181E559464527UL,
    0x2FA133A4A9D37ED8UL,
    0x27B926779DEB502DUL,
    0x468056A6BB6F3846UL,
    0x7EEF65D5F153E26AUL,
    0xB104CD1BABF302E2UL,
    0x5873C14A52D74236UL,
    0x28D37D4F71AC5C58UL,
    0xA01BC64DD4BFBBACUL,
    0x317B11A312DF5534UL,
    0x2036F561ADD12E33UL,
    0x3BC4245933A166F7UL,
    0xF40DD601A65F7F19UL,
    0x7D1464D472D32136UL,
    0x6089CDF6A57F326CUL,
    0xB7635E80A5C31BFFUL,
    0x0F87E938BDF29D66UL,
    0x115722B1B9C14C1CUL,
    0x953DA1E1B12C0491UL,
    0x206BC5DC9D1AC70AUL,
    0x51BB2D88D31A914BUL,
    0x192547247864DFDDUL,
    0x465BF26AB9684352UL,
    0x37C8252A7C92D017UL,
    0x91A0BD635321F145UL,
    0xC50CE861B55EAB8BUL,
    0x6EBFB22D646FFC18UL,
    0x25367DE49D64CF16UL,
    0x46A1E1A299EC4BBAUL,
    0x42A8EC77D5150CBEUL,
    0xD2E6822DBFD6C8BDUL,
    0x7EE3A3C5E4A40CC9UL,
    0x1262D55792428154UL,
    0x534E36D4DB9ECC5DUL,
    0xF39C4F538B5124C2UL,
    0xDED51F703D0FA83DUL,
    0x8F5FB35D7E88FC70UL,
    0xF8C397922FC03F41UL,
    0x52F357A30698BCCEUL,
    0xBE4C854FFDB6EEBEUL,
    0x2A69FFD1B42BFF9EUL,
    0xA77DC70BD689A1E5UL,
    0x2959F696AE390A99UL,
    0xA1DD317EA8FD4F29UL,
    0x35BB21DE06784373UL,
    0xC45D23BAF168AAB8UL,
    0x45F6D8EEF34ABEF1UL,
    0x2A86A0475B6A1434UL,
    0x7D5DABE888D2D074UL,
    0x70DB57649FA8D0D8UL,
    0x679BE1DAF71DA874UL,
    0xD7591B0065AFAA7AUL,
    0x4C241E39B23DF959UL,
    0x2B5F9D2AF1F1722DUL,
    0xFBA550EA44404EE6UL,
    0x9F3F689B814F2599UL,
    0x4E74E62E0A97E901UL,
    0x9C8C6504B5B63D2CUL,
    0x9D44FCCE98450843UL,
    0x92F0CF722BC4202FUL,
    0xB215AAC32D25D019UL,
    0xF7AF4F159FF99F97UL,
    0x4EC6CFBC7B2E9536UL,
    0x60BF608F1B8CD1B6UL,
    0x2BB9230590DA5E8AUL,
    0x87B63E25A529D526UL,
    0xA6D3A8750DC73270UL,
    0x60190048C0764A26UL,
    0x5ECB40269053C0D4UL,
    0x46E571A0E20D01F1UL,
    0x11D862A3E977A9EFUL,
    0x2D34FC3BC4ADB780UL,
    0x21D2E5662C1F6FEDUL,
    0xBC74B4BE25EB6C8AUL,
    0xE4CB7541F413D2C5UL,
    0xAE8CE82A4219AC8CUL,
    0xAC51915D27E4A5F7UL,
    0x4056EA1105F5ABD7UL,
    0xFE205F38AAA58E5BUL,
    0x3EC8BF18AA453FE9UL,
    0xBFDF984E2C22B94FUL,
    0x71B0892EC081D60AUL,
    0xD565F438137F0E10UL,
    0x3441CAD2F2231923UL,
    0x2B6747FAA9DB9D6BUL,
    0xE43701C36CAFF1A4UL,
    0xCFC8BE9A5E1FE575UL,
    0x9B0F3DCA3DB0F4CDUL,
    0x61E1DD6125A3EEE6UL,
    0xA6E9FDCB2C76785EUL,
    0x00689CDE5F7C6787UL,
    0x1F25887F3C104278UL,
    0x81A15811460FAB3AUL,
    0x1BBE0523B8DB9A21UL,
    0xACE699C71AB9DEB5UL,
    0xFE54B92A344583CAUL,
    0x29A16F8D621C4508UL,
    0xC2DB6B6708350ED8UL,
    0xD0E9CE05A1E68CD8UL,
    0x146DF9EC4C4B9FD4UL,
    0xEFEA18DCF10F8F75UL,
    0x8BA6F76BC53A1493UL,
    0xF8EBCCC96ADB9FB7UL,
    0x56B94C6D7127DFBAUL,
    0x0581730AB9380412UL,
    0x737E398138550FFFUL,
    0x1093408B4B9D1146UL,
    0x32CAEDF24A583345UL,
    0x30D779DE7C4F6DD3UL,
    0x9AA47FFF660CB932UL,
    0xDA62027C8BDB326EUL,
    0xCE2B43770B655F8FUL,
    0xA4822F1CF23F4810UL,
    0xFB8794444A7D60FBUL,
    0x1297A88E081430EBUL,
    0x222FF6A823D122E2UL,
    0x6DEE944E1EE90CFBUL,
    0xB5D45264751B7DF0UL,
    0x92B35082E0B42F66UL,
    0x684785568EF26A22UL,
    0xE4E2FD323574965CUL,
    0x48ADC8A773564670UL,
    0x91D6DD290888CBABUL,
    0x51DB102F4A3BA5E0UL,
    0xA4A9A4C40E615885UL,
    0x1CDD6BADC297830DUL,
    0xCAC66558B944DA67UL,
    0x09606148B6C71DEFUL,
    0x1A78AD3D8240536FUL,
    0x53AF99BAA671CA47UL,
    0xAD7E85FC227197C4UL,
    0xA132FB5370554DB0UL,
    0x5DD35C8D074E57AEUL,
    0xF417C2502FFFED43UL,
    0xDC53FD41B4ED944CUL,
    0xBFBA3BA79CFF7EBFUL,
    0x539DE94D44FDFD0DUL,
    0x8C044C5C84505B6AUL,
    0x53409B5163D5B846UL,
    0xC6AD107DDC9054CCUL,
    0x5AA3F878A178C4FCUL,
    0x00C09F246ABEDD82UL,
    0xDBC86D85C5059461UL,
    0x4F930AD022D6DE3BUL,
    0x2F83E7E45D9EA7AEUL,
    0x4BF54C16EC8FEC03UL,
    0x2CE544C68FB812A0UL,
    0x1033371FC8E842A7UL,
    0x87E7F24270732CB1UL,
    0x3556041742A0DC74UL,
    0xD0917A423314BBA8UL,
    0xC0F97FCE55094987UL,
    0x14E85C5EE7A4D542UL,
    0x99015ED7DBEA5113UL,
    0x639431E895B9AA57UL,
    0xC0572928C0ABFDA3UL,
    0x30785D90C956BF35UL,
    0x33F2E3FE70EAAE1DUL,
    0x1F2AA07F00B3217AUL,
    0x6325D1A044AE510DUL,
    0xFC058F5121E54C32UL,
    0xB3ED1BFB4BE636DCUL,
    0x487EB21CC7295BA1UL,
    0xA551BE18C11A476DUL,
    0x43FEB945EE7F85B8UL,
    0x816562BADFDEC83EUL,
    0xE8D65CA700C9A693UL,
    0x81592BE4E3878728UL,
    0xB45085B721EFD38CUL,
    0x4967A516ED23A5A1UL,
    0x9A83F5F9963775EFUL,
    0x00834EAC4A96E010UL,
    0x6AF0636DDEDCB6DDUL,
    0x772960298DA26FDBUL,
    0xB3924ECD70E095DCUL,
    0xE38E9162A2500646UL,
    0x92D619E420858204UL,
    0x2A1F4F37F95BAD08UL,
    0x84B233A8C8FC8AE7UL,
    0x8935624F8C5592CCUL,
    0x51F0FEB9F6AE98C0UL,
    0xB4C7A93837C91A1FUL,
    0x90A38E9838E0A8C1UL,
    0x4593CF82AA179706UL,
    0x758F49C24925568AUL,
    0x06F43E5175EB6D96UL,
    0x445D79F995508307UL,
    0xB5BA80F839791C0FUL,
    0xB635392A4938B3C3UL,
    0x57C51E6BAD752696UL,
    0x0EE21293DAD47C95UL,
    0x9D1224004B3A6707UL,
    0xF3CC740D36221548UL,
    0xEEBFC7A7EFDC35B4UL,
    0xE495D1EF4C91FD20UL,
    0x5EE5632F47AE9695UL,
    0x5EF77C9ADD3B11A3UL,
    0xA7ECB73355EB2F20UL,
    0xEC69ADF931AAE0C3UL,
    0x93A3996368C94158UL,
    0xBAA045B4E42F3C06UL,
    0x1CF38D529D7441D9UL,
    0x1F9FB66F3A3842D2UL,
    0x59C3757B3B7408E8UL,
    0x54B0F614960F4A5FUL,
    0xE30524E1871F481DUL,
    0x291E373D483E7EE7UL,
    0xB59E4BD37AE292DBUL,
    0x0AD9E8F87FF7C16FUL,
    0xF7EC25A3EBEEC726UL,
    0xF488C566413B4232UL,
    0xC1F981A6F74F0C23UL,
    0x0F3B4D4E43177236UL,
    0x6636C535F6CC2725UL,
    0x23428FC53C60919CUL,
    0xAE31E7DF9B5B132EUL,
    0x1D97D1E3A70A649FUL,
    0x9CFA4896C3A53CBBUL,
    0xAB04325045427AAEUL,
    0xCFD778E7904C255EUL,
    0xACFB2463CC22BED2UL,
    0xB2D06FAEDE65B577UL,
    0xE01903C47C7AC89EUL,
    0x02398B627547189CUL,
    0xB893215D8D4C015BUL,
    0x93AE6A61BE015BF1UL,
    0x428BACCDF5E26EADUL,
    0x42A4BEB35D372407UL,
    0x2C8CBFE1EA5FC631UL,
    0x4D9D109F63FEE1D4UL,
    0x279D50DE5652D935UL,
    0xE44A982368A4AF23UL,
    0xF25E02CB9C5818F8UL,
    0xBC3CCA5844452B06UL,
    0x74CD9A9327A282EAUL,
    0x8F5EBAB1F260CFCEUL,
    0x97CE68CB032583F0UL,
    0x182F266C2D9E2BEBUL,
    0x9CCC9525BF2408E0UL,
    0x64473AEFDCF47DCAUL,
    0xAA0A52D24FB98293UL,
    0x89F149B6131E57DAUL,
    0xE6C0C80B8C867537UL,
    0xF051D9BFB6BA39C0UL,
    0x36492C2F0D134C56UL,
    0x48C633E94A8142A7UL,
    0x06582AFF74894C75UL,
    0xDFFCEF48E511DB48UL,
    0x8D474C8FAEFF6CDEUL,
    0x983765856F2564F9UL,
    0xF0E4BA16D1DB546CUL,
    0xF87D9F2301F7D206UL,
    0x4198AB0022B15F87UL,
    0x755D6D5267CBBD7EUL,
    0x4C815EB175086F84UL,
    0x0CDDA42F9E360CA6UL,
    0x4AF9BD80EEBEB453UL,
    0x67B2C79AA7FF5738UL,
    0xAD2D28A1AFDFF131UL,
    0x5991A01434CE9677UL,
    0xB264C4D2F2B0A78BUL,
    0x0E21D3DF1051399DUL,
    0xADF7BE450512C12FUL,
    0xAF03011701811146UL,
    0xD40148F22E81A1D9UL,
    0x873B82D42AC2B9E5UL,
    0x99093F60746708CAUL,
    0x4127F1D84E347769UL,
    0xA1DD82F3CCF9A01EUL,
    0x571FEB383F629926UL,
    0x1F34B0626C594380UL,
    0x2C1D8B3B19E517CCUL,
    0xCBDB9B923CACC92DUL,
    0x1821D91AD4B56108UL,
    0x7BEB0C7A235F6F3BUL,
    0x9768CF648F54C804UL,
    0x877C1EAEAC531023UL,
    0xC0ED6438E6D39BA8UL,
    0xCF1182F682F65307UL,
    0x0D5F65A8F4EBDAB5UL,
    0x6E08BF5B3722BAC9UL,
    0x9A665550F8DA349BUL,
    0xBCBFCD9D1DAC19E2UL,
    0xA17BAD153B51547EUL,
    0x66979ACF5102FD2FUL,
    0x6D8EAC07506291FBUL,
    0xED8286F71A819BAAUL,
    0x685D5561680D088BUL,
    0xE301BD63E9E13CF0UL,
    0x9BDDC73CC6A115D4UL,
    0x56EB5E94318D3FB6UL,
    0x25ECB9F8017D98E0UL,
    0x2C4A1590ABF43E8BUL,
    0xF4FC6A6F67D8D856UL,
    0x563B65A643ED072EUL,
    0xE05DD0E9707003A3UL,
    0x21115BCD6E44656AUL,
    0x29439776AAA00A62UL,
    0xDEDF1C8BD47C2200UL,
    0xBCDF8BAF56C87B6AUL,
    0x300504B23BD3B711UL,
    0xE5810AC70602F2F5UL,
    0x068F64F2470F9656UL,
    0xB8FBC8B1330CA9B4UL,
    0x6A973569BA094650UL,
    0x10655FAB9915623DUL,
    0x79DF7E806202CE01UL,
    0x9007A2F21DC108D4UL,
    0x6E0859B530A365CCUL,
    0x1837AF7C627009BAUL,
    0xA37B9A517B133349UL,
    0xF78F94D60248C737UL,
    0xA46413066687A328UL,
    0x5E569EC46EC21CAEUL,
    0x6D6AF961B72728AEUL,
    0x956B409B984D9BF7UL,
    0x41062318F23ED854UL,
    0xB5C51B5502E85E83UL,
    0xB09D25E77C33EB3FUL,
    0x500873A45724C863UL,
    0xB055A34527CB8FD7UL,
    0x1087BC8EC540DAEBUL,
    0x4AD280EB48B2D8E6UL,
    0xB68CFAF83A02768DUL,
    0x0205F5365292D2EBUL,
    0xCF9159024555488CUL,
    0xF796359A959DF65DUL,
    0x8E0A582209A62695UL,
    0xB93B2867F7B479D1UL,
    0x7619EEE8C886757FUL,
    0x2AA720E4287BF269UL,
    0x8C4B92553E4766A5UL,
    0x35E0654F4BAD7971UL,
    0x83F813570FF519DEUL,
    0xB088E9A47AE6EDD5UL,
    0xDBA3C090E3D74690UL,
    0xF271147EB7B40F12UL,
    0xB77D05AC8C78AADBUL,
    0xDF7E3EEB29642C38UL,
    0x53952FD2BAA19F17UL,
    0x84FD40F56075E816UL,
    0x92922A607497B14DUL,
    0x28B18377EB6E25F6UL,
    0xA7DCDF4DED40A8F4UL,
    0xB8EF61207C2393A9UL,
    0xD4C4642CB7F50B5DUL,
    0xC361AA040D6637A8UL,
    0x99C82F8A139F3E4EUL,
    0x50634E348C8D44EFUL,
    0xE16142B94664DEFDUL,
    0x8074CC1886802912UL,
    0x26D99D5A82FD18E8UL,
    0x84EA99C62CB3EF0CUL,
    0x0BB5CBDDD0F25AE3UL,
    0x1201E8A3290A3B98UL,
    0x8EA86DF356801C7DUL,
    0xC24075310A8B9CD1UL,
    0x5BA68A0840D546ACUL,
    0x4419966C9936071AUL,
    0x870B8B7A766615C8UL,
    0x8533CAFDE1F0F336UL,
    0x4E20D2A627011E8EUL,
    0x45A561A9421AB6ADUL,
    0xD4196117AF7BB974UL,
    0xBB2333BB87DDD87FUL,
    0x73561D4425A021A2UL,
    0x5B91B229243351A8UL,
    0x7BBE7FF626A591FEUL,
    0x65B080555EA48149UL,
    0x428AD3E26C8D9EB0UL,
    0xE2F53F172B45EDE1UL,
    0xBA91D045575699ADUL,
    0x80E3357FDEF45C21UL,
    0xEFC13B1CE30D755DUL,
    0x645F4B6E8499F632UL,
    0xE00F2AB100B76E89UL,
    0x36D782F68B309BDAUL,
    0x3D34E80EED4AE3BEUL,
    0x81E1552E35DC3839UL,
    0xDCA174A42133F08CUL,
    0x1DA0DA9CB3F0C8BFUL,
    0xF660602546D27BA8UL,
    0x5335BE58C083E74EUL,
    0x9078C0C5EF8C19E9UL,
    0xF06A16CA55D138D8UL,
    0xB2E0C0D6922D31F2UL,
    0x44CD1F493DB2A0A6UL,
    0x8181CE2F25CB9BB7UL,
    0xBC9CFF381338CB4FUL,
    0xA916396DF4154EE3UL,
    0x0BFFB028B3DD0A97UL,
    0x3DE51E9C80B116CFUL,
    0x28D034A93FE31BF5UL,
    0x1BBAC99C0BC53656UL,
    0x756AE6E962168A04UL,
    0x9D30687C57BAA0BBUL,
    0x86B4B6212CB8B627UL,
    0x41290B40FA63E6DAUL,
    0x4D610C6B56031351UL,
    0xA74AD2439468C883UL,
    0x0419B167EE128F33UL,
    0xF3B0E0AED097A3F5UL,
    0xD3E51C0AB8C26EEEUL,
    0x9B8E1BF04B51F2E8UL,
    0x72BECCF4B829522EUL,
    0x66E3AAFACE2D1EB8UL,
    0x1312DDD8385AEE4EUL,
    0xEDBC8405B3895CC9UL,
    0x26E13D440E7F6064UL,
    0x2FA2494B47FDD009UL,
    0xFEB2DDED3509562EUL,
    0x544996C0081ABDEBUL,
    0x78CEEE41F49F421FUL,
    0xAF60E6A2936F982AUL,
    0x430A7631A84C9BE7UL,
    0x75627043C6AA90ADUL,
    0x8235F1BEAD557629UL,
    0x9640E30A7F395E4BUL,
    0x0BBB9A7A8FFE931BUL,
    0x94A68DA412C4007DUL,
    0xF4B2ED59DEB5D774UL,
    0xEA12BD130D7569A1UL,
    0x9BDA23BF666F0855UL,
    0xF846AA63DF56B804UL,
    0x0A3F820A9A9A9AC5UL,
    0x51F30DB60626A20EUL,
    0x97841634EF7DF1D6UL,
    0xD138FA15C9776837UL,
    0x438B3D7CA026FE91UL,
    0xF1211889DF15A763UL,
    0x2D55FE374D5FDB91UL,
    0x3A9128352EAC9E85UL,
    0x8DC9675797123522UL,
    0xB251E0B33E58B424UL,
    0xAEF12960FA943792UL,
    0xAA653AE61924B0A0UL,
    0xC60060EB0D8AC7B1UL,
    0x70A252F60A3E036BUL,
    0xE615BB7A7752C76AUL,
    0x887FA38787DE8C72UL,
    0x498218259FB7C72DUL,
    0x41B9FB92EDED32A6UL,
    0x36DE109527A2C0C4UL,
    0x82E0AC411E41A5B4UL,
    0x99A05839C46CE316UL,
    0xA2459F72C14E2E8DUL,
    0xE8718FAF591FD224UL,
    0x04F2FA6E234162F7UL,
    0x143921E45EC44D62UL,
    0xC8E9B6B71B8E660DUL,
    0x2970EAA18FD5E42FUL,
    0x211E95CE9903940CUL,
    0x5BBCF35BF6E456F7UL,
    0x71AFB258CCED3A27UL,
    0xAE71FB656C600587UL,
    0x0506ED94363AD905UL,
    0x8F0D5BA1C2CC91D7UL,
    0x55EAB010FAEE9380UL,
    0x74C68EF97645E79DUL,
    0x6E387895952F4F71UL,
    0x01894E2EDE923CA2UL,
    0xC970D0E0FC31D768UL,
    0xF8B49F5BA7F850E7UL,
    0x3A375167F5782A65UL,
    0x5AC79C98C5C17F05UL,
    0x2F5A72430E78C8D3UL,
    0xEC0C1D4922AF9754UL,
    0xEF9D388F8D377F44UL,
    0xF6829842C06AE524UL,
    0x8EE6B53CE13A9794UL,
    0xFFA5D878809819DBUL,
    0x8974647ED222EA5FUL,
    0x2B3451FA1E3142E2UL,
    0xC443FD757C3BA637UL,
    0xFDBF4CDBC07E1706UL,
    0xB1252E3E59A82AAFUL,
    0xB96B00E976BE977FUL,
    0x2B2A2CC86778B619UL,
    0x547237AA71AB44DEUL,
    0x5E5E99285AE812DBUL,
    0xC8B46D7727D864AAUL,
    0x0DB57B41EC1DB083UL,
    0xF46CDC33180FDA94UL,
    0x4215460B9B8B7FA0UL,
    0xC3287EE3050FB74CUL,
    0x6558AC7C17BFEF58UL,
    0x4D1CB8DC40208A17UL,
    0xADF692B254977C0CUL,
    0x3A87E44BB9A01D54UL,
    0x3B390A939AF0B5FCUL,
    0x8483E98E8B888AE2UL,
    0x75C55983C2C39DAAUL,
    0x1017582BCD3832DCUL,
    0x50276EF8172F5F12UL,
    0x475768A975D5AD17UL,
    0x937C71165CF334B3UL,
    0x8DECB02F88F428BCUL,
    0xB80CA294F2F26749UL,
    0xEFFED78E9011134DUL,
    0x015A522136D7F951UL,
    0x78F0424C34306220UL,
    0x14E56BC5B5DB6A19UL,
    0x3EDCB0505123623BUL,
    0x183DADC6AA953186UL,
    0x24C024BA8379A70AUL,
    0xBF0FD6E56C964FCBUL,
    0xB282DC6EBD803C75UL,
    0xF25DF915FA38C5F3UL,
    0x4899CB088EDF59B8UL,
    0x6F6981D2253C208FUL,
    0x0725A4CCFDED9A70UL,
    0x476AE72C1D19D1A8UL,
    0x2D343D2219CD027AUL,
    0x0E98F88A24C5F4B8UL,
    0x131D401334815E94UL,
    0xAC678E40BE7C74D2UL,
    0x6B7513D9966FBEC0UL,
    0x208A1888007FC0E6UL,
    0xA38DCFFCEA8962FAUL,
    0x2E1202248937775CUL,
    0xDCD2A934D65CB497UL,
    0xDC16122C7A20C933UL,
    0x585847C5E4E11709UL,
    0x2472622CE1F2D45FUL,
    0x5FD1E1F011E76D7EUL,
    0x39D22031557946C1UL,
    0xA4EFEF9440A5B0EFUL,
    0xE620FD3512A04F18UL,
    0x7FEAD38B326B9F74UL,
    0xF489B44DD5AF4BD9UL,
    0x6C4D0409BA1A2BC2UL,
    0xD0D7B1E680ED4A1AUL,
    0xF731332072F5156CUL,
    0x0A6DB4965674D243UL,
    0xFC4BD125DE7611E4UL,
    0xFC52E0F37E446528UL,
    0x840F03E9041E2C9CUL,
    0x814C9D19DFD69679UL,
    0x717C8481234E3B88UL,
    0xD966D51AA5B28BB9UL,
    0x1E8BE90C74FB4C09UL,
    0xC593212475FAE340UL,
    0x0D78DE0572D3969EUL,
    0x8C0D57EA686FAD87UL,
    0x20AE33F3AC9C0033UL,
    0x5443438F033E29C3UL,
    0x36E353271F0E90EEUL,
    0xAA08EF13F341C8FCUL,
    0x9541D3CF0D398F36UL,
    0x33E179436C0B31DBUL,
    0xF7D82B0D66777611UL,
    0x76A18844E743BF91UL,
    0xB1FA61371AF7C4B7UL,
    0x5CEE3DF569CECAB0UL,
    0xCAE1DC9A0E22A16DUL,
    0x68F8BE6AF5CDF8A6UL,
    0x50969B9B89ED5738UL,
    0x2B9EEDC07BD06B9FUL,
    0xF827589017D4E4A9UL,
    0xCD183314F7CD2E57UL,
    0x5DCF6C5CAB2E9BF7UL,
    0x9FE5633880ECD8EDUL,
    0xF0A60040BE558F2DUL,
    0x5DA825A85D0EA6E6UL,
    0xB3EA4FEABF41464BUL,
    0xA2C9AC24B4061285UL,
    0x977CA98939E82E4BUL,
    0xD92C739EE34C9EBAUL,
    0xB3CAF387AE12E9F8UL,
    0x3133B907D8B32053UL,
    0x583BE370B1EC6EB4UL,
    0x065D2AACAD8CF7A4UL,
    0x8378627201D5497DUL,
    0xB4C8D77C80C0421EUL,
    0x48164DBB970AC3F0UL,
    0x4757F00BC6323CFEUL,
    0x4AE5AC8B852D642CUL,
    0xE6D2CEDD370FF98EUL,
    0x65F0C5AE05943EC7UL,
    0x4B7620C47217126CUL,
    0xCEA66DAD478CD39BUL,
    0x988DB6FE9B3AC000UL,
    0x1055AC3A667F09D9UL,
    0x3BE0BB12D25FB305UL,
    0xE4DCEC7FD5B739A5UL,
    0xBC7BE5ABC0879F74UL,
    0x91EF34584710BE99UL,
    0x9DA58CDBF6BDBC08UL,
    0x0ABF535877897560UL,
    0x1E45B34ADEBEE48EUL,
    0xECDC202B25E5CF48UL,
    0xDAB963831DBFD3F4UL,
    0x44F1012B69313374UL,
    0xCD79A550999D7D4FUL,
    0xB4771B9AAF4E68E4UL,
    0xEFF296097FF1E509UL,
    0x27040C25DE6CB2F4UL,
    0x98CD1D2934B76CC1UL,
    0x4334BC40AA0CB4BBUL,
    0xCD90657D4C30E1CAUL,
    0xBA5ECEEA120E5611UL,
    0x5F7B268D15BA0739UL,
    0x5F7D596BAC2E7777UL,
    0x5C0DE367AA0D911CUL,
    0x7EE64D51E8498728UL,
};

inline void* pointers[] = {
    (void*) Native_wait,
    (void*) Native_startNewScript,
    (void*) Native_startNewScriptWithArgs,
    (void*) Native_startNewScriptWithNameHash,
    (void*) Native_startNewScriptWithNameHashAndArgs,
    (void*) Native_timera,
    (void*) Native_timerb,
    (void*) Native_settimera,
    (void*) Native_settimerb,
    (void*) Native_timestep,
    (void*) Native_sin,
    (void*) Native_cos,
    (void*) Native_sqrt,
    (void*) Native_pow,
    (void*) Native_log10,
    (void*) Native_vmag,
    (void*) Native_vmag2,
    (void*) Native_vdist,
    (void*) Native_vdist2,
    (void*) Native_shiftLeft,
    (void*) Native_shiftRight,
    (void*) Native_floor,
    (void*) Native_ceil,
    (void*) Native_round,
    (void*) Native_toFloat,
    (void*) Native_setThisThreadPriority,
    (void*) Native_appDataValid,
    (void*) Native_appGetInt,
    (void*) Native_appGetFloat,
    (void*) Native_appGetString,
    (void*) Native_appSetInt,
    (void*) Native_appSetFloat,
    (void*) Native_appSetString,
    (void*) Native_appSetApp,
    (void*) Native_appSetBlock,
    (void*) Native_appClearBlock,
    (void*) Native_appCloseApp,
    (void*) Native_appCloseBlock,
    (void*) Native_appHasLinkedSocialClubAccount,
    (void*) Native_appHasSyncedData,
    (void*) Native_appSaveData,
    (void*) Native_appGetDeletedFileStatus,
    (void*) Native_appDeleteAppData,
    (void*) Native_setDebugLinesAndSpheresDrawingActive,
    (void*) Native_drawDebugLine,
    (void*) Native_drawDebugLineWithTwoColours,
    (void*) Native_drawDebugSphere,
    (void*) Native_drawDebugBox,
    (void*) Native_drawDebugCross,
    (void*) Native_drawDebugText,
    (void*) Native_drawDebugText2d,
    (void*) Native_drawLine,
    (void*) Native_drawPoly,
    (void*) Native_drawTexturedPoly,
    (void*) Native_drawTexturedPolyWithThreeColours,
    (void*) Native_drawBox,
    (void*) Native_setBackfaceculling,
    (void*) Native_setDepthwriting,
    (void*) Native_beginTakeMissionCreatorPhoto,
    (void*) Native_getStatusOfTakeMissionCreatorPhoto,
    (void*) Native_freeMemoryForMissionCreatorPhoto,
    (void*) Native_loadMissionCreatorPhoto,
    (void*) Native_getStatusOfLoadMissionCreatorPhoto,
    (void*) Native_beginCreateMissionCreatorPhotoPreview,
    (void*) Native_getStatusOfCreateMissionCreatorPhotoPreview,
    (void*) Native_freeMemoryForMissionCreatorPhotoPreview,
    (void*) Native_beginTakeHighQualityPhoto,
    (void*) Native_getStatusOfTakeHighQualityPhoto,
    (void*) Native_freeMemoryForHighQualityPhoto,
    (void*) Native_setTakenPhotoIsMugshot,
    (void*) Native_setArenaThemeAndVariationForTakenPhoto,
    (void*) Native_saveHighQualityPhoto,
    (void*) Native_getStatusOfSaveHighQualityPhoto,
    (void*) Native_beginCreateLowQualityCopyOfPhoto,
    (void*) Native_getStatusOfCreateLowQualityCopyOfPhoto,
    (void*) Native_freeMemoryForLowQualityPhoto,
    (void*) Native_drawLowQualityPhotoToPhone,
    (void*) Native_getMaximumNumberOfPhotos,
    (void*) Native_getMaximumNumberOfCloudPhotos,
    (void*) Native_getCurrentNumberOfCloudPhotos,
    (void*) Native_queueOperationToCreateSortedListOfPhotos,
    (void*) Native_getStatusOfSortedListOperation,
    (void*) Native_clearStatusOfSortedListOperation,
    (void*) Native_doesThisPhotoSlotContainAValidPhoto,
    (void*) Native_loadHighQualityPhoto,
    (void*) Native_getLoadHighQualityPhotoStatus,
    (void*) Native_drawLightWithRangeex,
    (void*) Native_drawLightWithRange,
    (void*) Native_drawSpotLight,
    (void*) Native_drawShadowedSpotLight,
    (void*) Native_fadeUpPedLight,
    (void*) Native_updateLightsOnEntity,
    (void*) Native_setLightOverrideMaxIntensityScale,
    (void*) Native_getLightOverrideMaxIntensityScale,
    (void*) Native_drawMarker,
    (void*) Native_drawMarkerEx,
    (void*) Native_drawMarkerSphere,
    (void*) Native_createCheckpoint,
    (void*) Native_setCheckpointInsideCylinderHeightScale,
    (void*) Native_setCheckpointInsideCylinderScale,
    (void*) Native_setCheckpointCylinderHeight,
    (void*) Native_setCheckpointRgba,
    (void*) Native_setCheckpointRgba2,
    (void*) Native_setCheckpointClipplaneWithPosNorm,
    (void*) Native_setCheckpointForceOldArrowPointing,
    (void*) Native_setCheckpointDecalRotAlignedToCameraRot,
    (void*) Native_setCheckpointForceDirection,
    (void*) Native_setCheckpointDirection,
    (void*) Native_deleteCheckpoint,
    (void*) Native_dontRenderInGameUi,
    (void*) Native_forceRenderInGameUi,
    (void*) Native_requestStreamedTextureDict,
    (void*) Native_hasStreamedTextureDictLoaded,
    (void*) Native_setStreamedTextureDictAsNoLongerNeeded,
    (void*) Native_drawRect,
    (void*) Native_setScriptGfxDrawBehindPausemenu,
    (void*) Native_setScriptGfxDrawOrder,
    (void*) Native_setScriptGfxAlign,
    (void*) Native_resetScriptGfxAlign,
    (void*) Native_setScriptGfxAlignParams,
    (void*) Native_getScriptGfxAlignPosition,
    (void*) Native_getSafeZoneSize,
    (void*) Native_drawSprite,
    (void*) Native_drawSpriteArx,
    (void*) Native_drawSpriteNamedRendertarget,
    (void*) Native_drawSpriteArxWithUv,
    (void*) Native_addEntityIcon,
    (void*) Native_setEntityIconVisibility,
    (void*) Native_setEntityIconColor,
    (void*) Native_setDrawOrigin,
    (void*) Native_clearDrawOrigin,
    (void*) Native_setBinkMovie,
    (void*) Native_playBinkMovie,
    (void*) Native_stopBinkMovie,
    (void*) Native_releaseBinkMovie,
    (void*) Native_drawBinkMovie,
    (void*) Native_setBinkMovieTime,
    (void*) Native_getBinkMovieTime,
    (void*) Native_setBinkMovieVolume,
    (void*) Native_attachTvAudioToEntity,
    (void*) Native_setBinkMovieAudioFrontend,
    (void*) Native_setTvAudioFrontend,
    (void*) Native_setBinkShouldSkip,
    (void*) Native_loadMovieMeshSet,
    (void*) Native_releaseMovieMeshSet,
    (void*) Native_queryMovieMeshSetState,
    (void*) Native_getScreenResolution,
    (void*) Native_getActualScreenResolution,
    (void*) Native_getAspectRatio,
    (void*) Native_getScreenAspectRatio,
    (void*) Native_getIsWidescreen,
    (void*) Native_getIsHidef,
    (void*) Native_adjustNextPosSizeAsNormalized169,
    (void*) Native_setNightvision,
    (void*) Native_getRequestingnightvision,
    (void*) Native_getUsingnightvision,
    (void*) Native_setExposuretweak,
    (void*) Native_forceExposureReadback,
    (void*) Native_overrideNightvisionLightRange,
    (void*) Native_setNoiseoveride,
    (void*) Native_setNoisinessoveride,
    (void*) Native_getScreenCoordFromWorldCoord,
    (void*) Native_getTextureResolution,
    (void*) Native_overridePedCrewLogoTexture,
    (void*) Native_setDistanceBlurStrengthOverride,
    (void*) Native_setFlash,
    (void*) Native_disableOcclusionThisFrame,
    (void*) Native_setArtificialLightsState,
    (void*) Native_setArtificialVehicleLightsState,
    (void*) Native_disableHdtexThisFrame,
    (void*) Native_createTrackedPoint,
    (void*) Native_setTrackedPointInfo,
    (void*) Native_isTrackedPointVisible,
    (void*) Native_destroyTrackedPoint,
    (void*) Native_setGrassCullSphere,
    (void*) Native_removeGrassCullSphere,
    (void*) Native_procgrassEnableCullsphere,
    (void*) Native_procgrassDisableCullsphere,
    (void*) Native_procgrassIsCullsphereEnabled,
    (void*) Native_procgrassEnableAmbscalescan,
    (void*) Native_procgrassDisableAmbscalescan,
    (void*) Native_disableProcobjCreation,
    (void*) Native_enableProcobjCreation,
    (void*) Native_grassbatchEnableFlatteningExtInSphere,
    (void*) Native_grassbatchEnableFlatteningInSphere,
    (void*) Native_grassbatchDisableFlattening,
    (void*) Native_cascadeShadowsInitSession,
    (void*) Native_cascadeShadowsSetCascadeBounds,
    (void*) Native_cascadeShadowsSetCascadeBoundsScale,
    (void*) Native_cascadeShadowsSetEntityTrackerScale,
    (void*) Native_cascadeShadowsSetSplitZExpWeight,
    (void*) Native_cascadeShadowsSetBoundPosition,
    (void*) Native_cascadeShadowsEnableEntityTracker,
    (void*) Native_cascadeShadowsSetScreenSizeCheckEnabled,
    (void*) Native_cascadeShadowsSetShadowSampleType,
    (void*) Native_cascadeShadowsClearShadowSampleType,
    (void*) Native_cascadeShadowsSetAircraftMode,
    (void*) Native_cascadeShadowsSetDynamicDepthMode,
    (void*) Native_cascadeShadowsSetDynamicDepthValue,
    (void*) Native_cascadeShadowsEnableFreezer,
    (void*) Native_waterReflectionSetScriptObjectVisibility,
    (void*) Native_golfTrailSetEnabled,
    (void*) Native_golfTrailSetPath,
    (void*) Native_golfTrailSetRadius,
    (void*) Native_golfTrailSetColour,
    (void*) Native_golfTrailSetTessellation,
    (void*) Native_golfTrailSetFixedControlPointEnable,
    (void*) Native_golfTrailSetFixedControlPoint,
    (void*) Native_golfTrailSetShaderParams,
    (void*) Native_golfTrailSetFacing,
    (void*) Native_golfTrailGetMaxHeight,
    (void*) Native_golfTrailGetVisualControlPoint,
    (void*) Native_setSeethrough,
    (void*) Native_getUsingseethrough,
    (void*) Native_seethroughReset,
    (void*) Native_seethroughSetFadeStartdistance,
    (void*) Native_seethroughSetFadeEnddistance,
    (void*) Native_seethroughGetMaxThickness,
    (void*) Native_seethroughSetMaxThickness,
    (void*) Native_seethroughSetNoiseMin,
    (void*) Native_seethroughSetNoiseMax,
    (void*) Native_seethroughSetHilightIntensity,
    (void*) Native_seethroughSetHighlightNoise,
    (void*) Native_seethroughSetHeatscale,
    (void*) Native_seethroughSetColorNear,
    (void*) Native_setMotionblurMaxVelScaler,
    (void*) Native_getMotionblurMaxVelScaler,
    (void*) Native_setForceMotionblur,
    (void*) Native_togglePlayerDamageOverlay,
    (void*) Native_resetAdaptation,
    (void*) Native_triggerScreenblurFadeIn,
    (void*) Native_triggerScreenblurFadeOut,
    (void*) Native_disableScreenblurFade,
    (void*) Native_getScreenblurFadeCurrentTime,
    (void*) Native_isScreenblurFadeRunning,
    (void*) Native_togglePausedRenderphases,
    (void*) Native_getTogglePausedRenderphasesStatus,
    (void*) Native_resetPausedRenderphases,
    (void*) Native_grabPausemenuOwnership,
    (void*) Native_setHidofOverride,
    (void*) Native_setLockAdaptiveDofDistance,
    (void*) Native_phonephotoeditorToggle,
    (void*) Native_phonephotoeditorIsActive,
    (void*) Native_phonephotoeditorSetFrameTxd,
    (void*) Native_startParticleFxNonLoopedAtCoord,
    (void*) Native_startNetworkedParticleFxNonLoopedAtCoord,
    (void*) Native_startParticleFxNonLoopedOnPedBone,
    (void*) Native_startNetworkedParticleFxNonLoopedOnPedBone,
    (void*) Native_startParticleFxNonLoopedOnEntity,
    (void*) Native_startNetworkedParticleFxNonLoopedOnEntity,
    (void*) Native_startParticleFxNonLoopedOnEntityBone,
    (void*) Native_setParticleFxNonLoopedColour,
    (void*) Native_setParticleFxNonLoopedAlpha,
    (void*) Native_setParticleFxNonLoopedEmitterSize,
    (void*) Native_setParticleFxForceVehicleInterior,
    (void*) Native_startParticleFxLoopedAtCoord,
    (void*) Native_startParticleFxLoopedOnPedBone,
    (void*) Native_startParticleFxLoopedOnEntity,
    (void*) Native_startParticleFxLoopedOnEntityBone,
    (void*) Native_startNetworkedParticleFxLoopedOnEntity,
    (void*) Native_startNetworkedParticleFxLoopedOnEntityBone,
    (void*) Native_stopParticleFxLooped,
    (void*) Native_removeParticleFx,
    (void*) Native_removeParticleFxFromEntity,
    (void*) Native_removeParticleFxInRange,
    (void*) Native_forceParticleFxInVehicleInterior,
    (void*) Native_doesParticleFxLoopedExist,
    (void*) Native_setParticleFxLoopedOffsets,
    (void*) Native_setParticleFxLoopedEvolution,
    (void*) Native_setParticleFxLoopedColour,
    (void*) Native_setParticleFxLoopedAlpha,
    (void*) Native_setParticleFxLoopedScale,
    (void*) Native_setParticleFxLoopedFarClipDist,
    (void*) Native_setParticleFxCamInsideVehicle,
    (void*) Native_setParticleFxCamInsideNonplayerVehicle,
    (void*) Native_setParticleFxShootoutBoat,
    (void*) Native_clearParticleFxShootoutBoat,
    (void*) Native_setParticleFxBloodScale,
    (void*) Native_disableInWaterPtfx,
    (void*) Native_disableDownwashPtfx,
    (void*) Native_setParticleFxSlipstreamLodrangeScale,
    (void*) Native_enableClownBloodVfx,
    (void*) Native_enableAlienBloodVfx,
    (void*) Native_setParticleFxBulletImpactScale,
    (void*) Native_setParticleFxBulletImpactLodrangeScale,
    (void*) Native_setParticleFxBulletTraceNoAngleReject,
    (void*) Native_setParticleFxBangScrapeLodrangeScale,
    (void*) Native_setParticleFxFootLodrangeScale,
    (void*) Native_setParticleFxFootOverrideName,
    (void*) Native_setSkidmarkRangeScale,
    (void*) Native_setPtfxForceVehicleInteriorFlag,
    (void*) Native_forcePostfxBulletImpactsAfterHud,
    (void*) Native_useParticleFxAsset,
    (void*) Native_setParticleFxOverride,
    (void*) Native_resetParticleFxOverride,
    (void*) Native_setWeatherPtfxUseOverrideSettings,
    (void*) Native_setWeatherPtfxOverrideCurrLevel,
    (void*) Native_washDecalsInRange,
    (void*) Native_washDecalsFromVehicle,
    (void*) Native_fadeDecalsInRange,
    (void*) Native_removeDecalsInRange,
    (void*) Native_removeDecalsFromObject,
    (void*) Native_removeDecalsFromObjectFacing,
    (void*) Native_removeDecalsFromVehicle,
    (void*) Native_addDecal,
    (void*) Native_addPetrolDecal,
    (void*) Native_addOilDecal,
    (void*) Native_startPetrolTrailDecals,
    (void*) Native_addPetrolTrailDecalInfo,
    (void*) Native_endPetrolTrailDecals,
    (void*) Native_removeDecal,
    (void*) Native_isDecalAlive,
    (void*) Native_getDecalWashLevel,
    (void*) Native_setDisablePetrolDecalsIgnitingThisFrame,
    (void*) Native_setDisablePetrolDecalsRecyclingThisFrame,
    (void*) Native_setDisableDecalRenderingThisFrame,
    (void*) Native_getIsPetrolDecalInRange,
    (void*) Native_patchDecalDiffuseMap,
    (void*) Native_unpatchDecalDiffuseMap,
    (void*) Native_moveVehicleDecals,
    (void*) Native_addVehicleCrewEmblem,
    (void*) Native_abortVehicleCrewEmblemRequest,
    (void*) Native_removeVehicleCrewEmblem,
    (void*) Native_getVehicleCrewEmblemRequestState,
    (void*) Native_doesVehicleHaveCrewEmblem,
    (void*) Native_disableCompositeShotgunDecals,
    (void*) Native_disableScuffDecals,
    (void*) Native_setDecalBulletImpactRangeScale,
    (void*) Native_overrideInteriorSmokeName,
    (void*) Native_overrideInteriorSmokeLevel,
    (void*) Native_overrideInteriorSmokeEnd,
    (void*) Native_registerNoirLensEffect,
    (void*) Native_disableVehicleDistantlights,
    (void*) Native_renderShadowedLightsWithNoShadows,
    (void*) Native_requestEarlyLightCheck,
    (void*) Native_useSnowFootVfxWhenUnsheltered,
    (void*) Native_useSnowWheelVfxWhenUnsheltered,
    (void*) Native_disableRegionVfx,
    (void*) Native_presetInteriorAmbientCache,
    (void*) Native_setTimecycleModifier,
    (void*) Native_setTimecycleModifierStrength,
    (void*) Native_setTransitionTimecycleModifier,
    (void*) Native_setTransitionOutOfTimecycleModifier,
    (void*) Native_clearTimecycleModifier,
    (void*) Native_getTimecycleModifierIndex,
    (void*) Native_getTimecycleTransitionModifierIndex,
    (void*) Native_getIsTimecycleTransitioningOut,
    (void*) Native_pushTimecycleModifier,
    (void*) Native_popTimecycleModifier,
    (void*) Native_setCurrentPlayerTcmodifier,
    (void*) Native_setPlayerTcmodifierTransition,
    (void*) Native_setNextPlayerTcmodifier,
    (void*) Native_addTcmodifierOverride,
    (void*) Native_clearAllTcmodifierOverrides,
    (void*) Native_setExtraTcmodifier,
    (void*) Native_clearExtraTcmodifier,
    (void*) Native_getExtraTcmodifier,
    (void*) Native_enableMoonCycleOverride,
    (void*) Native_disableMoonCycleOverride,
    (void*) Native_requestScaleformMovie,
    (void*) Native_requestScaleformMovieInstance,
    (void*) Native_requestScaleformMovieSkipRenderWhilePaused,
    (void*) Native_hasScaleformMovieLoaded,
    (void*) Native_isActiveScaleformMovieDeleting,
    (void*) Native_isScaleformMovieDeleting,
    (void*) Native_hasScaleformMovieFilenameLoaded,
    (void*) Native_hasScaleformContainerMovieLoadedIntoParent,
    (void*) Native_setScaleformMovieAsNoLongerNeeded,
    (void*) Native_setScaleformMovieToUseSystemTime,
    (void*) Native_setScaleformMovieToUseLargeRt,
    (void*) Native_setScaleformMovieToUseSuperLargeRt,
    (void*) Native_drawScaleformMovie,
    (void*) Native_drawScaleformMovieFullscreen,
    (void*) Native_drawScaleformMovieFullscreenMasked,
    (void*) Native_drawScaleformMovie3d,
    (void*) Native_drawScaleformMovie3dSolid,
    (void*) Native_callScaleformMovieMethod,
    (void*) Native_callScaleformMovieMethodWithNumber,
    (void*) Native_callScaleformMovieMethodWithString,
    (void*) Native_callScaleformMovieMethodWithNumberAndString,
    (void*) Native_beginScaleformScriptHudMovieMethod,
    (void*) Native_beginScaleformMovieMethod,
    (void*) Native_beginScaleformMovieMethodOnFrontend,
    (void*) Native_beginScaleformMovieMethodOnFrontendHeader,
    (void*) Native_endScaleformMovieMethod,
    (void*) Native_endScaleformMovieMethodReturnValue,
    (void*) Native_isScaleformMovieMethodReturnValueReady,
    (void*) Native_getScaleformMovieMethodReturnValueInt,
    (void*) Native_getScaleformMovieMethodReturnValueBool,
    (void*) Native_getScaleformMovieMethodReturnValueString,
    (void*) Native_scaleformMovieMethodAddParamInt,
    (void*) Native_scaleformMovieMethodAddParamFloat,
    (void*) Native_scaleformMovieMethodAddParamBool,
    (void*) Native_beginTextCommandScaleformString,
    (void*) Native_endTextCommandScaleformString,
    (void*) Native_endTextCommandUnparsedScaleformString,
    (void*) Native_scaleformMovieMethodAddParamLiteralString,
    (void*) Native_scaleformMovieMethodAddParamTextureNameString,
    (void*) Native_scaleformMovieMethodAddParamPlayerNameString,
    (void*) Native_doesLatestBriefStringExist,
    (void*) Native_scaleformMovieMethodAddParamLatestBriefString,
    (void*) Native_requestScaleformScriptHudMovie,
    (void*) Native_hasScaleformScriptHudMovieLoaded,
    (void*) Native_removeScaleformScriptHudMovie,
    (void*) Native_passKeyboardInputToScaleform,
    (void*) Native_setTvChannel,
    (void*) Native_getTvChannel,
    (void*) Native_setTvVolume,
    (void*) Native_getTvVolume,
    (void*) Native_drawTvChannel,
    (void*) Native_setTvChannelPlaylist,
    (void*) Native_setTvChannelPlaylistAtHour,
    (void*) Native_clearTvChannelPlaylist,
    (void*) Native_isPlaylistOnChannel,
    (void*) Native_isTvshowCurrentlyPlaying,
    (void*) Native_enableMovieKeyframeWait,
    (void*) Native_setTvPlayerWatchingThisFrame,
    (void*) Native_getCurrentTvClipNamehash,
    (void*) Native_enableMovieSubtitles,
    (void*) Native_ui3dsceneIsAvailable,
    (void*) Native_ui3dscenePushPreset,
    (void*) Native_ui3dsceneAssignPedToSlot,
    (void*) Native_ui3dsceneClearPatchedData,
    (void*) Native_ui3dsceneMakePushedPresetPersistent,
    (void*) Native_terraingridActivate,
    (void*) Native_terraingridSetParams,
    (void*) Native_terraingridSetColours,
    (void*) Native_animpostfxPlay,
    (void*) Native_animpostfxStop,
    (void*) Native_animpostfxGetCurrentTime,
    (void*) Native_animpostfxIsRunning,
    (void*) Native_animpostfxStopAll,
    (void*) Native_animpostfxStopAndFlushRequests,
    (void*) Native_playPedRingtone,
    (void*) Native_isPedRingtonePlaying,
    (void*) Native_stopPedRingtone,
    (void*) Native_isMobilePhoneCallOngoing,
    (void*) Native_isMobileInterferenceActive,
    (void*) Native_createNewScriptedConversation,
    (void*) Native_addLineToConversation,
    (void*) Native_addPedToConversation,
    (void*) Native_setPositionForNullConvPed,
    (void*) Native_setEntityForNullConvPed,
    (void*) Native_setMicrophonePosition,
    (void*) Native_setConversationAudioControlledByAnim,
    (void*) Native_setConversationAudioPlaceholder,
    (void*) Native_startScriptPhoneConversation,
    (void*) Native_preloadScriptPhoneConversation,
    (void*) Native_startScriptConversation,
    (void*) Native_preloadScriptConversation,
    (void*) Native_startPreloadedConversation,
    (void*) Native_getIsPreloadedConversationReady,
    (void*) Native_isScriptedConversationOngoing,
    (void*) Native_isScriptedConversationLoaded,
    (void*) Native_getCurrentScriptedConversationLine,
    (void*) Native_pauseScriptedConversation,
    (void*) Native_restartScriptedConversation,
    (void*) Native_stopScriptedConversation,
    (void*) Native_skipToNextScriptedConversationLine,
    (void*) Native_interruptConversation,
    (void*) Native_interruptConversationAndPause,
    (void*) Native_getVariationChosenForScriptedLine,
    (void*) Native_setNoDuckingForConversation,
    (void*) Native_registerScriptWithAudio,
    (void*) Native_unregisterScriptWithAudio,
    (void*) Native_requestMissionAudioBank,
    (void*) Native_requestAmbientAudioBank,
    (void*) Native_requestScriptAudioBank,
    (void*) Native_hintMissionAudioBank,
    (void*) Native_hintAmbientAudioBank,
    (void*) Native_hintScriptAudioBank,
    (void*) Native_releaseMissionAudioBank,
    (void*) Native_releaseAmbientAudioBank,
    (void*) Native_releaseNamedScriptAudioBank,
    (void*) Native_releaseScriptAudioBank,
    (void*) Native_unhintAmbientAudioBank,
    (void*) Native_unhintScriptAudioBank,
    (void*) Native_unhintNamedScriptAudioBank,
    (void*) Native_getSoundId,
    (void*) Native_releaseSoundId,
    (void*) Native_playSound,
    (void*) Native_playSoundFrontend,
    (void*) Native_playDeferredSoundFrontend,
    (void*) Native_playSoundFromEntity,
    (void*) Native_playSoundFromEntityHash,
    (void*) Native_playSoundFromCoord,
    (void*) Native_updateSoundCoord,
    (void*) Native_stopSound,
    (void*) Native_getNetworkIdFromSoundId,
    (void*) Native_getSoundIdFromNetworkId,
    (void*) Native_setVariableOnSound,
    (void*) Native_setVariableOnStream,
    (void*) Native_overrideUnderwaterStream,
    (void*) Native_setVariableOnUnderWaterStream,
    (void*) Native_hasSoundFinished,
    (void*) Native_playPedAmbientSpeechNative,
    (void*) Native_playPedAmbientSpeechAndCloneNative,
    (void*) Native_playPedAmbientSpeechWithVoiceNative,
    (void*) Native_playAmbientSpeechFromPositionNative,
    (void*) Native_overrideTrevorRage,
    (void*) Native_resetTrevorRage,
    (void*) Native_setPlayerAngry,
    (void*) Native_playPain,
    (void*) Native_releaseWeaponAudio,
    (void*) Native_activateAudioSlowmoMode,
    (void*) Native_deactivateAudioSlowmoMode,
    (void*) Native_setAmbientVoiceName,
    (void*) Native_setAmbientVoiceNameHash,
    (void*) Native_getAmbientVoiceNameHash,
    (void*) Native_setPedVoiceFull,
    (void*) Native_setPedRaceAndVoiceGroup,
    (void*) Native_setPedVoiceGroup,
    (void*) Native_setPedVoiceGroupFromRaceToPvg,
    (void*) Native_setPedGender,
    (void*) Native_stopCurrentPlayingSpeech,
    (void*) Native_stopCurrentPlayingAmbientSpeech,
    (void*) Native_isAmbientSpeechPlaying,
    (void*) Native_isScriptedSpeechPlaying,
    (void*) Native_isAnySpeechPlaying,
    (void*) Native_isAnyPositionalSpeechPlaying,
    (void*) Native_doesContextExistForThisPed,
    (void*) Native_isPedInCurrentConversation,
    (void*) Native_setPedIsDrunk,
    (void*) Native_playAnimalVocalization,
    (void*) Native_isAnimalVocalizationPlaying,
    (void*) Native_setAnimalMood,
    (void*) Native_isMobilePhoneRadioActive,
    (void*) Native_setMobilePhoneRadioState,
    (void*) Native_getPlayerRadioStationIndex,
    (void*) Native_getPlayerRadioStationName,
    (void*) Native_getRadioStationName,
    (void*) Native_getPlayerRadioStationGenre,
    (void*) Native_isRadioRetuning,
    (void*) Native_isRadioFadedOut,
    (void*) Native_setRadioRetuneUp,
    (void*) Native_setRadioRetuneDown,
    (void*) Native_setRadioToStationName,
    (void*) Native_setVehRadioStation,
    (void*) Native_setVehHasNormalRadio,
    (void*) Native_isVehicleRadioOn,
    (void*) Native_setVehForcedRadioThisFrame,
    (void*) Native_setEmitterRadioStation,
    (void*) Native_setStaticEmitterEnabled,
    (void*) Native_linkStaticEmitterToEntity,
    (void*) Native_setRadioToStationIndex,
    (void*) Native_setFrontendRadioActive,
    (void*) Native_unlockMissionNewsStory,
    (void*) Native_isMissionNewsStoryUnlocked,
    (void*) Native_getAudibleMusicTrackTextId,
    (void*) Native_playEndCreditsMusic,
    (void*) Native_skipRadioForward,
    (void*) Native_freezeRadioStation,
    (void*) Native_unfreezeRadioStation,
    (void*) Native_setRadioAutoUnfreeze,
    (void*) Native_setInitialPlayerStation,
    (void*) Native_setUserRadioControlEnabled,
    (void*) Native_setRadioTrack,
    (void*) Native_setRadioTrackWithStartOffset,
    (void*) Native_setNextRadioTrack,
    (void*) Native_setVehicleRadioLoud,
    (void*) Native_canVehicleReceiveCbRadio,
    (void*) Native_setMobileRadioEnabledDuringGameplay,
    (void*) Native_doesPlayerVehHaveRadio,
    (void*) Native_isPlayerVehRadioEnable,
    (void*) Native_setVehicleRadioEnabled,
    (void*) Native_setPositionedPlayerVehicleRadioEmitterEnabled,
    (void*) Native_setCustomRadioTrackList,
    (void*) Native_clearCustomRadioTrackList,
    (void*) Native_getNumUnlockedRadioStations,
    (void*) Native_findRadioStationIndex,
    (void*) Native_setRadioStationMusicOnly,
    (void*) Native_setRadioFrontendFadeTime,
    (void*) Native_unlockRadioStationTrackList,
    (void*) Native_lockRadioStationTrackList,
    (void*) Native_updateUnlockableDjRadioTracks,
    (void*) Native_lockRadioStation,
    (void*) Native_setRadioStationAsFavourite,
    (void*) Native_isRadioStationFavourited,
    (void*) Native_getNextAudibleBeat,
    (void*) Native_forceMusicTrackList,
    (void*) Native_getCurrentTrackPlayTime,
    (void*) Native_getCurrentTrackSoundName,
    (void*) Native_setVehicleMissileWarningEnabled,
    (void*) Native_setAmbientZoneState,
    (void*) Native_clearAmbientZoneState,
    (void*) Native_setAmbientZoneListState,
    (void*) Native_clearAmbientZoneListState,
    (void*) Native_setAmbientZoneStatePersistent,
    (void*) Native_setAmbientZoneListStatePersistent,
    (void*) Native_isAmbientZoneEnabled,
    (void*) Native_refreshClosestOceanShoreline,
    (void*) Native_setCutsceneAudioOverride,
    (void*) Native_setVariableOnSynchSceneAudio,
    (void*) Native_playPoliceReport,
    (void*) Native_cancelAllPoliceReports,
    (void*) Native_blipSiren,
    (void*) Native_overrideVehHorn,
    (void*) Native_isHornActive,
    (void*) Native_setAggressiveHorns,
    (void*) Native_setRadioPositionAudioMute,
    (void*) Native_setVehicleConversationsPersist,
    (void*) Native_setVehicleConversationsPersistNew,
    (void*) Native_isStreamPlaying,
    (void*) Native_getStreamPlayTime,
    (void*) Native_loadStream,
    (void*) Native_loadStreamWithStartOffset,
    (void*) Native_playStreamFromPed,
    (void*) Native_playStreamFromVehicle,
    (void*) Native_playStreamFromObject,
    (void*) Native_playStreamFrontend,
    (void*) Native_playStreamFromPosition,
    (void*) Native_stopStream,
    (void*) Native_stopPedSpeaking,
    (void*) Native_blockAllSpeechFromPed,
    (void*) Native_stopPedSpeakingSynced,
    (void*) Native_disablePedPainAudio,
    (void*) Native_isAmbientSpeechDisabled,
    (void*) Native_blockSpeechContextGroup,
    (void*) Native_unblockSpeechContextGroup,
    (void*) Native_setSirenWithNoDriver,
    (void*) Native_setSirenBypassMpDriverCheck,
    (void*) Native_triggerSirenAudio,
    (void*) Native_setHornPermanentlyOn,
    (void*) Native_setHornEnabled,
    (void*) Native_setAudioVehiclePriority,
    (void*) Native_setHornPermanentlyOnTime,
    (void*) Native_useSirenAsHorn,
    (void*) Native_forceUseAudioGameObject,
    (void*) Native_preloadVehicleAudioBank,
    (void*) Native_setVehicleStartupRevSound,
    (void*) Native_resetVehicleStartupRevSound,
    (void*) Native_setVehicleForceReverseWarning,
    (void*) Native_isVehicleAudiblyDamaged,
    (void*) Native_setVehicleAudioEngineDamageFactor,
    (void*) Native_setVehicleAudioBodyDamageFactor,
    (void*) Native_enableVehicleFanbeltDamage,
    (void*) Native_enableVehicleExhaustPops,
    (void*) Native_setVehicleBoostActive,
    (void*) Native_setPlayerVehicleAlarmAudioActive,
    (void*) Native_setScriptUpdateDoorAudio,
    (void*) Native_playVehicleDoorOpenSound,
    (void*) Native_playVehicleDoorCloseSound,
    (void*) Native_enableStallWarningSounds,
    (void*) Native_isGameInControlOfMusic,
    (void*) Native_setGpsActive,
    (void*) Native_playMissionCompleteAudio,
    (void*) Native_isMissionCompletePlaying,
    (void*) Native_isMissionCompleteReadyForUi,
    (void*) Native_blockDeathJingle,
    (void*) Native_startAudioScene,
    (void*) Native_stopAudioScene,
    (void*) Native_stopAudioScenes,
    (void*) Native_isAudioSceneActive,
    (void*) Native_setAudioSceneVariable,
    (void*) Native_setAudioScriptCleanupTime,
    (void*) Native_addEntityToAudioMixGroup,
    (void*) Native_removeEntityFromAudioMixGroup,
    (void*) Native_audioIsMusicPlaying,
    (void*) Native_audioIsScriptedMusicPlaying,
    (void*) Native_prepareMusicEvent,
    (void*) Native_cancelMusicEvent,
    (void*) Native_triggerMusicEvent,
    (void*) Native_isMusicOneshotPlaying,
    (void*) Native_getMusicPlaytime,
    (void*) Native_setGlobalRadioSignalLevel,
    (void*) Native_recordBrokenGlass,
    (void*) Native_clearAllBrokenGlass,
    (void*) Native_scriptOverridesWindElevation,
    (void*) Native_setPedWallaDensity,
    (void*) Native_setPedInteriorWallaDensity,
    (void*) Native_forcePedPanicWalla,
    (void*) Native_prepareAlarm,
    (void*) Native_startAlarm,
    (void*) Native_stopAlarm,
    (void*) Native_stopAllAlarms,
    (void*) Native_isAlarmPlaying,
    (void*) Native_getVehicleDefaultHorn,
    (void*) Native_getVehicleDefaultHornIgnoreMods,
    (void*) Native_resetPedAudioFlags,
    (void*) Native_setPedFootstepsEventsEnabled,
    (void*) Native_setPedClothEventsEnabled,
    (void*) Native_overridePlayerGroundMaterial,
    (void*) Native_useFootstepScriptSweeteners,
    (void*) Native_overrideMicrophoneSettings,
    (void*) Native_freezeMicrophone,
    (void*) Native_distantCopCarSirens,
    (void*) Native_setSirenCanBeControlledByAudio,
    (void*) Native_enableStuntJumpAudio,
    (void*) Native_setAudioFlag,
    (void*) Native_prepareSynchronizedAudioEvent,
    (void*) Native_prepareSynchronizedAudioEventForScene,
    (void*) Native_playSynchronizedAudioEvent,
    (void*) Native_stopSynchronizedAudioEvent,
    (void*) Native_initSynchSceneAudioWithPosition,
    (void*) Native_initSynchSceneAudioWithEntity,
    (void*) Native_setAudioSpecialEffectMode,
    (void*) Native_setPortalSettingsOverride,
    (void*) Native_removePortalSettingsOverride,
    (void*) Native_stopSmokeGrenadeExplosionSounds,
    (void*) Native_getMusicVolSlider,
    (void*) Native_requestTennisBanks,
    (void*) Native_unrequestTennisBanks,
    (void*) Native_setSkipMinigunSpinUpAudio,
    (void*) Native_stopCutsceneAudio,
    (void*) Native_hasLoadedMpDataSet,
    (void*) Native_hasLoadedSpDataSet,
    (void*) Native_getVehicleHornSoundIndex,
    (void*) Native_setVehicleHornSoundIndex,
    (void*) Native_addScriptToRandomPed,
    (void*) Native_registerObjectScriptBrain,
    (void*) Native_isObjectWithinBrainActivationRange,
    (void*) Native_registerWorldPointScriptBrain,
    (void*) Native_isWorldPointWithinBrainActivationRange,
    (void*) Native_enableScriptBrainSet,
    (void*) Native_disableScriptBrainSet,
    (void*) Native_reactivateAllWorldBrainsThatAreWaitingTillOutOfRange,
    (void*) Native_reactivateAllObjectBrainsThatAreWaitingTillOutOfRange,
    (void*) Native_reactivateNamedWorldBrainsWaitingTillOutOfRange,
    (void*) Native_reactivateNamedObjectBrainsWaitingTillOutOfRange,
    (void*) Native_renderScriptCams,
    (void*) Native_stopRenderingScriptCamsUsingCatchUp,
    (void*) Native_createCam,
    (void*) Native_createCamWithParams,
    (void*) Native_createCamera,
    (void*) Native_createCameraWithParams,
    (void*) Native_destroyCam,
    (void*) Native_destroyAllCams,
    (void*) Native_doesCamExist,
    (void*) Native_setCamActive,
    (void*) Native_isCamActive,
    (void*) Native_isCamRendering,
    (void*) Native_getRenderingCam,
    (void*) Native_getCamCoord,
    (void*) Native_getCamRot,
    (void*) Native_getCamFov,
    (void*) Native_getCamNearClip,
    (void*) Native_getCamFarClip,
    (void*) Native_getCamNearDof,
    (void*) Native_getCamFarDof,
    (void*) Native_getCamDofStrength,
    (void*) Native_setCamParams,
    (void*) Native_setCamCoord,
    (void*) Native_setCamRot,
    (void*) Native_setCamFov,
    (void*) Native_setCamNearClip,
    (void*) Native_setCamFarClip,
    (void*) Native_forceCamFarClip,
    (void*) Native_setCamMotionBlurStrength,
    (void*) Native_setCamNearDof,
    (void*) Native_setCamFarDof,
    (void*) Native_setCamDofStrength,
    (void*) Native_setCamDofPlanes,
    (void*) Native_setCamUseShallowDofMode,
    (void*) Native_setUseHiDof,
    (void*) Native_setUseHiDofOnSyncedSceneThisUpdate,
    (void*) Native_setCamDofOverriddenFocusDistance,
    (void*) Native_setCamDofOverriddenFocusDistanceBlendLevel,
    (void*) Native_setCamDofFnumberOfLens,
    (void*) Native_setCamDofFocalLengthMultiplier,
    (void*) Native_setCamDofFocusDistanceBias,
    (void*) Native_setCamDofMaxNearInFocusDistance,
    (void*) Native_setCamDofMaxNearInFocusDistanceBlendLevel,
    (void*) Native_attachCamToEntity,
    (void*) Native_attachCamToPedBone,
    (void*) Native_hardAttachCamToPedBone,
    (void*) Native_hardAttachCamToEntity,
    (void*) Native_attachCamToVehicleBone,
    (void*) Native_detachCam,
    (void*) Native_setCamInheritRollVehicle,
    (void*) Native_pointCamAtCoord,
    (void*) Native_pointCamAtEntity,
    (void*) Native_pointCamAtPedBone,
    (void*) Native_stopCamPointing,
    (void*) Native_setCamAffectsAiming,
    (void*) Native_setCamControlsMiniMapHeading,
    (void*) Native_setCamIsInsideVehicle,
    (void*) Native_allowMotionBlurDecay,
    (void*) Native_setCamDebugName,
    (void*) Native_getDebugCam,
    (void*) Native_addCamSplineNode,
    (void*) Native_addCamSplineNodeUsingCameraFrame,
    (void*) Native_addCamSplineNodeUsingCamera,
    (void*) Native_addCamSplineNodeUsingGameplayFrame,
    (void*) Native_setCamSplinePhase,
    (void*) Native_getCamSplinePhase,
    (void*) Native_getCamSplineNodePhase,
    (void*) Native_setCamSplineDuration,
    (void*) Native_setCamSplineSmoothingStyle,
    (void*) Native_getCamSplineNodeIndex,
    (void*) Native_setCamSplineNodeEase,
    (void*) Native_setCamSplineNodeVelocityScale,
    (void*) Native_overrideCamSplineVelocity,
    (void*) Native_overrideCamSplineMotionBlur,
    (void*) Native_setCamSplineNodeExtraFlags,
    (void*) Native_isCamSplinePaused,
    (void*) Native_setCamActiveWithInterp,
    (void*) Native_isCamInterpolating,
    (void*) Native_shakeCam,
    (void*) Native_animatedShakeCam,
    (void*) Native_isCamShaking,
    (void*) Native_setCamShakeAmplitude,
    (void*) Native_stopCamShaking,
    (void*) Native_shakeScriptGlobal,
    (void*) Native_animatedShakeScriptGlobal,
    (void*) Native_isScriptGlobalShaking,
    (void*) Native_stopScriptGlobalShaking,
    (void*) Native_triggerVehiclePartBrokenCameraShake,
    (void*) Native_playCamAnim,
    (void*) Native_isCamPlayingAnim,
    (void*) Native_setCamAnimCurrentPhase,
    (void*) Native_getCamAnimCurrentPhase,
    (void*) Native_playSynchronizedCamAnim,
    (void*) Native_setFlyCamHorizontalResponse,
    (void*) Native_setFlyCamVerticalResponse,
    (void*) Native_setFlyCamMaxHeight,
    (void*) Native_setFlyCamCoordAndConstrain,
    (void*) Native_setFlyCamVerticalControlsThisUpdate,
    (void*) Native_wasFlyCamConstrainedOnPreviousUdpate,
    (void*) Native_isScreenFadedOut,
    (void*) Native_isScreenFadedIn,
    (void*) Native_isScreenFadingOut,
    (void*) Native_isScreenFadingIn,
    (void*) Native_doScreenFadeIn,
    (void*) Native_doScreenFadeOut,
    (void*) Native_setWidescreenBorders,
    (void*) Native_areWidescreenBordersActive,
    (void*) Native_getGameplayCamCoord,
    (void*) Native_getGameplayCamRot,
    (void*) Native_getGameplayCamFov,
    (void*) Native_setGameplayCamMotionBlurScalingThisUpdate,
    (void*) Native_setGameplayCamMaxMotionBlurStrengthThisUpdate,
    (void*) Native_getGameplayCamRelativeHeading,
    (void*) Native_setGameplayCamRelativeHeading,
    (void*) Native_getGameplayCamRelativePitch,
    (void*) Native_setGameplayCamRelativePitch,
    (void*) Native_resetGameplayCamFullAttachParentTransformTimer,
    (void*) Native_forceCameraRelativeHeadingAndPitch,
    (void*) Native_forceBonnetCameraRelativeHeadingAndPitch,
    (void*) Native_setFirstPersonShooterCameraHeading,
    (void*) Native_setFirstPersonShooterCameraPitch,
    (void*) Native_setScriptedCameraIsFirstPersonThisFrame,
    (void*) Native_shakeGameplayCam,
    (void*) Native_isGameplayCamShaking,
    (void*) Native_setGameplayCamShakeAmplitude,
    (void*) Native_stopGameplayCamShaking,
    (void*) Native_setGameplayCamFollowPedThisUpdate,
    (void*) Native_isGameplayCamRendering,
    (void*) Native_isInterpolatingFromScriptCams,
    (void*) Native_isInterpolatingToScriptCams,
    (void*) Native_setGameplayCamAltitudeFovScalingState,
    (void*) Native_disableGameplayCamAltitudeFovScalingThisUpdate,
    (void*) Native_isGameplayCamLookingBehind,
    (void*) Native_setGameplayCamIgnoreEntityCollisionThisUpdate,
    (void*) Native_disableCamCollisionForObject,
    (void*) Native_bypassCameraCollisionBuoyancyTestThisUpdate,
    (void*) Native_setGameplayCamEntityToLimitFocusOverBoundingSphereThisUpdate,
    (void*) Native_disableFirstPersonCameraWaterClippingTestThisUpdate,
    (void*) Native_setFollowCamIgnoreAttachParentMovementThisUpdate,
    (void*) Native_isSphereVisible,
    (void*) Native_isFollowPedCamActive,
    (void*) Native_setFollowPedCamThisUpdate,
    (void*) Native_useScriptCamForAmbientPopulationOriginThisFrame,
    (void*) Native_setFollowPedCamLadderAlignThisUpdate,
    (void*) Native_setThirdPersonCamRelativeHeadingLimitsThisUpdate,
    (void*) Native_setThirdPersonCamRelativePitchLimitsThisUpdate,
    (void*) Native_setThirdPersonCamOrbitDistanceLimitsThisUpdate,
    (void*) Native_setInVehicleCamStateThisUpdate,
    (void*) Native_disableOnFootFirstPersonViewThisUpdate,
    (void*) Native_disableFirstPersonFlashEffectThisUpdate,
    (void*) Native_blockFirstPersonOrientationResetThisUpdate,
    (void*) Native_getFollowPedCamZoomLevel,
    (void*) Native_getFollowPedCamViewMode,
    (void*) Native_setFollowPedCamViewMode,
    (void*) Native_isFollowVehicleCamActive,
    (void*) Native_setFollowVehicleCamHighAngleModeThisUpdate,
    (void*) Native_setFollowVehicleCamHighAngleModeEveryUpdate,
    (void*) Native_setTableGamesCameraThisUpdate,
    (void*) Native_getFollowVehicleCamZoomLevel,
    (void*) Native_setFollowVehicleCamZoomLevel,
    (void*) Native_getFollowVehicleCamViewMode,
    (void*) Native_setFollowVehicleCamViewMode,
    (void*) Native_getCamViewModeForContext,
    (void*) Native_setCamViewModeForContext,
    (void*) Native_getCamActiveViewModeContext,
    (void*) Native_useVehicleCamStuntSettingsThisUpdate,
    (void*) Native_useDedicatedStuntCameraThisUpdate,
    (void*) Native_forceVehicleCamStuntSettingsThisUpdate,
    (void*) Native_setFollowVehicleCamSeatThisUpdate,
    (void*) Native_isAimCamActive,
    (void*) Native_isAimCamActiveInAccurateMode,
    (void*) Native_isFirstPersonAimCamActive,
    (void*) Native_disableAimCamThisUpdate,
    (void*) Native_getFirstPersonAimCamZoomFactor,
    (void*) Native_setFirstPersonAimCamZoomFactor,
    (void*) Native_setFirstPersonAimCamZoomFactorLimitsThisUpdate,
    (void*) Native_setFirstPersonAimCamRelativeHeadingLimitsThisUpdate,
    (void*) Native_setFirstPersonAimCamRelativePitchLimitsThisUpdate,
    (void*) Native_setFirstPersonAimCamNearClipThisUpdate,
    (void*) Native_setThirdPersonAimCamNearClipThisUpdate,
    (void*) Native_setAllowCustomVehicleDriveByCamThisUpdate,
    (void*) Native_forceTightspaceCustomFramingThisUpdate,
    (void*) Native_getFinalRenderedCamCoord,
    (void*) Native_getFinalRenderedCamRot,
    (void*) Native_getFinalRenderedRemotePlayerCamRot,
    (void*) Native_getFinalRenderedCamFov,
    (void*) Native_getFinalRenderedRemotePlayerCamFov,
    (void*) Native_getFinalRenderedCamNearClip,
    (void*) Native_getFinalRenderedCamFarClip,
    (void*) Native_getFinalRenderedCamNearDof,
    (void*) Native_getFinalRenderedCamFarDof,
    (void*) Native_getFinalRenderedCamMotionBlurStrength,
    (void*) Native_setGameplayCoordHint,
    (void*) Native_setGameplayPedHint,
    (void*) Native_setGameplayVehicleHint,
    (void*) Native_setGameplayObjectHint,
    (void*) Native_setGameplayEntityHint,
    (void*) Native_isGameplayHintActive,
    (void*) Native_stopGameplayHint,
    (void*) Native_stopGameplayHintBeingCancelledThisUpdate,
    (void*) Native_stopCodeGameplayHint,
    (void*) Native_isCodeGameplayHintActive,
    (void*) Native_setGameplayHintFov,
    (void*) Native_setGameplayHintFollowDistanceScalar,
    (void*) Native_setGameplayHintBaseOrbitPitchOffset,
    (void*) Native_setGameplayHintCameraRelativeSideOffset,
    (void*) Native_setGameplayHintCameraRelativeVerticalOffset,
    (void*) Native_setGameplayHintCameraBlendToFollowPedMediumViewMode,
    (void*) Native_setCinematicButtonActive,
    (void*) Native_isCinematicCamRendering,
    (void*) Native_shakeCinematicCam,
    (void*) Native_isCinematicCamShaking,
    (void*) Native_setCinematicCamShakeAmplitude,
    (void*) Native_stopCinematicCamShaking,
    (void*) Native_disableCinematicBonnetCameraThisUpdate,
    (void*) Native_disableCinematicVehicleIdleModeThisUpdate,
    (void*) Native_invalidateCinematicVehicleIdleMode,
    (void*) Native_invalidateIdleCam,
    (void*) Native_isCinematicIdleCamRendering,
    (void*) Native_isCinematicFirstPersonVehicleInteriorCamRendering,
    (void*) Native_createCinematicShot,
    (void*) Native_isCinematicShotActive,
    (void*) Native_stopCinematicShot,
    (void*) Native_forceCinematicRenderingThisUpdate,
    (void*) Native_setCinematicNewsChannelActiveThisUpdate,
    (void*) Native_setCinematicModeActive,
    (void*) Native_isInVehicleMobilePhoneCameraRendering,
    (void*) Native_disableCinematicSlowMoThisUpdate,
    (void*) Native_isBonnetCinematicCamRendering,
    (void*) Native_isCinematicCamInputActive,
    (void*) Native_ignoreMenuPreferenceForBonnetCameraThisUpdate,
    (void*) Native_bypassCutsceneCamRenderingThisUpdate,
    (void*) Native_stopCutsceneCamShaking,
    (void*) Native_setCutsceneCamFarClipThisUpdate,
    (void*) Native_getFocusPedOnScreen,
    (void*) Native_disableNearClipScanThisUpdate,
    (void*) Native_setCamDeathFailEffectState,
    (void*) Native_setFirstPersonFlashEffectType,
    (void*) Native_setFirstPersonFlashEffectVehicleModelName,
    (void*) Native_setFirstPersonFlashEffectVehicleModelHash,
    (void*) Native_isAllowedIndependentCameraModes,
    (void*) Native_cameraPreventCollisionSettingsForTripleheadInInteriorsThisUpdate,
    (void*) Native_replayGetMaxDistanceAllowedFromPlayer,
    (void*) Native_setClockTime,
    (void*) Native_pauseClock,
    (void*) Native_advanceClockTimeTo,
    (void*) Native_addToClockTime,
    (void*) Native_getClockHours,
    (void*) Native_getClockMinutes,
    (void*) Native_getClockSeconds,
    (void*) Native_setClockDate,
    (void*) Native_getClockDayOfWeek,
    (void*) Native_getClockDayOfMonth,
    (void*) Native_getClockMonth,
    (void*) Native_getClockYear,
    (void*) Native_getMillisecondsPerGameMinute,
    (void*) Native_getPosixTime,
    (void*) Native_getUtcTime,
    (void*) Native_getLocalTime,
    (void*) Native_requestCutscene,
    (void*) Native_requestCutsceneWithPlaybackList,
    (void*) Native_removeCutscene,
    (void*) Native_hasCutsceneLoaded,
    (void*) Native_hasThisCutsceneLoaded,
    (void*) Native_setScriptCanStartCutscene,
    (void*) Native_canRequestAssetsForCutsceneEntity,
    (void*) Native_isCutscenePlaybackFlagSet,
    (void*) Native_setCutsceneEntityStreamingFlags,
    (void*) Native_requestCutFile,
    (void*) Native_hasCutFileLoaded,
    (void*) Native_removeCutFile,
    (void*) Native_getCutFileConcatCount,
    (void*) Native_startCutscene,
    (void*) Native_startCutsceneAtCoords,
    (void*) Native_stopCutscene,
    (void*) Native_stopCutsceneImmediately,
    (void*) Native_setCutsceneOrigin,
    (void*) Native_setCutsceneOriginAndOrientation,
    (void*) Native_getCutsceneTime,
    (void*) Native_getCutsceneTotalDuration,
    (void*) Native_getCutsceneEndTime,
    (void*) Native_wasCutsceneSkipped,
    (void*) Native_hasCutsceneFinished,
    (void*) Native_isCutsceneActive,
    (void*) Native_isCutscenePlaying,
    (void*) Native_getCutsceneSectionPlaying,
    (void*) Native_getEntityIndexOfCutsceneEntity,
    (void*) Native_getCutsceneConcatSectionPlaying,
    (void*) Native_isCutsceneAuthorized,
    (void*) Native_doesCutsceneHandleExist,
    (void*) Native_registerEntityForCutscene,
    (void*) Native_getEntityIndexOfRegisteredEntity,
    (void*) Native_setVehicleModelPlayerWillExitScene,
    (void*) Native_setCutsceneTriggerArea,
    (void*) Native_canSetEnterStateForRegisteredEntity,
    (void*) Native_canSetExitStateForRegisteredEntity,
    (void*) Native_canSetExitStateForCamera,
    (void*) Native_setPadCanShakeDuringCutscene,
    (void*) Native_setCutsceneFadeValues,
    (void*) Native_setCutsceneMultiheadFade,
    (void*) Native_setCutsceneMultiheadFadeManual,
    (void*) Native_isMultiheadFadeUp,
    (void*) Native_networkSetMocapCutsceneCanBeSkipped,
    (void*) Native_setCarGeneratorsCanUpdateDuringCutscene,
    (void*) Native_canUseMobilePhoneDuringCutscene,
    (void*) Native_setCutsceneCanBeSkipped,
    (void*) Native_setCanDisplayMinimapDuringCutsceneThisUpdate,
    (void*) Native_setCutscenePedComponentVariation,
    (void*) Native_setCutscenePedComponentVariationFromPed,
    (void*) Native_doesCutsceneEntityExist,
    (void*) Native_setCutscenePedPropVariation,
    (void*) Native_hasCutsceneCutThisFrame,
    (void*) Native_datafileWatchRequestId,
    (void*) Native_datafileClearWatchList,
    (void*) Native_datafileIsValidRequestId,
    (void*) Native_datafileHasLoadedFileData,
    (void*) Native_datafileHasValidFileData,
    (void*) Native_datafileSelectActiveFile,
    (void*) Native_datafileDeleteRequestedFile,
    (void*) Native_ugcCreateContent,
    (void*) Native_ugcCreateMission,
    (void*) Native_ugcUpdateContent,
    (void*) Native_ugcUpdateMission,
    (void*) Native_ugcSetPlayerData,
    (void*) Native_datafileSelectUgcData,
    (void*) Native_datafileSelectUgcStats,
    (void*) Native_datafileSelectUgcPlayerData,
    (void*) Native_datafileSelectCreatorStats,
    (void*) Native_datafileLoadOfflineUgc,
    (void*) Native_datafileCreate,
    (void*) Native_datafileDelete,
    (void*) Native_datafileStoreMissionHeader,
    (void*) Native_datafileFlushMissionHeader,
    (void*) Native_datafileGetFileDict,
    (void*) Native_datafileStartSaveToCloud,
    (void*) Native_datafileUpdateSaveToCloud,
    (void*) Native_datafileIsSavePending,
    (void*) Native_datafileLoadOfflineUgcForAdditionalDataFile,
    (void*) Native_datafileDeleteForAdditionalDataFile,
    (void*) Native_datafileGetFileDictForAdditionalDataFile,
    (void*) Native_datadictSetBool,
    (void*) Native_datadictSetInt,
    (void*) Native_datadictSetFloat,
    (void*) Native_datadictSetString,
    (void*) Native_datadictSetVector,
    (void*) Native_datadictCreateDict,
    (void*) Native_datadictCreateArray,
    (void*) Native_datadictGetBool,
    (void*) Native_datadictGetInt,
    (void*) Native_datadictGetFloat,
    (void*) Native_datadictGetString,
    (void*) Native_datadictGetVector,
    (void*) Native_datadictGetDict,
    (void*) Native_datadictGetArray,
    (void*) Native_datadictGetType,
    (void*) Native_dataarrayAddBool,
    (void*) Native_dataarrayAddInt,
    (void*) Native_dataarrayAddFloat,
    (void*) Native_dataarrayAddString,
    (void*) Native_dataarrayAddVector,
    (void*) Native_dataarrayAddDict,
    (void*) Native_dataarrayGetBool,
    (void*) Native_dataarrayGetInt,
    (void*) Native_dataarrayGetFloat,
    (void*) Native_dataarrayGetString,
    (void*) Native_dataarrayGetVector,
    (void*) Native_dataarrayGetDict,
    (void*) Native_dataarrayGetCount,
    (void*) Native_dataarrayGetType,
    (void*) Native_decorSetTime,
    (void*) Native_decorSetBool,
    (void*) Native_decorSetFloat,
    (void*) Native_decorSetInt,
    (void*) Native_decorGetBool,
    (void*) Native_decorGetFloat,
    (void*) Native_decorGetInt,
    (void*) Native_decorExistOn,
    (void*) Native_decorRemove,
    (void*) Native_decorRegister,
    (void*) Native_decorIsRegisteredAsType,
    (void*) Native_decorRegisterLock,
    (void*) Native_areAnyCcsPending,
    (void*) Native_isDlcPresent,
    (void*) Native_dlcCheckCloudDataCorrect,
    (void*) Native_getExtracontentCloudResult,
    (void*) Native_dlcCheckCompatPackConfiguration,
    (void*) Native_getEverHadBadPackOrder,
    (void*) Native_getIsLoadingScreenActive,
    (void*) Native_getIsInitialLoadingScreenActive,
    (void*) Native_hasCloudRequestsFinished,
    (void*) Native_onEnterSp,
    (void*) Native_onEnterMp,
    (void*) Native_doesEntityExist,
    (void*) Native_doesEntityBelongToThisScript,
    (void*) Native_doesEntityHaveDrawable,
    (void*) Native_doesEntityHavePhysics,
    (void*) Native_doesEntityHaveSkeleton,
    (void*) Native_doesEntityHaveAnimDirector,
    (void*) Native_hasEntityAnimFinished,
    (void*) Native_hasEntityBeenDamagedByAnyObject,
    (void*) Native_hasEntityBeenDamagedByAnyPed,
    (void*) Native_hasEntityBeenDamagedByAnyVehicle,
    (void*) Native_hasEntityBeenDamagedByEntity,
    (void*) Native_hasEntityClearLosToEntity,
    (void*) Native_hasEntityClearLosToEntityAdjustForCover,
    (void*) Native_hasEntityClearLosToEntityInFront,
    (void*) Native_hasEntityCollidedWithAnything,
    (void*) Native_getLastMaterialHitByEntity,
    (void*) Native_getCollisionNormalOfLastHitForEntity,
    (void*) Native_forceEntityAiAndAnimationUpdate,
    (void*) Native_getEntityAnimCurrentTime,
    (void*) Native_getEntityAnimTotalTime,
    (void*) Native_getAnimDuration,
    (void*) Native_getEntityAttachedTo,
    (void*) Native_getEntityCoords,
    (void*) Native_getEntityForwardVector,
    (void*) Native_getEntityForwardX,
    (void*) Native_getEntityForwardY,
    (void*) Native_getEntityHeading,
    (void*) Native_getEntityHeadingFromEulers,
    (void*) Native_getEntityHealth,
    (void*) Native_getEntityMaxHealth,
    (void*) Native_setEntityMaxHealth,
    (void*) Native_getEntityHeight,
    (void*) Native_getEntityHeightAboveGround,
    (void*) Native_getEntityMatrix,
    (void*) Native_getEntityModel,
    (void*) Native_getOffsetFromEntityGivenWorldCoords,
    (void*) Native_getOffsetFromEntityInWorldCoords,
    (void*) Native_getEntityPitch,
    (void*) Native_getEntityQuaternion,
    (void*) Native_getEntityRoll,
    (void*) Native_getEntityRotation,
    (void*) Native_getEntityRotationVelocity,
    (void*) Native_getEntityScript,
    (void*) Native_getEntitySpeed,
    (void*) Native_getEntitySpeedVector,
    (void*) Native_getEntityUprightValue,
    (void*) Native_getEntityVelocity,
    (void*) Native_getObjectIndexFromEntityIndex,
    (void*) Native_getPedIndexFromEntityIndex,
    (void*) Native_getVehicleIndexFromEntityIndex,
    (void*) Native_getWorldPositionOfEntityBone,
    (void*) Native_getNearestPlayerToEntity,
    (void*) Native_getNearestPlayerToEntityOnTeam,
    (void*) Native_getEntityType,
    (void*) Native_getEntityPopulationType,
    (void*) Native_isAnEntity,
    (void*) Native_isEntityAPed,
    (void*) Native_isEntityAMissionEntity,
    (void*) Native_isEntityAVehicle,
    (void*) Native_isEntityAnObject,
    (void*) Native_isEntityAtCoord,
    (void*) Native_isEntityAtEntity,
    (void*) Native_isEntityAttached,
    (void*) Native_isEntityAttachedToAnyObject,
    (void*) Native_isEntityAttachedToAnyPed,
    (void*) Native_isEntityAttachedToAnyVehicle,
    (void*) Native_isEntityAttachedToEntity,
    (void*) Native_isEntityDead,
    (void*) Native_isEntityInAir,
    (void*) Native_isEntityInAngledArea,
    (void*) Native_isEntityInArea,
    (void*) Native_isEntityInZone,
    (void*) Native_isEntityInWater,
    (void*) Native_getEntitySubmergedLevel,
    (void*) Native_setEntityRequiresMoreExpensiveRiverCheck,
    (void*) Native_isEntityOnScreen,
    (void*) Native_isEntityPlayingAnim,
    (void*) Native_isEntityStatic,
    (void*) Native_isEntityTouchingEntity,
    (void*) Native_isEntityTouchingModel,
    (void*) Native_isEntityUpright,
    (void*) Native_isEntityUpsidedown,
    (void*) Native_isEntityVisible,
    (void*) Native_isEntityVisibleToScript,
    (void*) Native_isEntityOccluded,
    (void*) Native_wouldEntityBeOccluded,
    (void*) Native_isEntityWaitingForWorldCollision,
    (void*) Native_applyForceToEntityCenterOfMass,
    (void*) Native_applyForceToEntity,
    (void*) Native_attachEntityToEntity,
    (void*) Native_attachEntityBoneToEntityBone,
    (void*) Native_attachEntityBoneToEntityBoneYForward,
    (void*) Native_attachEntityToEntityPhysically,
    (void*) Native_processEntityAttachments,
    (void*) Native_getEntityBoneIndexByName,
    (void*) Native_clearEntityLastDamageEntity,
    (void*) Native_deleteEntity,
    (void*) Native_detachEntity,
    (void*) Native_freezeEntityPosition,
    (void*) Native_setEntityShouldFreezeWaitingOnCollision,
    (void*) Native_playEntityAnim,
    (void*) Native_playSynchronizedEntityAnim,
    (void*) Native_playSynchronizedMapEntityAnim,
    (void*) Native_stopSynchronizedMapEntityAnim,
    (void*) Native_stopEntityAnim,
    (void*) Native_stopSynchronizedEntityAnim,
    (void*) Native_hasAnimEventFired,
    (void*) Native_findAnimEventPhase,
    (void*) Native_setEntityAnimCurrentTime,
    (void*) Native_setEntityAnimSpeed,
    (void*) Native_setEntityAsMissionEntity,
    (void*) Native_setEntityAsNoLongerNeeded,
    (void*) Native_setPedAsNoLongerNeeded,
    (void*) Native_setVehicleAsNoLongerNeeded,
    (void*) Native_setObjectAsNoLongerNeeded,
    (void*) Native_setEntityCanBeDamaged,
    (void*) Native_getEntityCanBeDamaged,
    (void*) Native_setEntityCanBeDamagedByRelationshipGroup,
    (void*) Native_setEntityCanOnlyBeDamagedByScriptParticipants,
    (void*) Native_setEntityCanBeTargetedWithoutLos,
    (void*) Native_setEntityCollision,
    (void*) Native_getEntityCollisionDisabled,
    (void*) Native_setEntityCompletelyDisableCollision,
    (void*) Native_setEntityCoords,
    (void*) Native_setEntityCoordsWithoutPlantsReset,
    (void*) Native_setEntityCoordsNoOffset,
    (void*) Native_setEntityDynamic,
    (void*) Native_setEntityHeading,
    (void*) Native_setEntityHealth,
    (void*) Native_setEntityInvincible,
    (void*) Native_setEntityIsTargetPriority,
    (void*) Native_setEntityLights,
    (void*) Native_setEntityLoadCollisionFlag,
    (void*) Native_hasCollisionLoadedAroundEntity,
    (void*) Native_setEntityMaxSpeed,
    (void*) Native_setEntityOnlyDamagedByPlayer,
    (void*) Native_setEntityOnlyDamagedByRelationshipGroup,
    (void*) Native_setEntityProofs,
    (void*) Native_getEntityProofs,
    (void*) Native_setEntityQuaternion,
    (void*) Native_setEntityRecordsCollisions,
    (void*) Native_setEntityRotation,
    (void*) Native_setEntityVisible,
    (void*) Native_setEntityWaterReflectionFlag,
    (void*) Native_setEntityMirrorReflectionFlag,
    (void*) Native_setEntityVelocity,
    (void*) Native_setEntityAngularVelocity,
    (void*) Native_setEntityHasGravity,
    (void*) Native_setEntityLodDist,
    (void*) Native_getEntityLodDist,
    (void*) Native_setEntityAlpha,
    (void*) Native_getEntityAlpha,
    (void*) Native_resetEntityAlpha,
    (void*) Native_resetPickupEntityGlow,
    (void*) Native_setPickupCollidesWithProjectiles,
    (void*) Native_setEntitySortBias,
    (void*) Native_setEntityAlwaysPrerender,
    (void*) Native_setEntityRenderScorched,
    (void*) Native_setEntityTrafficlightOverride,
    (void*) Native_setEntityIsInVehicle,
    (void*) Native_createModelSwap,
    (void*) Native_removeModelSwap,
    (void*) Native_createModelHide,
    (void*) Native_createModelHideExcludingScriptObjects,
    (void*) Native_removeModelHide,
    (void*) Native_createForcedObject,
    (void*) Native_removeForcedObject,
    (void*) Native_setEntityNoCollisionEntity,
    (void*) Native_setEntityMotionBlur,
    (void*) Native_setCanAutoVaultOnEntity,
    (void*) Native_setCanClimbOnEntity,
    (void*) Native_setWaitForCollisionsBeforeProbe,
    (void*) Native_setEntityNoweapondecals,
    (void*) Native_setEntityUseMaxDistanceForWaterReflection,
    (void*) Native_getEntityBoneRotation,
    (void*) Native_getEntityBonePostion,
    (void*) Native_getEntityBoneObjectRotation,
    (void*) Native_getEntityBoneCount,
    (void*) Native_enableEntityBulletCollision,
    (void*) Native_setEntityCanOnlyBeDamagedByEntity,
    (void*) Native_setEntityCantCauseCollisionDamagedEntity,
    (void*) Native_setAllowMigrateToSpectator,
    (void*) Native_getEntityOfTypeAttachedToEntity,
    (void*) Native_setPickUpByCargobobDisabled,
    (void*) Native_setDecisionMaker,
    (void*) Native_clearDecisionMakerEventResponse,
    (void*) Native_blockDecisionMakerEvent,
    (void*) Native_unblockDecisionMakerEvent,
    (void*) Native_addShockingEventAtPosition,
    (void*) Native_addShockingEventForEntity,
    (void*) Native_isShockingEventInSphere,
    (void*) Native_removeShockingEvent,
    (void*) Native_removeAllShockingEvents,
    (void*) Native_removeShockingEventSpawnBlockingAreas,
    (void*) Native_suppressShockingEventsNextFrame,
    (void*) Native_suppressShockingEventTypeNextFrame,
    (void*) Native_suppressAgitationEventsNextFrame,
    (void*) Native_getNumTattooShopDlcItems,
    (void*) Native_getTattooShopDlcItemData,
    (void*) Native_getTattooShopDlcItemIndex,
    (void*) Native_initShopPedComponent,
    (void*) Native_initShopPedProp,
    (void*) Native_setupShopPedApparelQuery,
    (void*) Native_setupShopPedApparelQueryTu,
    (void*) Native_getShopPedQueryComponent,
    (void*) Native_getShopPedQueryComponentIndex,
    (void*) Native_getShopPedComponent,
    (void*) Native_getShopPedQueryProp,
    (void*) Native_getShopPedQueryPropIndex,
    (void*) Native_getShopPedProp,
    (void*) Native_getHashNameForComponent,
    (void*) Native_getHashNameForProp,
    (void*) Native_getItemVariantsCount,
    (void*) Native_getShopPedApparelVariantPropCount,
    (void*) Native_getVariantComponent,
    (void*) Native_getVariantProp,
    (void*) Native_getShopPedApparelForcedComponentCount,
    (void*) Native_getShopPedApparelForcedPropCount,
    (void*) Native_getForcedComponent,
    (void*) Native_getForcedProp,
    (void*) Native_isTagRestricted,
    (void*) Native_doesCurrentPedComponentHaveRestrictionTag,
    (void*) Native_doesCurrentPedPropHaveRestrictionTag,
    (void*) Native_setupShopPedOutfitQuery,
    (void*) Native_getShopPedQueryOutfit,
    (void*) Native_getShopPedOutfit,
    (void*) Native_getShopPedOutfitLocate,
    (void*) Native_getShopPedOutfitPropVariant,
    (void*) Native_getShopPedOutfitComponentVariant,
    (void*) Native_getNumDlcVehicles,
    (void*) Native_getDlcVehicleModel,
    (void*) Native_getDlcVehicleData,
    (void*) Native_getDlcVehicleFlags,
    (void*) Native_getNumDlcWeapons,
    (void*) Native_getNumDlcWeaponsSp,
    (void*) Native_getDlcWeaponData,
    (void*) Native_getDlcWeaponDataSp,
    (void*) Native_getNumDlcWeaponComponents,
    (void*) Native_getNumDlcWeaponComponentsSp,
    (void*) Native_getDlcWeaponComponentData,
    (void*) Native_getDlcWeaponComponentDataSp,
    (void*) Native_isContentItemLocked,
    (void*) Native_isDlcVehicleMod,
    (void*) Native_getDlcVehicleModLockHash,
    (void*) Native_executeContentChangesetGroupForAll,
    (void*) Native_revertContentChangesetGroupForAll,
    (void*) Native_startScriptFire,
    (void*) Native_removeScriptFire,
    (void*) Native_startEntityFire,
    (void*) Native_stopEntityFire,
    (void*) Native_isEntityOnFire,
    (void*) Native_getNumberOfFiresInRange,
    (void*) Native_setFlammabilityMultiplier,
    (void*) Native_stopFireInRange,
    (void*) Native_getClosestFirePos,
    (void*) Native_addExplosion,
    (void*) Native_addOwnedExplosion,
    (void*) Native_addExplosionWithUserVfx,
    (void*) Native_isExplosionInArea,
    (void*) Native_isExplosionActiveInArea,
    (void*) Native_isExplosionInSphere,
    (void*) Native_getOwnerOfExplosionInSphere,
    (void*) Native_isExplosionInAngledArea,
    (void*) Native_getOwnerOfExplosionInAngledArea,
    (void*) Native_beginTextCommandBusyspinnerOn,
    (void*) Native_endTextCommandBusyspinnerOn,
    (void*) Native_busyspinnerOff,
    (void*) Native_preloadBusyspinner,
    (void*) Native_busyspinnerIsOn,
    (void*) Native_busyspinnerIsDisplaying,
    (void*) Native_disablePausemenuSpinner,
    (void*) Native_setMouseCursorThisFrame,
    (void*) Native_setMouseCursorStyle,
    (void*) Native_setMouseCursorVisible,
    (void*) Native_isMouseRolledOverInstructionalButtons,
    (void*) Native_getMouseEvent,
    (void*) Native_thefeedOnlyShowTooltips,
    (void*) Native_thefeedSetScriptedMenuHeight,
    (void*) Native_thefeedHide,
    (void*) Native_thefeedHideThisFrame,
    (void*) Native_thefeedShow,
    (void*) Native_thefeedFlushQueue,
    (void*) Native_thefeedRemoveItem,
    (void*) Native_thefeedForceRenderOn,
    (void*) Native_thefeedForceRenderOff,
    (void*) Native_thefeedPause,
    (void*) Native_thefeedResume,
    (void*) Native_thefeedIsPaused,
    (void*) Native_thefeedReportLogoOn,
    (void*) Native_thefeedReportLogoOff,
    (void*) Native_thefeedGetLastShownPhoneActivatableFeedId,
    (void*) Native_thefeedAutoPostGametipsOn,
    (void*) Native_thefeedAutoPostGametipsOff,
    (void*) Native_thefeedSetBackgroundColorForNextPost,
    (void*) Native_thefeedSetRgbaParameterForNextMessage,
    (void*) Native_thefeedSetFlashDurationParameterForNextMessage,
    (void*) Native_thefeedSetVibrateParameterForNextMessage,
    (void*) Native_thefeedResetAllParameters,
    (void*) Native_thefeedFreezeNextPost,
    (void*) Native_thefeedClearFrozenPost,
    (void*) Native_thefeedSetSnapFeedItemPositions,
    (void*) Native_thefeedUpdateItemTexture,
    (void*) Native_beginTextCommandThefeedPost,
    (void*) Native_endTextCommandThefeedPostStats,
    (void*) Native_endTextCommandThefeedPostMessagetext,
    (void*) Native_endTextCommandThefeedPostMessagetextSubtitleLabel,
    (void*) Native_endTextCommandThefeedPostMessagetextTu,
    (void*) Native_endTextCommandThefeedPostMessagetextWithCrewTag,
    (void*) Native_endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon,
    (void*) Native_endTextCommandThefeedPostTicker,
    (void*) Native_endTextCommandThefeedPostTickerForced,
    (void*) Native_endTextCommandThefeedPostTickerWithTokens,
    (void*) Native_endTextCommandThefeedPostAward,
    (void*) Native_endTextCommandThefeedPostCrewtag,
    (void*) Native_endTextCommandThefeedPostCrewtagWithGameName,
    (void*) Native_endTextCommandThefeedPostUnlock,
    (void*) Native_endTextCommandThefeedPostUnlockTu,
    (void*) Native_endTextCommandThefeedPostUnlockTuWithColor,
    (void*) Native_endTextCommandThefeedPostMpticker,
    (void*) Native_endTextCommandThefeedPostCrewRankupWithLiteralFlag,
    (void*) Native_endTextCommandThefeedPostVersusTu,
    (void*) Native_endTextCommandThefeedPostReplay,
    (void*) Native_endTextCommandThefeedPostReplayInput,
    (void*) Native_beginTextCommandPrint,
    (void*) Native_endTextCommandPrint,
    (void*) Native_beginTextCommandIsMessageDisplayed,
    (void*) Native_endTextCommandIsMessageDisplayed,
    (void*) Native_beginTextCommandDisplayText,
    (void*) Native_endTextCommandDisplayText,
    (void*) Native_beginTextCommandGetScreenWidthOfDisplayText,
    (void*) Native_endTextCommandGetScreenWidthOfDisplayText,
    (void*) Native_beginTextCommandGetNumberOfLinesForString,
    (void*) Native_endTextCommandGetNumberOfLinesForString,
    (void*) Native_beginTextCommandDisplayHelp,
    (void*) Native_endTextCommandDisplayHelp,
    (void*) Native_beginTextCommandIsThisHelpMessageBeingDisplayed,
    (void*) Native_endTextCommandIsThisHelpMessageBeingDisplayed,
    (void*) Native_beginTextCommandSetBlipName,
    (void*) Native_endTextCommandSetBlipName,
    (void*) Native_beginTextCommandAddDirectlyToPreviousBriefs,
    (void*) Native_endTextCommandAddDirectlyToPreviousBriefs,
    (void*) Native_beginTextCommandClearPrint,
    (void*) Native_endTextCommandClearPrint,
    (void*) Native_beginTextCommandOverrideButtonText,
    (void*) Native_endTextCommandOverrideButtonText,
    (void*) Native_addTextComponentInteger,
    (void*) Native_addTextComponentFloat,
    (void*) Native_addTextComponentSubstringTextLabel,
    (void*) Native_addTextComponentSubstringTextLabelHashKey,
    (void*) Native_addTextComponentSubstringBlipName,
    (void*) Native_addTextComponentSubstringPlayerName,
    (void*) Native_addTextComponentSubstringTime,
    (void*) Native_addTextComponentFormattedInteger,
    (void*) Native_addTextComponentSubstringPhoneNumber,
    (void*) Native_addTextComponentSubstringWebsite,
    (void*) Native_addTextComponentSubstringKeyboardDisplay,
    (void*) Native_setColourOfNextTextComponent,
    (void*) Native_getCharacterFromAudioConversationFilename,
    (void*) Native_getCharacterFromAudioConversationFilenameWithByteLimit,
    (void*) Native_getCharacterFromAudioConversationFilenameBytes,
    (void*) Native_getFilenameForAudioConversation,
    (void*) Native_clearPrints,
    (void*) Native_clearBrief,
    (void*) Native_clearAllHelpMessages,
    (void*) Native_clearThisPrint,
    (void*) Native_clearSmallPrints,
    (void*) Native_doesTextBlockExist,
    (void*) Native_requestAdditionalText,
    (void*) Native_requestAdditionalTextForDlc,
    (void*) Native_hasAdditionalTextLoaded,
    (void*) Native_clearAdditionalText,
    (void*) Native_isStreamingAdditionalText,
    (void*) Native_hasThisAdditionalTextLoaded,
    (void*) Native_isMessageBeingDisplayed,
    (void*) Native_doesTextLabelExist,
    (void*) Native_getFirstNCharactersOfLiteralString,
    (void*) Native_getLengthOfStringWithThisTextLabel,
    (void*) Native_getLengthOfLiteralString,
    (void*) Native_getLengthOfLiteralStringInBytes,
    (void*) Native_getStreetNameFromHashKey,
    (void*) Native_isHudPreferenceSwitchedOn,
    (void*) Native_isRadarPreferenceSwitchedOn,
    (void*) Native_isSubtitlePreferenceSwitchedOn,
    (void*) Native_displayHud,
    (void*) Native_displayHudWhenNotInStateOfPlayThisFrame,
    (void*) Native_displayHudWhenPausedThisFrame,
    (void*) Native_displayRadar,
    (void*) Native_setFakeSpectatorMode,
    (void*) Native_getFakeSpectatorMode,
    (void*) Native_isHudHidden,
    (void*) Native_isRadarHidden,
    (void*) Native_isMinimapRendering,
    (void*) Native_useVehicleTargetingReticule,
    (void*) Native_addValidVehicleHitHash,
    (void*) Native_clearValidVehicleHitHashes,
    (void*) Native_setBlipRoute,
    (void*) Native_clearAllBlipRoutes,
    (void*) Native_setBlipRouteColour,
    (void*) Native_setForceShowGps,
    (void*) Native_setUseSetDestinationInPauseMap,
    (void*) Native_setBlockWantedFlash,
    (void*) Native_addNextMessageToPreviousBriefs,
    (void*) Native_forceNextMessageToPreviousBriefsList,
    (void*) Native_setRadarZoomPrecise,
    (void*) Native_setRadarZoom,
    (void*) Native_setRadarZoomToBlip,
    (void*) Native_setRadarZoomToDistance,
    (void*) Native_updateRadarZoomToBlip,
    (void*) Native_getHudColour,
    (void*) Native_setScriptVariableHudColour,
    (void*) Native_setSecondScriptVariableHudColour,
    (void*) Native_replaceHudColour,
    (void*) Native_replaceHudColourWithRgba,
    (void*) Native_setAbilityBarVisibility,
    (void*) Native_setAllowAbilityBar,
    (void*) Native_flashAbilityBar,
    (void*) Native_setAbilityBarValue,
    (void*) Native_flashWantedDisplay,
    (void*) Native_forceOffWantedStarFlash,
    (void*) Native_setCustomMpHudColor,
    (void*) Native_getRenderedCharacterHeight,
    (void*) Native_setTextScale,
    (void*) Native_setTextColour,
    (void*) Native_setTextCentre,
    (void*) Native_setTextRightJustify,
    (void*) Native_setTextJustification,
    (void*) Native_setTextWrap,
    (void*) Native_setTextLeading,
    (void*) Native_setTextProportional,
    (void*) Native_setTextFont,
    (void*) Native_setTextDropShadow,
    (void*) Native_setTextDropshadow,
    (void*) Native_setTextOutline,
    (void*) Native_setTextEdge,
    (void*) Native_setTextRenderId,
    (void*) Native_getDefaultScriptRendertargetRenderId,
    (void*) Native_registerNamedRendertarget,
    (void*) Native_isNamedRendertargetRegistered,
    (void*) Native_releaseNamedRendertarget,
    (void*) Native_linkNamedRendertarget,
    (void*) Native_getNamedRendertargetRenderId,
    (void*) Native_isNamedRendertargetLinked,
    (void*) Native_clearHelp,
    (void*) Native_isHelpMessageOnScreen,
    (void*) Native_hasScriptHiddenHelpThisFrame,
    (void*) Native_isHelpMessageBeingDisplayed,
    (void*) Native_isHelpMessageFadingOut,
    (void*) Native_setHelpMessageStyle,
    (void*) Native_getStandardBlipEnumId,
    (void*) Native_getWaypointBlipEnumId,
    (void*) Native_getNumberOfActiveBlips,
    (void*) Native_getNextBlipInfoId,
    (void*) Native_getFirstBlipInfoId,
    (void*) Native_getClosestBlipInfoId,
    (void*) Native_getBlipInfoIdCoord,
    (void*) Native_getBlipInfoIdDisplay,
    (void*) Native_getBlipInfoIdType,
    (void*) Native_getBlipInfoIdEntityIndex,
    (void*) Native_getBlipInfoIdPickupIndex,
    (void*) Native_getBlipFromEntity,
    (void*) Native_addBlipForRadius,
    (void*) Native_addBlipForArea,
    (void*) Native_addBlipForEntity,
    (void*) Native_addBlipForPickup,
    (void*) Native_addBlipForCoord,
    (void*) Native_triggerSonarBlip,
    (void*) Native_allowSonarBlips,
    (void*) Native_setBlipCoords,
    (void*) Native_getBlipCoords,
    (void*) Native_setBlipSprite,
    (void*) Native_getBlipSprite,
    (void*) Native_setCopBlipSprite,
    (void*) Native_setCopBlipSpriteAsStandard,
    (void*) Native_setBlipNameFromTextFile,
    (void*) Native_setBlipNameToPlayerName,
    (void*) Native_setBlipAlpha,
    (void*) Native_getBlipAlpha,
    (void*) Native_setBlipFade,
    (void*) Native_getBlipFadeDirection,
    (void*) Native_setBlipRotation,
    (void*) Native_setBlipRotationWithFloat,
    (void*) Native_getBlipRotation,
    (void*) Native_setBlipFlashTimer,
    (void*) Native_setBlipFlashInterval,
    (void*) Native_setBlipColour,
    (void*) Native_setBlipSecondaryColour,
    (void*) Native_getBlipColour,
    (void*) Native_getBlipHudColour,
    (void*) Native_isBlipShortRange,
    (void*) Native_isBlipOnMinimap,
    (void*) Native_doesBlipHaveGpsRoute,
    (void*) Native_setBlipHiddenOnLegend,
    (void*) Native_setBlipHighDetail,
    (void*) Native_setBlipAsMissionCreatorBlip,
    (void*) Native_isMissionCreatorBlip,
    (void*) Native_getNewSelectedMissionCreatorBlip,
    (void*) Native_isHoveringOverMissionCreatorBlip,
    (void*) Native_showStartMissionInstructionalButton,
    (void*) Native_showContactInstructionalButton,
    (void*) Native_reloadMapMenu,
    (void*) Native_setBlipMarkerLongDistance,
    (void*) Native_setBlipFlashes,
    (void*) Native_setBlipFlashesAlternate,
    (void*) Native_isBlipFlashing,
    (void*) Native_setBlipAsShortRange,
    (void*) Native_setBlipScale,
    (void*) Native_setBlipScale2d,
    (void*) Native_setBlipPriority,
    (void*) Native_setBlipDisplay,
    (void*) Native_setBlipCategory,
    (void*) Native_removeBlip,
    (void*) Native_setBlipAsFriendly,
    (void*) Native_pulseBlip,
    (void*) Native_showNumberOnBlip,
    (void*) Native_hideNumberOnBlip,
    (void*) Native_showHeightOnBlip,
    (void*) Native_showTickOnBlip,
    (void*) Native_showGoldTickOnBlip,
    (void*) Native_showHeadingIndicatorOnBlip,
    (void*) Native_showOutlineIndicatorOnBlip,
    (void*) Native_showFriendIndicatorOnBlip,
    (void*) Native_showCrewIndicatorOnBlip,
    (void*) Native_setBlipExtendedHeightThreshold,
    (void*) Native_setBlipShortHeightThreshold,
    (void*) Native_setBlipUseHeightIndicatorOnEdge,
    (void*) Native_setBlipAsMinimalOnEdge,
    (void*) Native_setRadiusBlipEdge,
    (void*) Native_doesBlipExist,
    (void*) Native_setWaypointOff,
    (void*) Native_deleteWaypointsFromThisPlayer,
    (void*) Native_refreshWaypoint,
    (void*) Native_isWaypointActive,
    (void*) Native_setNewWaypoint,
    (void*) Native_setBlipBright,
    (void*) Native_setBlipShowCone,
    (void*) Native_removeCopBlipFromPed,
    (void*) Native_setupFakeConeData,
    (void*) Native_removeFakeConeData,
    (void*) Native_clearFakeConeArray,
    (void*) Native_setMinimapComponent,
    (void*) Native_setMinimapSonarSweep,
    (void*) Native_showAccountPicker,
    (void*) Native_getMainPlayerBlipId,
    (void*) Native_setPmWarningscreenActive,
    (void*) Native_hideLoadingOnFadeThisFrame,
    (void*) Native_setRadarAsInteriorThisFrame,
    (void*) Native_setInsideVerySmallInterior,
    (void*) Native_setInsideVeryLargeInterior,
    (void*) Native_setRadarAsExteriorThisFrame,
    (void*) Native_setFakePausemapPlayerPositionThisFrame,
    (void*) Native_setFakeGpsPlayerPositionThisFrame,
    (void*) Native_isPausemapInInteriorMode,
    (void*) Native_hideMinimapExteriorMapThisFrame,
    (void*) Native_hideMinimapInteriorMapThisFrame,
    (void*) Native_setUseIslandMap,
    (void*) Native_dontTiltMinimapThisFrame,
    (void*) Native_dontZoomMinimapWhenSnipingThisFrame,
    (void*) Native_setWidescreenFormat,
    (void*) Native_displayAreaName,
    (void*) Native_displayCash,
    (void*) Native_useFakeMpCash,
    (void*) Native_changeFakeMpCash,
    (void*) Native_displayAmmoThisFrame,
    (void*) Native_displaySniperScopeThisFrame,
    (void*) Native_hideHudAndRadarThisFrame,
    (void*) Native_allowDisplayOfMultiplayerCashText,
    (void*) Native_setMultiplayerWalletCash,
    (void*) Native_removeMultiplayerWalletCash,
    (void*) Native_setMultiplayerBankCash,
    (void*) Native_removeMultiplayerBankCash,
    (void*) Native_setMultiplayerHudCash,
    (void*) Native_removeMultiplayerHudCash,
    (void*) Native_hideHelpTextThisFrame,
    (void*) Native_isImeInProgress,
    (void*) Native_displayHelpTextThisFrame,
    (void*) Native_hudForceWeaponWheel,
    (void*) Native_hudForceSpecialVehicleWeaponWheel,
    (void*) Native_blockWeaponWheelThisFrame,
    (void*) Native_hudGetWeaponWheelCurrentlyHighlighted,
    (void*) Native_hudSetWeaponWheelTopSlot,
    (void*) Native_hudGetWeaponWheelTopSlot,
    (void*) Native_hudShowingCharacterSwitchSelection,
    (void*) Native_setGpsFlags,
    (void*) Native_clearGpsFlags,
    (void*) Native_setRaceTrackRender,
    (void*) Native_clearGpsRaceTrack,
    (void*) Native_startGpsCustomRoute,
    (void*) Native_addPointToGpsCustomRoute,
    (void*) Native_setGpsCustomRouteRender,
    (void*) Native_clearGpsCustomRoute,
    (void*) Native_startGpsMultiRoute,
    (void*) Native_addPointToGpsMultiRoute,
    (void*) Native_setGpsMultiRouteRender,
    (void*) Native_clearGpsMultiRoute,
    (void*) Native_clearGpsPlayerWaypoint,
    (void*) Native_setGpsFlashes,
    (void*) Native_setPlayerIconColour,
    (void*) Native_flashMinimapDisplay,
    (void*) Native_flashMinimapDisplayWithColor,
    (void*) Native_toggleStealthRadar,
    (void*) Native_setMinimapInSpectatorMode,
    (void*) Native_setMissionName,
    (void*) Native_setMissionNameForUgcMission,
    (void*) Native_setDescriptionForUgcMissionEightStrings,
    (void*) Native_setMinimapBlockWaypoint,
    (void*) Native_setMinimapInPrologue,
    (void*) Native_setMinimapHideFow,
    (void*) Native_getMinimapFowDiscoveryRatio,
    (void*) Native_getMinimapFowCoordinateIsRevealed,
    (void*) Native_setMinimapFowDoNotUpdate,
    (void*) Native_setMinimapFowRevealCoordinate,
    (void*) Native_setMinimapGolfCourse,
    (void*) Native_setMinimapGolfCourseOff,
    (void*) Native_lockMinimapAngle,
    (void*) Native_unlockMinimapAngle,
    (void*) Native_lockMinimapPosition,
    (void*) Native_unlockMinimapPosition,
    (void*) Native_setFakeMinimapMaxAltimeterHeight,
    (void*) Native_setHealthHudDisplayValues,
    (void*) Native_setMaxHealthHudDisplay,
    (void*) Native_setMaxArmourHudDisplay,
    (void*) Native_setBigmapActive,
    (void*) Native_isHudComponentActive,
    (void*) Native_isScriptedHudComponentActive,
    (void*) Native_hideScriptedHudComponentThisFrame,
    (void*) Native_showScriptedHudComponentThisFrame,
    (void*) Native_isScriptedHudComponentHiddenThisFrame,
    (void*) Native_hideHudComponentThisFrame,
    (void*) Native_showHudComponentThisFrame,
    (void*) Native_hideStreetAndCarNamesThisFrame,
    (void*) Native_resetReticuleValues,
    (void*) Native_resetHudComponentValues,
    (void*) Native_setHudComponentPosition,
    (void*) Native_getHudComponentPosition,
    (void*) Native_clearReminderMessage,
    (void*) Native_getScreenCoordFromWorldCoord2,
    (void*) Native_openReportugcMenu,
    (void*) Native_forceCloseReportugcMenu,
    (void*) Native_isReportugcMenuOpen,
    (void*) Native_isFloatingHelpTextOnScreen,
    (void*) Native_setFloatingHelpTextScreenPosition,
    (void*) Native_setFloatingHelpTextWorldPosition,
    (void*) Native_setFloatingHelpTextToEntity,
    (void*) Native_setFloatingHelpTextStyle,
    (void*) Native_clearFloatingHelp,
    (void*) Native_createMpGamerTagWithCrewColor,
    (void*) Native_isMpGamerTagMovieActive,
    (void*) Native_createFakeMpGamerTag,
    (void*) Native_removeMpGamerTag,
    (void*) Native_isMpGamerTagActive,
    (void*) Native_isMpGamerTagFree,
    (void*) Native_setMpGamerTagVisibility,
    (void*) Native_setAllMpGamerTagsVisibility,
    (void*) Native_setMpGamerTagsShouldUseVehicleHealth,
    (void*) Native_setMpGamerTagsShouldUsePointsHealth,
    (void*) Native_setMpGamerTagsPointHealth,
    (void*) Native_setMpGamerTagColour,
    (void*) Native_setMpGamerTagHealthBarColour,
    (void*) Native_setMpGamerTagAlpha,
    (void*) Native_setMpGamerTagWantedLevel,
    (void*) Native_setMpGamerTagNumPackages,
    (void*) Native_setMpGamerTagName,
    (void*) Native_isUpdatingMpGamerTagNameAndCrewDetails,
    (void*) Native_setMpGamerTagBigText,
    (void*) Native_getCurrentWebpageId,
    (void*) Native_getCurrentWebsiteId,
    (void*) Native_getGlobalActionscriptFlag,
    (void*) Native_resetGlobalActionscriptFlag,
    (void*) Native_isWarningMessageReadyForControl,
    (void*) Native_setWarningMessage,
    (void*) Native_setWarningMessageWithHeader,
    (void*) Native_setWarningMessageWithHeaderAndSubstringFlags,
    (void*) Native_setWarningMessageWithHeaderExtended,
    (void*) Native_setWarningMessageWithHeaderAndSubstringFlagsExtended,
    (void*) Native_getWarningScreenMessageHash,
    (void*) Native_setWarningMessageOptionItems,
    (void*) Native_setWarningMessageOptionHighlight,
    (void*) Native_removeWarningMessageOptionItems,
    (void*) Native_isWarningMessageActive,
    (void*) Native_clearDynamicPauseMenuErrorMessage,
    (void*) Native_customMinimapSetActive,
    (void*) Native_customMinimapSetBlipObject,
    (void*) Native_customMinimapCreateBlip,
    (void*) Native_customMinimapClearBlips,
    (void*) Native_forceSonarBlipsThisFrame,
    (void*) Native_getNorthBlidIndex,
    (void*) Native_displayPlayerNameTagsOnBlips,
    (void*) Native_drawFrontendBackgroundThisFrame,
    (void*) Native_drawHudOverFadeThisFrame,
    (void*) Native_activateFrontendMenu,
    (void*) Native_restartFrontendMenu,
    (void*) Native_getCurrentFrontendMenuVersion,
    (void*) Native_setPauseMenuActive,
    (void*) Native_disableFrontendThisFrame,
    (void*) Native_suppressFrontendRenderingThisFrame,
    (void*) Native_allowPauseWhenNotInStateOfPlayThisFrame,
    (void*) Native_setFrontendActive,
    (void*) Native_isPauseMenuActive,
    (void*) Native_isStorePendingNetworkShutdownToOpen,
    (void*) Native_getPauseMenuState,
    (void*) Native_getPauseMenuPosition,
    (void*) Native_isPauseMenuRestarting,
    (void*) Native_forceScriptedGfxWhenFrontendActive,
    (void*) Native_pauseMenuceptionGoDeeper,
    (void*) Native_pauseMenuceptionTheKick,
    (void*) Native_pauseToggleFullscreenMap,
    (void*) Native_pauseMenuActivateContext,
    (void*) Native_pauseMenuDeactivateContext,
    (void*) Native_pauseMenuIsContextActive,
    (void*) Native_pauseMenuIsContextMenuActive,
    (void*) Native_pauseMenuGetHairColourIndex,
    (void*) Native_pauseMenuGetMouseHoverIndex,
    (void*) Native_pauseMenuGetMouseHoverUniqueId,
    (void*) Native_pauseMenuGetMouseClickEvent,
    (void*) Native_pauseMenuRedrawInstructionalButtons,
    (void*) Native_pauseMenuSetBusySpinner,
    (void*) Native_pauseMenuSetWarnOnTabChange,
    (void*) Native_isFrontendReadyForControl,
    (void*) Native_takeControlOfFrontend,
    (void*) Native_releaseControlOfFrontend,
    (void*) Native_codeWantsScriptToTakeControl,
    (void*) Native_getScreenCodeWantsScriptToControl,
    (void*) Native_isNavigatingMenuContent,
    (void*) Native_hasMenuTriggerEventOccurred,
    (void*) Native_hasMenuLayoutChangedEventOccurred,
    (void*) Native_setSavegameListUniqueId,
    (void*) Native_getMenuTriggerEventDetails,
    (void*) Native_getMenuLayoutChangedEventDetails,
    (void*) Native_getPmPlayerCrewColor,
    (void*) Native_getMenuPedIntStat,
    (void*) Native_getCharacterMenuPedIntStat,
    (void*) Native_getMenuPedMaskedIntStat,
    (void*) Native_getCharacterMenuPedMaskedIntStat,
    (void*) Native_getMenuPedFloatStat,
    (void*) Native_getCharacterMenuPedFloatStat,
    (void*) Native_getMenuPedBoolStat,
    (void*) Native_clearPedInPauseMenu,
    (void*) Native_givePedToPauseMenu,
    (void*) Native_setPauseMenuPedLighting,
    (void*) Native_setPauseMenuPedSleepState,
    (void*) Native_openOnlinePoliciesMenu,
    (void*) Native_areOnlinePoliciesUpToDate,
    (void*) Native_isOnlinePoliciesMenuActive,
    (void*) Native_openSocialClubMenu,
    (void*) Native_closeSocialClubMenu,
    (void*) Native_setSocialClubTour,
    (void*) Native_isSocialClubActive,
    (void*) Native_setTextInputBoxEnabled,
    (void*) Native_forceCloseTextInputBox,
    (void*) Native_setAllowCommaOnTextInput,
    (void*) Native_overrideMpTextChatTeamString,
    (void*) Native_isMpTextChatTyping,
    (void*) Native_closeMpTextChat,
    (void*) Native_mpTextChatIsTeamJob,
    (void*) Native_overrideMpTextChatColor,
    (void*) Native_mpTextChatDisable,
    (void*) Native_flagPlayerContextInTournament,
    (void*) Native_setPedHasAiBlip,
    (void*) Native_setPedHasAiBlipWithColour,
    (void*) Native_doesPedHaveAiBlip,
    (void*) Native_setPedAiBlipGangId,
    (void*) Native_setPedAiBlipHasCone,
    (void*) Native_setPedAiBlipForcedOn,
    (void*) Native_setPedAiBlipNoticeRange,
    (void*) Native_setPedAiBlipSprite,
    (void*) Native_getAiPedPedBlipIndex,
    (void*) Native_getAiPedVehicleBlipIndex,
    (void*) Native_hasDirectorModeBeenLaunchedByCode,
    (void*) Native_setDirectorModeLaunchedByScript,
    (void*) Native_setPlayerIsInDirectorMode,
    (void*) Native_setDirectorModeAvailable,
    (void*) Native_hideHudmarkersThisFrame,
    (void*) Native_getInteriorHeading,
    (void*) Native_getInteriorLocationAndNamehash,
    (void*) Native_getInteriorGroupId,
    (void*) Native_getOffsetFromInteriorInWorldCoords,
    (void*) Native_isInteriorScene,
    (void*) Native_isValidInterior,
    (void*) Native_clearRoomForEntity,
    (void*) Native_forceRoomForEntity,
    (void*) Native_getRoomKeyFromEntity,
    (void*) Native_getKeyForEntityInRoom,
    (void*) Native_getInteriorFromEntity,
    (void*) Native_retainEntityInInterior,
    (void*) Native_clearInteriorStateOfEntity,
    (void*) Native_forceActivatingTrackingOnEntity,
    (void*) Native_forceRoomForGameViewport,
    (void*) Native_setRoomForGameViewportByName,
    (void*) Native_setRoomForGameViewportByKey,
    (void*) Native_getRoomKeyForGameViewport,
    (void*) Native_clearRoomForGameViewport,
    (void*) Native_getInteriorFromPrimaryView,
    (void*) Native_getInteriorAtCoords,
    (void*) Native_addPickupToInteriorRoomByName,
    (void*) Native_pinInteriorInMemory,
    (void*) Native_unpinInterior,
    (void*) Native_isInteriorReady,
    (void*) Native_setInteriorInUse,
    (void*) Native_getInteriorAtCoordsWithType,
    (void*) Native_getInteriorAtCoordsWithTypehash,
    (void*) Native_activateInteriorGroupsUsingCamera,
    (void*) Native_isCollisionMarkedOutside,
    (void*) Native_getInteriorFromCollision,
    (void*) Native_enableStadiumProbesThisFrame,
    (void*) Native_activateInteriorEntitySet,
    (void*) Native_deactivateInteriorEntitySet,
    (void*) Native_isInteriorEntitySetActive,
    (void*) Native_setInteriorEntitySetTintIndex,
    (void*) Native_refreshInterior,
    (void*) Native_enableExteriorCullModelThisFrame,
    (void*) Native_enableShadowCullModelThisFrame,
    (void*) Native_disableInterior,
    (void*) Native_isInteriorDisabled,
    (void*) Native_capInterior,
    (void*) Native_isInteriorCapped,
    (void*) Native_disableMetroSystem,
    (void*) Native_setIsExteriorOnly,
    (void*) Native_createItemset,
    (void*) Native_destroyItemset,
    (void*) Native_isItemsetValid,
    (void*) Native_addToItemset,
    (void*) Native_removeFromItemset,
    (void*) Native_getItemsetSize,
    (void*) Native_getIndexedItemInItemset,
    (void*) Native_isInItemset,
    (void*) Native_cleanItemset,
    (void*) Native_lobbyAutoMultiplayerMenu,
    (void*) Native_lobbyAutoMultiplayerFreemode,
    (void*) Native_lobbySetAutoMultiplayer,
    (void*) Native_lobbyAutoMultiplayerEvent,
    (void*) Native_lobbySetAutoMultiplayerEvent,
    (void*) Native_lobbyAutoMultiplayerRandomJob,
    (void*) Native_lobbySetAutoMpRandomJob,
    (void*) Native_shutdownSessionClearsAutoMultiplayer,
    (void*) Native_localizationGetSystemLanguage,
    (void*) Native_getCurrentLanguage,
    (void*) Native_localizationGetSystemDateType,
    (void*) Native_getAllocatedStackSize,
    (void*) Native_getNumberOfFreeStacksOfThisSize,
    (void*) Native_setRandomSeed,
    (void*) Native_setTimeScale,
    (void*) Native_setMissionFlag,
    (void*) Native_getMissionFlag,
    (void*) Native_setRandomEventFlag,
    (void*) Native_getRandomEventFlag,
    (void*) Native_getContentToLoad,
    (void*) Native_activityFeedCreate,
    (void*) Native_activityFeedAddSubstringToCaption,
    (void*) Native_activityFeedAddLiteralSubstringToCaption,
    (void*) Native_activityFeedAddIntToCaption,
    (void*) Native_activityFeedLargeImageUrl,
    (void*) Native_activityFeedActionStartWithCommandLine,
    (void*) Native_activityFeedActionStartWithCommandLineAdd,
    (void*) Native_activityFeedPost,
    (void*) Native_activityFeedOnlinePlayedWithPost,
    (void*) Native_hasResumedFromSuspend,
    (void*) Native_setScriptHighPrio,
    (void*) Native_setThisIsATriggerScript,
    (void*) Native_informCodeOfContentIdOfCurrentUgcMission,
    (void*) Native_getBaseElementLocationFromMetadataBlock,
    (void*) Native_getPrevWeatherTypeHashName,
    (void*) Native_getNextWeatherTypeHashName,
    (void*) Native_isPrevWeatherType,
    (void*) Native_isNextWeatherType,
    (void*) Native_setWeatherTypePersist,
    (void*) Native_setWeatherTypeNowPersist,
    (void*) Native_setWeatherTypeNow,
    (void*) Native_setWeatherTypeOvertimePersist,
    (void*) Native_setRandomWeatherType,
    (void*) Native_clearWeatherTypePersist,
    (void*) Native_clearWeatherTypeNowPersistNetwork,
    (void*) Native_getCurrWeatherState,
    (void*) Native_setCurrWeatherState,
    (void*) Native_setOverrideWeather,
    (void*) Native_setOverrideWeatherex,
    (void*) Native_clearOverrideWeather,
    (void*) Native_waterOverrideSetShorewaveamplitude,
    (void*) Native_waterOverrideSetShorewaveminamplitude,
    (void*) Native_waterOverrideSetShorewavemaxamplitude,
    (void*) Native_waterOverrideSetOceannoiseminamplitude,
    (void*) Native_waterOverrideSetOceanwaveamplitude,
    (void*) Native_waterOverrideSetOceanwaveminamplitude,
    (void*) Native_waterOverrideSetOceanwavemaxamplitude,
    (void*) Native_waterOverrideSetRipplebumpiness,
    (void*) Native_waterOverrideSetRippleminbumpiness,
    (void*) Native_waterOverrideSetRipplemaxbumpiness,
    (void*) Native_waterOverrideSetRippledisturb,
    (void*) Native_waterOverrideSetStrength,
    (void*) Native_waterOverrideFadeIn,
    (void*) Native_waterOverrideFadeOut,
    (void*) Native_setWind,
    (void*) Native_setWindSpeed,
    (void*) Native_getWindSpeed,
    (void*) Native_setWindDirection,
    (void*) Native_getWindDirection,
    (void*) Native_setRain,
    (void*) Native_getRainLevel,
    (void*) Native_setSnow,
    (void*) Native_getSnowLevel,
    (void*) Native_forceLightningFlash,
    (void*) Native_setCloudSettingsOverride,
    (void*) Native_preloadCloudHat,
    (void*) Native_loadCloudHat,
    (void*) Native_unloadCloudHat,
    (void*) Native_unloadAllCloudHats,
    (void*) Native_setCloudsAlpha,
    (void*) Native_getCloudsAlpha,
    (void*) Native_getGameTimer,
    (void*) Native_getFrameTime,
    (void*) Native_getSystemTimeStep,
    (void*) Native_getFrameCount,
    (void*) Native_getRandomFloatInRange,
    (void*) Native_getRandomIntInRange,
    (void*) Native_getRandomMwcIntInRange,
    (void*) Native_getGroundZFor3dCoord,
    (void*) Native_getGroundZAndNormalFor3dCoord,
    (void*) Native_getGroundZExcludingObjectsFor3dCoord,
    (void*) Native_asin,
    (void*) Native_acos,
    (void*) Native_tan,
    (void*) Native_atan,
    (void*) Native_atan2,
    (void*) Native_getDistanceBetweenCoords,
    (void*) Native_getAngleBetween2dVectors,
    (void*) Native_getHeadingFromVector2d,
    (void*) Native_getRatioOfClosestPointOnLine,
    (void*) Native_getClosestPointOnLine,
    (void*) Native_getLinePlaneIntersection,
    (void*) Native_getPointAreaOverlap,
    (void*) Native_setBit,
    (void*) Native_clearBit,
    (void*) Native_getHashKey,
    (void*) Native_slerpNearQuaternion,
    (void*) Native_isAreaOccupied,
    (void*) Native_isAreaOccupiedSlow,
    (void*) Native_isPositionOccupied,
    (void*) Native_isPointObscuredByAMissionEntity,
    (void*) Native_clearArea,
    (void*) Native_clearAreaLeaveVehicleHealth,
    (void*) Native_clearAreaOfVehicles,
    (void*) Native_clearAngledAreaOfVehicles,
    (void*) Native_clearAreaOfObjects,
    (void*) Native_clearAreaOfPeds,
    (void*) Native_clearAreaOfCops,
    (void*) Native_clearAreaOfProjectiles,
    (void*) Native_clearScenarioSpawnHistory,
    (void*) Native_setSaveMenuActive,
    (void*) Native_getStatusOfManualSave,
    (void*) Native_setCreditsActive,
    (void*) Native_setCreditsFadeOutWithScreen,
    (void*) Native_haveCreditsReachedEnd,
    (void*) Native_terminateAllScriptsWithThisName,
    (void*) Native_networkSetScriptIsSafeForNetworkGame,
    (void*) Native_addHospitalRestart,
    (void*) Native_disableHospitalRestart,
    (void*) Native_addPoliceRestart,
    (void*) Native_disablePoliceRestart,
    (void*) Native_setRestartCoordOverride,
    (void*) Native_clearRestartCoordOverride,
    (void*) Native_pauseDeathArrestRestart,
    (void*) Native_ignoreNextRestart,
    (void*) Native_setFadeOutAfterDeath,
    (void*) Native_setFadeOutAfterArrest,
    (void*) Native_setFadeInAfterDeathArrest,
    (void*) Native_setFadeInAfterLoad,
    (void*) Native_registerSaveHouse,
    (void*) Native_setSaveHouse,
    (void*) Native_overrideSaveHouse,
    (void*) Native_getSaveHouseDetailsAfterSuccessfulLoad,
    (void*) Native_doAutoSave,
    (void*) Native_getIsAutoSaveOff,
    (void*) Native_isAutoSaveInProgress,
    (void*) Native_hasCodeRequestedAutosave,
    (void*) Native_clearCodeRequestedAutosave,
    (void*) Native_beginReplayStats,
    (void*) Native_addReplayStatValue,
    (void*) Native_endReplayStats,
    (void*) Native_haveReplayStatsBeenStored,
    (void*) Native_getReplayStatMissionId,
    (void*) Native_getReplayStatMissionType,
    (void*) Native_getReplayStatCount,
    (void*) Native_getReplayStatAtIndex,
    (void*) Native_clearReplayStats,
    (void*) Native_queueMissionRepeatLoad,
    (void*) Native_queueMissionRepeatSave,
    (void*) Native_queueMissionRepeatSaveForBenchmarkTest,
    (void*) Native_getStatusOfMissionRepeatSave,
    (void*) Native_isMemoryCardInUse,
    (void*) Native_shootSingleBulletBetweenCoords,
    (void*) Native_shootSingleBulletBetweenCoordsIgnoreEntity,
    (void*) Native_shootSingleBulletBetweenCoordsIgnoreEntityNew,
    (void*) Native_getModelDimensions,
    (void*) Native_setFakeWantedLevel,
    (void*) Native_getFakeWantedLevel,
    (void*) Native_usingMissionCreator,
    (void*) Native_allowMissionCreatorWarp,
    (void*) Native_setMinigameInProgress,
    (void*) Native_isMinigameInProgress,
    (void*) Native_isThisAMinigameScript,
    (void*) Native_isSniperInverted,
    (void*) Native_shouldUseMetricMeasurements,
    (void*) Native_getProfileSetting,
    (void*) Native_areStringsEqual,
    (void*) Native_compareStrings,
    (void*) Native_absi,
    (void*) Native_absf,
    (void*) Native_isSniperBulletInArea,
    (void*) Native_isProjectileInArea,
    (void*) Native_isProjectileTypeInArea,
    (void*) Native_isProjectileTypeInAngledArea,
    (void*) Native_isProjectileTypeWithinDistance,
    (void*) Native_getCoordsOfProjectileTypeInArea,
    (void*) Native_getCoordsOfProjectileTypeWithinDistance,
    (void*) Native_getProjectileOfProjectileTypeWithinDistance,
    (void*) Native_isBulletInAngledArea,
    (void*) Native_isBulletInArea,
    (void*) Native_isBulletInBox,
    (void*) Native_hasBulletImpactedInArea,
    (void*) Native_hasBulletImpactedInBox,
    (void*) Native_isOrbisVersion,
    (void*) Native_isDurangoVersion,
    (void*) Native_isXbox360Version,
    (void*) Native_isPs3Version,
    (void*) Native_isPcVersion,
    (void*) Native_isSteamVersion,
    (void*) Native_isAussieVersion,
    (void*) Native_isJapaneseVersion,
    (void*) Native_isXboxPlatform,
    (void*) Native_isScarlettVersion,
    (void*) Native_isScePlatform,
    (void*) Native_isProsperoVersion,
    (void*) Native_isStringNull,
    (void*) Native_isStringNullOrEmpty,
    (void*) Native_stringToInt,
    (void*) Native_setBitsInRange,
    (void*) Native_getBitsInRange,
    (void*) Native_addStuntJump,
    (void*) Native_addStuntJumpAngled,
    (void*) Native_toggleShowOptionalStuntJumpCamera,
    (void*) Native_deleteStuntJump,
    (void*) Native_enableStuntJumpSet,
    (void*) Native_disableStuntJumpSet,
    (void*) Native_setStuntJumpsCanTrigger,
    (void*) Native_isStuntJumpInProgress,
    (void*) Native_isStuntJumpMessageShowing,
    (void*) Native_getNumSuccessfulStuntJumps,
    (void*) Native_getTotalSuccessfulStuntJumps,
    (void*) Native_cancelStuntJump,
    (void*) Native_setGamePaused,
    (void*) Native_setThisScriptCanBePaused,
    (void*) Native_setThisScriptCanRemoveBlipsCreatedByAnyScript,
    (void*) Native_hasCheatWithHashBeenActivated,
    (void*) Native_hasPcCheatWithHashBeenActivated,
    (void*) Native_overrideFreezeFlags,
    (void*) Native_setInstancePriorityMode,
    (void*) Native_setInstancePriorityHint,
    (void*) Native_isFrontendFading,
    (void*) Native_populateNow,
    (void*) Native_getIndexOfCurrentLevel,
    (void*) Native_setGravityLevel,
    (void*) Native_startSaveData,
    (void*) Native_stopSaveData,
    (void*) Native_getSizeOfSaveData,
    (void*) Native_registerIntToSave,
    (void*) Native_registerInt64ToSave,
    (void*) Native_registerEnumToSave,
    (void*) Native_registerFloatToSave,
    (void*) Native_registerBoolToSave,
    (void*) Native_registerTextLabelToSave,
    (void*) Native_registerTextLabel15ToSave,
    (void*) Native_registerTextLabel23ToSave,
    (void*) Native_registerTextLabel31ToSave,
    (void*) Native_registerTextLabel63ToSave,
    (void*) Native_startSaveStructWithSize,
    (void*) Native_stopSaveStruct,
    (void*) Native_startSaveArrayWithSize,
    (void*) Native_stopSaveArray,
    (void*) Native_copyScriptStruct,
    (void*) Native_enableDispatchService,
    (void*) Native_blockDispatchServiceResourceCreation,
    (void*) Native_getNumberResourcesAllocatedToWantedLevel,
    (void*) Native_createIncident,
    (void*) Native_createIncidentWithEntity,
    (void*) Native_deleteIncident,
    (void*) Native_isIncidentValid,
    (void*) Native_setIncidentRequestedUnits,
    (void*) Native_setIdealSpawnDistanceForIncident,
    (void*) Native_findSpawnPointInDirection,
    (void*) Native_addPopMultiplierArea,
    (void*) Native_doesPopMultiplierAreaExist,
    (void*) Native_removePopMultiplierArea,
    (void*) Native_isPopMultiplierAreaNetworked,
    (void*) Native_addPopMultiplierSphere,
    (void*) Native_doesPopMultiplierSphereExist,
    (void*) Native_removePopMultiplierSphere,
    (void*) Native_enableTennisMode,
    (void*) Native_isTennisMode,
    (void*) Native_playTennisSwingAnim,
    (void*) Native_getTennisSwingAnimComplete,
    (void*) Native_getTennisSwingAnimCanBeInterrupted,
    (void*) Native_getTennisSwingAnimSwung,
    (void*) Native_playTennisDiveAnim,
    (void*) Native_setTennisMoveNetworkSignalFloat,
    (void*) Native_resetDispatchSpawnLocation,
    (void*) Native_setDispatchSpawnLocation,
    (void*) Native_resetDispatchIdealSpawnDistance,
    (void*) Native_setDispatchIdealSpawnDistance,
    (void*) Native_resetDispatchTimeBetweenSpawnAttempts,
    (void*) Native_setDispatchTimeBetweenSpawnAttempts,
    (void*) Native_setDispatchTimeBetweenSpawnAttemptsMultiplier,
    (void*) Native_addDispatchSpawnAngledBlockingArea,
    (void*) Native_addDispatchSpawnSphereBlockingArea,
    (void*) Native_removeDispatchSpawnBlockingArea,
    (void*) Native_resetDispatchSpawnBlockingAreas,
    (void*) Native_resetWantedResponseNumPedsToSpawn,
    (void*) Native_setWantedResponseNumPedsToSpawn,
    (void*) Native_addTacticalNavMeshPoint,
    (void*) Native_clearTacticalNavMeshPoints,
    (void*) Native_setRiotModeEnabled,
    (void*) Native_displayOnscreenKeyboardWithLongerInitialString,
    (void*) Native_displayOnscreenKeyboard,
    (void*) Native_updateOnscreenKeyboard,
    (void*) Native_getOnscreenKeyboardResult,
    (void*) Native_cancelOnscreenKeyboard,
    (void*) Native_nextOnscreenKeyboardResultWillDisplayUsingTheseFonts,
    (void*) Native_actionManagerEnableAction,
    (void*) Native_getRealWorldTime,
    (void*) Native_supressRandomEventThisFrame,
    (void*) Native_setExplosiveAmmoThisFrame,
    (void*) Native_setFireAmmoThisFrame,
    (void*) Native_setExplosiveMeleeThisFrame,
    (void*) Native_setSuperJumpThisFrame,
    (void*) Native_setBeastJumpThisFrame,
    (void*) Native_setForcedJumpThisFrame,
    (void*) Native_hasGameInstalledThisSession,
    (void*) Native_setTickerJohnmarstonIsDone,
    (void*) Native_areProfileSettingsValid,
    (void*) Native_preventArrestStateThisFrame,
    (void*) Native_forceGameStatePlaying,
    (void*) Native_scriptRaceInit,
    (void*) Native_scriptRaceShutdown,
    (void*) Native_scriptRacePlayerHitCheckpoint,
    (void*) Native_scriptRaceGetPlayerSplitTime,
    (void*) Native_startEndUserBenchmark,
    (void*) Native_stopEndUserBenchmark,
    (void*) Native_resetEndUserBenchmark,
    (void*) Native_saveEndUserBenchmark,
    (void*) Native_uiStartedEndUserBenchmark,
    (void*) Native_landingScreenStartedEndUserBenchmark,
    (void*) Native_isCommandlineEndUserBenchmark,
    (void*) Native_getBenchmarkIterations,
    (void*) Native_getBenchmarkPass,
    (void*) Native_restartGame,
    (void*) Native_quitGame,
    (void*) Native_hasAsyncInstallFinished,
    (void*) Native_cleanupAsyncInstall,
    (void*) Native_plmIsInConstrainedMode,
    (void*) Native_plmGetConstrainedDurationMs,
    (void*) Native_setPlayerIsInAnimalForm,
    (void*) Native_getIsPlayerInAnimalForm,
    (void*) Native_setPlayerIsRepeatingAMission,
    (void*) Native_disableScreenDimmingThisFrame,
    (void*) Native_getCityDensity,
    (void*) Native_useActiveCameraForTimeslicingCentre,
    (void*) Native_setContentIdIndex,
    (void*) Native_getContentIdIndex,
    (void*) Native_createMobilePhone,
    (void*) Native_destroyMobilePhone,
    (void*) Native_setMobilePhoneScale,
    (void*) Native_setMobilePhoneRotation,
    (void*) Native_getMobilePhoneRotation,
    (void*) Native_setMobilePhonePosition,
    (void*) Native_getMobilePhonePosition,
    (void*) Native_scriptIsMovingMobilePhoneOffscreen,
    (void*) Native_canPhoneBeSeenOnScreen,
    (void*) Native_setMobilePhoneDofState,
    (void*) Native_cellSetInput,
    (void*) Native_cellHorizontalModeToggle,
    (void*) Native_cellCamActivate,
    (void*) Native_cellCamActivateSelfieMode,
    (void*) Native_cellCamActivateShallowDofMode,
    (void*) Native_cellCamSetSelfieModeSideOffsetScaling,
    (void*) Native_cellCamSetSelfieModeHorzPanOffset,
    (void*) Native_cellCamSetSelfieModeVertPanOffset,
    (void*) Native_cellCamSetSelfieModeRollOffset,
    (void*) Native_cellCamSetSelfieModeDistanceScaling,
    (void*) Native_cellCamSetSelfieModeHeadYawOffset,
    (void*) Native_cellCamSetSelfieModeHeadRollOffset,
    (void*) Native_cellCamSetSelfieModeHeadPitchOffset,
    (void*) Native_cellCamIsCharVisibleNoFaceCheck,
    (void*) Native_getMobilePhoneRenderId,
    (void*) Native_networkInitializeCash,
    (void*) Native_networkDeleteCharacter,
    (void*) Native_networkManualDeleteCharacter,
    (void*) Native_networkGetPlayerIsHighEarner,
    (void*) Native_networkClearCharacterWallet,
    (void*) Native_networkGivePlayerJobshareCash,
    (void*) Native_networkReceivePlayerJobshareCash,
    (void*) Native_networkCanShareJobCash,
    (void*) Native_networkRefundCash,
    (void*) Native_networkDeductCash,
    (void*) Native_networkMoneyCanBet,
    (void*) Native_networkCanBet,
    (void*) Native_networkCasinoCanBet,
    (void*) Native_networkCasinoCanBetPvc,
    (void*) Native_networkCasinoCanBetAmount,
    (void*) Native_networkCasinoCanBuyChipsPvc,
    (void*) Native_networkCasinoBuyChips,
    (void*) Native_networkCasinoSellChips,
    (void*) Native_networkDeferCashTransactionsUntilShopSave,
    (void*) Native_canPayAmountToBoss,
    (void*) Native_networkEarnFromPickup,
    (void*) Native_networkEarnFromGangattackPickup,
    (void*) Native_networkEarnAssassinateTargetKilled,
    (void*) Native_networkEarnFromRobArmoredCars,
    (void*) Native_networkEarnFromCrateDrop,
    (void*) Native_networkEarnFromBetting,
    (void*) Native_networkEarnFromJob,
    (void*) Native_networkEarnFromJobx2,
    (void*) Native_networkEarnFromPremiumJob,
    (void*) Native_networkEarnFromBendJob,
    (void*) Native_networkEarnFromChallengeWin,
    (void*) Native_networkEarnFromBounty,
    (void*) Native_networkEarnFromImportExport,
    (void*) Native_networkEarnFromHoldups,
    (void*) Native_networkEarnFromProperty,
    (void*) Native_networkEarnFromAiTargetKill,
    (void*) Native_networkEarnFromNotBadsport,
    (void*) Native_networkEarnFromRockstar,
    (void*) Native_networkEarnFromVehicle,
    (void*) Native_networkEarnFromPersonalVehicle,
    (void*) Native_networkEarnFromDailyObjectives,
    (void*) Native_networkEarnFromAmbientJob,
    (void*) Native_networkEarnFromJobBonus,
    (void*) Native_networkEarnHeistAward,
    (void*) Native_networkEarnFirstTimeBonus,
    (void*) Native_networkEarnGoon,
    (void*) Native_networkEarnBoss,
    (void*) Native_networkEarnAgency,
    (void*) Native_networkEarnFromWarehouse,
    (void*) Native_networkEarnFromContraband,
    (void*) Native_networkEarnFromDestroyingContraband,
    (void*) Native_networkEarnFromSmugglerWork,
    (void*) Native_networkEarnFromHangarTrade,
    (void*) Native_networkEarnPurchaseClubHouse,
    (void*) Native_networkEarnFromBusinessProduct,
    (void*) Native_networkEarnFromVehicleExport,
    (void*) Native_networkEarnSmugglerAgency,
    (void*) Native_networkEarnBountyHunterReward,
    (void*) Native_networkEarnFromBusinessBattle,
    (void*) Native_networkEarnFromClubManagementParticipation,
    (void*) Native_networkEarnFromFmbbPhonecallMission,
    (void*) Native_networkEarnFromBusinessHubSell,
    (void*) Native_networkEarnFromFmbbBossWork,
    (void*) Native_networkEarnFmbbWageBonus,
    (void*) Native_networkCanSpendMoney,
    (void*) Native_networkCanSpendMoney2,
    (void*) Native_networkBuyItem,
    (void*) Native_networkSpentTaxi,
    (void*) Native_networkPayEmployeeWage,
    (void*) Native_networkPayMatchEntryFee,
    (void*) Native_networkSpentBetting,
    (void*) Native_networkSpentWager,
    (void*) Native_networkSpentInStripclub,
    (void*) Native_networkBuyHealthcare,
    (void*) Native_networkBuyAirstrike,
    (void*) Native_networkBuyBackupGang,
    (void*) Native_networkBuyHeliStrike,
    (void*) Native_networkSpentAmmoDrop,
    (void*) Native_networkBuyBounty,
    (void*) Native_networkBuyProperty,
    (void*) Native_networkBuySmokes,
    (void*) Native_networkSpentHeliPickup,
    (void*) Native_networkSpentBoatPickup,
    (void*) Native_networkSpentBullShark,
    (void*) Native_networkSpentCashDrop,
    (void*) Native_networkSpentHireMugger,
    (void*) Native_networkSpentRobbedByMugger,
    (void*) Native_networkSpentHireMercenary,
    (void*) Native_networkSpentBuyWantedlevel,
    (void*) Native_networkSpentBuyOfftheradar,
    (void*) Native_networkSpentBuyRevealPlayers,
    (void*) Native_networkSpentCarwash,
    (void*) Native_networkSpentCinema,
    (void*) Native_networkSpentTelescope,
    (void*) Native_networkSpentHoldups,
    (void*) Native_networkSpentBuyPassiveMode,
    (void*) Native_networkSpentBankInterest,
    (void*) Native_networkSpentProstitutes,
    (void*) Native_networkSpentArrestBail,
    (void*) Native_networkSpentPayVehicleInsurancePremium,
    (void*) Native_networkSpentCallPlayer,
    (void*) Native_networkSpentBounty,
    (void*) Native_networkSpentFromRockstar,
    (void*) Native_networkSpendEarnedFromBankAndWallets,
    (void*) Native_processCashGift,
    (void*) Native_networkSpentPlayerHealthcare,
    (void*) Native_networkSpentNoCops,
    (void*) Native_networkSpentCargoSourcing,
    (void*) Native_networkSpentRequestJob,
    (void*) Native_networkSpentRequestHeist,
    (void*) Native_networkBuyFairgroundRide,
    (void*) Native_networkEconomyHasFixedCrazyNumbers,
    (void*) Native_networkSpentJobSkip,
    (void*) Native_networkSpentBossGoon,
    (void*) Native_networkSpendGoon,
    (void*) Native_networkSpendBoss,
    (void*) Native_networkSpentMoveYacht,
    (void*) Native_networkSpentRenameOrganization,
    (void*) Native_networkBuyContrabandMission,
    (void*) Native_networkSpentPaServiceHeli,
    (void*) Native_networkSpentPaServiceVehicle,
    (void*) Native_networkSpentPaServiceSnack,
    (void*) Native_networkSpentPaServiceDancer,
    (void*) Native_networkSpentPaServiceImpound,
    (void*) Native_networkSpentPaHeliPickup,
    (void*) Native_networkSpentPurchaseOfficeProperty,
    (void*) Native_networkSpentUpgradeOfficeProperty,
    (void*) Native_networkSpentPurchaseWarehouseProperty,
    (void*) Native_networkSpentUpgradeWarehouseProperty,
    (void*) Native_networkSpentPurchaseImpexpWarehouseProperty,
    (void*) Native_networkSpentUpgradeImpexpWarehouseProperty,
    (void*) Native_networkSpentTradeImpexpWarehouseProperty,
    (void*) Native_networkSpentOrderWarehouseVehicle,
    (void*) Native_networkSpentOrderBodyguardVehicle,
    (void*) Native_networkSpentJukebox,
    (void*) Native_networkSpentPurchaseClubHouse,
    (void*) Native_networkSpentUpgradeClubHouse,
    (void*) Native_networkSpentPurchaseBusinessProperty,
    (void*) Native_networkSpentUpgradeBusinessProperty,
    (void*) Native_networkSpentTradeBusinessProperty,
    (void*) Native_networkSpentMcAbility,
    (void*) Native_networkSpentPayBusinessSupplies,
    (void*) Native_networkSpentChangeAppearance,
    (void*) Native_networkSpentVehicleExportMods,
    (void*) Native_networkSpentPurchaseOfficeGarage,
    (void*) Native_networkSpentUpgradeOfficeGarage,
    (void*) Native_networkSpentImportExportRepair,
    (void*) Native_networkSpentPurchaseHangar,
    (void*) Native_networkSpentUpgradeHangar,
    (void*) Native_networkSpentHangarUtilityCharges,
    (void*) Native_networkSpentHangarStaffCharges,
    (void*) Native_networkSpentBuyTruck,
    (void*) Native_networkSpentUpgradeTruck,
    (void*) Native_networkSpentBuyBunker,
    (void*) Native_networkSpentUpradeBunker,
    (void*) Native_networkEarnFromSellBunker,
    (void*) Native_networkSpentBallisticEquipment,
    (void*) Native_networkEarnRdrBonus,
    (void*) Native_networkEarnWagePayment,
    (void*) Native_networkEarnWagePaymentBonus,
    (void*) Native_networkSpentBuyBase,
    (void*) Native_networkSpentUpgradeBase,
    (void*) Native_networkSpentBuyTiltrotor,
    (void*) Native_networkSpentUpgradeTiltrotor,
    (void*) Native_networkSpentEmployAssassins,
    (void*) Native_networkSpendGangopsCannon,
    (void*) Native_networkSpendGangopsSkipMission,
    (void*) Native_networkSpendCasinoHeistSkipMission,
    (void*) Native_networkEarnSellBase,
    (void*) Native_networkEarnTargetRefund,
    (void*) Native_networkEarnGangopsWages,
    (void*) Native_networkEarnGangopsWagesBonus,
    (void*) Native_networkEarnDarChallenge,
    (void*) Native_networkEarnDoomsdayFinaleBonus,
    (void*) Native_networkEarnGangopsAward,
    (void*) Native_networkEarnGangopsElite,
    (void*) Native_networkServiceEarnGangopsRivalDelivery,
    (void*) Native_networkSpendGangopsStartStrand,
    (void*) Native_networkSpendGangopsTripSkip,
    (void*) Native_networkEarnGangopsPrepParticipation,
    (void*) Native_networkEarnGangopsSetup,
    (void*) Native_networkEarnGangopsFinale,
    (void*) Native_networkSpendGangopsRepairCost,
    (void*) Native_networkEarnNightclub,
    (void*) Native_networkEarnNightclubDancing,
    (void*) Native_networkEarnBbEventBonus,
    (void*) Native_networkSpentPurchaseHackerTruck,
    (void*) Native_networkSpentUpgradeHackerTruck,
    (void*) Native_networkEarnHackerTruck,
    (void*) Native_networkSpentPurchaseNightclubAndWarehouse,
    (void*) Native_networkSpentUpgradeNightclubAndWarehouse,
    (void*) Native_networkEarnNightclubAndWarehouse,
    (void*) Native_networkSpendNightclubAndWarehouse,
    (void*) Native_networkSpentRdrHatchetBonus,
    (void*) Native_networkSpentNightclubEntryFee,
    (void*) Native_networkSpendNightclubBarDrink,
    (void*) Native_networkSpendBountyHunterMission,
    (void*) Native_networkSpentRehireDj,
    (void*) Native_networkSpentArenaJoinSpectator,
    (void*) Native_networkEarnArenaSkillLevelProgression,
    (void*) Native_networkEarnArenaCareerProgression,
    (void*) Native_networkSpendMakeItRain,
    (void*) Native_networkSpendBuyArena,
    (void*) Native_networkSpendUpgradeArena,
    (void*) Native_networkSpendArenaSpectatorBox,
    (void*) Native_networkSpendSpinTheWheelPayment,
    (void*) Native_networkEarnSpinTheWheelCash,
    (void*) Native_networkSpendArenaPremium,
    (void*) Native_networkEarnArenaWar,
    (void*) Native_networkEarnArenaWarAssassinateTarget,
    (void*) Native_networkEarnArenaWarEventCargo,
    (void*) Native_networkEarnRcTimeTrial,
    (void*) Native_networkEarnDailyObjectiveEvent,
    (void*) Native_networkSpendCasinoMembership,
    (void*) Native_networkSpendBuyCasino,
    (void*) Native_networkSpendUpgradeCasino,
    (void*) Native_networkSpendCasinoGeneric,
    (void*) Native_networkEarnCasinoTimeTrialWin,
    (void*) Native_networkEarnCollectablesActionFigures,
    (void*) Native_networkEarnCasinoCollectableCompletedCollection,
    (void*) Native_networkEarnSellPrizeVehicle,
    (void*) Native_networkEarnCasinoMissionReward,
    (void*) Native_networkEarnCasinoStoryMissionReward,
    (void*) Native_networkEarnCasinoMissionParticipation,
    (void*) Native_networkEarnCasinoAward,
    (void*) Native_networkSpendBuyArcade,
    (void*) Native_networkSpendUpgradeArcade,
    (void*) Native_networkSpendCasinoHeist,
    (void*) Native_networkSpendArcadeMgmt,
    (void*) Native_networkSpendPlayArcade,
    (void*) Native_networkSpendArcade,
    (void*) Native_networkEarnCasinoHeist,
    (void*) Native_networkEarnUpgradeArcade,
    (void*) Native_networkEarnArcade,
    (void*) Native_networkEarnCollectables,
    (void*) Native_networkEarnChallenge,
    (void*) Native_networkEarnCasinoHeistAwards,
    (void*) Native_networkEarnCollectableItem,
    (void*) Native_networkEarnCollectableCompletedCollection,
    (void*) Native_networkEarnYatchMission,
    (void*) Native_networkEarnDispatchCall,
    (void*) Native_networkSpendBeachParty,
    (void*) Native_networkSpendSubmarine,
    (void*) Native_networkSpendCasinoClub,
    (void*) Native_networkSpendBuySub,
    (void*) Native_networkSpendUpgradeSub,
    (void*) Native_networkSpendIslandHeist,
    (void*) Native_networkEarnIslandHeist,
    (void*) Native_networkEarnBeachPartyLostFound,
    (void*) Native_networkEarnFromIslandHeistDjMission,
    (void*) Native_networkSpendCarClubMembership,
    (void*) Native_networkSpendCarClubBar,
    (void*) Native_networkSpendAutoshopModify,
    (void*) Native_networkSpendCarClubTakeover,
    (void*) Native_networkSpendBuyAutoshop,
    (void*) Native_networkSpendUpgradeAutoshop,
    (void*) Native_networkEarnAutoshopBusiness,
    (void*) Native_networkEarnAutoshopIncome,
    (void*) Native_networkEarnCarclubMembership,
    (void*) Native_networkEarnDailyVehicle,
    (void*) Native_networkEarnDailyVehicleBonus,
    (void*) Native_networkEarnTunerAward,
    (void*) Native_networkEarnTunerRobbery,
    (void*) Native_networkEarnUpgradeAutoshop,
    (void*) Native_networkSpendInteractionMenuAbility,
    (void*) Native_networkSpendSetCommonFields,
    (void*) Native_networkSpendSetDiscount,
    (void*) Native_networkSpendBuyAgency,
    (void*) Native_networkSpendUpgradeAgency,
    (void*) Native_networkSpendAgency,
    (void*) Native_networkSpendHidden,
    (void*) Native_networkSpendSourceBike,
    (void*) Native_networkSpendCompSuv,
    (void*) Native_networkSpendSuvFstTrvl,
    (void*) Native_networkSpendSupply,
    (void*) Native_networkSpendBikeShop,
    (void*) Native_networkSpendVehicleRequested,
    (void*) Native_networkSpendGunrunning,
    (void*) Native_networkEarnAgencySafe,
    (void*) Native_networkEarnAwardContract,
    (void*) Native_networkEarnAgencyContract,
    (void*) Native_networkEarnAwardPhone,
    (void*) Native_networkEarnAgencyPhone,
    (void*) Native_networkEarnAwardFixerMission,
    (void*) Native_networkEarnFixerPrep,
    (void*) Native_networkEarnFixerFinale,
    (void*) Native_networkEarnFixerAgencyShortTrip,
    (void*) Native_networkEarnAwardShortTrip,
    (void*) Native_networkEarnFixerRivalDelivery,
    (void*) Native_networkEarnUpgradeAgency,
    (void*) Native_networkSpendApartmentUtilities,
    (void*) Native_networkSpendBusinessPropertyFees,
    (void*) Native_networkEarnSightseeingReward,
    (void*) Native_networkEarnBikerShop,
    (void*) Native_networkEarnBiker,
    (void*) Native_networkYohanSourceGoods,
    (void*) Native_networkGetVcBankBalance,
    (void*) Native_networkGetVcWalletBalance,
    (void*) Native_networkGetVcBalance,
    (void*) Native_networkGetEvcBalance,
    (void*) Native_networkGetPvcBalance,
    (void*) Native_networkGetStringWalletBalance,
    (void*) Native_networkGetStringBankBalance,
    (void*) Native_networkGetStringBankWalletBalance,
    (void*) Native_networkGetCanSpendFromWallet,
    (void*) Native_networkGetCanSpendFromBank,
    (void*) Native_networkGetCanSpendFromBankAndWallet,
    (void*) Native_networkGetPvcTransferBalance,
    (void*) Native_networkGetCanTransferCash,
    (void*) Native_networkCanReceivePlayerCash,
    (void*) Native_networkGetRemainingTransferBalance,
    (void*) Native_withdrawVc,
    (void*) Native_depositVc,
    (void*) Native_hasVcWithdrawalCompleted,
    (void*) Native_wasVcWithdrawalSuccessful,
    (void*) Native_netGameserverUseServerTransactions,
    (void*) Native_netGameserverCatalogItemIsValid,
    (void*) Native_netGameserverCatalogItemKeyIsValid,
    (void*) Native_netGameserverGetPrice,
    (void*) Native_netGameserverCatalogIsValid,
    (void*) Native_netGameserverIsCatalogCurrent,
    (void*) Native_netGameserverGetCatalogCloudCrc,
    (void*) Native_netGameserverRefreshServerCatalog,
    (void*) Native_netGameserverRetrieveCatalogRefreshStatus,
    (void*) Native_netGameserverInitSession,
    (void*) Native_netGameserverRetrieveInitSessionStatus,
    (void*) Native_netGameserverStartSession,
    (void*) Native_netGameserverStartSessionPending,
    (void*) Native_netGameserverRetrieveStartSessionStatus,
    (void*) Native_netGameserverRetrieveSessionErrorCode,
    (void*) Native_netGameserverIsSessionValid,
    (void*) Native_netGameserverClearSession,
    (void*) Native_netGameserverSessionApplyReceivedData,
    (void*) Native_netGameserverIsSessionRefreshPending,
    (void*) Native_netGameserverStartSessionRestart,
    (void*) Native_netGameserverTransactionInProgress,
    (void*) Native_netGameserverGetSessionStateAndStatus,
    (void*) Native_netGameserverBasketStart,
    (void*) Native_netGameserverBasketEnd,
    (void*) Native_netGameserverBasketIsActive,
    (void*) Native_netGameserverBasketAddItem,
    (void*) Native_netGameserverBasketIsFull,
    (void*) Native_netGameserverBasketApplyServerData,
    (void*) Native_netGameserverCheckoutStart,
    (void*) Native_netGameserverBeginService,
    (void*) Native_netGameserverEndService,
    (void*) Native_netGameserverDeleteCharacter,
    (void*) Native_netGameserverDeleteCharacterGetStatus,
    (void*) Native_netGameserverDeleteSetTelemetryNonceSeed,
    (void*) Native_netGameserverTransferBankToWallet,
    (void*) Native_netGameserverTransferWalletToBank,
    (void*) Native_netGameserverTransferBankToWalletGetStatus,
    (void*) Native_netGameserverTransferWalletToBankGetStatus,
    (void*) Native_netGameserverTransferCashSetTelemetryNonceSeed,
    (void*) Native_netGameserverSetTelemetryNonceSeed,
    (void*) Native_getOnlineVersion,
    (void*) Native_networkIsSignedIn,
    (void*) Native_networkIsSignedOnline,
    (void*) Native_networkIsNpAvailable,
    (void*) Native_networkIsNpPending,
    (void*) Native_networkGetNpUnavailableReason,
    (void*) Native_networkIsConnetedToNpPresence,
    (void*) Native_networkIsLoggedInToPsn,
    (void*) Native_networkHasValidRosCredentials,
    (void*) Native_networkIsRefreshingRosCredentials,
    (void*) Native_networkIsCloudAvailable,
    (void*) Native_networkHasSocialClubAccount,
    (void*) Native_networkAreSocialClubPoliciesCurrent,
    (void*) Native_networkIsHost,
    (void*) Native_networkGetHostPlayerIndex,
    (void*) Native_networkWasGameSuspended,
    (void*) Native_networkHaveOnlinePrivileges,
    (void*) Native_networkHasAgeRestrictions,
    (void*) Native_networkHaveUserContentPrivileges,
    (void*) Native_networkHaveCommunicationPrivileges,
    (void*) Native_networkCheckOnlinePrivileges,
    (void*) Native_networkCheckUserContentPrivileges,
    (void*) Native_networkCheckCommunicationPrivileges,
    (void*) Native_networkCheckTextCommunicationPrivileges,
    (void*) Native_networkIsUsingOnlinePromotion,
    (void*) Native_networkShouldShowPromotionAlertScreen,
    (void*) Native_networkHasSocialNetworkingSharingPriv,
    (void*) Native_networkGetAgeGroup,
    (void*) Native_networkCheckPrivileges,
    (void*) Native_networkIsPrivilegeCheckInProgress,
    (void*) Native_networkSetPrivilegeCheckResultNotNeeded,
    (void*) Native_networkResolvePrivilegeUserContent,
    (void*) Native_networkHavePlatformSubscription,
    (void*) Native_networkIsPlatformSubscriptionCheckPending,
    (void*) Native_networkShowAccountUpgradeUi,
    (void*) Native_networkIsShowingSystemUiOrRecentlyRequestedUpsell,
    (void*) Native_networkNeedToStartNewGameButBlocked,
    (void*) Native_networkCanBail,
    (void*) Native_networkBail,
    (void*) Native_networkOnReturnToSinglePlayer,
    (void*) Native_networkTransitionStart,
    (void*) Native_networkTransitionAddStage,
    (void*) Native_networkTransitionFinish,
    (void*) Native_networkCanAccessMultiplayer,
    (void*) Native_networkIsMultiplayerDisabled,
    (void*) Native_networkCanEnterMultiplayer,
    (void*) Native_networkSessionDoFreeroamQuickmatch,
    (void*) Native_networkSessionDoFriendMatchmaking,
    (void*) Native_networkSessionDoCrewMatchmaking,
    (void*) Native_networkSessionDoActivityQuickmatch,
    (void*) Native_networkSessionHost,
    (void*) Native_networkSessionHostClosed,
    (void*) Native_networkSessionHostFriendsOnly,
    (void*) Native_networkSessionIsClosedFriends,
    (void*) Native_networkSessionIsClosedCrew,
    (void*) Native_networkSessionIsSolo,
    (void*) Native_networkSessionIsPrivate,
    (void*) Native_networkSessionEnd,
    (void*) Native_networkSessionLeave,
    (void*) Native_networkSessionKickPlayer,
    (void*) Native_networkSessionGetKickVote,
    (void*) Native_networkSessionReserveSlotsTransition,
    (void*) Native_networkJoinPreviouslyFailedSession,
    (void*) Native_networkJoinPreviouslyFailedTransition,
    (void*) Native_networkSessionSetMatchmakingGroup,
    (void*) Native_networkSessionSetMatchmakingGroupMax,
    (void*) Native_networkSessionGetMatchmakingGroupFree,
    (void*) Native_networkSessionAddActiveMatchmakingGroup,
    (void*) Native_networkSessionSetUniqueCrewLimit,
    (void*) Native_networkSessionSetUniqueCrewLimitTransition,
    (void*) Native_networkSessionSetUniqueCrewOnlyCrewsTransition,
    (void*) Native_networkSessionSetCrewLimitMaxMembersTransition,
    (void*) Native_networkSessionSetMatchmakingPropertyId,
    (void*) Native_networkSessionSetMatchmakingMentalState,
    (void*) Native_networkSessionSetNumBosses,
    (void*) Native_networkSessionSetScriptValidateJoin,
    (void*) Native_networkSessionValidateJoin,
    (void*) Native_networkAddFollowers,
    (void*) Native_networkClearFollowers,
    (void*) Native_networkGetGlobalMultiplayerClock,
    (void*) Native_networkSessionSetGamemode,
    (void*) Native_networkSessionGetHostAimPreference,
    (void*) Native_networkFindGamersInCrew,
    (void*) Native_networkFindMatchedGamers,
    (void*) Native_networkIsFindingGamers,
    (void*) Native_networkDidFindGamersSucceed,
    (void*) Native_networkGetNumFoundGamers,
    (void*) Native_networkGetFoundGamer,
    (void*) Native_networkClearFoundGamers,
    (void*) Native_networkQueueGamerForStatus,
    (void*) Native_networkGetGamerStatusFromQueue,
    (void*) Native_networkIsGettingGamerStatus,
    (void*) Native_networkDidGetGamerStatusSucceed,
    (void*) Native_networkGetGamerStatusResult,
    (void*) Native_networkClearGetGamerStatus,
    (void*) Native_networkSessionJoinInvite,
    (void*) Native_networkSessionCancelInvite,
    (void*) Native_networkSessionForceCancelInvite,
    (void*) Native_networkHasPendingInvite,
    (void*) Native_networkHasConfirmedInvite,
    (void*) Native_networkRequestInviteConfirmedEvent,
    (void*) Native_networkSessionWasInvited,
    (void*) Native_networkSessionGetInviter,
    (void*) Native_networkSessionIsAwaitingInviteResponse,
    (void*) Native_networkSessionIsDisplayingInviteConfirmation,
    (void*) Native_networkSuppressInvite,
    (void*) Native_networkBlockInvites,
    (void*) Native_networkBlockJoinQueueInvites,
    (void*) Native_networkSetCanReceiveRsInvites,
    (void*) Native_networkStoreInviteThroughRestart,
    (void*) Native_networkAllowInviteProcessInPlayerSwitch,
    (void*) Native_networkSetScriptReadyForEvents,
    (void*) Native_networkIsOfflineInvitePending,
    (void*) Native_networkClearOfflineInvitePending,
    (void*) Native_networkSessionHostSinglePlayer,
    (void*) Native_networkSessionLeaveSinglePlayer,
    (void*) Native_networkIsGameInProgress,
    (void*) Native_networkIsSessionActive,
    (void*) Native_networkIsInSession,
    (void*) Native_networkIsSessionStarted,
    (void*) Native_networkIsSessionBusy,
    (void*) Native_networkCanSessionEnd,
    (void*) Native_networkGetGameMode,
    (void*) Native_networkSessionMarkVisible,
    (void*) Native_networkSessionIsVisible,
    (void*) Native_networkSessionBlockJoinRequests,
    (void*) Native_networkSessionChangeSlots,
    (void*) Native_networkSessionGetPrivateSlots,
    (void*) Native_networkSessionVoiceHost,
    (void*) Native_networkSessionVoiceLeave,
    (void*) Native_networkSessionVoiceConnectToPlayer,
    (void*) Native_networkSessionVoiceRespondToRequest,
    (void*) Native_networkSessionVoiceSetTimeout,
    (void*) Native_networkSessionIsInVoiceSession,
    (void*) Native_networkSessionIsVoiceSessionActive,
    (void*) Native_networkSessionIsVoiceSessionBusy,
    (void*) Native_networkSendTextMessage,
    (void*) Native_networkSetActivitySpectator,
    (void*) Native_networkIsActivitySpectator,
    (void*) Native_networkSetActivityPlayerMax,
    (void*) Native_networkSetActivitySpectatorMax,
    (void*) Native_networkGetActivityPlayerNum,
    (void*) Native_networkIsActivitySpectatorFromHandle,
    (void*) Native_networkHostTransition,
    (void*) Native_networkDoTransitionQuickmatch,
    (void*) Native_networkDoTransitionQuickmatchAsync,
    (void*) Native_networkDoTransitionQuickmatchWithGroup,
    (void*) Native_networkJoinGroupActivity,
    (void*) Native_networkClearGroupActivity,
    (void*) Native_networkRetainActivityGroup,
    (void*) Native_networkIsTransitionClosedFriends,
    (void*) Native_networkIsTransitionClosedCrew,
    (void*) Native_networkIsTransitionSolo,
    (void*) Native_networkIsTransitionPrivate,
    (void*) Native_networkGetNumTransitionNonAsyncGamers,
    (void*) Native_networkMarkAsPreferredActivity,
    (void*) Native_networkMarkAsWaitingAsync,
    (void*) Native_networkSetInProgressFinishTime,
    (void*) Native_networkSetTransitionCreatorHandle,
    (void*) Native_networkClearTransitionCreatorHandle,
    (void*) Native_networkInviteGamersToTransition,
    (void*) Native_networkSetGamerInvitedToTransition,
    (void*) Native_networkLeaveTransition,
    (void*) Native_networkLaunchTransition,
    (void*) Native_networkSetDoNotLaunchFromJoinAsMigratedHost,
    (void*) Native_networkCancelTransitionMatchmaking,
    (void*) Native_networkBailTransition,
    (void*) Native_networkDoTransitionToGame,
    (void*) Native_networkDoTransitionToNewGame,
    (void*) Native_networkDoTransitionToFreemode,
    (void*) Native_networkDoTransitionToNewFreemode,
    (void*) Native_networkIsTransitionToGame,
    (void*) Native_networkGetTransitionMembers,
    (void*) Native_networkApplyTransitionParameter,
    (void*) Native_networkApplyTransitionParameterString,
    (void*) Native_networkSendTransitionGamerInstruction,
    (void*) Native_networkMarkTransitionGamerAsFullyJoined,
    (void*) Native_networkIsTransitionHost,
    (void*) Native_networkIsTransitionHostFromHandle,
    (void*) Native_networkGetTransitionHost,
    (void*) Native_networkIsInTransition,
    (void*) Native_networkIsTransitionStarted,
    (void*) Native_networkIsTransitionBusy,
    (void*) Native_networkIsTransitionMatchmaking,
    (void*) Native_networkIsTransitionLeavePostponed,
    (void*) Native_networkTransitionSetInProgress,
    (void*) Native_networkTransitionSetContentCreator,
    (void*) Native_networkTransitionSetActivityIsland,
    (void*) Native_networkOpenTransitionMatchmaking,
    (void*) Native_networkCloseTransitionMatchmaking,
    (void*) Native_networkIsTransitionOpenToMatchmaking,
    (void*) Native_networkSetTransitionVisibilityLock,
    (void*) Native_networkIsTransitionVisibilityLocked,
    (void*) Native_networkSetTransitionActivityId,
    (void*) Native_networkChangeTransitionSlots,
    (void*) Native_networkTransitionBlockJoinRequests,
    (void*) Native_networkHasPlayerStartedTransition,
    (void*) Native_networkAreTransitionDetailsValid,
    (void*) Native_networkJoinTransition,
    (void*) Native_networkHasInvitedGamerToTransition,
    (void*) Native_networkHasTransitionInviteBeenAcked,
    (void*) Native_networkIsActivitySession,
    (void*) Native_networkDisableRealtimeMultiplayer,
    (void*) Native_networkSetPresenceSessionInvitesBlocked,
    (void*) Native_networkSendInviteViaPresence,
    (void*) Native_networkSendTransitionInviteViaPresence,
    (void*) Native_networkSendImportantTransitionInviteViaPresence,
    (void*) Native_networkGetPresenceInviteIndexById,
    (void*) Native_networkGetNumPresenceInvites,
    (void*) Native_networkAcceptPresenceInvite,
    (void*) Native_networkRemovePresenceInvite,
    (void*) Native_networkGetPresenceInviteId,
    (void*) Native_networkGetPresenceInviteInviter,
    (void*) Native_networkGetPresenceInviteHandle,
    (void*) Native_networkGetPresenceInviteSessionId,
    (void*) Native_networkGetPresenceInviteContentId,
    (void*) Native_networkGetPresenceInvitePlaylistLength,
    (void*) Native_networkGetPresenceInvitePlaylistCurrent,
    (void*) Native_networkGetPresenceInviteFromAdmin,
    (void*) Native_networkGetPresenceInviteIsTournament,
    (void*) Native_networkHasFollowInvite,
    (void*) Native_networkActionFollowInvite,
    (void*) Native_networkClearFollowInvite,
    (void*) Native_networkRemoveAndCancelAllInvites,
    (void*) Native_networkRemoveTransitionInvite,
    (void*) Native_networkRemoveAllTransitionInvite,
    (void*) Native_networkRemoveAndCancelAllTransitionInvites,
    (void*) Native_networkInviteGamers,
    (void*) Native_networkHasInvitedGamer,
    (void*) Native_networkHasMadeInviteDecision,
    (void*) Native_networkGetInviteReplyStatus,
    (void*) Native_networkGetCurrentlySelectedGamerHandleFromInviteMenu,
    (void*) Native_networkSetCurrentlySelectedGamerHandleFromInviteMenu,
    (void*) Native_networkSetInviteOnCallForInviteMenu,
    (void*) Native_networkCheckDataManagerSucceededForHandle,
    (void*) Native_networkCheckDataManagerForHandle,
    (void*) Native_networkSetInviteFailedMessageForInviteMenu,
    (void*) Native_filloutPmPlayerList,
    (void*) Native_filloutPmPlayerListWithNames,
    (void*) Native_refreshPlayerListStats,
    (void*) Native_networkSetCurrentDataManagerHandle,
    (void*) Native_networkIsInPlatformParty,
    (void*) Native_networkGetPlatformPartyMemberCount,
    (void*) Native_networkGetPlatformPartyMembers,
    (void*) Native_networkIsInPlatformPartyChat,
    (void*) Native_networkIsChattingInPlatformParty,
    (void*) Native_networkCanQueueForPreviousSessionJoin,
    (void*) Native_networkIsQueuingForSessionJoin,
    (void*) Native_networkClearQueuedJoinRequest,
    (void*) Native_networkSendQueuedJoinRequest,
    (void*) Native_networkRemoveAllQueuedJoinRequests,
    (void*) Native_networkSeedRandomNumberGenerator,
    (void*) Native_networkGetRandomInt,
    (void*) Native_networkGetRandomIntRanged,
    (void*) Native_networkPlayerIsCheater,
    (void*) Native_networkPlayerGetCheaterReason,
    (void*) Native_networkPlayerIsBadsport,
    (void*) Native_triggerPlayerCrcHackerCheck,
    (void*) Native_triggerTuningCrcHackerCheck,
    (void*) Native_triggerFileCrcHackerCheck,
    (void*) Native_remoteCheaterPlayerDetected,
    (void*) Native_badSportPlayerLeftDetected,
    (void*) Native_networkAddInvalidObjectModel,
    (void*) Native_networkRemoveInvalidObjectModel,
    (void*) Native_networkClearInvalidObjectModels,
    (void*) Native_networkApplyPedScarData,
    (void*) Native_networkSetThisScriptIsNetworkScript,
    (void*) Native_networkTryToSetThisScriptIsNetworkScript,
    (void*) Native_networkGetThisScriptIsNetworkScript,
    (void*) Native_networkGetMaxNumParticipants,
    (void*) Native_networkGetNumParticipants,
    (void*) Native_networkGetScriptStatus,
    (void*) Native_networkRegisterHostBroadcastVariables,
    (void*) Native_networkRegisterPlayerBroadcastVariables,
    (void*) Native_networkRegisterHighFrequencyHostBroadcastVariables,
    (void*) Native_networkRegisterHighFrequencyPlayerBroadcastVariables,
    (void*) Native_networkFinishBroadcastingData,
    (void*) Native_networkHasReceivedHostBroadcastData,
    (void*) Native_networkGetPlayerIndex,
    (void*) Native_networkGetParticipantIndex,
    (void*) Native_networkGetPlayerIndexFromPed,
    (void*) Native_networkGetNumConnectedPlayers,
    (void*) Native_networkIsPlayerConnected,
    (void*) Native_networkGetTotalNumPlayers,
    (void*) Native_networkIsParticipantActive,
    (void*) Native_networkIsPlayerActive,
    (void*) Native_networkIsPlayerAParticipant,
    (void*) Native_networkIsHostOfThisScript,
    (void*) Native_networkGetHostOfThisScript,
    (void*) Native_networkGetHostOfScript,
    (void*) Native_networkSetMissionFinished,
    (void*) Native_networkIsScriptActive,
    (void*) Native_networkIsScriptActiveByHash,
    (void*) Native_networkIsThreadANetworkScript,
    (void*) Native_networkGetNumScriptParticipants,
    (void*) Native_networkGetInstanceIdOfThisScript,
    (void*) Native_networkGetPositionHashOfThisScript,
    (void*) Native_networkIsPlayerAParticipantOnScript,
    (void*) Native_networkPreventScriptHostMigration,
    (void*) Native_networkRequestToBeHostOfThisScript,
    (void*) Native_participantId,
    (void*) Native_participantIdToInt,
    (void*) Native_networkGetKillerOfPlayer,
    (void*) Native_networkGetDestroyerOfNetworkId,
    (void*) Native_networkGetDestroyerOfEntity,
    (void*) Native_networkGetAssistedKillOfEntity,
    (void*) Native_networkGetAssistedDamageOfEntity,
    (void*) Native_networkGetEntityKillerOfPlayer,
    (void*) Native_networkSetCurrentPublicContentId,
    (void*) Native_networkSetCurrentSpawnLocationOption,
    (void*) Native_networkSetVehicleDrivenInTestDrive,
    (void*) Native_networkResurrectLocalPlayer,
    (void*) Native_networkSetLocalPlayerInvincibleTime,
    (void*) Native_networkIsLocalPlayerInvincible,
    (void*) Native_networkDisableInvincibleFlashing,
    (void*) Native_networkPatchPostCutsceneHs4fTunEnt,
    (void*) Native_networkSetLocalPlayerSyncLookAt,
    (void*) Native_networkHasEntityBeenRegisteredWithThisThread,
    (void*) Native_networkGetNetworkIdFromEntity,
    (void*) Native_networkGetEntityFromNetworkId,
    (void*) Native_networkGetEntityIsNetworked,
    (void*) Native_networkGetEntityIsLocal,
    (void*) Native_networkRegisterEntityAsNetworked,
    (void*) Native_networkUnregisterNetworkedEntity,
    (void*) Native_networkDoesNetworkIdExist,
    (void*) Native_networkDoesEntityExistWithNetworkId,
    (void*) Native_networkRequestControlOfNetworkId,
    (void*) Native_networkHasControlOfNetworkId,
    (void*) Native_networkIsNetworkIdRemotelyControlled,
    (void*) Native_networkRequestControlOfEntity,
    (void*) Native_networkRequestControlOfDoor,
    (void*) Native_networkHasControlOfEntity,
    (void*) Native_networkHasControlOfPickup,
    (void*) Native_networkHasControlOfDoor,
    (void*) Native_networkIsDoorNetworked,
    (void*) Native_vehToNet,
    (void*) Native_pedToNet,
    (void*) Native_objToNet,
    (void*) Native_netToVeh,
    (void*) Native_netToPed,
    (void*) Native_netToObj,
    (void*) Native_netToEnt,
    (void*) Native_networkGetLocalHandle,
    (void*) Native_networkHandleFromUserId,
    (void*) Native_networkHandleFromMemberId,
    (void*) Native_networkHandleFromPlayer,
    (void*) Native_networkHashFromPlayerHandle,
    (void*) Native_networkHashFromGamerHandle,
    (void*) Native_networkHandleFromFriend,
    (void*) Native_networkGamertagFromHandleStart,
    (void*) Native_networkGamertagFromHandlePending,
    (void*) Native_networkGamertagFromHandleSucceeded,
    (void*) Native_networkGetGamertagFromHandle,
    (void*) Native_networkDisplaynamesFromHandlesStart,
    (void*) Native_networkGetDisplaynamesFromHandles,
    (void*) Native_networkAreHandlesTheSame,
    (void*) Native_networkIsHandleValid,
    (void*) Native_networkGetPlayerFromGamerHandle,
    (void*) Native_networkMemberIdFromGamerHandle,
    (void*) Native_networkIsGamerInMySession,
    (void*) Native_networkShowProfileUi,
    (void*) Native_networkPlayerGetName,
    (void*) Native_networkPlayerGetUserid,
    (void*) Native_networkPlayerIsRockstarDev,
    (void*) Native_networkPlayerIndexIsCheater,
    (void*) Native_networkEntityGetObjectId,
    (void*) Native_networkGetEntityFromObjectId,
    (void*) Native_networkIsInactiveProfile,
    (void*) Native_networkGetMaxFriends,
    (void*) Native_networkGetFriendCount,
    (void*) Native_networkGetFriendName,
    (void*) Native_networkGetFriendDisplayName,
    (void*) Native_networkIsFriendOnline,
    (void*) Native_networkIsFriendHandleOnline,
    (void*) Native_networkIsFriendInSameTitle,
    (void*) Native_networkIsFriendInMultiplayer,
    (void*) Native_networkIsFriend,
    (void*) Native_networkIsPendingFriend,
    (void*) Native_networkIsAddingFriend,
    (void*) Native_networkAddFriend,
    (void*) Native_networkIsFriendIndexOnline,
    (void*) Native_networkSetPlayerIsPassive,
    (void*) Native_networkGetPlayerOwnsWaypoint,
    (void*) Native_networkCanSetWaypoint,
    (void*) Native_networkIgnoreRemoteWaypoints,
    (void*) Native_networkSetScriptAutomuted,
    (void*) Native_networkHasAutomuteOverride,
    (void*) Native_networkHasHeadset,
    (void*) Native_networkSetLookAtTalkers,
    (void*) Native_networkIsPushToTalkActive,
    (void*) Native_networkGamerHasHeadset,
    (void*) Native_networkIsGamerTalking,
    (void*) Native_networkPermissionsHasGamerRecord,
    (void*) Native_networkCanCommunicateWithGamer,
    (void*) Native_networkCanTextChatWithGamer,
    (void*) Native_networkIsGamerMutedByMe,
    (void*) Native_networkAmIMutedByGamer,
    (void*) Native_networkIsGamerBlockedByMe,
    (void*) Native_networkAmIBlockedByGamer,
    (void*) Native_networkCanViewGamerUserContent,
    (void*) Native_networkHasViewGamerUserContentResult,
    (void*) Native_networkCanPlayMultiplayerWithGamer,
    (void*) Native_networkCanGamerPlayMultiplayerWithMe,
    (void*) Native_networkCanSendLocalInvite,
    (void*) Native_networkCanReceiveLocalInvite,
    (void*) Native_networkIsPlayerTalking,
    (void*) Native_networkPlayerHasHeadset,
    (void*) Native_networkIsPlayerMutedByMe,
    (void*) Native_networkAmIMutedByPlayer,
    (void*) Native_networkIsPlayerBlockedByMe,
    (void*) Native_networkAmIBlockedByPlayer,
    (void*) Native_networkGetPlayerLoudness,
    (void*) Native_networkSetTalkerProximity,
    (void*) Native_networkGetTalkerProximity,
    (void*) Native_networkSetVoiceActive,
    (void*) Native_networkRemainInGameChat,
    (void*) Native_networkOverrideTransitionChat,
    (void*) Native_networkSetTeamOnlyChat,
    (void*) Native_networkSetScriptControllingTeams,
    (void*) Native_networkSetSameTeamAsLocalPlayer,
    (void*) Native_networkOverrideTeamRestrictions,
    (void*) Native_networkSetOverrideSpectatorMode,
    (void*) Native_networkSetOverrideTutorialSessionChat,
    (void*) Native_networkSetProximityAffectsTeam,
    (void*) Native_networkSetNoSpectatorChat,
    (void*) Native_networkSetIgnoreSpectatorChatLimitsSameTeam,
    (void*) Native_networkOverrideChatRestrictions,
    (void*) Native_networkOverrideSendRestrictions,
    (void*) Native_networkOverrideSendRestrictionsAll,
    (void*) Native_networkOverrideReceiveRestrictions,
    (void*) Native_networkOverrideReceiveRestrictionsAll,
    (void*) Native_networkSetVoiceChannel,
    (void*) Native_networkClearVoiceChannel,
    (void*) Native_networkApplyVoiceProximityOverride,
    (void*) Native_networkClearVoiceProximityOverride,
    (void*) Native_networkEnableVoiceBandwidthRestriction,
    (void*) Native_networkDisableVoiceBandwidthRestriction,
    (void*) Native_networkGetMuteCountForPlayer,
    (void*) Native_networkSetSpectatorToNonSpectatorTextChat,
    (void*) Native_networkTextChatIsTyping,
    (void*) Native_shutdownAndLaunchSinglePlayerGame,
    (void*) Native_shutdownAndLoadMostRecentSave,
    (void*) Native_networkSetFriendlyFireOption,
    (void*) Native_networkSetRichPresence,
    (void*) Native_networkSetRichPresenceString,
    (void*) Native_networkGetTimeoutTime,
    (void*) Native_networkLeavePedBehindBeforeWarp,
    (void*) Native_networkLeavePedBehindBeforeCutscene,
    (void*) Native_removeAllStickyBombsFromEntity,
    (void*) Native_networkKeepEntityCollisionDisabledAfterAnimScene,
    (void*) Native_networkIsAnyPlayerNear,
    (void*) Native_networkClanServiceIsValid,
    (void*) Native_networkClanPlayerIsActive,
    (void*) Native_networkClanPlayerGetDesc,
    (void*) Native_networkClanIsRockstarClan,
    (void*) Native_networkClanGetUiFormattedTag,
    (void*) Native_networkClanGetLocalMembershipsCount,
    (void*) Native_networkClanGetMembershipDesc,
    (void*) Native_networkClanDownloadMembership,
    (void*) Native_networkClanDownloadMembershipPending,
    (void*) Native_networkClanAnyDownloadMembershipPending,
    (void*) Native_networkClanRemoteMembershipsAreInCache,
    (void*) Native_networkClanGetMembershipCount,
    (void*) Native_networkClanGetMembershipValid,
    (void*) Native_networkClanGetMembership,
    (void*) Native_networkClanJoin,
    (void*) Native_networkClanCrewinfoGetStringValue,
    (void*) Native_networkClanCrewinfoGetCrewranktitle,
    (void*) Native_networkClanHasCrewinfoMetadataBeenReceived,
    (void*) Native_networkClanGetEmblemTxdName,
    (void*) Native_networkClanRequestEmblem,
    (void*) Native_networkClanIsEmblemReady,
    (void*) Native_networkClanReleaseEmblem,
    (void*) Native_networkGetPrimaryClanDataClear,
    (void*) Native_networkGetPrimaryClanDataCancel,
    (void*) Native_networkGetPrimaryClanDataStart,
    (void*) Native_networkGetPrimaryClanDataPending,
    (void*) Native_networkGetPrimaryClanDataSuccess,
    (void*) Native_networkGetPrimaryClanDataNew,
    (void*) Native_setNetworkIdCanMigrate,
    (void*) Native_setNetworkIdExistsOnAllMachines,
    (void*) Native_setNetworkIdAlwaysExistsForPlayer,
    (void*) Native_setNetworkIdCanBeReassigned,
    (void*) Native_networkSetEntityCanBlend,
    (void*) Native_networkSetObjectCanBlendWhenFixed,
    (void*) Native_networkSetEntityOnlyExistsForParticipants,
    (void*) Native_setNetworkIdVisibleInCutscene,
    (void*) Native_setNetworkIdVisibleInCutsceneHack,
    (void*) Native_setNetworkIdVisibleInCutsceneRemainHack,
    (void*) Native_setNetworkCutsceneEntities,
    (void*) Native_areCutsceneEntitiesNetworked,
    (void*) Native_setNetworkIdPassControlInTutorial,
    (void*) Native_isNetworkIdOwnedByParticipant,
    (void*) Native_setLocalPlayerVisibleInCutscene,
    (void*) Native_setLocalPlayerInvisibleLocally,
    (void*) Native_setLocalPlayerVisibleLocally,
    (void*) Native_setPlayerInvisibleLocally,
    (void*) Native_setPlayerVisibleLocally,
    (void*) Native_fadeOutLocalPlayer,
    (void*) Native_networkFadeOutEntity,
    (void*) Native_networkFadeInEntity,
    (void*) Native_networkIsPlayerFading,
    (void*) Native_networkIsEntityFading,
    (void*) Native_isPlayerInCutscene,
    (void*) Native_setEntityVisibleInCutscene,
    (void*) Native_setEntityLocallyInvisible,
    (void*) Native_setEntityLocallyVisible,
    (void*) Native_isDamageTrackerActiveOnNetworkId,
    (void*) Native_activateDamageTrackerOnNetworkId,
    (void*) Native_isDamageTrackerActiveOnPlayer,
    (void*) Native_activateDamageTrackerOnPlayer,
    (void*) Native_isSphereVisibleToAnotherMachine,
    (void*) Native_isSphereVisibleToPlayer,
    (void*) Native_reserveNetworkMissionObjects,
    (void*) Native_reserveNetworkMissionPeds,
    (void*) Native_reserveNetworkMissionVehicles,
    (void*) Native_reserveLocalNetworkMissionObjects,
    (void*) Native_reserveLocalNetworkMissionPeds,
    (void*) Native_reserveLocalNetworkMissionVehicles,
    (void*) Native_canRegisterMissionObjects,
    (void*) Native_canRegisterMissionPeds,
    (void*) Native_canRegisterMissionVehicles,
    (void*) Native_canRegisterMissionPickups,
    (void*) Native_canRegisterMissionDoors,
    (void*) Native_canRegisterMissionEntities,
    (void*) Native_getNumReservedMissionObjects,
    (void*) Native_getNumReservedMissionPeds,
    (void*) Native_getNumReservedMissionVehicles,
    (void*) Native_getNumCreatedMissionObjects,
    (void*) Native_getNumCreatedMissionPeds,
    (void*) Native_getNumCreatedMissionVehicles,
    (void*) Native_getReservedMissionEntitiesInArea,
    (void*) Native_getMaxNumNetworkObjects,
    (void*) Native_getMaxNumNetworkPeds,
    (void*) Native_getMaxNumNetworkVehicles,
    (void*) Native_getMaxNumNetworkPickups,
    (void*) Native_networkSetObjectScopeDistance,
    (void*) Native_networkAllowCloningWhileInTutorial,
    (void*) Native_networkSetTaskCutsceneInscopeMultipler,
    (void*) Native_getNetworkTime,
    (void*) Native_getNetworkTimeAccurate,
    (void*) Native_hasNetworkTimeStarted,
    (void*) Native_getTimeOffset,
    (void*) Native_isTimeLessThan,
    (void*) Native_isTimeMoreThan,
    (void*) Native_isTimeEqualTo,
    (void*) Native_getTimeDifference,
    (void*) Native_getTimeAsString,
    (void*) Native_getCloudTimeAsString,
    (void*) Native_getCloudTimeAsInt,
    (void*) Native_convertPosixTime,
    (void*) Native_networkSetInSpectatorMode,
    (void*) Native_networkSetInSpectatorModeExtended,
    (void*) Native_networkSetInFreeCamMode,
    (void*) Native_networkSetAntagonisticToPlayer,
    (void*) Native_networkIsInSpectatorMode,
    (void*) Native_networkSetInMpCutscene,
    (void*) Native_networkIsInMpCutscene,
    (void*) Native_networkIsPlayerInMpCutscene,
    (void*) Native_networkHideProjectileInCutscene,
    (void*) Native_setNetworkVehicleRespotTimer,
    (void*) Native_setNetworkVehicleAsGhost,
    (void*) Native_setNetworkVehicleMaxPositionDeltaMultiplier,
    (void*) Native_setNetworkEnableHighSpeedEdgeFallDetection,
    (void*) Native_setLocalPlayerAsGhost,
    (void*) Native_isEntityAGhost,
    (void*) Native_setNonParticipantsOfThisScriptAsGhosts,
    (void*) Native_setRemotePlayerAsGhost,
    (void*) Native_setGhostAlpha,
    (void*) Native_resetGhostAlpha,
    (void*) Native_setEntityGhostedForGhostPlayers,
    (void*) Native_setInvertGhosting,
    (void*) Native_isEntityInGhostCollision,
    (void*) Native_usePlayerColourInsteadOfTeamColour,
    (void*) Native_networkCreateSynchronisedScene,
    (void*) Native_networkAddPedToSynchronisedScene,
    (void*) Native_networkAddPedToSynchronisedSceneWithIk,
    (void*) Native_networkAddEntityToSynchronisedScene,
    (void*) Native_networkAddMapEntityToSynchronisedScene,
    (void*) Native_networkAddSynchronisedSceneCamera,
    (void*) Native_networkAttachSynchronisedSceneToEntity,
    (void*) Native_networkStartSynchronisedScene,
    (void*) Native_networkStopSynchronisedScene,
    (void*) Native_networkGetLocalSceneFromNetworkId,
    (void*) Native_networkForceLocalUseOfSyncedSceneCamera,
    (void*) Native_networkAllowRemoteSyncedSceneLocalPlayerRequests,
    (void*) Native_networkFindLargestBunchOfPlayers,
    (void*) Native_networkStartRespawnSearchForPlayer,
    (void*) Native_networkStartRespawnSearchInAngledAreaForPlayer,
    (void*) Native_networkQueryRespawnResults,
    (void*) Native_networkCancelRespawnSearch,
    (void*) Native_networkGetRespawnResult,
    (void*) Native_networkGetRespawnResultFlags,
    (void*) Native_networkStartSoloTutorialSession,
    (void*) Native_networkAllowGangToJoinTutorialSession,
    (void*) Native_networkEndTutorialSession,
    (void*) Native_networkIsInTutorialSession,
    (void*) Native_networkWaitingPopClearTutorialSession,
    (void*) Native_networkIsTutorialSessionChangePending,
    (void*) Native_networkGetPlayerTutorialSessionInstance,
    (void*) Native_networkArePlayersInSameTutorialSession,
    (void*) Native_networkBlockProxyMigrationBetweenTutorialSessions,
    (void*) Native_networkConcealPlayer,
    (void*) Native_networkIsPlayerConcealed,
    (void*) Native_networkConcealEntity,
    (void*) Native_networkIsEntityConcealed,
    (void*) Native_networkOverrideClockTime,
    (void*) Native_networkOverrideClockRate,
    (void*) Native_networkClearClockTimeOverride,
    (void*) Native_networkIsClockTimeOverridden,
    (void*) Native_networkAddEntityArea,
    (void*) Native_networkAddEntityAngledArea,
    (void*) Native_networkAddClientEntityArea,
    (void*) Native_networkAddClientEntityAngledArea,
    (void*) Native_networkRemoveEntityArea,
    (void*) Native_networkEntityAreaDoesExist,
    (void*) Native_networkEntityAreaHaveAllReplied,
    (void*) Native_networkEntityAreaIsOccupied,
    (void*) Native_networkUseHighPrecisionBlending,
    (void*) Native_networkSetCustomArenaBallParams,
    (void*) Native_networkEntityUseHighPrecisionRotation,
    (void*) Native_networkRequestCloudBackgroundScripts,
    (void*) Native_networkIsCloudBackgroundScriptRequestPending,
    (void*) Native_networkRequestCloudTunables,
    (void*) Native_networkIsTunableCloudRequestPending,
    (void*) Native_networkGetTunableCloudCrc,
    (void*) Native_networkDoesTunableExist,
    (void*) Native_networkAccessTunableInt,
    (void*) Native_networkAccessTunableFloat,
    (void*) Native_networkAccessTunableBool,
    (void*) Native_networkDoesTunableExistHash,
    (void*) Native_networkAccessTunableModificationDetectionClear,
    (void*) Native_networkAccessTunableIntHash,
    (void*) Native_networkAccessTunableIntModificationDetectionRegistrationHash,
    (void*) Native_networkAccessTunableFloatHash,
    (void*) Native_networkAccessTunableFloatModificationDetectionRegistrationHash,
    (void*) Native_networkAccessTunableBoolHash,
    (void*) Native_networkAccessTunableBoolModificationDetectionRegistrationHash,
    (void*) Native_networkTryAccessTunableBoolHash,
    (void*) Native_networkGetContentModifierListId,
    (void*) Native_networkGetBoneIdOfFatalHit,
    (void*) Native_networkResetBodyTracker,
    (void*) Native_networkGetNumberBodyTrackerHits,
    (void*) Native_networkHasBoneBeenHitByKiller,
    (void*) Native_networkSetAttributeDamageToPlayer,
    (void*) Native_networkTriggerDamageEventForZeroDamage,
    (void*) Native_networkTriggerDamageEventForZeroWeaponHash,
    (void*) Native_networkSetNoLongerNeeded,
    (void*) Native_networkExplodeVehicle,
    (void*) Native_networkExplodeHeli,
    (void*) Native_networkUseLogarithmicBlendingThisFrame,
    (void*) Native_networkOverrideCoordsAndHeading,
    (void*) Native_networkEnableExtraVehicleOrientationBlendChecks,
    (void*) Native_networkDisableProximityMigration,
    (void*) Native_networkSetPropertyId,
    (void*) Native_networkClearPropertyId,
    (void*) Native_networkSetPlayerMentalState,
    (void*) Native_networkSetMinimumRankForMission,
    (void*) Native_networkCacheLocalPlayerHeadBlendData,
    (void*) Native_networkHasCachedPlayerHeadBlendData,
    (void*) Native_networkApplyCachedPlayerHeadBlendData,
    (void*) Native_getNumCommerceItems,
    (void*) Native_isCommerceDataValid,
    (void*) Native_triggerCommerceDataFetch,
    (void*) Native_isCommerceDataFetchInProgress,
    (void*) Native_getCommerceItemId,
    (void*) Native_getCommerceItemName,
    (void*) Native_getCommerceProductPrice,
    (void*) Native_getCommerceItemNumCats,
    (void*) Native_getCommerceItemCat,
    (void*) Native_openCommerceStore,
    (void*) Native_isCommerceStoreOpen,
    (void*) Native_setStoreEnabled,
    (void*) Native_requestCommerceItemImage,
    (void*) Native_releaseAllCommerceItemImages,
    (void*) Native_getCommerceItemTexturename,
    (void*) Native_isStoreAvailableToUser,
    (void*) Native_delayMpStoreOpen,
    (void*) Native_resetStoreNetworkGameTracking,
    (void*) Native_isUserOldEnoughToAccessStore,
    (void*) Native_setLastViewedShopItem,
    (void*) Native_getUserPremiumAccess,
    (void*) Native_getUserStarterAccess,
    (void*) Native_cloudDeleteMemberFile,
    (void*) Native_cloudHasRequestCompleted,
    (void*) Native_cloudDidRequestSucceed,
    (void*) Native_cloudCheckAvailability,
    (void*) Native_cloudIsCheckingAvailability,
    (void*) Native_cloudGetAvailabilityCheckResult,
    (void*) Native_getContentToLoadType,
    (void*) Native_getIsLaunchFromLiveArea,
    (void*) Native_getIsLiveAreaLaunchWithContent,
    (void*) Native_clearServiceEventArguments,
    (void*) Native_ugcCopyContent,
    (void*) Native_ugcIsCreating,
    (void*) Native_ugcHasCreateFinished,
    (void*) Native_ugcDidCreateSucceed,
    (void*) Native_ugcGetCreateResult,
    (void*) Native_ugcGetCreateContentId,
    (void*) Native_ugcClearCreateResult,
    (void*) Native_ugcQueryMyContent,
    (void*) Native_ugcQueryByCategory,
    (void*) Native_ugcQueryByContentId,
    (void*) Native_ugcQueryByContentIds,
    (void*) Native_ugcQueryMostRecentlyCreatedContent,
    (void*) Native_ugcGetBookmarkedContent,
    (void*) Native_ugcGetMyContent,
    (void*) Native_ugcGetFriendContent,
    (void*) Native_ugcGetCrewContent,
    (void*) Native_ugcGetGetByCategory,
    (void*) Native_ugcGetGetByContentId,
    (void*) Native_ugcGetGetByContentIds,
    (void*) Native_ugcGetMostRecentlyCreatedContent,
    (void*) Native_ugcGetMostRecentlyPlayedContent,
    (void*) Native_ugcGetTopRatedContent,
    (void*) Native_ugcCancelQuery,
    (void*) Native_ugcIsGetting,
    (void*) Native_ugcHasGetFinished,
    (void*) Native_ugcDidGetSucceed,
    (void*) Native_ugcWasQueryForceCancelled,
    (void*) Native_ugcGetQueryResult,
    (void*) Native_ugcGetContentNum,
    (void*) Native_ugcGetContentTotal,
    (void*) Native_ugcGetContentHash,
    (void*) Native_ugcClearQueryResults,
    (void*) Native_ugcGetContentUserId,
    (void*) Native_ugcGetContentCreatorGamerHandle,
    (void*) Native_ugcGetContentCreatedByLocalPlayer,
    (void*) Native_ugcGetContentUserName,
    (void*) Native_ugcGetContentIsUsingScNickname,
    (void*) Native_ugcGetContentCategory,
    (void*) Native_ugcGetContentId,
    (void*) Native_ugcGetRootContentId,
    (void*) Native_ugcGetContentName,
    (void*) Native_ugcGetContentDescriptionHash,
    (void*) Native_ugcGetContentPath,
    (void*) Native_ugcGetContentUpdatedDate,
    (void*) Native_ugcGetContentFileVersion,
    (void*) Native_ugcGetContentHasLoResPhoto,
    (void*) Native_ugcGetContentHasHiResPhoto,
    (void*) Native_ugcGetContentLanguage,
    (void*) Native_ugcGetContentIsPublished,
    (void*) Native_ugcGetContentIsVerified,
    (void*) Native_ugcGetContentRating,
    (void*) Native_ugcGetContentRatingCount,
    (void*) Native_ugcGetContentRatingPositiveCount,
    (void*) Native_ugcGetContentRatingNegativeCount,
    (void*) Native_ugcGetContentHasPlayerRecord,
    (void*) Native_ugcGetContentHasPlayerBookmarked,
    (void*) Native_ugcRequestContentDataFromIndex,
    (void*) Native_ugcRequestContentDataFromParams,
    (void*) Native_ugcRequestCachedDescription,
    (void*) Native_ugcIsDescriptionRequestInProgress,
    (void*) Native_ugcHasDescriptionRequestFinished,
    (void*) Native_ugcDidDescriptionRequestSucceed,
    (void*) Native_ugcGetCachedDescription,
    (void*) Native_ugcReleaseCachedDescription,
    (void*) Native_ugcReleaseAllCachedDescriptions,
    (void*) Native_ugcPublish,
    (void*) Native_ugcSetBookmarked,
    (void*) Native_ugcSetDeleted,
    (void*) Native_ugcIsModifying,
    (void*) Native_ugcHasModifyFinished,
    (void*) Native_ugcDidModifySucceed,
    (void*) Native_ugcGetModifyResult,
    (void*) Native_ugcClearModifyResult,
    (void*) Native_ugcGetCreatorsByUserId,
    (void*) Native_ugcHasQueryCreatorsFinished,
    (void*) Native_ugcDidQueryCreatorsSucceed,
    (void*) Native_ugcGetCreatorNum,
    (void*) Native_ugcLoadOfflineQuery,
    (void*) Native_ugcClearOfflineQuery,
    (void*) Native_ugcSetQueryDataFromOffline,
    (void*) Native_ugcSetUsingOfflineContent,
    (void*) Native_ugcIsLanguageSupported,
    (void*) Native_facebookPostCompletedHeist,
    (void*) Native_facebookPostCreateCharacter,
    (void*) Native_facebookPostCompletedMilestone,
    (void*) Native_facebookHasPostCompleted,
    (void*) Native_facebookDidPostSucceed,
    (void*) Native_facebookCanPostToFacebook,
    (void*) Native_textureDownloadRequest,
    (void*) Native_titleTextureDownloadRequest,
    (void*) Native_ugcTextureDownloadRequest,
    (void*) Native_textureDownloadRelease,
    (void*) Native_textureDownloadHasFailed,
    (void*) Native_textureDownloadGetName,
    (void*) Native_getStatusOfTextureDownload,
    (void*) Native_networkCheckRosLinkWentdownNotNet,
    (void*) Native_networkShouldShowStrictNatWarning,
    (void*) Native_networkIsCableConnected,
    (void*) Native_networkHaveScsPrivateMsgPriv,
    (void*) Native_networkHaveRosSocialClubPriv,
    (void*) Native_networkHaveRosBannedPriv,
    (void*) Native_networkHaveRosCreateTicketPriv,
    (void*) Native_networkHaveRosMultiplayerPriv,
    (void*) Native_networkHaveRosLeaderboardWritePriv,
    (void*) Native_networkHasRosPrivilege,
    (void*) Native_networkHasRosPrivilegeEndDate,
    (void*) Native_networkHasRosPrivilegePlayedLastGen,
    (void*) Native_networkHasRosPrivilegeSpecialEditionContent,
    (void*) Native_networkStartCommunicationPermissionsCheck,
    (void*) Native_networkStartUserContentPermissionsCheck,
    (void*) Native_networkSkipRadioResetNextClose,
    (void*) Native_networkSkipRadioResetNextOpen,
    (void*) Native_networkSkipRadioWarning,
    (void*) Native_networkForceLocalPlayerScarSync,
    (void*) Native_networkDisableLeaveRemotePedBehind,
    (void*) Native_networkAllowRemoteAttachmentModification,
    (void*) Native_networkShowChatRestrictionMsc,
    (void*) Native_networkShowPsnUgcRestriction,
    (void*) Native_networkIsTitleUpdateRequired,
    (void*) Native_networkQuitMpToDesktop,
    (void*) Native_networkIsConnectedViaRelay,
    (void*) Native_networkGetAverageLatency,
    (void*) Native_networkGetAveragePing,
    (void*) Native_networkGetAveragePacketLoss,
    (void*) Native_networkGetNumUnackedReliables,
    (void*) Native_networkGetUnreliableResendCount,
    (void*) Native_networkGetHighestReliableResendCount,
    (void*) Native_networkReportCodeTamper,
    (void*) Native_networkGetLastEntityPosReceivedOverNetwork,
    (void*) Native_networkGetLastPlayerPosReceivedOverNetwork,
    (void*) Native_networkGetLastVelReceivedOverNetwork,
    (void*) Native_networkGetPredictedVelocity,
    (void*) Native_networkDumpNetIfConfig,
    (void*) Native_networkGetSignallingInfo,
    (void*) Native_networkGetNetStatisticsInfo,
    (void*) Native_networkGetPlayerAccountId,
    (void*) Native_networkUgcNav,
    (void*) Native_createObject,
    (void*) Native_createObjectNoOffset,
    (void*) Native_deleteObject,
    (void*) Native_placeObjectOnGroundProperly,
    (void*) Native_placeObjectOnGroundOrObjectProperly,
    (void*) Native_rotateObject,
    (void*) Native_slideObject,
    (void*) Native_setObjectTargettable,
    (void*) Native_setObjectForceVehiclesToAvoid,
    (void*) Native_getClosestObjectOfType,
    (void*) Native_hasObjectBeenBroken,
    (void*) Native_hasClosestObjectOfTypeBeenBroken,
    (void*) Native_hasClosestObjectOfTypeBeenCompletelyDestroyed,
    (void*) Native_getHasObjectBeenCompletelyDestroyed,
    (void*) Native_getOffsetFromCoordAndHeadingInWorldCoords,
    (void*) Native_getCoordsAndRotationOfClosestObjectOfType,
    (void*) Native_setStateOfClosestDoorOfType,
    (void*) Native_getStateOfClosestDoorOfType,
    (void*) Native_setLockedUnstreamedInDoorOfType,
    (void*) Native_playObjectAutoStartAnim,
    (void*) Native_addDoorToSystem,
    (void*) Native_removeDoorFromSystem,
    (void*) Native_doorSystemSetDoorState,
    (void*) Native_doorSystemGetDoorState,
    (void*) Native_doorSystemGetDoorPendingState,
    (void*) Native_doorSystemSetAutomaticRate,
    (void*) Native_doorSystemSetAutomaticDistance,
    (void*) Native_doorSystemSetOpenRatio,
    (void*) Native_doorSystemGetAutomaticDistance,
    (void*) Native_doorSystemGetOpenRatio,
    (void*) Native_doorSystemSetSpringRemoved,
    (void*) Native_doorSystemSetHoldOpen,
    (void*) Native_doorSystemSetDoorOpenForRaces,
    (void*) Native_isDoorRegisteredWithSystem,
    (void*) Native_isDoorClosed,
    (void*) Native_openAllBarriersForRace,
    (void*) Native_closeAllBarriersForRace,
    (void*) Native_doorSystemGetIsPhysicsLoaded,
    (void*) Native_doorSystemFindExistingDoor,
    (void*) Native_isGarageEmpty,
    (void*) Native_isPlayerEntirelyInsideGarage,
    (void*) Native_isPlayerPartiallyInsideGarage,
    (void*) Native_areEntitiesEntirelyInsideGarage,
    (void*) Native_isAnyEntityEntirelyInsideGarage,
    (void*) Native_isObjectEntirelyInsideGarage,
    (void*) Native_isObjectPartiallyInsideGarage,
    (void*) Native_clearGarage,
    (void*) Native_clearObjectsInsideGarage,
    (void*) Native_disableTidyingUpInGarage,
    (void*) Native_enableSavingInGarage,
    (void*) Native_closeSafehouseGarages,
    (void*) Native_doesObjectOfTypeExistAtCoords,
    (void*) Native_isPointInAngledArea,
    (void*) Native_setObjectAllowLowLodBuoyancy,
    (void*) Native_setObjectPhysicsParams,
    (void*) Native_getObjectFragmentDamageHealth,
    (void*) Native_setActivateObjectPhysicsAsSoonAsItIsUnfrozen,
    (void*) Native_isAnyObjectNearPoint,
    (void*) Native_isObjectNearPoint,
    (void*) Native_removeObjectHighDetailModel,
    (void*) Native_breakObjectFragmentChild,
    (void*) Native_damageObjectFragmentChild,
    (void*) Native_fixObjectFragment,
    (void*) Native_trackObjectVisibility,
    (void*) Native_isObjectVisible,
    (void*) Native_setObjectIsSpecialGolfball,
    (void*) Native_setObjectTakesDamageFromCollidingWithBuildings,
    (void*) Native_allowDamageEventsForNonNetworkedObjects,
    (void*) Native_setCutscenesWeaponFlashlightOnThisFrame,
    (void*) Native_getRayfireMapObject,
    (void*) Native_setStateOfRayfireMapObject,
    (void*) Native_getStateOfRayfireMapObject,
    (void*) Native_doesRayfireMapObjectExist,
    (void*) Native_getRayfireMapObjectAnimPhase,
    (void*) Native_createPickup,
    (void*) Native_createPickupRotate,
    (void*) Native_forcePickupRotateFaceUp,
    (void*) Native_setCustomPickupWeaponHash,
    (void*) Native_createAmbientPickup,
    (void*) Native_createNonNetworkedAmbientPickup,
    (void*) Native_blockPlayersForAmbientPickup,
    (void*) Native_createPortablePickup,
    (void*) Native_createNonNetworkedPortablePickup,
    (void*) Native_attachPortablePickupToPed,
    (void*) Native_detachPortablePickupFromPed,
    (void*) Native_forcePortablePickupLastAccessiblePositionSetting,
    (void*) Native_hidePortablePickupWhenDetached,
    (void*) Native_setMaxNumPortablePickupsCarriedByPlayer,
    (void*) Native_setLocalPlayerCanCollectPortablePickups,
    (void*) Native_getSafePickupCoords,
    (void*) Native_addExtendedPickupProbeArea,
    (void*) Native_clearExtendedPickupProbeAreas,
    (void*) Native_getPickupCoords,
    (void*) Native_suppressPickupSoundForPickup,
    (void*) Native_removeAllPickupsOfType,
    (void*) Native_hasPickupBeenCollected,
    (void*) Native_removePickup,
    (void*) Native_createMoneyPickups,
    (void*) Native_doesPickupExist,
    (void*) Native_doesPickupObjectExist,
    (void*) Native_getPickupObject,
    (void*) Native_isObjectAPickup,
    (void*) Native_isObjectAPortablePickup,
    (void*) Native_doesPickupOfTypeExistInArea,
    (void*) Native_setPickupRegenerationTime,
    (void*) Native_forcePickupRegenerate,
    (void*) Native_setPlayerPermittedToCollectPickupsOfType,
    (void*) Native_setLocalPlayerPermittedToCollectPickupsWithModel,
    (void*) Native_allowAllPlayersToCollectPickupsOfType,
    (void*) Native_setTeamPickupObject,
    (void*) Native_preventCollectionOfPortablePickup,
    (void*) Native_setPickupObjectGlowWhenUncollectable,
    (void*) Native_setPickupGlowOffset,
    (void*) Native_setPickupObjectGlowOffset,
    (void*) Native_setObjectGlowInSameTeam,
    (void*) Native_setPickupObjectArrowMarker,
    (void*) Native_allowPickupArrowMarkerWhenUncollectable,
    (void*) Native_getDefaultAmmoForWeaponPickup,
    (void*) Native_setPickupGenerationRangeMultiplier,
    (void*) Native_getPickupGenerationRangeMultiplier,
    (void*) Native_setOnlyAllowAmmoCollectionWhenLow,
    (void*) Native_setPickupUncollectable,
    (void*) Native_setPickupTransparentWhenUncollectable,
    (void*) Native_setPickupHiddenWhenUncollectable,
    (void*) Native_setPickupObjectTransparentWhenUncollectable,
    (void*) Native_setPickupObjectAlphaWhenTransparent,
    (void*) Native_setPortablePickupPersist,
    (void*) Native_allowPortablePickupToMigrateToNonParticipants,
    (void*) Native_forceActivatePhysicsOnUnfixedPickup,
    (void*) Native_allowPickupByNoneParticipant,
    (void*) Native_suppressPickupRewardType,
    (void*) Native_clearAllPickupRewardTypeSuppression,
    (void*) Native_clearPickupRewardTypeSuppression,
    (void*) Native_renderFakePickupGlow,
    (void*) Native_setPickupObjectCollectableInVehicle,
    (void*) Native_setPickupTrackDamageEvents,
    (void*) Native_setEntityFlagSuppressShadow,
    (void*) Native_setEntityFlagRenderSmallShadow,
    (void*) Native_getWeaponTypeFromPickupType,
    (void*) Native_getPickupTypeFromWeaponHash,
    (void*) Native_isPickupWeaponObjectValid,
    (void*) Native_getObjectTintIndex,
    (void*) Native_setObjectTintIndex,
    (void*) Native_setTintIndexClosestBuildingOfType,
    (void*) Native_setPropLightColor,
    (void*) Native_isPropLightOverriden,
    (void*) Native_setObjectIsVisibleInMirrors,
    (void*) Native_setObjectSpeedBoostAmount,
    (void*) Native_setObjectSpeedBoostDuration,
    (void*) Native_convertOldPickupTypeToNew,
    (void*) Native_setForceObjectThisFrame,
    (void*) Native_onlyCleanUpObjectWhenOutOfRange,
    (void*) Native_setDisableCollisionsBetweenCarsAndCarParachute,
    (void*) Native_setProjectilesShouldExplodeOnContact,
    (void*) Native_setDriveArticulatedJoint,
    (void*) Native_setDriveArticulatedJointWithInflictor,
    (void*) Native_setObjectIsAPressurePlate,
    (void*) Native_setWeaponImpactsApplyGreaterForce,
    (void*) Native_getIsArticulatedJointAtMinAngle,
    (void*) Native_getIsArticulatedJointAtMaxAngle,
    (void*) Native_setIsObjectArticulated,
    (void*) Native_setIsObjectBall,
    (void*) Native_isControlEnabled,
    (void*) Native_isControlPressed,
    (void*) Native_isControlReleased,
    (void*) Native_isControlJustPressed,
    (void*) Native_isControlJustReleased,
    (void*) Native_getControlValue,
    (void*) Native_getControlNormal,
    (void*) Native_setUseAdjustedMouseCoords,
    (void*) Native_getControlUnboundNormal,
    (void*) Native_setControlValueNextFrame,
    (void*) Native_isDisabledControlPressed,
    (void*) Native_isDisabledControlReleased,
    (void*) Native_isDisabledControlJustPressed,
    (void*) Native_isDisabledControlJustReleased,
    (void*) Native_getDisabledControlNormal,
    (void*) Native_getDisabledControlUnboundNormal,
    (void*) Native_getControlHowLongAgo,
    (void*) Native_isUsingKeyboardAndMouse,
    (void*) Native_isUsingCursor,
    (void*) Native_setCursorPosition,
    (void*) Native_isUsingRemotePlay,
    (void*) Native_haveControlsChanged,
    (void*) Native_getControlInstructionalButtonsString,
    (void*) Native_getControlGroupInstructionalButtonsString,
    (void*) Native_setControlLightEffectColor,
    (void*) Native_clearControlLightEffect,
    (void*) Native_setControlShake,
    (void*) Native_setControlTriggerShake,
    (void*) Native_stopControlShake,
    (void*) Native_setControlShakeSuppressedId,
    (void*) Native_clearControlShakeSuppressedId,
    (void*) Native_isLookInverted,
    (void*) Native_isMouseLookInverted,
    (void*) Native_getLocalPlayerAimState,
    (void*) Native_getLocalPlayerGamepadAimState,
    (void*) Native_getIsUsingAlternateHandbrake,
    (void*) Native_getIsUsingAlternateDriveby,
    (void*) Native_getAllowMovementWhileZoomed,
    (void*) Native_setPlayerpadShakesWhenControllerDisabled,
    (void*) Native_setInputExclusive,
    (void*) Native_disableControlAction,
    (void*) Native_enableControlAction,
    (void*) Native_disableAllControlActions,
    (void*) Native_enableAllControlActions,
    (void*) Native_initPcScriptedControls,
    (void*) Native_switchPcScriptedControls,
    (void*) Native_shutdownPcScriptedControls,
    (void*) Native_disableInputGroup,
    (void*) Native_setRoadsInArea,
    (void*) Native_setRoadsInAngledArea,
    (void*) Native_setPedPathsInArea,
    (void*) Native_getSafeCoordForPed,
    (void*) Native_getClosestVehicleNode,
    (void*) Native_getClosestMajorVehicleNode,
    (void*) Native_getClosestVehicleNodeWithHeading,
    (void*) Native_getNthClosestVehicleNode,
    (void*) Native_getNthClosestVehicleNodeId,
    (void*) Native_getNthClosestVehicleNodeWithHeading,
    (void*) Native_getNthClosestVehicleNodeIdWithHeading,
    (void*) Native_getNthClosestVehicleNodeFavourDirection,
    (void*) Native_getVehicleNodeProperties,
    (void*) Native_isVehicleNodeIdValid,
    (void*) Native_getVehicleNodePosition,
    (void*) Native_getVehicleNodeIsGpsAllowed,
    (void*) Native_getVehicleNodeIsSwitchedOff,
    (void*) Native_getClosestRoad,
    (void*) Native_setAllowStreamPrologueNodes,
    (void*) Native_setAllowStreamHeistIslandNodes,
    (void*) Native_areNodesLoadedForArea,
    (void*) Native_requestPathNodesInAreaThisFrame,
    (void*) Native_setRoadsBackToOriginal,
    (void*) Native_setRoadsBackToOriginalInAngledArea,
    (void*) Native_setAmbientPedRangeMultiplierThisFrame,
    (void*) Native_adjustAmbientPedSpawnDensitiesThisFrame,
    (void*) Native_setPedPathsBackToOriginal,
    (void*) Native_getRandomVehicleNode,
    (void*) Native_getStreetNameAtCoord,
    (void*) Native_generateDirectionsToCoord,
    (void*) Native_setIgnoreNoGpsFlag,
    (void*) Native_setIgnoreNoGpsFlagUntilFirstNormalNode,
    (void*) Native_setGpsDisabledZone,
    (void*) Native_getGpsBlipRouteLength,
    (void*) Native_getPosAlongGpsTypeRoute,
    (void*) Native_getGpsBlipRouteFound,
    (void*) Native_getRoadBoundaryUsingHeading,
    (void*) Native_getPositionBySideOfRoad,
    (void*) Native_isPointOnRoad,
    (void*) Native_getNextGpsDisabledZoneIndex,
    (void*) Native_setGpsDisabledZoneAtIndex,
    (void*) Native_clearGpsDisabledZoneAtIndex,
    (void*) Native_addNavmeshRequiredRegion,
    (void*) Native_removeNavmeshRequiredRegions,
    (void*) Native_isNavmeshRequiredRegionInUse,
    (void*) Native_disableNavmeshInArea,
    (void*) Native_areAllNavmeshRegionsLoaded,
    (void*) Native_isNavmeshLoadedInArea,
    (void*) Native_getNumNavmeshesExistingInArea,
    (void*) Native_addNavmeshBlockingObject,
    (void*) Native_updateNavmeshBlockingObject,
    (void*) Native_removeNavmeshBlockingObject,
    (void*) Native_doesNavmeshBlockingObjectExist,
    (void*) Native_getApproxHeightForPoint,
    (void*) Native_getApproxHeightForArea,
    (void*) Native_getApproxFloorForPoint,
    (void*) Native_getApproxFloorForArea,
    (void*) Native_calculateTravelDistanceBetweenPoints,
    (void*) Native_createPed,
    (void*) Native_deletePed,
    (void*) Native_clonePed,
    (void*) Native_clonePedAlt,
    (void*) Native_clonePedToTarget,
    (void*) Native_clonePedToTargetAlt,
    (void*) Native_isPedInVehicle,
    (void*) Native_isPedInModel,
    (void*) Native_isPedInAnyVehicle,
    (void*) Native_isCopPedInArea3d,
    (void*) Native_isPedInjured,
    (void*) Native_isPedHurt,
    (void*) Native_isPedFatallyInjured,
    (void*) Native_isPedDeadOrDying,
    (void*) Native_isConversationPedDead,
    (void*) Native_isPedAimingFromCover,
    (void*) Native_isPedReloading,
    (void*) Native_isPedAPlayer,
    (void*) Native_createPedInsideVehicle,
    (void*) Native_setPedDesiredHeading,
    (void*) Native_forceAllHeadingValuesToAlign,
    (void*) Native_isPedFacingPed,
    (void*) Native_isPedInMeleeCombat,
    (void*) Native_isPedStopped,
    (void*) Native_isPedShootingInArea,
    (void*) Native_isAnyPedShootingInArea,
    (void*) Native_isPedShooting,
    (void*) Native_setPedAccuracy,
    (void*) Native_getPedAccuracy,
    (void*) Native_setAmbientLawPedAccuracyModifier,
    (void*) Native_isPedModel,
    (void*) Native_explodePedHead,
    (void*) Native_removePedElegantly,
    (void*) Native_addArmourToPed,
    (void*) Native_setPedArmour,
    (void*) Native_setPedIntoVehicle,
    (void*) Native_setPedAllowVehiclesOverride,
    (void*) Native_canCreateRandomPed,
    (void*) Native_createRandomPed,
    (void*) Native_createRandomPedAsDriver,
    (void*) Native_canCreateRandomDriver,
    (void*) Native_canCreateRandomBikeRider,
    (void*) Native_setPedMoveAnimsBlendOut,
    (void*) Native_setPedCanBeDraggedOut,
    (void*) Native_setPedAllowHurtCombatForAllMissionPeds,
    (void*) Native_isPedMale,
    (void*) Native_isPedHuman,
    (void*) Native_getVehiclePedIsIn,
    (void*) Native_resetPedLastVehicle,
    (void*) Native_setPedDensityMultiplierThisFrame,
    (void*) Native_setScenarioPedDensityMultiplierThisFrame,
    (void*) Native_suppressAmbientPedAggressiveCleanupThisFrame,
    (void*) Native_setScriptedConversionCoordThisFrame,
    (void*) Native_setPedNonCreationArea,
    (void*) Native_clearPedNonCreationArea,
    (void*) Native_instantlyFillPedPopulation,
    (void*) Native_isPedOnMount,
    (void*) Native_getMount,
    (void*) Native_isPedOnVehicle,
    (void*) Native_isPedOnSpecificVehicle,
    (void*) Native_setPedMoney,
    (void*) Native_getPedMoney,
    (void*) Native_setHealthSnacksCarriedByAllNewPeds,
    (void*) Native_setAmbientPedsDropMoney,
    (void*) Native_setBlockingOfNonTemporaryEventsForAmbientPedsThisFrame,
    (void*) Native_setPedSuffersCriticalHits,
    (void*) Native_setPedUpperBodyDamageOnly,
    (void*) Native_isPedSittingInVehicle,
    (void*) Native_isPedSittingInAnyVehicle,
    (void*) Native_isPedOnFoot,
    (void*) Native_isPedOnAnyBike,
    (void*) Native_isPedPlantingBomb,
    (void*) Native_getDeadPedPickupCoords,
    (void*) Native_isPedInAnyBoat,
    (void*) Native_isPedInAnySub,
    (void*) Native_isPedInAnyHeli,
    (void*) Native_isPedInAnyPlane,
    (void*) Native_isPedInFlyingVehicle,
    (void*) Native_setPedDiesInWater,
    (void*) Native_getPedDiesInWater,
    (void*) Native_setPedDiesInSinkingVehicle,
    (void*) Native_getPedArmour,
    (void*) Native_setPedStayInVehicleWhenJacked,
    (void*) Native_setPedCanBeShotInVehicle,
    (void*) Native_getPedLastDamageBone,
    (void*) Native_clearPedLastDamageBone,
    (void*) Native_setAiWeaponDamageModifier,
    (void*) Native_resetAiWeaponDamageModifier,
    (void*) Native_setAiMeleeWeaponDamageModifier,
    (void*) Native_resetAiMeleeWeaponDamageModifier,
    (void*) Native_setTreatAsAmbientPedForDriverLockon,
    (void*) Native_setPedCanBeTargetted,
    (void*) Native_setPedCanBeTargettedByTeam,
    (void*) Native_setPedCanBeTargettedByPlayer,
    (void*) Native_setAllowLockonToPedIfFriendly,
    (void*) Native_setUseCameraHeadingForDesiredDirectionLockOnTest,
    (void*) Native_isPedInAnyPoliceVehicle,
    (void*) Native_forcePedToOpenParachute,
    (void*) Native_isPedInParachuteFreeFall,
    (void*) Native_isPedFalling,
    (void*) Native_isPedJumping,
    (void*) Native_isPedLanding,
    (void*) Native_isPedDoingABeastJump,
    (void*) Native_isPedClimbing,
    (void*) Native_isPedVaulting,
    (void*) Native_isPedDiving,
    (void*) Native_isPedJumpingOutOfVehicle,
    (void*) Native_isPedOpeningDoor,
    (void*) Native_getPedParachuteState,
    (void*) Native_getPedParachuteLandingType,
    (void*) Native_setPedParachuteTintIndex,
    (void*) Native_getPedParachuteTintIndex,
    (void*) Native_setPedReserveParachuteTintIndex,
    (void*) Native_createParachuteBagObject,
    (void*) Native_setPedDucking,
    (void*) Native_isPedDucking,
    (void*) Native_isPedInAnyTaxi,
    (void*) Native_setPedIdRange,
    (void*) Native_setPedHighlyPerceptive,
    (void*) Native_setCopPerceptionOverrides,
    (void*) Native_setPedInjuredOnGroundBehaviour,
    (void*) Native_disablePedInjuredOnGroundBehaviour,
    (void*) Native_setPedSeeingRange,
    (void*) Native_setPedHearingRange,
    (void*) Native_setPedVisualFieldMinAngle,
    (void*) Native_setPedVisualFieldMaxAngle,
    (void*) Native_setPedVisualFieldMinElevationAngle,
    (void*) Native_setPedVisualFieldMaxElevationAngle,
    (void*) Native_setPedVisualFieldPeripheralRange,
    (void*) Native_setPedVisualFieldCenterAngle,
    (void*) Native_getPedVisualFieldCenterAngle,
    (void*) Native_setPedStealthMovement,
    (void*) Native_getPedStealthMovement,
    (void*) Native_createGroup,
    (void*) Native_setPedAsGroupLeader,
    (void*) Native_setPedAsGroupMember,
    (void*) Native_setPedCanTeleportToGroupLeader,
    (void*) Native_removeGroup,
    (void*) Native_removePedFromGroup,
    (void*) Native_isPedGroupMember,
    (void*) Native_isPedHangingOnToVehicle,
    (void*) Native_setGroupSeparationRange,
    (void*) Native_setPedMinGroundTimeForStungun,
    (void*) Native_isPedProne,
    (void*) Native_isPedInCombat,
    (void*) Native_getPedTargetFromCombatPed,
    (void*) Native_canPedInCombatSeeTarget,
    (void*) Native_isPedDoingDriveby,
    (void*) Native_isPedJacking,
    (void*) Native_isPedBeingJacked,
    (void*) Native_isPedBeingStunned,
    (void*) Native_getPedsJacker,
    (void*) Native_getJackTarget,
    (void*) Native_isPedFleeing,
    (void*) Native_isPedInCover,
    (void*) Native_isPedInCoverFacingLeft,
    (void*) Native_isPedInHighCover,
    (void*) Native_isPedGoingIntoCover,
    (void*) Native_setPedPinnedDown,
    (void*) Native_getSeatPedIsTryingToEnter,
    (void*) Native_getVehiclePedIsTryingToEnter,
    (void*) Native_getPedSourceOfDeath,
    (void*) Native_getPedCauseOfDeath,
    (void*) Native_getPedTimeOfDeath,
    (void*) Native_countPedsInCombatWithTarget,
    (void*) Native_countPedsInCombatWithTargetWithinRadius,
    (void*) Native_setPedRelationshipGroupDefaultHash,
    (void*) Native_setPedRelationshipGroupHash,
    (void*) Native_setRelationshipBetweenGroups,
    (void*) Native_clearRelationshipBetweenGroups,
    (void*) Native_addRelationshipGroup,
    (void*) Native_removeRelationshipGroup,
    (void*) Native_doesRelationshipGroupExist,
    (void*) Native_getRelationshipBetweenPeds,
    (void*) Native_getPedRelationshipGroupDefaultHash,
    (void*) Native_getPedRelationshipGroupHash,
    (void*) Native_getRelationshipBetweenGroups,
    (void*) Native_setRelationshipGroupAffectsWantedLevel,
    (void*) Native_tellGroupPedsInAreaToAttack,
    (void*) Native_setPedCanBeTargetedWithoutLos,
    (void*) Native_setPedToInformRespectedFriends,
    (void*) Native_isPedRespondingToEvent,
    (void*) Native_getPosFromFiredEvent,
    (void*) Native_setPedFiringPattern,
    (void*) Native_setPedShootRate,
    (void*) Native_setCombatFloat,
    (void*) Native_getCombatFloat,
    (void*) Native_getGroupSize,
    (void*) Native_doesGroupExist,
    (void*) Native_getPedGroupIndex,
    (void*) Native_isPedInGroup,
    (void*) Native_getPlayerPedIsFollowing,
    (void*) Native_setGroupFormation,
    (void*) Native_setGroupFormationSpacing,
    (void*) Native_resetGroupFormationDefaultSpacing,
    (void*) Native_getVehiclePedIsUsing,
    (void*) Native_getVehiclePedIsEntering,
    (void*) Native_setPedGravity,
    (void*) Native_applyDamageToPed,
    (void*) Native_getTimePedDamagedByWeapon,
    (void*) Native_setPedAllowedToDuck,
    (void*) Native_setPedNeverLeavesGroup,
    (void*) Native_getPedType,
    (void*) Native_setPedAsCop,
    (void*) Native_setPedHealthPendingLastDamageEventOverrideFlag,
    (void*) Native_setPedMaxHealth,
    (void*) Native_getPedMaxHealth,
    (void*) Native_setPedMaxTimeInWater,
    (void*) Native_setPedMaxTimeUnderwater,
    (void*) Native_setCorpseRagdollFriction,
    (void*) Native_setPedVehicleForcedSeatUsage,
    (void*) Native_clearAllPedVehicleForcedSeatUsage,
    (void*) Native_setPedCanBeKnockedOffBike,
    (void*) Native_setPedCanBeKnockedOffVehicle,
    (void*) Native_canKnockPedOffVehicle,
    (void*) Native_knockPedOffVehicle,
    (void*) Native_setPedCoordsNoGang,
    (void*) Native_getPedAsGroupMember,
    (void*) Native_getPedAsGroupLeader,
    (void*) Native_setPedKeepTask,
    (void*) Native_setPedAllowMinorReactionsAsMissionPed,
    (void*) Native_isPedSwimming,
    (void*) Native_isPedSwimmingUnderWater,
    (void*) Native_setPedCoordsKeepVehicle,
    (void*) Native_setPedDiesInVehicle,
    (void*) Native_setCreateRandomCops,
    (void*) Native_setCreateRandomCopsNotOnScenarios,
    (void*) Native_setCreateRandomCopsOnScenarios,
    (void*) Native_canCreateRandomCops,
    (void*) Native_setPedAsEnemy,
    (void*) Native_setPedCanSmashGlass,
    (void*) Native_isPedInAnyTrain,
    (void*) Native_isPedGettingIntoAVehicle,
    (void*) Native_isPedTryingToEnterALockedVehicle,
    (void*) Native_setEnableHandcuffs,
    (void*) Native_setEnableBoundAnkles,
    (void*) Native_setEnableScuba,
    (void*) Native_setCanAttackFriendly,
    (void*) Native_getPedAlertness,
    (void*) Native_setPedAlertness,
    (void*) Native_setPedGetOutUpsideDownVehicle,
    (void*) Native_setPedMovementClipset,
    (void*) Native_resetPedMovementClipset,
    (void*) Native_setPedStrafeClipset,
    (void*) Native_resetPedStrafeClipset,
    (void*) Native_setPedWeaponMovementClipset,
    (void*) Native_resetPedWeaponMovementClipset,
    (void*) Native_setPedDriveByClipsetOverride,
    (void*) Native_clearPedDriveByClipsetOverride,
    (void*) Native_setPedMotionInCoverClipsetOverride,
    (void*) Native_clearPedMotionInCoverClipsetOverride,
    (void*) Native_clearPedFallUpperBodyClipsetOverride,
    (void*) Native_setPedInVehicleContext,
    (void*) Native_resetPedInVehicleContext,
    (void*) Native_isScriptedScenarioPedUsingConditionalAnim,
    (void*) Native_setPedAlternateWalkAnim,
    (void*) Native_clearPedAlternateWalkAnim,
    (void*) Native_setPedAlternateMovementAnim,
    (void*) Native_clearPedAlternateMovementAnim,
    (void*) Native_setPedGestureGroup,
    (void*) Native_getAnimInitialOffsetPosition,
    (void*) Native_getAnimInitialOffsetRotation,
    (void*) Native_getPedDrawableVariation,
    (void*) Native_getNumberOfPedDrawableVariations,
    (void*) Native_getPedTextureVariation,
    (void*) Native_getNumberOfPedTextureVariations,
    (void*) Native_getNumberOfPedPropDrawableVariations,
    (void*) Native_getNumberOfPedPropTextureVariations,
    (void*) Native_getPedPaletteVariation,
    (void*) Native_getMpOutfitDataFromMetadata,
    (void*) Native_getFmMaleShopPedApparelItemIndex,
    (void*) Native_getFmFemaleShopPedApparelItemIndex,
    (void*) Native_isPedComponentVariationValid,
    (void*) Native_setPedComponentVariation,
    (void*) Native_setPedRandomComponentVariation,
    (void*) Native_setPedRandomProps,
    (void*) Native_setPedDefaultComponentVariation,
    (void*) Native_setPedBlendFromParents,
    (void*) Native_setPedHeadBlendData,
    (void*) Native_getPedHeadBlendData,
    (void*) Native_updatePedHeadBlendData,
    (void*) Native_setHeadBlendEyeColor,
    (void*) Native_getHeadBlendEyeColor,
    (void*) Native_setPedHeadOverlay,
    (void*) Native_getPedHeadOverlay,
    (void*) Native_getPedHeadOverlayNum,
    (void*) Native_setPedHeadOverlayTint,
    (void*) Native_setPedHairTint,
    (void*) Native_getNumPedHairTints,
    (void*) Native_getNumPedMakeupTints,
    (void*) Native_getPedHairTintColor,
    (void*) Native_getPedMakeupTintColor,
    (void*) Native_isPedHairTintForCreator,
    (void*) Native_getDefaultSecondaryTintForCreator,
    (void*) Native_isPedLipstickTintForCreator,
    (void*) Native_isPedBlushTintForCreator,
    (void*) Native_isPedHairTintForBarber,
    (void*) Native_getDefaultSecondaryTintForBarber,
    (void*) Native_isPedLipstickTintForBarber,
    (void*) Native_isPedBlushTintForBarber,
    (void*) Native_isPedBlushFacepaintTintForBarber,
    (void*) Native_getTintIndexForLastGenHairTexture,
    (void*) Native_setPedMicroMorph,
    (void*) Native_hasPedHeadBlendFinished,
    (void*) Native_finalizeHeadBlend,
    (void*) Native_setHeadBlendPaletteColor,
    (void*) Native_disableHeadBlendPaletteColor,
    (void*) Native_getPedHeadBlendFirstIndex,
    (void*) Native_getPedHeadBlendNumHeads,
    (void*) Native_setPedPreloadVariationData,
    (void*) Native_hasPedPreloadVariationDataFinished,
    (void*) Native_releasePedPreloadVariationData,
    (void*) Native_setPedPreloadPropData,
    (void*) Native_hasPedPreloadPropDataFinished,
    (void*) Native_releasePedPreloadPropData,
    (void*) Native_getPedPropIndex,
    (void*) Native_setPedPropIndex,
    (void*) Native_knockOffPedProp,
    (void*) Native_clearPedProp,
    (void*) Native_clearAllPedProps,
    (void*) Native_dropAmbientProp,
    (void*) Native_getPedPropTextureIndex,
    (void*) Native_clearPedParachutePackVariation,
    (void*) Native_setPedScubaGearVariation,
    (void*) Native_clearPedScubaGearVariation,
    (void*) Native_isUsingPedScubaGearVariation,
    (void*) Native_setBlockingOfNonTemporaryEvents,
    (void*) Native_setPedBoundsOrientation,
    (void*) Native_registerTarget,
    (void*) Native_registerHatedTargetsAroundPed,
    (void*) Native_getRandomPedAtCoord,
    (void*) Native_getClosestPed,
    (void*) Native_setScenarioPedsToBeReturnedByNextCommand,
    (void*) Native_getCanPedBeGrabbedByScript,
    (void*) Native_setDriverRacingModifier,
    (void*) Native_setDriverAbility,
    (void*) Native_setDriverAggressiveness,
    (void*) Native_canPedRagdoll,
    (void*) Native_setPedToRagdoll,
    (void*) Native_setPedToRagdollWithFall,
    (void*) Native_setPedRagdollOnCollision,
    (void*) Native_isPedRagdoll,
    (void*) Native_isPedRunningRagdollTask,
    (void*) Native_setPedRagdollForceFall,
    (void*) Native_resetPedRagdollTimer,
    (void*) Native_setPedCanRagdoll,
    (void*) Native_isPedRunningMeleeTask,
    (void*) Native_isPedRunningMobilePhoneTask,
    (void*) Native_isMobilePhoneToPedEar,
    (void*) Native_setRagdollBlockingFlags,
    (void*) Native_clearRagdollBlockingFlags,
    (void*) Native_setPedAngledDefensiveArea,
    (void*) Native_setPedSphereDefensiveArea,
    (void*) Native_setPedDefensiveSphereAttachedToPed,
    (void*) Native_setPedDefensiveSphereAttachedToVehicle,
    (void*) Native_setPedDefensiveAreaAttachedToPed,
    (void*) Native_setPedDefensiveAreaDirection,
    (void*) Native_removePedDefensiveArea,
    (void*) Native_getPedDefensiveAreaPosition,
    (void*) Native_isPedDefensiveAreaActive,
    (void*) Native_setPedPreferredCoverSet,
    (void*) Native_removePedPreferredCoverSet,
    (void*) Native_reviveInjuredPed,
    (void*) Native_resurrectPed,
    (void*) Native_setPedNameDebug,
    (void*) Native_getPedExtractedDisplacement,
    (void*) Native_setPedDiesWhenInjured,
    (void*) Native_setPedEnableWeaponBlocking,
    (void*) Native_specialFunctionDoNotUse,
    (void*) Native_resetPedVisibleDamage,
    (void*) Native_applyPedBloodDamageByZone,
    (void*) Native_applyPedBlood,
    (void*) Native_applyPedBloodByZone,
    (void*) Native_applyPedBloodSpecific,
    (void*) Native_applyPedDamageDecal,
    (void*) Native_applyPedDamagePack,
    (void*) Native_clearPedBloodDamage,
    (void*) Native_clearPedBloodDamageByZone,
    (void*) Native_hidePedBloodDamageByZone,
    (void*) Native_clearPedDamageDecalByZone,
    (void*) Native_getPedDecorationsState,
    (void*) Native_markPedDecorationsAsClonedFromLocalPlayer,
    (void*) Native_clearPedWetness,
    (void*) Native_setPedWetnessHeight,
    (void*) Native_setPedWetnessEnabledThisFrame,
    (void*) Native_clearPedEnvDirt,
    (void*) Native_setPedSweat,
    (void*) Native_addPedDecorationFromHashes,
    (void*) Native_addPedDecorationFromHashesInCorona,
    (void*) Native_getPedDecorationZoneFromHashes,
    (void*) Native_clearPedDecorations,
    (void*) Native_clearPedDecorationsLeaveScars,
    (void*) Native_wasPedSkeletonUpdated,
    (void*) Native_getPedBoneCoords,
    (void*) Native_createNmMessage,
    (void*) Native_givePedNmMessage,
    (void*) Native_addScenarioBlockingArea,
    (void*) Native_removeScenarioBlockingAreas,
    (void*) Native_removeScenarioBlockingArea,
    (void*) Native_setScenarioPedsSpawnInSphereArea,
    (void*) Native_doesScenarioBlockingAreaExists,
    (void*) Native_isPedUsingScenario,
    (void*) Native_isPedUsingAnyScenario,
    (void*) Native_setPedPanicExitScenario,
    (void*) Native_toggleScenarioPedCowerInPlace,
    (void*) Native_triggerPedScenarioPanicexittoflee,
    (void*) Native_setPedShouldPlayDirectedNormalScenarioExit,
    (void*) Native_setPedShouldPlayNormalScenarioExit,
    (void*) Native_setPedShouldPlayImmediateScenarioExit,
    (void*) Native_setPedShouldPlayFleeScenarioExit,
    (void*) Native_setPedShouldIgnoreScenarioExitCollisionChecks,
    (void*) Native_setPedShouldIgnoreScenarioNavChecks,
    (void*) Native_setPedShouldProbeForScenarioExitsInOneFrame,
    (void*) Native_isPedGesturing,
    (void*) Native_playFacialAnim,
    (void*) Native_setFacialClipset,
    (void*) Native_setFacialIdleAnimOverride,
    (void*) Native_clearFacialIdleAnimOverride,
    (void*) Native_setPedCanPlayGestureAnims,
    (void*) Native_setPedCanPlayVisemeAnims,
    (void*) Native_setPedIsIgnoredByAutoOpenDoors,
    (void*) Native_setPedCanPlayAmbientAnims,
    (void*) Native_setPedCanPlayAmbientBaseAnims,
    (void*) Native_triggerIdleAnimationOnPed,
    (void*) Native_setPedCanArmIk,
    (void*) Native_setPedCanHeadIk,
    (void*) Native_setPedCanLegIk,
    (void*) Native_setPedCanTorsoIk,
    (void*) Native_setPedCanTorsoReactIk,
    (void*) Native_setPedCanTorsoVehicleIk,
    (void*) Native_setPedCanUseAutoConversationLookat,
    (void*) Native_isPedHeadtrackingPed,
    (void*) Native_isPedHeadtrackingEntity,
    (void*) Native_setPedPrimaryLookat,
    (void*) Native_setPedClothPinFrames,
    (void*) Native_setPedClothPackageIndex,
    (void*) Native_setPedClothProne,
    (void*) Native_setPedConfigFlag,
    (void*) Native_setPedResetFlag,
    (void*) Native_getPedConfigFlag,
    (void*) Native_getPedResetFlag,
    (void*) Native_setPedGroupMemberPassengerIndex,
    (void*) Native_setPedCanEvasiveDive,
    (void*) Native_isPedEvasiveDiving,
    (void*) Native_setPedShootsAtCoord,
    (void*) Native_setPedModelIsSuppressed,
    (void*) Native_stopAnyPedModelBeingSuppressed,
    (void*) Native_setPedCanBeTargetedWhenInjured,
    (void*) Native_setPedGeneratesDeadBodyEvents,
    (void*) Native_blockPedFromGeneratingDeadBodyEventsWhenDead,
    (void*) Native_setPedWillOnlyAttackWantedPlayer,
    (void*) Native_setPedCanRagdollFromPlayerImpact,
    (void*) Native_givePedHelmet,
    (void*) Native_removePedHelmet,
    (void*) Native_isPedTakingOffHelmet,
    (void*) Native_setPedHelmet,
    (void*) Native_setPedHelmetFlag,
    (void*) Native_setPedHelmetPropIndex,
    (void*) Native_setPedHelmetVisorPropIndices,
    (void*) Native_isPedHelmetVisorUp,
    (void*) Native_setPedHelmetTextureIndex,
    (void*) Native_isPedWearingHelmet,
    (void*) Native_clearPedStoredHatProp,
    (void*) Native_getPedHelmetStoredHatPropIndex,
    (void*) Native_getPedHelmetStoredHatTexIndex,
    (void*) Native_isCurrentHeadPropAHelmet,
    (void*) Native_setPedToLoadCover,
    (void*) Native_setPedCanCowerInCover,
    (void*) Native_setPedCanPeekInCover,
    (void*) Native_setPedPlaysHeadOnHornAnimWhenDiesInVehicle,
    (void*) Native_setPedLegIkMode,
    (void*) Native_setPedMotionBlur,
    (void*) Native_setPedCanSwitchWeapon,
    (void*) Native_setPedDiesInstantlyInWater,
    (void*) Native_setLadderClimbInputState,
    (void*) Native_stopPedWeaponFiringWhenDropped,
    (void*) Native_setScriptedAnimSeatOffset,
    (void*) Native_setPedCombatMovement,
    (void*) Native_getPedCombatMovement,
    (void*) Native_setPedCombatAbility,
    (void*) Native_setPedCombatRange,
    (void*) Native_getPedCombatRange,
    (void*) Native_setPedCombatAttributes,
    (void*) Native_setPedTargetLossResponse,
    (void*) Native_isPedPerformingMeleeAction,
    (void*) Native_isPedPerformingStealthKill,
    (void*) Native_isPedPerformingACounterAttack,
    (void*) Native_isPedBeingStealthKilled,
    (void*) Native_getMeleeTargetForPed,
    (void*) Native_wasPedKilledByStealth,
    (void*) Native_wasPedKilledByTakedown,
    (void*) Native_wasPedKnockedOut,
    (void*) Native_setPedFleeAttributes,
    (void*) Native_setPedCowerHash,
    (void*) Native_setPedSteersAroundDeadBodies,
    (void*) Native_setPedSteersAroundPeds,
    (void*) Native_setPedSteersAroundObjects,
    (void*) Native_setPedSteersAroundVehicles,
    (void*) Native_setPedIsAvoidedByOthers,
    (void*) Native_setPedIncreasedAvoidanceRadius,
    (void*) Native_setPedBlocksPathingWhenDead,
    (void*) Native_setPedNoTimeDelayBeforeShot,
    (void*) Native_isAnyPedNearPoint,
    (void*) Native_forcePedAiAndAnimationUpdate,
    (void*) Native_isPedHeadingTowardsPosition,
    (void*) Native_requestPedVisibilityTracking,
    (void*) Native_requestPedVehicleVisibilityTracking,
    (void*) Native_requestPedRestrictedVehicleVisibilityTracking,
    (void*) Native_requestPedUseSmallBboxVisibilityTracking,
    (void*) Native_isTrackedPedVisible,
    (void*) Native_getTrackedPedPixelcount,
    (void*) Native_isPedTracked,
    (void*) Native_hasPedReceivedEvent,
    (void*) Native_canPedSeeHatedPed,
    (void*) Native_canPedShuffleToOrFromTurretSeat,
    (void*) Native_canPedShuffleToOrFromExtraSeat,
    (void*) Native_getPedBoneIndex,
    (void*) Native_getPedRagdollBoneIndex,
    (void*) Native_setPedEnveffScale,
    (void*) Native_getPedEnveffScale,
    (void*) Native_setEnablePedEnveffScale,
    (void*) Native_setPedEnveffCpvAdd,
    (void*) Native_setPedEnveffColorModulator,
    (void*) Native_setPedEmissiveScale,
    (void*) Native_getPedEmissiveScale,
    (void*) Native_isPedShaderReady,
    (void*) Native_setPedEnableCrewEmblem,
    (void*) Native_requestRagdollBoundsUpdate,
    (void*) Native_setPedAoBlobRendering,
    (void*) Native_isPedSheltered,
    (void*) Native_createSynchronizedScene,
    (void*) Native_createSynchronizedSceneAtMapObject,
    (void*) Native_isSynchronizedSceneRunning,
    (void*) Native_setSynchronizedSceneOrigin,
    (void*) Native_setSynchronizedScenePhase,
    (void*) Native_getSynchronizedScenePhase,
    (void*) Native_setSynchronizedSceneRate,
    (void*) Native_getSynchronizedSceneRate,
    (void*) Native_setSynchronizedSceneLooped,
    (void*) Native_isSynchronizedSceneLooped,
    (void*) Native_setSynchronizedSceneHoldLastFrame,
    (void*) Native_isSynchronizedSceneHoldLastFrame,
    (void*) Native_attachSynchronizedSceneToEntity,
    (void*) Native_detachSynchronizedScene,
    (void*) Native_takeOwnershipOfSynchronizedScene,
    (void*) Native_forcePedMotionState,
    (void*) Native_getPedCurrentMoveBlendRatio,
    (void*) Native_setPedMaxMoveBlendRatio,
    (void*) Native_setPedMinMoveBlendRatio,
    (void*) Native_setPedMoveRateOverride,
    (void*) Native_setPedMoveRateInWaterOverride,
    (void*) Native_pedHasSexinessFlagSet,
    (void*) Native_getPedNearbyVehicles,
    (void*) Native_getPedNearbyPeds,
    (void*) Native_haveAllStreamingRequestsCompleted,
    (void*) Native_isPedUsingActionMode,
    (void*) Native_setPedUsingActionMode,
    (void*) Native_setMovementModeOverride,
    (void*) Native_setPedCapsule,
    (void*) Native_registerPedheadshot,
    (void*) Native_registerPedheadshotHires,
    (void*) Native_registerPedheadshotTransparent,
    (void*) Native_unregisterPedheadshot,
    (void*) Native_isPedheadshotValid,
    (void*) Native_isPedheadshotReady,
    (void*) Native_getPedheadshotTxdString,
    (void*) Native_requestPedheadshotImgUpload,
    (void*) Native_releasePedheadshotImgUpload,
    (void*) Native_isPedheadshotImgUploadAvailable,
    (void*) Native_hasPedheadshotImgUploadFailed,
    (void*) Native_hasPedheadshotImgUploadSucceeded,
    (void*) Native_setPedHeatscaleOverride,
    (void*) Native_disablePedHeatscaleOverride,
    (void*) Native_spawnpointsStartSearch,
    (void*) Native_spawnpointsStartSearchInAngledArea,
    (void*) Native_spawnpointsCancelSearch,
    (void*) Native_spawnpointsIsSearchActive,
    (void*) Native_spawnpointsIsSearchComplete,
    (void*) Native_spawnpointsIsSearchFailed,
    (void*) Native_spawnpointsGetNumSearchResults,
    (void*) Native_spawnpointsGetSearchResult,
    (void*) Native_spawnpointsGetSearchResultFlags,
    (void*) Native_setIkTarget,
    (void*) Native_forceInstantLegIkSetup,
    (void*) Native_requestActionModeAsset,
    (void*) Native_hasActionModeAssetLoaded,
    (void*) Native_removeActionModeAsset,
    (void*) Native_requestStealthModeAsset,
    (void*) Native_hasStealthModeAssetLoaded,
    (void*) Native_removeStealthModeAsset,
    (void*) Native_setPedLodMultiplier,
    (void*) Native_setPedCanLosePropsOnDamage,
    (void*) Native_setForceFootstepUpdate,
    (void*) Native_setForceStepType,
    (void*) Native_isAnyHostilePedNearPoint,
    (void*) Native_setPedCanPlayInCarIdles,
    (void*) Native_isTargetPedInPerceptionArea,
    (void*) Native_setPopControlSphereThisFrame,
    (void*) Native_forceZeroMassInCollisions,
    (void*) Native_setDisableHighFallDeath,
    (void*) Native_setPedPhonePaletteIdx,
    (void*) Native_setPedSteerBias,
    (void*) Native_isPedSwitchingWeapon,
    (void*) Native_setPedTreatedAsFriendly,
    (void*) Native_setDisablePedMapCollision,
    (void*) Native_enableMpLight,
    (void*) Native_getMpLightEnabled,
    (void*) Native_clearCoverPointForPed,
    (void*) Native_setAllowStuntJumpCamera,
    (void*) Native_addRope,
    (void*) Native_deleteRope,
    (void*) Native_deleteChildRope,
    (void*) Native_doesRopeExist,
    (void*) Native_ropeDrawEnabled,
    (void*) Native_ropeDrawShadowEnabled,
    (void*) Native_loadRopeData,
    (void*) Native_pinRopeVertex,
    (void*) Native_unpinRopeVertex,
    (void*) Native_getRopeVertexCount,
    (void*) Native_attachEntitiesToRope,
    (void*) Native_attachRopeToEntity,
    (void*) Native_detachRopeFromEntity,
    (void*) Native_ropeSetUpdatePinverts,
    (void*) Native_ropeSetUpdateOrder,
    (void*) Native_ropeSetSmoothReelin,
    (void*) Native_isRopeAttachedAtBothEnds,
    (void*) Native_getRopeLastVertexCoord,
    (void*) Native_getRopeVertexCoord,
    (void*) Native_startRopeWinding,
    (void*) Native_stopRopeWinding,
    (void*) Native_startRopeUnwindingFront,
    (void*) Native_stopRopeUnwindingFront,
    (void*) Native_ropeConvertToSimple,
    (void*) Native_ropeLoadTextures,
    (void*) Native_ropeAreTexturesLoaded,
    (void*) Native_ropeUnloadTextures,
    (void*) Native_doesScriptOwnRope,
    (void*) Native_ropeAttachVirtualBoundGeom,
    (void*) Native_ropeChangeScriptOwner,
    (void*) Native_ropeSetRefframevelocityColliderorder,
    (void*) Native_ropeGetDistanceBetweenEnds,
    (void*) Native_ropeForceLength,
    (void*) Native_ropeResetLength,
    (void*) Native_applyImpulseToCloth,
    (void*) Native_setDamping,
    (void*) Native_activatePhysics,
    (void*) Native_setCgoffset,
    (void*) Native_getCgoffset,
    (void*) Native_setCgAtBoundcenter,
    (void*) Native_breakEntityGlass,
    (void*) Native_getIsEntityAFrag,
    (void*) Native_setDisableBreaking,
    (void*) Native_resetDisableBreaking,
    (void*) Native_setDisableFragDamage,
    (void*) Native_setUseKinematicPhysics,
    (void*) Native_setInStuntMode,
    (void*) Native_setInArenaMode,
    (void*) Native_getPlayerPed,
    (void*) Native_getPlayerPedScriptIndex,
    (void*) Native_setPlayerModel,
    (void*) Native_changePlayerPed,
    (void*) Native_getPlayerRgbColour,
    (void*) Native_getNumberOfPlayers,
    (void*) Native_getPlayerTeam,
    (void*) Native_setPlayerTeam,
    (void*) Native_getNumberOfPlayersInTeam,
    (void*) Native_getPlayerName,
    (void*) Native_getWantedLevelRadius,
    (void*) Native_getPlayerWantedCentrePosition,
    (void*) Native_setPlayerWantedCentrePosition,
    (void*) Native_getWantedLevelThreshold,
    (void*) Native_setPlayerWantedLevel,
    (void*) Native_setPlayerWantedLevelNoDrop,
    (void*) Native_setPlayerWantedLevelNow,
    (void*) Native_arePlayerFlashingStarsAboutToDrop,
    (void*) Native_arePlayerStarsGreyedOut,
    (void*) Native_isWantedAndHasBeenSeenByCops,
    (void*) Native_setDispatchCopsForPlayer,
    (void*) Native_isPlayerWantedLevelGreater,
    (void*) Native_clearPlayerWantedLevel,
    (void*) Native_isPlayerDead,
    (void*) Native_isPlayerPressingHorn,
    (void*) Native_setPlayerControl,
    (void*) Native_getPlayerWantedLevel,
    (void*) Native_setMaxWantedLevel,
    (void*) Native_setPoliceRadarBlips,
    (void*) Native_setPoliceIgnorePlayer,
    (void*) Native_isPlayerPlaying,
    (void*) Native_setEveryoneIgnorePlayer,
    (void*) Native_setAllRandomPedsFlee,
    (void*) Native_setAllRandomPedsFleeThisFrame,
    (void*) Native_setAllNeutralRandomPedsFlee,
    (void*) Native_setAllNeutralRandomPedsFleeThisFrame,
    (void*) Native_setLawPedsCanAttackNonWantedPlayerThisFrame,
    (void*) Native_setIgnoreLowPriorityShockingEvents,
    (void*) Native_setWantedLevelMultiplier,
    (void*) Native_setWantedLevelDifficulty,
    (void*) Native_resetWantedLevelDifficulty,
    (void*) Native_getWantedLevelTimeToEscape,
    (void*) Native_setWantedLevelHiddenEscapeTime,
    (void*) Native_resetWantedLevelHiddenEscapeTime,
    (void*) Native_startFiringAmnesty,
    (void*) Native_reportCrime,
    (void*) Native_suppressCrimeThisFrame,
    (void*) Native_updateWantedPositionThisFrame,
    (void*) Native_suppressLosingWantedLevelIfHiddenThisFrame,
    (void*) Native_allowEvasionHudIfDisablingHiddenEvasionThisFrame,
    (void*) Native_forceStartHiddenEvasion,
    (void*) Native_suppressWitnessesCallingPoliceThisFrame,
    (void*) Native_reportPoliceSpottedPlayer,
    (void*) Native_setLawResponseDelayOverride,
    (void*) Native_resetLawResponseDelayOverride,
    (void*) Native_canPlayerStartMission,
    (void*) Native_isPlayerReadyForCutscene,
    (void*) Native_isPlayerTargettingEntity,
    (void*) Native_getPlayerTargetEntity,
    (void*) Native_isPlayerFreeAiming,
    (void*) Native_isPlayerFreeAimingAtEntity,
    (void*) Native_getEntityPlayerIsFreeAimingAt,
    (void*) Native_setPlayerLockonRangeOverride,
    (void*) Native_setPlayerCanDoDriveBy,
    (void*) Native_setPlayerCanBeHassledByGangs,
    (void*) Native_setPlayerCanUseCover,
    (void*) Native_getMaxWantedLevel,
    (void*) Native_isPlayerTargettingAnything,
    (void*) Native_setPlayerSprint,
    (void*) Native_resetPlayerStamina,
    (void*) Native_restorePlayerStamina,
    (void*) Native_getPlayerSprintStaminaRemaining,
    (void*) Native_getPlayerSprintTimeRemaining,
    (void*) Native_getPlayerUnderwaterTimeRemaining,
    (void*) Native_setPlayerUnderwaterBreathPercentRemaining,
    (void*) Native_getPlayerGroup,
    (void*) Native_getPlayerMaxArmour,
    (void*) Native_isPlayerControlOn,
    (void*) Native_getAreCameraControlsDisabled,
    (void*) Native_isPlayerScriptControlOn,
    (void*) Native_isPlayerClimbing,
    (void*) Native_isPlayerBeingArrested,
    (void*) Native_resetPlayerArrestState,
    (void*) Native_getPlayersLastVehicle,
    (void*) Native_getPlayerIndex,
    (void*) Native_intToPlayerindex,
    (void*) Native_intToParticipantindex,
    (void*) Native_getTimeSincePlayerHitVehicle,
    (void*) Native_getTimeSincePlayerHitPed,
    (void*) Native_getTimeSincePlayerDroveOnPavement,
    (void*) Native_getTimeSincePlayerDroveAgainstTraffic,
    (void*) Native_isPlayerFreeForAmbientTask,
    (void*) Native_playerId,
    (void*) Native_playerPedId,
    (void*) Native_networkPlayerIdToInt,
    (void*) Native_hasForceCleanupOccurred,
    (void*) Native_forceCleanup,
    (void*) Native_forceCleanupForAllThreadsWithThisName,
    (void*) Native_forceCleanupForThreadWithThisId,
    (void*) Native_getCauseOfMostRecentForceCleanup,
    (void*) Native_setPlayerMayOnlyEnterThisVehicle,
    (void*) Native_setPlayerMayNotEnterAnyVehicle,
    (void*) Native_giveAchievementToPlayer,
    (void*) Native_setAchievementProgress,
    (void*) Native_getAchievementProgress,
    (void*) Native_hasAchievementBeenPassed,
    (void*) Native_isPlayerOnline,
    (void*) Native_isPlayerLoggingInNp,
    (void*) Native_displaySystemSigninUi,
    (void*) Native_isSystemUiBeingDisplayed,
    (void*) Native_setPlayerInvincible,
    (void*) Native_getPlayerInvincible,
    (void*) Native_getPlayerDebugInvincible,
    (void*) Native_setPlayerInvincibleButHasReactions,
    (void*) Native_setPlayerCanCollectDroppedMoney,
    (void*) Native_removePlayerHelmet,
    (void*) Native_givePlayerRagdollControl,
    (void*) Native_setPlayerLockon,
    (void*) Native_setPlayerTargetingMode,
    (void*) Native_setPlayerTargetLevel,
    (void*) Native_getIsUsingFpsThirdPersonCover,
    (void*) Native_getIsUsingHoodCamera,
    (void*) Native_clearPlayerHasDamagedAtLeastOnePed,
    (void*) Native_hasPlayerDamagedAtLeastOnePed,
    (void*) Native_clearPlayerHasDamagedAtLeastOneNonAnimalPed,
    (void*) Native_hasPlayerDamagedAtLeastOneNonAnimalPed,
    (void*) Native_setAirDragMultiplierForPlayersVehicle,
    (void*) Native_setSwimMultiplierForPlayer,
    (void*) Native_setRunSprintMultiplierForPlayer,
    (void*) Native_getTimeSinceLastArrest,
    (void*) Native_getTimeSinceLastDeath,
    (void*) Native_assistedMovementCloseRoute,
    (void*) Native_assistedMovementFlushRoute,
    (void*) Native_setPlayerForcedAim,
    (void*) Native_setPlayerForcedZoom,
    (void*) Native_setPlayerForceSkipAimIntro,
    (void*) Native_disablePlayerFiring,
    (void*) Native_disablePlayerThrowGrenadeWhileUsingGun,
    (void*) Native_setDisableAmbientMeleeMove,
    (void*) Native_setPlayerMaxArmour,
    (void*) Native_specialAbilityActivate,
    (void*) Native_setSpecialAbilityMp,
    (void*) Native_specialAbilityDeactivateMp,
    (void*) Native_specialAbilityDeactivate,
    (void*) Native_specialAbilityDeactivateFast,
    (void*) Native_specialAbilityReset,
    (void*) Native_specialAbilityChargeOnMissionFailed,
    (void*) Native_specialAbilityChargeSmall,
    (void*) Native_specialAbilityChargeMedium,
    (void*) Native_specialAbilityChargeLarge,
    (void*) Native_specialAbilityChargeContinuous,
    (void*) Native_specialAbilityChargeAbsolute,
    (void*) Native_specialAbilityChargeNormalized,
    (void*) Native_specialAbilityFillMeter,
    (void*) Native_specialAbilityDepleteMeter,
    (void*) Native_specialAbilityLock,
    (void*) Native_specialAbilityUnlock,
    (void*) Native_isSpecialAbilityUnlocked,
    (void*) Native_isSpecialAbilityActive,
    (void*) Native_isSpecialAbilityMeterFull,
    (void*) Native_enableSpecialAbility,
    (void*) Native_isSpecialAbilityEnabled,
    (void*) Native_setSpecialAbilityMultiplier,
    (void*) Native_updateSpecialAbilityFromStat,
    (void*) Native_getIsPlayerDrivingOnHighway,
    (void*) Native_getIsPlayerDrivingWreckless,
    (void*) Native_getIsMoppingAreaFreeInFrontOfPlayer,
    (void*) Native_startPlayerTeleport,
    (void*) Native_updatePlayerTeleport,
    (void*) Native_stopPlayerTeleport,
    (void*) Native_isPlayerTeleportActive,
    (void*) Native_getPlayerCurrentStealthNoise,
    (void*) Native_setPlayerHealthRechargeMultiplier,
    (void*) Native_getPlayerHealthRechargeMaxPercent,
    (void*) Native_setPlayerHealthRechargeMaxPercent,
    (void*) Native_setPlayerFallDistanceToTriggerRagdollOverride,
    (void*) Native_setPlayerWeaponDamageModifier,
    (void*) Native_setPlayerWeaponDefenseModifier,
    (void*) Native_setPlayerWeaponMinigunDefenseModifier,
    (void*) Native_setPlayerMeleeWeaponDamageModifier,
    (void*) Native_setPlayerMeleeWeaponDefenseModifier,
    (void*) Native_setPlayerVehicleDamageModifier,
    (void*) Native_setPlayerVehicleDefenseModifier,
    (void*) Native_setPlayerMaxExplosiveDamage,
    (void*) Native_setPlayerExplosiveDamageModifier,
    (void*) Native_setPlayerWeaponTakedownDefenseModifier,
    (void*) Native_setPlayerParachuteTintIndex,
    (void*) Native_getPlayerParachuteTintIndex,
    (void*) Native_setPlayerReserveParachuteTintIndex,
    (void*) Native_getPlayerReserveParachuteTintIndex,
    (void*) Native_setPlayerParachutePackTintIndex,
    (void*) Native_getPlayerParachutePackTintIndex,
    (void*) Native_setPlayerHasReserveParachute,
    (void*) Native_getPlayerHasReserveParachute,
    (void*) Native_setPlayerCanLeaveParachuteSmokeTrail,
    (void*) Native_setPlayerParachuteSmokeTrailColor,
    (void*) Native_getPlayerParachuteSmokeTrailColor,
    (void*) Native_setPlayerPhonePaletteIdx,
    (void*) Native_setPlayerNoiseMultiplier,
    (void*) Native_setPlayerSneakingNoiseMultiplier,
    (void*) Native_canPedHearPlayer,
    (void*) Native_simulatePlayerInputGait,
    (void*) Native_resetPlayerInputGait,
    (void*) Native_setAutoGiveParachuteWhenEnterPlane,
    (void*) Native_setAutoGiveScubaGearWhenExitVehicle,
    (void*) Native_setPlayerStealthPerceptionModifier,
    (void*) Native_isRemotePlayerInNonClonedVehicle,
    (void*) Native_increasePlayerJumpSuppressionRange,
    (void*) Native_setPlayerSimulateAiming,
    (void*) Native_setPlayerClothPinFrames,
    (void*) Native_setPlayerClothPackageIndex,
    (void*) Native_setPlayerClothLockCounter,
    (void*) Native_playerAttachVirtualBound,
    (void*) Native_playerDetachVirtualBound,
    (void*) Native_hasPlayerBeenSpottedInStolenVehicle,
    (void*) Native_isPlayerBattleAware,
    (void*) Native_getPlayerReceivedBattleEventRecently,
    (void*) Native_extendWorldBoundaryForPlayer,
    (void*) Native_resetWorldBoundaryForPlayer,
    (void*) Native_isPlayerRidingTrain,
    (void*) Native_hasPlayerLeftTheWorld,
    (void*) Native_setPlayerLeavePedBehind,
    (void*) Native_setPlayerParachuteVariationOverride,
    (void*) Native_clearPlayerParachuteVariationOverride,
    (void*) Native_setPlayerParachuteModelOverride,
    (void*) Native_setPlayerReserveParachuteModelOverride,
    (void*) Native_getPlayerParachuteModelOverride,
    (void*) Native_getPlayerReserveParachuteModelOverride,
    (void*) Native_clearPlayerParachuteModelOverride,
    (void*) Native_clearPlayerReserveParachuteModelOverride,
    (void*) Native_setPlayerParachutePackModelOverride,
    (void*) Native_clearPlayerParachutePackModelOverride,
    (void*) Native_disablePlayerVehicleRewards,
    (void*) Native_setPlayerSpectatedVehicleRadioOverride,
    (void*) Native_setPlayerBluetoothState,
    (void*) Native_isPlayerBluetoothEnable,
    (void*) Native_disableCameraViewModeCycle,
    (void*) Native_getPlayerFakeWantedLevel,
    (void*) Native_setPlayerCanDamagePlayer,
    (void*) Native_setApplyWaypointOfPlayer,
    (void*) Native_isPlayerVehicleWeaponToggledToNonHoming,
    (void*) Native_setPlayerVehicleWeaponToNonHoming,
    (void*) Native_setPlayerHomingDisabledForAllVehicleWeapons,
    (void*) Native_addPlayerTargetableEntity,
    (void*) Native_removePlayerTargetableEntity,
    (void*) Native_setPlayerPreviousVariationData,
    (void*) Native_removeScriptFirePosition,
    (void*) Native_setScriptFirePosition,
    (void*) Native_replayStartEvent,
    (void*) Native_replayStopEvent,
    (void*) Native_replayCancelEvent,
    (void*) Native_replayRecordBackForTime,
    (void*) Native_replayCheckForEventThisFrame,
    (void*) Native_replayPreventRecordingThisFrame,
    (void*) Native_replayResetEventInfo,
    (void*) Native_replayDisableCameraMovementThisFrame,
    (void*) Native_recordGreatestMoment,
    (void*) Native_startReplayRecording,
    (void*) Native_stopReplayRecording,
    (void*) Native_cancelReplayRecording,
    (void*) Native_saveReplayRecording,
    (void*) Native_isReplayRecording,
    (void*) Native_isReplayInitialized,
    (void*) Native_isReplayAvailable,
    (void*) Native_isReplayRecordSpaceAvailable,
    (void*) Native_registerEffectForReplayEditor,
    (void*) Native_replaySystemHasRequestedAScriptCleanup,
    (void*) Native_setScriptsHaveCleanedUpForReplaySystem,
    (void*) Native_setReplaySystemPausedForSave,
    (void*) Native_replayControlShutdown,
    (void*) Native_activateRockstarEditor,
    (void*) Native_requestScript,
    (void*) Native_setScriptAsNoLongerNeeded,
    (void*) Native_hasScriptLoaded,
    (void*) Native_doesScriptExist,
    (void*) Native_requestScriptWithNameHash,
    (void*) Native_setScriptWithNameHashAsNoLongerNeeded,
    (void*) Native_hasScriptWithNameHashLoaded,
    (void*) Native_doesScriptWithNameHashExist,
    (void*) Native_terminateThread,
    (void*) Native_isThreadActive,
    (void*) Native_getNameOfScriptWithThisId,
    (void*) Native_scriptThreadIteratorReset,
    (void*) Native_scriptThreadIteratorGetNextThreadId,
    (void*) Native_getIdOfThisThread,
    (void*) Native_terminateThisThread,
    (void*) Native_getNumberOfThreadsRunningTheScriptWithThisHash,
    (void*) Native_getThisScriptName,
    (void*) Native_getHashOfThisScriptName,
    (void*) Native_getNumberOfEvents,
    (void*) Native_getEventExists,
    (void*) Native_getEventAtIndex,
    (void*) Native_getEventData,
    (void*) Native_triggerScriptEvent,
    (void*) Native_shutdownLoadingScreen,
    (void*) Native_setNoLoadingScreen,
    (void*) Native_getNoLoadingScreen,
    (void*) Native_commitToLoadingscreenSelction,
    (void*) Native_bgIsExitflagSet,
    (void*) Native_bgSetExitflagResponse,
    (void*) Native_bgStartContextHash,
    (void*) Native_bgEndContextHash,
    (void*) Native_bgStartContext,
    (void*) Native_bgEndContext,
    (void*) Native_bgDoesLaunchParamExist,
    (void*) Native_bgGetLaunchParamValue,
    (void*) Native_bgGetScriptIdFromNameHash,
    (void*) Native_startShapeTestLosProbe,
    (void*) Native_startExpensiveSynchronousShapeTestLosProbe,
    (void*) Native_startShapeTestBoundingBox,
    (void*) Native_startShapeTestBox,
    (void*) Native_startShapeTestBound,
    (void*) Native_startShapeTestCapsule,
    (void*) Native_startShapeTestSweptSphere,
    (void*) Native_startShapeTestMouseCursorLosProbe,
    (void*) Native_getShapeTestResult,
    (void*) Native_getShapeTestResultIncludingMaterial,
    (void*) Native_releaseScriptGuidFromEntity,
    (void*) Native_scInboxGetTotalNumMessages,
    (void*) Native_scInboxGetMessageTypeAtIndex,
    (void*) Native_scInboxGetMessageIsReadAtIndex,
    (void*) Native_scInboxSetMessageAsReadAtIndex,
    (void*) Native_scInboxMessageGetDataInt,
    (void*) Native_scInboxMessageGetDataBool,
    (void*) Native_scInboxMessageGetDataString,
    (void*) Native_scInboxMessageDoApply,
    (void*) Native_scInboxMessageGetRawTypeAtIndex,
    (void*) Native_scInboxMessagePushGamerT0RecipList,
    (void*) Native_scInboxSendUgcstatupdateToRecipList,
    (void*) Native_scInboxMessageGetUgcdata,
    (void*) Native_scInboxSendBountyToRecipList,
    (void*) Native_scInboxGetBountyDataAtIndex,
    (void*) Native_scEmailRetrieveEmails,
    (void*) Native_scEmailGetRetrievalStatus,
    (void*) Native_scEmailGetNumRetrievedEmails,
    (void*) Native_scEmailGetEmailAtIndex,
    (void*) Native_scEmailDeleteEmails,
    (void*) Native_scEmailMessagePushGamerToRecipList,
    (void*) Native_scEmailMessageClearRecipList,
    (void*) Native_scEmailSendEmail,
    (void*) Native_scEmailSetCurrentEmailTag,
    (void*) Native_scCacheNewRockstarMsgs,
    (void*) Native_scHasNewRockstarMsg,
    (void*) Native_scGetNewRockstarMsg,
    (void*) Native_scPresenceAttrSetInt,
    (void*) Native_scPresenceAttrSetFloat,
    (void*) Native_scPresenceAttrSetString,
    (void*) Native_scPresenceSetActivityRating,
    (void*) Native_scGamerdataGetInt,
    (void*) Native_scGamerdataGetFloat,
    (void*) Native_scGamerdataGetBool,
    (void*) Native_scGamerdataGetString,
    (void*) Native_scGamerdataGetActiveXpBonus,
    (void*) Native_scProfanityCheckString,
    (void*) Native_scProfanityCheckStringUgc,
    (void*) Native_scProfanityGetCheckIsValid,
    (void*) Native_scProfanityGetCheckIsPending,
    (void*) Native_scProfanityGetStringPassed,
    (void*) Native_scProfanityGetStringStatus,
    (void*) Native_scLicenseplateCheckString,
    (void*) Native_scLicenseplateGetCheckIsValid,
    (void*) Native_scLicenseplateGetCheckIsPending,
    (void*) Native_scLicenseplateGetCount,
    (void*) Native_scLicenseplateGetPlate,
    (void*) Native_scLicenseplateGetPlateData,
    (void*) Native_scLicenseplateSetPlateData,
    (void*) Native_scLicenseplateAdd,
    (void*) Native_scLicenseplateGetAddIsPending,
    (void*) Native_scLicenseplateGetAddStatus,
    (void*) Native_scLicenseplateIsvalid,
    (void*) Native_scLicenseplateGetIsvalidIsPending,
    (void*) Native_scLicenseplateGetIsvalidStatus,
    (void*) Native_scCommunityEventIsActive,
    (void*) Native_scCommunityEventGetEventId,
    (void*) Native_scCommunityEventGetExtraDataInt,
    (void*) Native_scCommunityEventGetExtraDataFloat,
    (void*) Native_scCommunityEventGetExtraDataString,
    (void*) Native_scCommunityEventGetDisplayName,
    (void*) Native_scCommunityEventIsActiveForType,
    (void*) Native_scCommunityEventGetEventIdForType,
    (void*) Native_scCommunityEventGetExtraDataIntForType,
    (void*) Native_scCommunityEventGetExtraDataFloatForType,
    (void*) Native_scCommunityEventGetExtraDataStringForType,
    (void*) Native_scCommunityEventGetDisplayNameForType,
    (void*) Native_scCommunityEventIsActiveById,
    (void*) Native_scCommunityEventGetExtraDataIntById,
    (void*) Native_scCommunityEventGetExtraDataFloatById,
    (void*) Native_scCommunityEventGetExtraDataStringById,
    (void*) Native_scCommunityEventGetDisplayNameById,
    (void*) Native_scTransitionNewsShow,
    (void*) Native_scTransitionNewsShowTimed,
    (void*) Native_scTransitionNewsShowNextItem,
    (void*) Native_scTransitionNewsHasExtraDataTu,
    (void*) Native_scTransitionNewsGetExtraDataIntTu,
    (void*) Native_scTransitionNewsEnd,
    (void*) Native_scPauseNewsInitStarterPack,
    (void*) Native_scPauseNewsGetPendingStory,
    (void*) Native_scPauseNewsShutdown,
    (void*) Native_scAccountInfoGetNickname,
    (void*) Native_scAchievementInfoStatus,
    (void*) Native_scHasAchievementBeenPassed,
    (void*) Native_statClearSlotForReload,
    (void*) Native_statLoad,
    (void*) Native_statSave,
    (void*) Native_statSetOpenSavetypeInJob,
    (void*) Native_statLoadPending,
    (void*) Native_statSavePending,
    (void*) Native_statSavePendingOrRequested,
    (void*) Native_statDeleteSlot,
    (void*) Native_statSlotIsLoaded,
    (void*) Native_statCloudSlotLoadFailed,
    (void*) Native_statCloudSlotLoadFailedCode,
    (void*) Native_statSetBlockSaves,
    (void*) Native_statGetBlockSaves,
    (void*) Native_statCloudSlotSaveFailed,
    (void*) Native_statClearPendingSaves,
    (void*) Native_statLoadDirtyReadDetected,
    (void*) Native_statClearDirtyReadDetected,
    (void*) Native_statGetLoadSafeToProgressToMpFromSp,
    (void*) Native_statSetInt,
    (void*) Native_statSetFloat,
    (void*) Native_statSetBool,
    (void*) Native_statSetGxtLabel,
    (void*) Native_statSetDate,
    (void*) Native_statSetString,
    (void*) Native_statSetPos,
    (void*) Native_statSetMaskedInt,
    (void*) Native_statSetUserId,
    (void*) Native_statSetCurrentPosixTime,
    (void*) Native_statGetInt,
    (void*) Native_statGetFloat,
    (void*) Native_statGetBool,
    (void*) Native_statGetDate,
    (void*) Native_statGetString,
    (void*) Native_statGetPos,
    (void*) Native_statGetMaskedInt,
    (void*) Native_statGetUserId,
    (void*) Native_statGetLicensePlate,
    (void*) Native_statSetLicensePlate,
    (void*) Native_statIncrement,
    (void*) Native_statCommunityStartSynch,
    (void*) Native_statCommunitySynchIsPending,
    (void*) Native_statCommunityGetHistory,
    (void*) Native_statResetAllOnlineCharacterStats,
    (void*) Native_statLocalResetAllOnlineCharacterStats,
    (void*) Native_statGetNumberOfDays,
    (void*) Native_statGetNumberOfHours,
    (void*) Native_statGetNumberOfMinutes,
    (void*) Native_statGetNumberOfSeconds,
    (void*) Native_statSetProfileSettingValue,
    (void*) Native_statsCompletedCharacterCreation,
    (void*) Native_packedStatGetIntStatIndex,
    (void*) Native_getPackedIntStatKey,
    (void*) Native_getPackedTuIntStatKey,
    (void*) Native_getPackedNgIntStatKey,
    (void*) Native_getPackedStatIntCode,
    (void*) Native_setPackedStatIntCode,
    (void*) Native_playstatsBackgroundScriptAction,
    (void*) Native_playstatsNpcInvite,
    (void*) Native_playstatsAwardXp,
    (void*) Native_playstatsRankUp,
    (void*) Native_playstatsStartedSessionInOfflinemode,
    (void*) Native_playstatsActivityDone,
    (void*) Native_playstatsLeaveJobChain,
    (void*) Native_playstatsMissionStarted,
    (void*) Native_playstatsMissionOver,
    (void*) Native_playstatsMissionCheckpoint,
    (void*) Native_playstatsRandomMissionDone,
    (void*) Native_playstatsRosBet,
    (void*) Native_playstatsRaceCheckpoint,
    (void*) Native_playstatsCreateMatchHistoryId2,
    (void*) Native_playstatsMatchStarted,
    (void*) Native_playstatsShopItem,
    (void*) Native_playstatsCrateDropMissionDone,
    (void*) Native_playstatsCrateCreated,
    (void*) Native_playstatsHoldUpMissionDone,
    (void*) Native_playstatsImportExportMissionDone,
    (void*) Native_playstatsRaceToPointMissionDone,
    (void*) Native_playstatsAcquiredHiddenPackage,
    (void*) Native_playstatsWebsiteVisited,
    (void*) Native_playstatsFriendActivity,
    (void*) Native_playstatsOddjobDone,
    (void*) Native_playstatsPropChange,
    (void*) Native_playstatsClothChange,
    (void*) Native_playstatsWeaponModeChange,
    (void*) Native_playstatsCheatApplied,
    (void*) Native_playstatsJobActivityEnd,
    (void*) Native_playstatsJobBend,
    (void*) Native_playstatsJobLtsEnd,
    (void*) Native_playstatsJobLtsRoundEnd,
    (void*) Native_playstatsQuickfixTool,
    (void*) Native_playstatsIdleKick,
    (void*) Native_playstatsSetJoinType,
    (void*) Native_playstatsHeistSaveCheat,
    (void*) Native_playstatsAppendDirectorMetric,
    (void*) Native_playstatsAwardBadSport,
    (void*) Native_playstatsPegasusAsPersonalAircraft,
    (void*) Native_playstatsFmEventChallenges,
    (void*) Native_playstatsFmEventVehicletarget,
    (void*) Native_playstatsFmEventUrbanwarfare,
    (void*) Native_playstatsFmEventCheckpointcollection,
    (void*) Native_playstatsFmEventAtob,
    (void*) Native_playstatsFmEventPennedin,
    (void*) Native_playstatsFmEventPasstheparcel,
    (void*) Native_playstatsFmEventHotproperty,
    (void*) Native_playstatsFmEventDeaddrop,
    (void*) Native_playstatsFmEventKingofthecastle,
    (void*) Native_playstatsFmEventCriminaldamage,
    (void*) Native_playstatsFmEventCompetitiveurbanwarfare,
    (void*) Native_playstatsFmEventHuntbeast,
    (void*) Native_playstatsPimenuHideOptions,
    (void*) Native_leaderboardsGetNumberOfColumns,
    (void*) Native_leaderboardsGetColumnId,
    (void*) Native_leaderboardsGetColumnType,
    (void*) Native_leaderboardsReadClearAll,
    (void*) Native_leaderboardsReadClear,
    (void*) Native_leaderboardsReadPending,
    (void*) Native_leaderboardsReadAnyPending,
    (void*) Native_leaderboardsReadSuccessful,
    (void*) Native_leaderboards2ReadFriendsByRow,
    (void*) Native_leaderboards2ReadByHandle,
    (void*) Native_leaderboards2ReadByRow,
    (void*) Native_leaderboards2ReadByRank,
    (void*) Native_leaderboards2ReadByRadius,
    (void*) Native_leaderboards2ReadByScoreInt,
    (void*) Native_leaderboards2ReadByScoreFloat,
    (void*) Native_leaderboards2ReadRankPrediction,
    (void*) Native_leaderboards2ReadByPlaform,
    (void*) Native_leaderboards2ReadGetRowDataStart,
    (void*) Native_leaderboards2ReadGetRowDataEnd,
    (void*) Native_leaderboards2ReadGetRowDataInfo,
    (void*) Native_leaderboards2ReadGetRowDataInt,
    (void*) Native_leaderboards2ReadGetRowDataFloat,
    (void*) Native_leaderboards2WriteData,
    (void*) Native_leaderboardsWriteAddColumn,
    (void*) Native_leaderboardsWriteAddColumnLong,
    (void*) Native_leaderboardsCacheDataRow,
    (void*) Native_leaderboardsClearCacheData,
    (void*) Native_leaderboardsClearCacheDataId,
    (void*) Native_leaderboardsGetCacheExists,
    (void*) Native_leaderboardsGetCacheTime,
    (void*) Native_leaderboardsGetCacheNumberOfRows,
    (void*) Native_leaderboardsGetCacheDataRow,
    (void*) Native_presenceEventUpdatestatInt,
    (void*) Native_presenceEventUpdatestatFloat,
    (void*) Native_presenceEventUpdatestatIntWithString,
    (void*) Native_getPlayerHasDrivenAllVehicles,
    (void*) Native_setHasPostedAllVehiclesDriven,
    (void*) Native_setProfileSettingPrologueComplete,
    (void*) Native_setProfileSettingSpChopMissionComplete,
    (void*) Native_setProfileSettingCreatorRacesDone,
    (void*) Native_setProfileSettingCreatorDmDone,
    (void*) Native_setProfileSettingCreatorCtfDone,
    (void*) Native_setJobActivityIdStarted,
    (void*) Native_setFreemodePrologueDone,
    (void*) Native_setFreemodeStrandProgressionStatus,
    (void*) Native_statNetworkIncrementOnSuicide,
    (void*) Native_statSetCheatIsActive,
    (void*) Native_leaderboards2WriteDataForEventType,
    (void*) Native_forceCloudMpStatsDownloadAndOverwriteLocalSave,
    (void*) Native_statMigrateClearForRestart,
    (void*) Native_statMigrateSavegameStart,
    (void*) Native_statMigrateSavegameGetStatus,
    (void*) Native_statMigrateCheckAlreadyDone,
    (void*) Native_statMigrateCheckStart,
    (void*) Native_statMigrateCheckGetIsPlatformAvailable,
    (void*) Native_statMigrateCheckGetPlatformStatus,
    (void*) Native_statGetSaveMigrationStatus,
    (void*) Native_statSaveMigrationCancelPendingOperation,
    (void*) Native_statGetCancelSaveMigrationStatus,
    (void*) Native_statSaveMigrationConsumeContent,
    (void*) Native_statGetSaveMigrationConsumeContentStatus,
    (void*) Native_statEnableStatsTracking,
    (void*) Native_statDisableStatsTracking,
    (void*) Native_statIsStatsTrackingEnabled,
    (void*) Native_statStartRecordStat,
    (void*) Native_statStopRecordStat,
    (void*) Native_statGetRecordedValue,
    (void*) Native_statIsRecordingStat,
    (void*) Native_statGetCurrentNearMissNocrashPrecise,
    (void*) Native_statGetCurrentRearWheelDistance,
    (void*) Native_statGetCurrentFrontWheelDistance,
    (void*) Native_statGetCurrentJumpDistance,
    (void*) Native_statGetCurrentDriveNocrashDistance,
    (void*) Native_statGetCurrentSpeed,
    (void*) Native_statGetCurrentDrivingReverseDistance,
    (void*) Native_statGetCurrentSkydivingDistance,
    (void*) Native_statGetChallengeFlyingDist,
    (void*) Native_statGetFlyingAltitude,
    (void*) Native_statIsPlayerVehicleAboveOcean,
    (void*) Native_statGetVehicleBailDistance,
    (void*) Native_statRollbackSaveMigration,
    (void*) Native_setHasSpecialeditionContent,
    (void*) Native_setSaveMigrationTransactionIdWarning,
    (void*) Native_getBossGoonUuid,
    (void*) Native_playstatsBwBossonbossdeathmatch,
    (void*) Native_playstatsBwYatchattack,
    (void*) Native_playstatsBwHuntTheBoss,
    (void*) Native_playstatsBwSightseer,
    (void*) Native_playstatsBwAssault,
    (void*) Native_playstatsBwBellyOfTheBeast,
    (void*) Native_playstatsBwHeadHunter,
    (void*) Native_playstatsBwFragileGoods,
    (void*) Native_playstatsBwAirFreight,
    (void*) Native_playstatsBcCarJacking,
    (void*) Native_playstatsBcSmashAndGrab,
    (void*) Native_playstatsBcProtectionRacket,
    (void*) Native_playstatsBcMostWanted,
    (void*) Native_playstatsBcFindersKeepers,
    (void*) Native_playstatsBcPointToPoint,
    (void*) Native_playstatsBcCashing,
    (void*) Native_playstatsBcSalvage,
    (void*) Native_playstatsSpentPiCustomLoadout,
    (void*) Native_playstatsBuyContrabandMission,
    (void*) Native_playstatsSellContrabandMission,
    (void*) Native_playstatsDefendContrabandMission,
    (void*) Native_playstatsRecoverContrabandMission,
    (void*) Native_playstatsHitContrabandDestroyLimit,
    (void*) Native_startBeingBoss,
    (void*) Native_startBeingGoon,
    (void*) Native_endBeingBoss,
    (void*) Native_endBeingGoon,
    (void*) Native_hiredLimo,
    (void*) Native_orderBossVehicle,
    (void*) Native_changeUniform,
    (void*) Native_changeGoonLookingForWork,
    (void*) Native_sendMetricGhostingToPlayer,
    (void*) Native_sendMetricVipPoach,
    (void*) Native_sendMetricPunishBodyguard,
    (void*) Native_playstatsStartTrackingStunts,
    (void*) Native_playstatsStopTrackingStunts,
    (void*) Native_playstatsMissionEnded,
    (void*) Native_playstatsImpexpMissionEnded,
    (void*) Native_playstatsChangeMcRole,
    (void*) Native_playstatsChangeMcOutfit,
    (void*) Native_playstatsSwitchMcEmblem,
    (void*) Native_playstatsMcRequestBike,
    (void*) Native_playstatsMcKilledRivalMcMember,
    (void*) Native_playstatsAbandonedMc,
    (void*) Native_playstatsEarnedMcPoints,
    (void*) Native_playstatsMcFormationEnds,
    (void*) Native_playstatsMcClubhouseActivity,
    (void*) Native_playstatsRivalBehavior,
    (void*) Native_playstatsCopyRankIntoNewSlot,
    (void*) Native_playstatsDupeDetected,
    (void*) Native_playstatsBanAlert,
    (void*) Native_playstatsGunrunningMissionEnded,
    (void*) Native_playstatsGunrunningRnd,
    (void*) Native_playstatsBusinessBattleEnded,
    (void*) Native_playstatsWarehouseMissionEnded,
    (void*) Native_playstatsNightclubMissionEnded,
    (void*) Native_playstatsDjUsage,
    (void*) Native_playstatsMinigameUsage,
    (void*) Native_playstatsStoneHatchetEnded,
    (void*) Native_playstatsSmugglerMissionEnded,
    (void*) Native_playstatsFmHeistPrepEnded,
    (void*) Native_playstatsInstancedHeistEnded,
    (void*) Native_playstatsDarCheckpoint,
    (void*) Native_playstatsEnterSessionPack,
    (void*) Native_playstatsDroneUsage,
    (void*) Native_playstatsSpinWheel,
    (void*) Native_playstatsArenaWarsSpectator,
    (void*) Native_playstatsArenaWarsEnded,
    (void*) Native_playstatsSwitchPassiveMode,
    (void*) Native_playstatsCollectiblePickedUp,
    (void*) Native_playstatsCasinoStoryMissionEnded,
    (void*) Native_playstatsCasinoChip,
    (void*) Native_playstatsCasinoRoulette,
    (void*) Native_playstatsCasinoBlackjack,
    (void*) Native_playstatsCasinoThreeCardPoker,
    (void*) Native_playstatsCasinoSlotMachine,
    (void*) Native_playstatsCasinoInsideTrack,
    (void*) Native_playstatsCasinoLuckySeven,
    (void*) Native_playstatsCasinoRouletteLight,
    (void*) Native_playstatsCasinoBlackjackLight,
    (void*) Native_playstatsCasinoThreeCardPokerLight,
    (void*) Native_playstatsCasinoSlotMachineLight,
    (void*) Native_playstatsCasinoInsideTrackLight,
    (void*) Native_playstatsArcadeGame,
    (void*) Native_playstatsArcadeLoveMatch,
    (void*) Native_playstatsFreemodeCasinoMissionEnded,
    (void*) Native_playstatsHeist3Drone,
    (void*) Native_playstatsHeist3Hack,
    (void*) Native_playstatsNpcPhone,
    (void*) Native_playstatsArcadeCabinet,
    (void*) Native_playstatsHeist3Finale,
    (void*) Native_playstatsHeist3Prep,
    (void*) Native_playstatsMasterControl,
    (void*) Native_playstatsQuitMode,
    (void*) Native_playstatsMissionVote,
    (void*) Native_playstatsNjvsVote,
    (void*) Native_playstatsKillYourself,
    (void*) Native_playstatsFmMissionEnd,
    (void*) Native_playstatsHeist4Prep,
    (void*) Native_playstatsHeist4Finale,
    (void*) Native_playstatsHeist4Hack,
    (void*) Native_playstatsSubWeap,
    (void*) Native_playstatsFastTrvl,
    (void*) Native_playstatsHubEntry,
    (void*) Native_playstatsDjMissionEnded,
    (void*) Native_playstatsRobberyPrep,
    (void*) Native_playstatsRobberyFinale,
    (void*) Native_playstatsExtraEvent,
    (void*) Native_playstatsCarclubPoints,
    (void*) Native_playstatsCarclubChallenge,
    (void*) Native_playstatsCarclubPrize,
    (void*) Native_playstatsAwardNav,
    (void*) Native_playstatsInstMissionEnd,
    (void*) Native_playstatsHubExit,
    (void*) Native_playstatsInventory,
    (void*) Native_loadAllObjectsNow,
    (void*) Native_loadScene,
    (void*) Native_networkUpdateLoadScene,
    (void*) Native_isNetworkLoadingScene,
    (void*) Native_setInteriorActive,
    (void*) Native_requestModel,
    (void*) Native_requestMenuPedModel,
    (void*) Native_hasModelLoaded,
    (void*) Native_requestModelsInRoom,
    (void*) Native_setModelAsNoLongerNeeded,
    (void*) Native_isModelInCdimage,
    (void*) Native_isModelValid,
    (void*) Native_isModelAPed,
    (void*) Native_isModelAVehicle,
    (void*) Native_requestCollisionAtCoord,
    (void*) Native_requestCollisionForModel,
    (void*) Native_hasCollisionForModelLoaded,
    (void*) Native_requestAdditionalCollisionAtCoord,
    (void*) Native_doesAnimDictExist,
    (void*) Native_requestAnimDict,
    (void*) Native_hasAnimDictLoaded,
    (void*) Native_removeAnimDict,
    (void*) Native_requestAnimSet,
    (void*) Native_hasAnimSetLoaded,
    (void*) Native_removeAnimSet,
    (void*) Native_requestClipSet,
    (void*) Native_hasClipSetLoaded,
    (void*) Native_removeClipSet,
    (void*) Native_requestIpl,
    (void*) Native_removeIpl,
    (void*) Native_isIplActive,
    (void*) Native_setStreaming,
    (void*) Native_loadGlobalWaterFile,
    (void*) Native_getGlobalWaterFile,
    (void*) Native_setGamePausesForStreaming,
    (void*) Native_setReducePedModelBudget,
    (void*) Native_setReduceVehicleModelBudget,
    (void*) Native_setDitchPoliceModels,
    (void*) Native_getNumberOfStreamingRequests,
    (void*) Native_requestPtfxAsset,
    (void*) Native_hasPtfxAssetLoaded,
    (void*) Native_removePtfxAsset,
    (void*) Native_requestNamedPtfxAsset,
    (void*) Native_hasNamedPtfxAssetLoaded,
    (void*) Native_removeNamedPtfxAsset,
    (void*) Native_setVehiclePopulationBudget,
    (void*) Native_setPedPopulationBudget,
    (void*) Native_clearFocus,
    (void*) Native_setFocusPosAndVel,
    (void*) Native_setFocusEntity,
    (void*) Native_isEntityFocus,
    (void*) Native_setRestoreFocusEntity,
    (void*) Native_setMapdatacullboxEnabled,
    (void*) Native_setAllMapdataCulled,
    (void*) Native_streamvolCreateSphere,
    (void*) Native_streamvolCreateFrustum,
    (void*) Native_streamvolCreateLine,
    (void*) Native_streamvolDelete,
    (void*) Native_streamvolHasLoaded,
    (void*) Native_streamvolIsValid,
    (void*) Native_isStreamvolActive,
    (void*) Native_newLoadSceneStart,
    (void*) Native_newLoadSceneStartSphere,
    (void*) Native_newLoadSceneStop,
    (void*) Native_isNewLoadSceneActive,
    (void*) Native_isNewLoadSceneLoaded,
    (void*) Native_isSafeToStartPlayerSwitch,
    (void*) Native_startPlayerSwitch,
    (void*) Native_stopPlayerSwitch,
    (void*) Native_isPlayerSwitchInProgress,
    (void*) Native_getPlayerSwitchType,
    (void*) Native_getIdealPlayerSwitchType,
    (void*) Native_getPlayerSwitchState,
    (void*) Native_getPlayerShortSwitchState,
    (void*) Native_setPlayerShortSwitchStyle,
    (void*) Native_getPlayerSwitchJumpCutIndex,
    (void*) Native_setPlayerSwitchOutro,
    (void*) Native_setPlayerSwitchEstablishingShot,
    (void*) Native_allowPlayerSwitchPan,
    (void*) Native_allowPlayerSwitchOutro,
    (void*) Native_allowPlayerSwitchAscent,
    (void*) Native_allowPlayerSwitchDescent,
    (void*) Native_isSwitchReadyForDescent,
    (void*) Native_enableSwitchPauseBeforeDescent,
    (void*) Native_disableSwitchOutroFx,
    (void*) Native_switchToMultiFirstpart,
    (void*) Native_switchToMultiSecondpart,
    (void*) Native_isSwitchToMultiFirstpartFinished,
    (void*) Native_getPlayerSwitchInterpOutDuration,
    (void*) Native_getPlayerSwitchInterpOutCurrentTime,
    (void*) Native_isSwitchSkippingDescent,
    (void*) Native_setSceneStreamingTracksCamPosThisFrame,
    (void*) Native_getLodscale,
    (void*) Native_overrideLodscaleThisFrame,
    (void*) Native_remapLodscaleRangeThisFrame,
    (void*) Native_suppressHdMapStreamingThisFrame,
    (void*) Native_setRenderHdOnly,
    (void*) Native_forceAllowTimeBasedFadingThisFrame,
    (void*) Native_iplGroupSwapStart,
    (void*) Native_iplGroupSwapCancel,
    (void*) Native_iplGroupSwapIsReady,
    (void*) Native_iplGroupSwapFinish,
    (void*) Native_iplGroupSwapIsActive,
    (void*) Native_prefetchSrl,
    (void*) Native_isSrlLoaded,
    (void*) Native_beginSrl,
    (void*) Native_endSrl,
    (void*) Native_setSrlTime,
    (void*) Native_setSrlPostCutsceneCamera,
    (void*) Native_setSrlReadaheadTimes,
    (void*) Native_setSrlLongJumpMode,
    (void*) Native_setSrlForcePrestream,
    (void*) Native_setHdArea,
    (void*) Native_clearHdArea,
    (void*) Native_initCreatorBudget,
    (void*) Native_shutdownCreatorBudget,
    (void*) Native_addModelToCreatorBudget,
    (void*) Native_removeModelFromCreatorBudget,
    (void*) Native_getUsedCreatorBudget,
    (void*) Native_setIslandEnabled,
    (void*) Native_taskPause,
    (void*) Native_taskStandStill,
    (void*) Native_taskJump,
    (void*) Native_taskCower,
    (void*) Native_taskHandsUp,
    (void*) Native_updateTaskHandsUpDuration,
    (void*) Native_taskOpenVehicleDoor,
    (void*) Native_taskEnterVehicle,
    (void*) Native_taskLeaveVehicle,
    (void*) Native_taskGetOffBoat,
    (void*) Native_taskSkyDive,
    (void*) Native_taskParachute,
    (void*) Native_taskParachuteToTarget,
    (void*) Native_setParachuteTaskTarget,
    (void*) Native_setParachuteTaskThrust,
    (void*) Native_taskRappelFromHeli,
    (void*) Native_taskVehicleDriveToCoord,
    (void*) Native_taskVehicleDriveToCoordLongrange,
    (void*) Native_taskVehicleDriveWander,
    (void*) Native_taskFollowToOffsetOfEntity,
    (void*) Native_taskGoStraightToCoord,
    (void*) Native_taskGoStraightToCoordRelativeToEntity,
    (void*) Native_taskAchieveHeading,
    (void*) Native_taskFlushRoute,
    (void*) Native_taskExtendRoute,
    (void*) Native_taskFollowPointRoute,
    (void*) Native_taskGoToEntity,
    (void*) Native_taskSmartFleeCoord,
    (void*) Native_taskSmartFleePed,
    (void*) Native_taskReactAndFleePed,
    (void*) Native_taskShockingEventReact,
    (void*) Native_taskWanderInArea,
    (void*) Native_taskWanderStandard,
    (void*) Native_taskWanderSpecific,
    (void*) Native_taskVehiclePark,
    (void*) Native_taskStealthKill,
    (void*) Native_taskPlantBomb,
    (void*) Native_taskFollowNavMeshToCoord,
    (void*) Native_taskFollowNavMeshToCoordAdvanced,
    (void*) Native_setPedPathCanUseClimbovers,
    (void*) Native_setPedPathCanUseLadders,
    (void*) Native_setPedPathCanDropFromHeight,
    (void*) Native_setPedPathClimbCostModifier,
    (void*) Native_setPedPathMayEnterWater,
    (void*) Native_setPedPathPreferToAvoidWater,
    (void*) Native_setPedPathAvoidFire,
    (void*) Native_setGlobalMinBirdFlightHeight,
    (void*) Native_getNavmeshRouteDistanceRemaining,
    (void*) Native_getNavmeshRouteResult,
    (void*) Native_isControlledVehicleUnableToGetToRoad,
    (void*) Native_taskGoToCoordAnyMeans,
    (void*) Native_taskGoToCoordAnyMeansExtraParams,
    (void*) Native_taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed,
    (void*) Native_taskPlayAnim,
    (void*) Native_taskPlayAnimAdvanced,
    (void*) Native_stopAnimTask,
    (void*) Native_taskScriptedAnimation,
    (void*) Native_playEntityScriptedAnim,
    (void*) Native_stopAnimPlayback,
    (void*) Native_setAnimWeight,
    (void*) Native_setAnimPhase,
    (void*) Native_setAnimRate,
    (void*) Native_setAnimLooped,
    (void*) Native_taskPlayPhoneGestureAnimation,
    (void*) Native_taskStopPhoneGestureAnimation,
    (void*) Native_isPlayingPhoneGestureAnim,
    (void*) Native_getPhoneGestureAnimCurrentTime,
    (void*) Native_getPhoneGestureAnimTotalTime,
    (void*) Native_taskVehiclePlayAnim,
    (void*) Native_taskLookAtCoord,
    (void*) Native_taskLookAtEntity,
    (void*) Native_taskClearLookAt,
    (void*) Native_openSequenceTask,
    (void*) Native_closeSequenceTask,
    (void*) Native_taskPerformSequence,
    (void*) Native_taskPerformSequenceLocally,
    (void*) Native_clearSequenceTask,
    (void*) Native_setSequenceToRepeat,
    (void*) Native_getSequenceProgress,
    (void*) Native_getIsTaskActive,
    (void*) Native_getScriptTaskStatus,
    (void*) Native_getActiveVehicleMissionType,
    (void*) Native_taskLeaveAnyVehicle,
    (void*) Native_taskAimGunScripted,
    (void*) Native_taskAimGunScriptedWithTarget,
    (void*) Native_updateTaskAimGunScriptedTarget,
    (void*) Native_getClipSetForScriptedGunTask,
    (void*) Native_taskAimGunAtEntity,
    (void*) Native_taskTurnPedToFaceEntity,
    (void*) Native_taskAimGunAtCoord,
    (void*) Native_taskShootAtCoord,
    (void*) Native_taskShuffleToNextVehicleSeat,
    (void*) Native_clearPedTasks,
    (void*) Native_clearPedSecondaryTask,
    (void*) Native_taskEveryoneLeaveVehicle,
    (void*) Native_taskGotoEntityOffset,
    (void*) Native_taskGotoEntityOffsetXy,
    (void*) Native_taskTurnPedToFaceCoord,
    (void*) Native_taskVehicleTempAction,
    (void*) Native_taskVehicleMission,
    (void*) Native_taskVehicleMissionPedTarget,
    (void*) Native_taskVehicleMissionCoorsTarget,
    (void*) Native_taskVehicleEscort,
    (void*) Native_taskVehicleFollow,
    (void*) Native_taskVehicleChase,
    (void*) Native_taskVehicleHeliProtect,
    (void*) Native_setTaskVehicleChaseBehaviorFlag,
    (void*) Native_setTaskVehicleChaseIdealPursuitDistance,
    (void*) Native_taskHeliChase,
    (void*) Native_taskPlaneChase,
    (void*) Native_taskPlaneLand,
    (void*) Native_clearDefaultPrimaryTask,
    (void*) Native_clearPrimaryVehicleTask,
    (void*) Native_clearVehicleCrashTask,
    (void*) Native_taskPlaneGotoPreciseVtol,
    (void*) Native_taskSubmarineGotoAndStop,
    (void*) Native_taskHeliMission,
    (void*) Native_taskHeliEscortHeli,
    (void*) Native_taskPlaneMission,
    (void*) Native_taskPlaneTaxi,
    (void*) Native_taskBoatMission,
    (void*) Native_taskDriveBy,
    (void*) Native_setDrivebyTaskTarget,
    (void*) Native_clearDrivebyTaskUnderneathDrivingTask,
    (void*) Native_isDrivebyTaskUnderneathDrivingTask,
    (void*) Native_controlMountedWeapon,
    (void*) Native_setMountedWeaponTarget,
    (void*) Native_isMountedWeaponTaskUnderneathDrivingTask,
    (void*) Native_taskUseMobilePhone,
    (void*) Native_taskUseMobilePhoneTimed,
    (void*) Native_taskChatToPed,
    (void*) Native_taskWarpPedIntoVehicle,
    (void*) Native_taskShootAtEntity,
    (void*) Native_taskClimb,
    (void*) Native_taskClimbLadder,
    (void*) Native_taskRappelDownWallUsingClipsetOverride,
    (void*) Native_getTaskRappelDownWallState,
    (void*) Native_clearPedTasksImmediately,
    (void*) Native_taskPerformSequenceFromProgress,
    (void*) Native_setNextDesiredMoveState,
    (void*) Native_setPedDesiredMoveBlendRatio,
    (void*) Native_getPedDesiredMoveBlendRatio,
    (void*) Native_taskGotoEntityAiming,
    (void*) Native_taskSetDecisionMaker,
    (void*) Native_taskSetSphereDefensiveArea,
    (void*) Native_taskClearDefensiveArea,
    (void*) Native_taskPedSlideToCoord,
    (void*) Native_taskPedSlideToCoordHdgRate,
    (void*) Native_addCoverPoint,
    (void*) Native_removeCoverPoint,
    (void*) Native_doesScriptedCoverPointExistAtCoords,
    (void*) Native_getScriptedCoverPointCoords,
    (void*) Native_addScriptedCoverArea,
    (void*) Native_taskCombatPed,
    (void*) Native_taskCombatPedTimed,
    (void*) Native_taskSeekCoverFromPos,
    (void*) Native_taskSeekCoverFromPed,
    (void*) Native_taskSeekCoverToCoverPoint,
    (void*) Native_taskSeekCoverToCoords,
    (void*) Native_taskPutPedDirectlyIntoCover,
    (void*) Native_taskWarpPedDirectlyIntoCover,
    (void*) Native_taskExitCover,
    (void*) Native_taskPutPedDirectlyIntoMelee,
    (void*) Native_taskToggleDuck,
    (void*) Native_taskGuardCurrentPosition,
    (void*) Native_taskGuardAssignedDefensiveArea,
    (void*) Native_taskGuardSphereDefensiveArea,
    (void*) Native_taskStandGuard,
    (void*) Native_setDriveTaskCruiseSpeed,
    (void*) Native_setDriveTaskMaxCruiseSpeed,
    (void*) Native_setDriveTaskDrivingStyle,
    (void*) Native_addCoverBlockingArea,
    (void*) Native_removeAllCoverBlockingAreas,
    (void*) Native_removeCoverBlockingAreasAtPosition,
    (void*) Native_removeSpecificCoverBlockingAreas,
    (void*) Native_taskStartScenarioInPlace,
    (void*) Native_taskStartScenarioAtPosition,
    (void*) Native_taskUseNearestScenarioToCoord,
    (void*) Native_taskUseNearestScenarioToCoordWarp,
    (void*) Native_taskUseNearestScenarioChainToCoord,
    (void*) Native_taskUseNearestScenarioChainToCoordWarp,
    (void*) Native_doesScenarioExistInArea,
    (void*) Native_doesScenarioOfTypeExistInArea,
    (void*) Native_isScenarioOccupied,
    (void*) Native_pedHasUseScenarioTask,
    (void*) Native_playAnimOnRunningScenario,
    (void*) Native_doesScenarioGroupExist,
    (void*) Native_isScenarioGroupEnabled,
    (void*) Native_setScenarioGroupEnabled,
    (void*) Native_resetScenarioGroupsEnabled,
    (void*) Native_setExclusiveScenarioGroup,
    (void*) Native_resetExclusiveScenarioGroup,
    (void*) Native_isScenarioTypeEnabled,
    (void*) Native_setScenarioTypeEnabled,
    (void*) Native_resetScenarioTypesEnabled,
    (void*) Native_isPedActiveInScenario,
    (void*) Native_isPedPlayingBaseClipInScenario,
    (void*) Native_setPedCanPlayAmbientIdles,
    (void*) Native_taskCombatHatedTargetsInArea,
    (void*) Native_taskCombatHatedTargetsAroundPed,
    (void*) Native_taskCombatHatedTargetsAroundPedTimed,
    (void*) Native_taskThrowProjectile,
    (void*) Native_taskSwapWeapon,
    (void*) Native_taskReloadWeapon,
    (void*) Native_isPedGettingUp,
    (void*) Native_taskWrithe,
    (void*) Native_isPedInWrithe,
    (void*) Native_openPatrolRoute,
    (void*) Native_closePatrolRoute,
    (void*) Native_addPatrolRouteNode,
    (void*) Native_addPatrolRouteLink,
    (void*) Native_createPatrolRoute,
    (void*) Native_deletePatrolRoute,
    (void*) Native_getPatrolTaskInfo,
    (void*) Native_taskPatrol,
    (void*) Native_taskStayInCover,
    (void*) Native_addVehicleSubtaskAttackCoord,
    (void*) Native_addVehicleSubtaskAttackPed,
    (void*) Native_taskVehicleShootAtPed,
    (void*) Native_taskVehicleAimAtPed,
    (void*) Native_taskVehicleShootAtCoord,
    (void*) Native_taskVehicleAimAtCoord,
    (void*) Native_taskVehicleGotoNavmesh,
    (void*) Native_taskGoToCoordWhileAimingAtCoord,
    (void*) Native_taskGoToCoordWhileAimingAtEntity,
    (void*) Native_taskGoToCoordAndAimAtHatedEntitiesNearCoord,
    (void*) Native_taskGoToEntityWhileAimingAtCoord,
    (void*) Native_taskGoToEntityWhileAimingAtEntity,
    (void*) Native_setHighFallTask,
    (void*) Native_requestWaypointRecording,
    (void*) Native_getIsWaypointRecordingLoaded,
    (void*) Native_removeWaypointRecording,
    (void*) Native_waypointRecordingGetNumPoints,
    (void*) Native_waypointRecordingGetCoord,
    (void*) Native_waypointRecordingGetSpeedAtPoint,
    (void*) Native_waypointRecordingGetClosestWaypoint,
    (void*) Native_taskFollowWaypointRecording,
    (void*) Native_isWaypointPlaybackGoingOnForPed,
    (void*) Native_getPedWaypointProgress,
    (void*) Native_getPedWaypointDistance,
    (void*) Native_setPedWaypointRouteOffset,
    (void*) Native_getWaypointDistanceAlongRoute,
    (void*) Native_waypointPlaybackGetIsPaused,
    (void*) Native_waypointPlaybackPause,
    (void*) Native_waypointPlaybackResume,
    (void*) Native_waypointPlaybackOverrideSpeed,
    (void*) Native_waypointPlaybackUseDefaultSpeed,
    (void*) Native_useWaypointRecordingAsAssistedMovementRoute,
    (void*) Native_waypointPlaybackStartAimingAtPed,
    (void*) Native_waypointPlaybackStartAimingAtCoord,
    (void*) Native_waypointPlaybackStartShootingAtPed,
    (void*) Native_waypointPlaybackStartShootingAtCoord,
    (void*) Native_waypointPlaybackStopAimingOrShooting,
    (void*) Native_assistedMovementRequestRoute,
    (void*) Native_assistedMovementRemoveRoute,
    (void*) Native_assistedMovementIsRouteLoaded,
    (void*) Native_assistedMovementSetRouteProperties,
    (void*) Native_assistedMovementOverrideLoadDistanceThisFrame,
    (void*) Native_taskVehicleFollowWaypointRecording,
    (void*) Native_isWaypointPlaybackGoingOnForVehicle,
    (void*) Native_getVehicleWaypointProgress,
    (void*) Native_getVehicleWaypointTargetPoint,
    (void*) Native_vehicleWaypointPlaybackPause,
    (void*) Native_vehicleWaypointPlaybackResume,
    (void*) Native_vehicleWaypointPlaybackUseDefaultSpeed,
    (void*) Native_vehicleWaypointPlaybackOverrideSpeed,
    (void*) Native_taskSetBlockingOfNonTemporaryEvents,
    (void*) Native_taskForceMotionState,
    (void*) Native_taskMoveNetworkByName,
    (void*) Native_taskMoveNetworkAdvancedByName,
    (void*) Native_taskMoveNetworkByNameWithInitParams,
    (void*) Native_taskMoveNetworkAdvancedByNameWithInitParams,
    (void*) Native_isTaskMoveNetworkActive,
    (void*) Native_isTaskMoveNetworkReadyForTransition,
    (void*) Native_requestTaskMoveNetworkStateTransition,
    (void*) Native_setExpectedCloneNextTaskMoveNetworkState,
    (void*) Native_getTaskMoveNetworkState,
    (void*) Native_setTaskMoveNetworkAnimSet,
    (void*) Native_setTaskMoveNetworkSignalFloat,
    (void*) Native_setTaskMoveNetworkSignalLocalFloat,
    (void*) Native_setTaskMoveNetworkSignalFloatLerpRate,
    (void*) Native_setTaskMoveNetworkSignalBool,
    (void*) Native_getTaskMoveNetworkSignalFloat,
    (void*) Native_getTaskMoveNetworkSignalBool,
    (void*) Native_getTaskMoveNetworkEvent,
    (void*) Native_setTaskMoveNetworkEnableCollisionOnNetworkCloneWhenFixed,
    (void*) Native_isMoveBlendRatioStill,
    (void*) Native_isMoveBlendRatioWalking,
    (void*) Native_isMoveBlendRatioRunning,
    (void*) Native_isMoveBlendRatioSprinting,
    (void*) Native_isPedStill,
    (void*) Native_isPedWalking,
    (void*) Native_isPedRunning,
    (void*) Native_isPedSprinting,
    (void*) Native_isPedStrafing,
    (void*) Native_taskSynchronizedScene,
    (void*) Native_taskAgitatedActionConfrontResponse,
    (void*) Native_taskSweepAimEntity,
    (void*) Native_updateTaskSweepAimEntity,
    (void*) Native_taskSweepAimPosition,
    (void*) Native_updateTaskSweepAimPosition,
    (void*) Native_taskArrestPed,
    (void*) Native_isPedRunningArrestTask,
    (void*) Native_isPedBeingArrested,
    (void*) Native_uncuffPed,
    (void*) Native_isPedCuffed,
    (void*) Native_createVehicle,
    (void*) Native_deleteVehicle,
    (void*) Native_setVehicleAllowHomingMissleLockon,
    (void*) Native_setVehicleAllowHomingMissleLockonSynced,
    (void*) Native_setVehicleAllowNoPassengersLockon,
    (void*) Native_getVehicleHomingLockonState,
    (void*) Native_getVehicleHomingLockedontoState,
    (void*) Native_setVehicleHomingLockedontoState,
    (void*) Native_isVehicleModel,
    (void*) Native_doesScriptVehicleGeneratorExist,
    (void*) Native_createScriptVehicleGenerator,
    (void*) Native_deleteScriptVehicleGenerator,
    (void*) Native_setScriptVehicleGenerator,
    (void*) Native_setAllVehicleGeneratorsActiveInArea,
    (void*) Native_setAllVehicleGeneratorsActive,
    (void*) Native_setAllLowPriorityVehicleGeneratorsActive,
    (void*) Native_setVehicleGeneratorAreaOfInterest,
    (void*) Native_clearVehicleGeneratorAreaOfInterest,
    (void*) Native_setVehicleOnGroundProperly,
    (void*) Native_setVehicleUseCutsceneWheelCompression,
    (void*) Native_isVehicleStuckOnRoof,
    (void*) Native_addVehicleUpsidedownCheck,
    (void*) Native_removeVehicleUpsidedownCheck,
    (void*) Native_isVehicleStopped,
    (void*) Native_getVehicleNumberOfPassengers,
    (void*) Native_getVehicleMaxNumberOfPassengers,
    (void*) Native_getVehicleModelNumberOfSeats,
    (void*) Native_isSeatWarpOnly,
    (void*) Native_isTurretSeat,
    (void*) Native_doesVehicleAllowRappel,
    (void*) Native_setVehicleDensityMultiplierThisFrame,
    (void*) Native_setRandomVehicleDensityMultiplierThisFrame,
    (void*) Native_setParkedVehicleDensityMultiplierThisFrame,
    (void*) Native_setDisableRandomTrainsThisFrame,
    (void*) Native_setAmbientVehicleRangeMultiplierThisFrame,
    (void*) Native_setFarDrawVehicles,
    (void*) Native_setNumberOfParkedVehicles,
    (void*) Native_setVehicleDoorsLocked,
    (void*) Native_setVehicleIndividualDoorsLocked,
    (void*) Native_setVehicleHasMutedSirens,
    (void*) Native_setVehicleDoorsLockedForPlayer,
    (void*) Native_getVehicleDoorsLockedForPlayer,
    (void*) Native_setVehicleDoorsLockedForAllPlayers,
    (void*) Native_setVehicleDoorsLockedForNonScriptPlayers,
    (void*) Native_setVehicleDoorsLockedForTeam,
    (void*) Native_setVehicleDoorsLockedForAllTeams,
    (void*) Native_setVehicleDontTerminateTaskWhenAchieved,
    (void*) Native_explodeVehicle,
    (void*) Native_setVehicleOutOfControl,
    (void*) Native_setVehicleTimedExplosion,
    (void*) Native_addVehiclePhoneExplosiveDevice,
    (void*) Native_clearVehiclePhoneExplosiveDevice,
    (void*) Native_hasVehiclePhoneExplosiveDevice,
    (void*) Native_detonateVehiclePhoneExplosiveDevice,
    (void*) Native_setTaxiLights,
    (void*) Native_isTaxiLightOn,
    (void*) Native_isVehicleInGarageArea,
    (void*) Native_setVehicleColours,
    (void*) Native_setVehicleFullbeam,
    (void*) Native_setVehicleIsRacing,
    (void*) Native_setVehicleCustomPrimaryColour,
    (void*) Native_getVehicleCustomPrimaryColour,
    (void*) Native_clearVehicleCustomPrimaryColour,
    (void*) Native_getIsVehiclePrimaryColourCustom,
    (void*) Native_setVehicleCustomSecondaryColour,
    (void*) Native_getVehicleCustomSecondaryColour,
    (void*) Native_clearVehicleCustomSecondaryColour,
    (void*) Native_getIsVehicleSecondaryColourCustom,
    (void*) Native_setVehicleEnveffScale,
    (void*) Native_getVehicleEnveffScale,
    (void*) Native_setCanResprayVehicle,
    (void*) Native_setGoonBossVehicle,
    (void*) Native_setOpenRearDoorsOnExplosion,
    (void*) Native_forceSubmarineSurfaceMode,
    (void*) Native_forceSubmarineNeurtalBuoyancy,
    (void*) Native_setSubmarineCrushDepths,
    (void*) Native_getSubmarineIsUnderDesignDepth,
    (void*) Native_getSubmarineNumberOfAirLeaks,
    (void*) Native_setBoatIgnoreLandProbes,
    (void*) Native_setBoatAnchor,
    (void*) Native_canAnchorBoatHere,
    (void*) Native_canAnchorBoatHereIgnorePlayers,
    (void*) Native_setBoatRemainsAnchoredWhilePlayerIsDriver,
    (void*) Native_setForceLowLodAnchorMode,
    (void*) Native_setBoatLowLodAnchorDistance,
    (void*) Native_isBoatAnchored,
    (void*) Native_setBoatSinksWhenWrecked,
    (void*) Native_setBoatWrecked,
    (void*) Native_setVehicleSiren,
    (void*) Native_isVehicleSirenOn,
    (void*) Native_isVehicleSirenAudioOn,
    (void*) Native_setVehicleStrong,
    (void*) Native_removeVehicleStuckCheck,
    (void*) Native_getVehicleColours,
    (void*) Native_isVehicleSeatFree,
    (void*) Native_getPedInVehicleSeat,
    (void*) Native_getLastPedInVehicleSeat,
    (void*) Native_getVehicleLightsState,
    (void*) Native_isVehicleTyreBurst,
    (void*) Native_setVehicleForwardSpeed,
    (void*) Native_setVehicleForwardSpeedXy,
    (void*) Native_bringVehicleToHalt,
    (void*) Native_setVehicleSteerForBuildings,
    (void*) Native_setVehicleCausesSwerving,
    (void*) Native_setIgnorePlanesSmallPitchChange,
    (void*) Native_stopBringingVehicleToHalt,
    (void*) Native_isVehicleBeingBroughtToHalt,
    (void*) Native_setForkliftForkHeight,
    (void*) Native_isEntityAttachedToHandlerFrame,
    (void*) Native_isAnyEntityAttachedToHandlerFrame,
    (void*) Native_findHandlerVehicleContainerIsAttachedTo,
    (void*) Native_isHandlerFrameLinedUpWithContainer,
    (void*) Native_attachContainerToHandlerFrameWhenLinedUp,
    (void*) Native_detachContainerFromHandlerFrame,
    (void*) Native_setVehicleDisableHeightMapAvoidance,
    (void*) Native_setBoatDisableAvoidance,
    (void*) Native_isHeliLandingAreaBlocked,
    (void*) Native_setShortSlowdownForLanding,
    (void*) Native_setHeliTurbulenceScalar,
    (void*) Native_setCarBootOpen,
    (void*) Native_setVehicleTyreBurst,
    (void*) Native_setVehicleDoorsShut,
    (void*) Native_setVehicleTyresCanBurst,
    (void*) Native_getVehicleTyresCanBurst,
    (void*) Native_setVehicleWheelsCanBreak,
    (void*) Native_setVehicleDoorOpen,
    (void*) Native_setVehicleDoorAutoLock,
    (void*) Native_setFleeingVehiclesUseSwitchedOffNodes,
    (void*) Native_removeVehicleWindow,
    (void*) Native_rollDownWindows,
    (void*) Native_rollDownWindow,
    (void*) Native_rollUpWindow,
    (void*) Native_smashVehicleWindow,
    (void*) Native_fixVehicleWindow,
    (void*) Native_popOutVehicleWindscreen,
    (void*) Native_popOffVehicleRoofWithImpulse,
    (void*) Native_setVehicleLights,
    (void*) Native_setVehicleUsePlayerLightSettings,
    (void*) Native_setVehicleHeadlightShadows,
    (void*) Native_setVehicleAlarm,
    (void*) Native_startVehicleAlarm,
    (void*) Native_isVehicleAlarmActivated,
    (void*) Native_setVehicleInteriorlight,
    (void*) Native_setVehicleForceInteriorlight,
    (void*) Native_setVehicleLightMultiplier,
    (void*) Native_attachVehicleToTrailer,
    (void*) Native_attachVehicleOnToTrailer,
    (void*) Native_stabiliseEntityAttachedToHeli,
    (void*) Native_detachVehicleFromTrailer,
    (void*) Native_isVehicleAttachedToTrailer,
    (void*) Native_setTrailerInverseMassScale,
    (void*) Native_setTrailerLegsRaised,
    (void*) Native_setTrailerLegsLowered,
    (void*) Native_setVehicleTyreFixed,
    (void*) Native_setVehicleNumberPlateText,
    (void*) Native_getVehicleNumberPlateText,
    (void*) Native_getNumberOfVehicleNumberPlates,
    (void*) Native_setVehicleNumberPlateTextIndex,
    (void*) Native_getVehicleNumberPlateTextIndex,
    (void*) Native_setRandomTrains,
    (void*) Native_createMissionTrain,
    (void*) Native_switchTrainTrack,
    (void*) Native_setTrainTrackSpawnFrequency,
    (void*) Native_allowTrainToBeRemovedByPopulation,
    (void*) Native_deleteAllTrains,
    (void*) Native_setTrainSpeed,
    (void*) Native_setTrainCruiseSpeed,
    (void*) Native_setRandomBoats,
    (void*) Native_setRandomBoatsMp,
    (void*) Native_setGarbageTrucks,
    (void*) Native_doesVehicleHaveStuckVehicleCheck,
    (void*) Native_getVehicleRecordingId,
    (void*) Native_requestVehicleRecording,
    (void*) Native_hasVehicleRecordingBeenLoaded,
    (void*) Native_removeVehicleRecording,
    (void*) Native_getPositionOfVehicleRecordingIdAtTime,
    (void*) Native_getPositionOfVehicleRecordingAtTime,
    (void*) Native_getRotationOfVehicleRecordingIdAtTime,
    (void*) Native_getRotationOfVehicleRecordingAtTime,
    (void*) Native_getTotalDurationOfVehicleRecordingId,
    (void*) Native_getTotalDurationOfVehicleRecording,
    (void*) Native_getPositionInRecording,
    (void*) Native_getTimePositionInRecording,
    (void*) Native_startPlaybackRecordedVehicle,
    (void*) Native_startPlaybackRecordedVehicleWithFlags,
    (void*) Native_forcePlaybackRecordedVehicleUpdate,
    (void*) Native_stopPlaybackRecordedVehicle,
    (void*) Native_pausePlaybackRecordedVehicle,
    (void*) Native_unpausePlaybackRecordedVehicle,
    (void*) Native_isPlaybackGoingOnForVehicle,
    (void*) Native_isPlaybackUsingAiGoingOnForVehicle,
    (void*) Native_getCurrentPlaybackForVehicle,
    (void*) Native_skipToEndAndStopPlaybackRecordedVehicle,
    (void*) Native_setPlaybackSpeed,
    (void*) Native_startPlaybackRecordedVehicleUsingAi,
    (void*) Native_skipTimeInPlaybackRecordedVehicle,
    (void*) Native_setPlaybackToUseAi,
    (void*) Native_setPlaybackToUseAiTryToRevertBackLater,
    (void*) Native_setAdditionalRotationForRecordedVehiclePlayback,
    (void*) Native_setPositionOffsetForRecordedVehiclePlayback,
    (void*) Native_setGlobalPositionOffsetForRecordedVehiclePlayback,
    (void*) Native_setShouldLerpFromAiToFullRecording,
    (void*) Native_explodeVehicleInCutscene,
    (void*) Native_addVehicleStuckCheckWithWarp,
    (void*) Native_setVehicleModelIsSuppressed,
    (void*) Native_getRandomVehicleInSphere,
    (void*) Native_getRandomVehicleFrontBumperInSphere,
    (void*) Native_getRandomVehicleBackBumperInSphere,
    (void*) Native_getClosestVehicle,
    (void*) Native_getTrainCarriage,
    (void*) Native_isMissionTrain,
    (void*) Native_deleteMissionTrain,
    (void*) Native_setMissionTrainAsNoLongerNeeded,
    (void*) Native_setMissionTrainCoords,
    (void*) Native_isThisModelABoat,
    (void*) Native_isThisModelAJetski,
    (void*) Native_isThisModelAPlane,
    (void*) Native_isThisModelAHeli,
    (void*) Native_isThisModelACar,
    (void*) Native_isThisModelATrain,
    (void*) Native_isThisModelABike,
    (void*) Native_isThisModelABicycle,
    (void*) Native_isThisModelAQuadbike,
    (void*) Native_isThisModelAnAmphibiousCar,
    (void*) Native_isThisModelAnAmphibiousQuadbike,
    (void*) Native_setHeliBladesFullSpeed,
    (void*) Native_setHeliBladesSpeed,
    (void*) Native_forceSubThrottleForTime,
    (void*) Native_setVehicleCanBeTargetted,
    (void*) Native_setDontAllowPlayerToEnterVehicleIfLockedForPlayer,
    (void*) Native_setVehicleCanBeVisiblyDamaged,
    (void*) Native_setVehicleHasUnbreakableLights,
    (void*) Native_setVehicleRespectsLocksWhenHasDriver,
    (void*) Native_setVehicleCanEjectPassengersIfLocked,
    (void*) Native_getVehicleDirtLevel,
    (void*) Native_setVehicleDirtLevel,
    (void*) Native_getDoesVehicleHaveDamageDecals,
    (void*) Native_isVehicleDoorFullyOpen,
    (void*) Native_setVehicleEngineOn,
    (void*) Native_setVehicleUndriveable,
    (void*) Native_setVehicleProvidesCover,
    (void*) Native_setVehicleDoorControl,
    (void*) Native_setVehicleDoorLatched,
    (void*) Native_getVehicleDoorAngleRatio,
    (void*) Native_getPedUsingVehicleDoor,
    (void*) Native_setVehicleDoorShut,
    (void*) Native_setVehicleDoorBroken,
    (void*) Native_setVehicleCanBreak,
    (void*) Native_doesVehicleHaveRoof,
    (void*) Native_setVehicleRemoveAggressiveCarjackMission,
    (void*) Native_setVehicleAvoidPlayerVehicleRiotVanMission,
    (void*) Native_setCarjackMissionRemovalParameters,
    (void*) Native_isBigVehicle,
    (void*) Native_getNumberOfVehicleColours,
    (void*) Native_setVehicleColourCombination,
    (void*) Native_getVehicleColourCombination,
    (void*) Native_setVehicleXenonLightColorIndex,
    (void*) Native_getVehicleXenonLightColorIndex,
    (void*) Native_setVehicleIsConsideredByPlayer,
    (void*) Native_setVehicleWillForceOtherVehiclesToStop,
    (void*) Native_setVehicleActAsIfHasSirenOn,
    (void*) Native_setVehicleUseMoreRestrictiveSpawnChecks,
    (void*) Native_setVehicleMayBeUsedByGotoPointAnyMeans,
    (void*) Native_getRandomVehicleModelInMemory,
    (void*) Native_getVehicleDoorLockStatus,
    (void*) Native_getVehicleIndividualDoorLockStatus,
    (void*) Native_isVehicleDoorDamaged,
    (void*) Native_setDoorAllowedToBeBrokenOff,
    (void*) Native_isVehicleBumperBouncing,
    (void*) Native_isVehicleBumperBrokenOff,
    (void*) Native_isCopVehicleInArea3d,
    (void*) Native_isVehicleOnAllWheels,
    (void*) Native_getVehicleModelValue,
    (void*) Native_getVehicleLayoutHash,
    (void*) Native_getInVehicleClipsetHashForSeat,
    (void*) Native_setRenderTrainAsDerailed,
    (void*) Native_setVehicleExtraColours,
    (void*) Native_getVehicleExtraColours,
    (void*) Native_setVehicleExtraColour5,
    (void*) Native_getVehicleExtraColour5,
    (void*) Native_setVehicleExtraColour6,
    (void*) Native_getVehicleExtraColour6,
    (void*) Native_stopAllGarageActivity,
    (void*) Native_setVehicleFixed,
    (void*) Native_setVehicleDeformationFixed,
    (void*) Native_setVehicleCanEngineMissfire,
    (void*) Native_setVehicleCanLeakOil,
    (void*) Native_setVehicleCanLeakPetrol,
    (void*) Native_setDisableVehiclePetrolTankFires,
    (void*) Native_setDisableVehiclePetrolTankDamage,
    (void*) Native_setDisableVehicleEngineFires,
    (void*) Native_setVehicleLimitSpeedWhenPlayerInactive,
    (void*) Native_setVehicleStopInstantlyWhenPlayerInactive,
    (void*) Native_setDisablePretendOccupants,
    (void*) Native_removeVehiclesFromGeneratorsInArea,
    (void*) Native_setVehicleSteerBias,
    (void*) Native_isVehicleExtraTurnedOn,
    (void*) Native_setVehicleExtra,
    (void*) Native_doesExtraExist,
    (void*) Native_isExtraBrokenOff,
    (void*) Native_setConvertibleRoof,
    (void*) Native_lowerConvertibleRoof,
    (void*) Native_raiseConvertibleRoof,
    (void*) Native_getConvertibleRoofState,
    (void*) Native_isVehicleAConvertible,
    (void*) Native_transformToSubmarine,
    (void*) Native_transformToCar,
    (void*) Native_isVehicleInSubmarineMode,
    (void*) Native_isVehicleStoppedAtTrafficLights,
    (void*) Native_setVehicleDamage,
    (void*) Native_setVehicleOccupantsTakeExplosiveDamage,
    (void*) Native_getVehicleEngineHealth,
    (void*) Native_setVehicleEngineHealth,
    (void*) Native_setPlaneEngineHealth,
    (void*) Native_getVehiclePetrolTankHealth,
    (void*) Native_setVehiclePetrolTankHealth,
    (void*) Native_isVehicleStuckTimerUp,
    (void*) Native_resetVehicleStuckTimer,
    (void*) Native_isVehicleDriveable,
    (void*) Native_setVehicleHasBeenOwnedByPlayer,
    (void*) Native_setVehicleNeedsToBeHotwired,
    (void*) Native_setVehicleBlipThrottleRandomly,
    (void*) Native_setPoliceFocusWillTrackVehicle,
    (void*) Native_startVehicleHorn,
    (void*) Native_setVehicleInCarModShop,
    (void*) Native_setVehicleHasStrongAxles,
    (void*) Native_getDisplayNameFromVehicleModel,
    (void*) Native_getMakeNameFromVehicleModel,
    (void*) Native_getVehicleDeformationAtPos,
    (void*) Native_setVehicleLivery,
    (void*) Native_getVehicleLivery,
    (void*) Native_getVehicleLiveryCount,
    (void*) Native_setVehicleLivery2,
    (void*) Native_getVehicleLivery2,
    (void*) Native_getVehicleLivery2Count,
    (void*) Native_isVehicleWindowIntact,
    (void*) Native_areAllVehicleWindowsIntact,
    (void*) Native_areAnyVehicleSeatsFree,
    (void*) Native_resetVehicleWheels,
    (void*) Native_isHeliPartBroken,
    (void*) Native_getHeliMainRotorHealth,
    (void*) Native_getHeliTailRotorHealth,
    (void*) Native_getHeliTailBoomHealth,
    (void*) Native_setHeliMainRotorHealth,
    (void*) Native_setHeliTailRotorHealth,
    (void*) Native_setHeliTailBoomCanBreakOff,
    (void*) Native_setVehicleNameDebug,
    (void*) Native_setVehicleExplodesOnHighExplosionDamage,
    (void*) Native_setVehicleExplodesOnExplosionDamageAtZeroBodyHealth,
    (void*) Native_setAllowVehicleExplodesOnContact,
    (void*) Native_setVehicleDisableTowing,
    (void*) Native_getVehicleHasLandingGear,
    (void*) Native_controlLandingGear,
    (void*) Native_getLandingGearState,
    (void*) Native_isAnyVehicleNearPoint,
    (void*) Native_requestVehicleHighDetailModel,
    (void*) Native_removeVehicleHighDetailModel,
    (void*) Native_isVehicleHighDetail,
    (void*) Native_requestVehicleAsset,
    (void*) Native_hasVehicleAssetLoaded,
    (void*) Native_removeVehicleAsset,
    (void*) Native_setVehicleTowTruckArmPosition,
    (void*) Native_attachVehicleToTowTruck,
    (void*) Native_detachVehicleFromTowTruck,
    (void*) Native_detachVehicleFromAnyTowTruck,
    (void*) Native_isVehicleAttachedToTowTruck,
    (void*) Native_getEntityAttachedToTowTruck,
    (void*) Native_setVehicleAutomaticallyAttaches,
    (void*) Native_setVehicleBulldozerArmPosition,
    (void*) Native_setVehicleTankTurretPosition,
    (void*) Native_setVehicleTurretTarget,
    (void*) Native_setVehicleTankStationary,
    (void*) Native_setVehicleTurretSpeedThisFrame,
    (void*) Native_disableVehicleTurretMovementThisFrame,
    (void*) Native_setVehicleFlightNozzlePosition,
    (void*) Native_setVehicleFlightNozzlePositionImmediate,
    (void*) Native_getVehicleFlightNozzlePosition,
    (void*) Native_setDisableVerticalFlightModeTransition,
    (void*) Native_generateVehicleCreationPosFromPaths,
    (void*) Native_setVehicleBurnout,
    (void*) Native_isVehicleInBurnout,
    (void*) Native_setVehicleReduceGrip,
    (void*) Native_setVehicleReduceGripLevel,
    (void*) Native_setVehicleIndicatorLights,
    (void*) Native_setVehicleBrakeLights,
    (void*) Native_setVehicleHandbrake,
    (void*) Native_setVehicleBrake,
    (void*) Native_instantlyFillVehiclePopulation,
    (void*) Native_hasInstantFillVehiclePopulationFinished,
    (void*) Native_networkEnableEmptyCrowdingVehiclesRemoval,
    (void*) Native_networkCapEmptyCrowdingVehiclesRemoval,
    (void*) Native_getVehicleTrailerVehicle,
    (void*) Native_setVehicleUsesLargeRearRamp,
    (void*) Native_setVehicleRudderBroken,
    (void*) Native_setConvertibleRoofLatchState,
    (void*) Native_getVehicleEstimatedMaxSpeed,
    (void*) Native_getVehicleMaxBraking,
    (void*) Native_getVehicleMaxTraction,
    (void*) Native_getVehicleAcceleration,
    (void*) Native_getVehicleModelEstimatedMaxSpeed,
    (void*) Native_getVehicleModelMaxBraking,
    (void*) Native_getVehicleModelMaxBrakingMaxMods,
    (void*) Native_getVehicleModelMaxTraction,
    (void*) Native_getVehicleModelAcceleration,
    (void*) Native_getVehicleModelAccelerationMaxMods,
    (void*) Native_getFlyingVehicleModelAgility,
    (void*) Native_getBoatVehicleModelAgility,
    (void*) Native_getVehicleClassEstimatedMaxSpeed,
    (void*) Native_getVehicleClassMaxTraction,
    (void*) Native_getVehicleClassMaxAgility,
    (void*) Native_getVehicleClassMaxAcceleration,
    (void*) Native_getVehicleClassMaxBraking,
    (void*) Native_addRoadNodeSpeedZone,
    (void*) Native_removeRoadNodeSpeedZone,
    (void*) Native_openBombBayDoors,
    (void*) Native_closeBombBayDoors,
    (void*) Native_getAreBombBayDoorsOpen,
    (void*) Native_isVehicleSearchlightOn,
    (void*) Native_setVehicleSearchlight,
    (void*) Native_doesVehicleHaveSearchlight,
    (void*) Native_isEntryPointForSeatClear,
    (void*) Native_getEntryPointPosition,
    (void*) Native_canShuffleSeat,
    (void*) Native_getNumModKits,
    (void*) Native_setVehicleModKit,
    (void*) Native_getVehicleModKit,
    (void*) Native_getVehicleModKitType,
    (void*) Native_getVehicleWheelType,
    (void*) Native_setVehicleWheelType,
    (void*) Native_getNumModColors,
    (void*) Native_setVehicleModColor1,
    (void*) Native_setVehicleModColor2,
    (void*) Native_getVehicleModColor1,
    (void*) Native_getVehicleModColor2,
    (void*) Native_getVehicleModColor1Name,
    (void*) Native_getVehicleModColor2Name,
    (void*) Native_haveVehicleModsStreamedIn,
    (void*) Native_isVehicleModGen9Exclusive,
    (void*) Native_setVehicleMod,
    (void*) Native_getVehicleMod,
    (void*) Native_getVehicleModVariation,
    (void*) Native_getNumVehicleMods,
    (void*) Native_removeVehicleMod,
    (void*) Native_toggleVehicleMod,
    (void*) Native_isToggleModOn,
    (void*) Native_getModTextLabel,
    (void*) Native_getModSlotName,
    (void*) Native_getLiveryName,
    (void*) Native_getVehicleModModifierValue,
    (void*) Native_getVehicleModIdentifierHash,
    (void*) Native_preloadVehicleMod,
    (void*) Native_hasPreloadModsFinished,
    (void*) Native_releasePreloadMods,
    (void*) Native_setVehicleTyreSmokeColor,
    (void*) Native_getVehicleTyreSmokeColor,
    (void*) Native_setVehicleWindowTint,
    (void*) Native_getVehicleWindowTint,
    (void*) Native_getNumVehicleWindowTints,
    (void*) Native_getVehicleColor,
    (void*) Native_getVehicleColoursWhichCanBeSet,
    (void*) Native_getVehicleCauseOfDestruction,
    (void*) Native_overridePlaneDamageThrehsold,
    (void*) Native_getIsLeftVehicleHeadlightDamaged,
    (void*) Native_getIsRightVehicleHeadlightDamaged,
    (void*) Native_getBothVehicleHeadlightsDamaged,
    (void*) Native_modifyVehicleTopSpeed,
    (void*) Native_setVehicleMaxSpeed,
    (void*) Native_setVehicleStaysFrozenWhenCleanedUp,
    (void*) Native_setVehicleActAsIfHighSpeedForFragSmashing,
    (void*) Native_setPedsCanFallOffThisVehicleFromLargeFallDamage,
    (void*) Native_addVehicleCombatAngledAvoidanceArea,
    (void*) Native_removeVehicleCombatAvoidanceArea,
    (void*) Native_isAnyPedRappellingFromHeli,
    (void*) Native_setVehicleCheatPowerIncrease,
    (void*) Native_setVehicleInfluencesWantedLevel,
    (void*) Native_setVehicleIsWanted,
    (void*) Native_swingBoatBoomToRatio,
    (void*) Native_swingBoatBoomFreely,
    (void*) Native_allowBoatBoomToAnimate,
    (void*) Native_getBoatBoomPositionRatio,
    (void*) Native_disablePlaneAileron,
    (void*) Native_getIsVehicleEngineRunning,
    (void*) Native_setVehicleUseAlternateHandling,
    (void*) Native_setBikeOnStand,
    (void*) Native_setVehicleNotStealableAmbiently,
    (void*) Native_lockDoorsWhenNoLongerNeeded,
    (void*) Native_setLastDrivenVehicle,
    (void*) Native_getLastDrivenVehicle,
    (void*) Native_clearLastDrivenVehicle,
    (void*) Native_setVehicleHasBeenDrivenFlag,
    (void*) Native_setTaskVehicleGotoPlaneMinHeightAboveTerrain,
    (void*) Native_setVehicleLodMultiplier,
    (void*) Native_setVehicleCanSaveInGarage,
    (void*) Native_getVehicleNumOfBrokenOffParts,
    (void*) Native_getVehicleNumOfBrokenLoosenParts,
    (void*) Native_setForceVehicleEngineDamageByBullet,
    (void*) Native_setVehicleGeneratesEngineShockingEvents,
    (void*) Native_copyVehicleDamages,
    (void*) Native_disableVehicleExplosionBreakOffParts,
    (void*) Native_setLightsCutoffDistanceTweak,
    (void*) Native_setVehicleShootAtTarget,
    (void*) Native_getVehicleLockOnTarget,
    (void*) Native_setForceHdVehicle,
    (void*) Native_setVehicleCustomPathNodeStreamingRadius,
    (void*) Native_getVehiclePlateType,
    (void*) Native_trackVehicleVisibility,
    (void*) Native_isVehicleVisible,
    (void*) Native_setVehicleGravity,
    (void*) Native_setEnableVehicleSlipstreaming,
    (void*) Native_setVehicleSlipstreamingShouldTimeOut,
    (void*) Native_getVehicleCurrentTimeInSlipStream,
    (void*) Native_isVehicleProducingSlipStream,
    (void*) Native_setVehicleInactiveDuringPlayback,
    (void*) Native_setVehicleActiveDuringPlayback,
    (void*) Native_isVehicleSprayable,
    (void*) Native_setVehicleEngineCanDegrade,
    (void*) Native_disableVehcileDynamicAmbientScales,
    (void*) Native_enableVehicleDynamicAmbientScales,
    (void*) Native_isPlaneLandingGearIntact,
    (void*) Native_arePlanePropellersIntact,
    (void*) Native_setPlanePropellerHealth,
    (void*) Native_setVehicleCanDeformWheels,
    (void*) Native_isVehicleStolen,
    (void*) Native_setVehicleIsStolen,
    (void*) Native_setPlaneTurbulenceMultiplier,
    (void*) Native_areWingsOfPlaneIntact,
    (void*) Native_allowAmbientVehiclesToAvoidAdverseConditions,
    (void*) Native_detachVehicleFromCargobob,
    (void*) Native_detachVehicleFromAnyCargobob,
    (void*) Native_detachEntityFromCargobob,
    (void*) Native_isVehicleAttachedToCargobob,
    (void*) Native_getVehicleAttachedToCargobob,
    (void*) Native_getEntityAttachedToCargobob,
    (void*) Native_attachVehicleToCargobob,
    (void*) Native_attachEntityToCargobob,
    (void*) Native_setCargobobForceDontDetachVehicle,
    (void*) Native_setCargobobExcludeFromPickupEntity,
    (void*) Native_canCargobobPickUpEntity,
    (void*) Native_getAttachedPickUpHookPosition,
    (void*) Native_doesCargobobHavePickUpRope,
    (void*) Native_createPickUpRopeForCargobob,
    (void*) Native_removePickUpRopeForCargobob,
    (void*) Native_setPickupRopeLengthForCargobob,
    (void*) Native_setPickupRopeLengthWithoutCreatingRopeForCargobob,
    (void*) Native_setCargobobPickupRopeDampingMultiplier,
    (void*) Native_setCargobobPickupRopeType,
    (void*) Native_doesCargobobHavePickupMagnet,
    (void*) Native_setCargobobPickupMagnetActive,
    (void*) Native_setCargobobPickupMagnetStrength,
    (void*) Native_setCargobobPickupMagnetFalloff,
    (void*) Native_setCargobobPickupMagnetReducedStrength,
    (void*) Native_setCargobobPickupMagnetReducedFalloff,
    (void*) Native_setCargobobPickupMagnetPullStrength,
    (void*) Native_setCargobobPickupMagnetPullRopeLength,
    (void*) Native_setCargobobPickupMagnetSetTargetedMode,
    (void*) Native_setCargobobPickupMagnetSetAmbientMode,
    (void*) Native_setCargobobPickupMagnetEnsurePickupEntityUpright,
    (void*) Native_doesVehicleHaveWeapons,
    (void*) Native_setVehicleWillTellOthersToHurry,
    (void*) Native_disableVehicleWeapon,
    (void*) Native_isVehicleWeaponDisabled,
    (void*) Native_setVehicleUsedForPilotSchool,
    (void*) Native_setVehicleActiveForPedNavigation,
    (void*) Native_getVehicleClass,
    (void*) Native_getVehicleClassFromName,
    (void*) Native_setPlayersLastVehicle,
    (void*) Native_setVehicleCanBeUsedByFleeingPeds,
    (void*) Native_setAircraftPilotSkillNoiseScalar,
    (void*) Native_setVehicleDropsMoneyWhenBlownUp,
    (void*) Native_setVehicleKeepEngineOnWhenAbandoned,
    (void*) Native_setVehicleImpatienceTimer,
    (void*) Native_setVehicleHandlingOverride,
    (void*) Native_setVehicleExtendedRemovalRange,
    (void*) Native_setVehicleSteeringBiasScalar,
    (void*) Native_setHeliControlLaggingRateScalar,
    (void*) Native_setVehicleFrictionOverride,
    (void*) Native_setVehicleWheelsCanBreakOffWhenBlowUp,
    (void*) Native_arePlaneControlPanelsIntact,
    (void*) Native_setVehicleCeilingHeight,
    (void*) Native_setVehicleNoExplosionDamageFromDriver,
    (void*) Native_clearVehicleRouteHistory,
    (void*) Native_doesVehicleExistWithDecorator,
    (void*) Native_setVehicleAiCanUseExclusiveSeats,
    (void*) Native_setVehicleExclusiveDriver,
    (void*) Native_isPedExclusiveDriverOfVehicle,
    (void*) Native_disableIndividualPlanePropeller,
    (void*) Native_setVehicleForceAfterburner,
    (void*) Native_setDontProcessVehicleGlass,
    (void*) Native_setDisableWantedConesResponse,
    (void*) Native_setUseDesiredZCruiseSpeedForLanding,
    (void*) Native_setArriveDistanceOverrideForVehiclePersuitAttack,
    (void*) Native_setVehicleReadyForCleanup,
    (void*) Native_setDistantCarsEnabled,
    (void*) Native_setVehicleNeonColour,
    (void*) Native_setVehicleNeonIndexColour,
    (void*) Native_getVehicleNeonColour,
    (void*) Native_setVehicleNeonEnabled,
    (void*) Native_getVehicleNeonEnabled,
    (void*) Native_setAmbientVehicleNeonEnabled,
    (void*) Native_suppressNeonsOnVehicle,
    (void*) Native_setDisableSuperdummy,
    (void*) Native_requestVehicleDial,
    (void*) Native_getVehicleBodyHealth,
    (void*) Native_setVehicleBodyHealth,
    (void*) Native_getVehicleSize,
    (void*) Native_getFakeSuspensionLoweringAmount,
    (void*) Native_setCarHighSpeedBumpSeverityMultiplier,
    (void*) Native_getNumberOfVehicleDoors,
    (void*) Native_setHydraulicsControl,
    (void*) Native_setCanAdjustGroundClearance,
    (void*) Native_getVehicleHealthPercentage,
    (void*) Native_getVehicleIsMercenary,
    (void*) Native_setVehicleBrokenPartsDontAffectAiHandling,
    (void*) Native_setVehicleKersAllowed,
    (void*) Native_getVehicleHasKers,
    (void*) Native_setPlaneResistToExplosion,
    (void*) Native_setHeliResistToExplosion,
    (void*) Native_setDisableBmxExtraTrickForces,
    (void*) Native_setHydraulicSuspensionRaiseFactor,
    (void*) Native_getHydraulicSuspensionRaiseFactor,
    (void*) Native_setCanUseHydraulics,
    (void*) Native_setHydraulicVehicleState,
    (void*) Native_setHydraulicWheelState,
    (void*) Native_hasVehiclePetroltankSetOnFireByEntity,
    (void*) Native_clearVehiclePetroltankFireCulprit,
    (void*) Native_setVehicleBobbleheadVelocity,
    (void*) Native_getVehicleIsDummy,
    (void*) Native_setVehicleDamageScale,
    (void*) Native_setVehicleWeaponDamageScale,
    (void*) Native_setDisableDamageWithPickedUpEntity,
    (void*) Native_setVehicleUsesMpPlayerDamageMultiplier,
    (void*) Native_setBikeEasyToLand,
    (void*) Native_setInvertVehicleControls,
    (void*) Native_setSpeedBoostEffectDisabled,
    (void*) Native_setSlowDownEffectDisabled,
    (void*) Native_setFormationLeader,
    (void*) Native_resetFormationLeader,
    (void*) Native_getIsBoatCapsized,
    (void*) Native_setAllowRammingSoopOrRamp,
    (void*) Native_setScriptRampImpulseScale,
    (void*) Native_getIsDoorValid,
    (void*) Native_setScriptRocketBoostRechargeTime,
    (void*) Native_getHasRocketBoost,
    (void*) Native_isRocketBoostActive,
    (void*) Native_setRocketBoostActive,
    (void*) Native_getHasRetractableWheels,
    (void*) Native_getIsWheelsRetracted,
    (void*) Native_setWheelsExtendedInstantly,
    (void*) Native_setWheelsRetractedInstantly,
    (void*) Native_getCarHasJump,
    (void*) Native_setUseHigherCarJump,
    (void*) Native_setClearFreezeWaitingOnCollisionOncePlayerEnters,
    (void*) Native_setVehicleWeaponRestrictedAmmo,
    (void*) Native_getVehicleWeaponRestrictedAmmo,
    (void*) Native_getVehicleHasParachute,
    (void*) Native_getVehicleCanDeployParachute,
    (void*) Native_vehicleStartParachuting,
    (void*) Native_isVehicleParachuteDeployed,
    (void*) Native_vehicleSetRampAndRammingCarsTakeDamage,
    (void*) Native_vehicleSetEnableRampCarSideImpulse,
    (void*) Native_vehicleSetEnableNormaliseRampCarVerticalVeloctiy,
    (void*) Native_vehicleSetJetWashForceEnabled,
    (void*) Native_setVehicleWeaponCanTargetObjects,
    (void*) Native_setVehicleUseBoostButtonForWheelRetract,
    (void*) Native_vehicleSetParachuteModelOverride,
    (void*) Native_vehicleSetParachuteModelTintIndex,
    (void*) Native_vehicleSetOverrideExtenableSideRatio,
    (void*) Native_vehicleSetExtenableSideTargetRatio,
    (void*) Native_vehicleSetOverrideSideRatio,
    (void*) Native_getAllVehicles,
    (void*) Native_setCargobobExtaPickupRange,
    (void*) Native_setOverrideVehicleDoorTorque,
    (void*) Native_setWheelieEnabled,
    (void*) Native_setDisableHeliExplodeFromBodyDamage,
    (void*) Native_setDisableExplodeFromBodyDamageOnCollision,
    (void*) Native_setTrailerAttachmentEnabled,
    (void*) Native_setRocketBoostFill,
    (void*) Native_setGliderActive,
    (void*) Native_setShouldResetTurretInScriptedCameras,
    (void*) Native_setVehicleDisableCollisionUponCreation,
    (void*) Native_setGroundEffectReducesDrag,
    (void*) Native_setDisableMapCollision,
    (void*) Native_setDisablePedStandOnTop,
    (void*) Native_setVehicleDamageScales,
    (void*) Native_setPlaneSectionDamageScale,
    (void*) Native_setHeliCanPickupEntityThatHasPickUpDisabled,
    (void*) Native_setVehicleBombAmmo,
    (void*) Native_getVehicleBombAmmo,
    (void*) Native_setVehicleCountermeasureAmmo,
    (void*) Native_getVehicleCountermeasureAmmo,
    (void*) Native_setHeliCombatOffset,
    (void*) Native_getCanVehicleBePlacedHere,
    (void*) Native_setDisableAutomaticCrashTask,
    (void*) Native_setSpecialFlightModeRatio,
    (void*) Native_setSpecialFlightModeTargetRatio,
    (void*) Native_setSpecialFlightModeAllowed,
    (void*) Native_setDisableHoverModeFlight,
    (void*) Native_getOutriggersDeployed,
    (void*) Native_findSpawnCoordinatesForHeli,
    (void*) Native_setDeployFoldingWings,
    (void*) Native_areFoldingWingsDeployed,
    (void*) Native_setDipStraightDownWhenCrashingPlane,
    (void*) Native_setTurretHidden,
    (void*) Native_setHoverModeWingRatio,
    (void*) Native_setDisableTurretMovement,
    (void*) Native_setForceFixLinkMatrices,
    (void*) Native_setTransformRateForAnimation,
    (void*) Native_setTransformToSubmarineUsesAlternateInput,
    (void*) Native_setVehicleCombatMode,
    (void*) Native_setVehicleDetonationMode,
    (void*) Native_setVehicleShuntOnStick,
    (void*) Native_getIsVehicleShunting,
    (void*) Native_getHasVehicleBeenHitByShunt,
    (void*) Native_getLastShuntVehicle,
    (void*) Native_setDisableVehicleExplosionsDamage,
    (void*) Native_setOverrideNitrousLevel,
    (void*) Native_setIncreaseWheelCrushDamage,
    (void*) Native_setDisableWeaponBladeForces,
    (void*) Native_setUseDoubleClickForCarJump,
    (void*) Native_getDoesVehicleHaveTombstone,
    (void*) Native_hideTombstone,
    (void*) Native_getIsVehicleDisabledByEmp,
    (void*) Native_setDisableRetractingWeaponBlades,
    (void*) Native_getTyreHealth,
    (void*) Native_setTyreHealth,
    (void*) Native_getTyreWearRate,
    (void*) Native_setTyreWearRate,
    (void*) Native_setTyreMaximumGripDifferenceDueToWearRate,
    (void*) Native_setAircraftIgnoreHightmapOptimisation,
    (void*) Native_setReducedSuspensionForce,
    (void*) Native_setDriftTyres,
    (void*) Native_getDriftTyresSet,
    (void*) Native_networkUseHighPrecisionTrainBlending,
    (void*) Native_setCheckForEnoughRoomForPed,
    (void*) Native_getWaterHeight,
    (void*) Native_getWaterHeightNoWaves,
    (void*) Native_testProbeAgainstWater,
    (void*) Native_testProbeAgainstAllWater,
    (void*) Native_testVerticalProbeAgainstAllWater,
    (void*) Native_modifyWater,
    (void*) Native_addExtraCalmingQuad,
    (void*) Native_removeExtraCalmingQuad,
    (void*) Native_setDeepOceanScaler,
    (void*) Native_getDeepOceanScaler,
    (void*) Native_setCalmedWaveHeightScaler,
    (void*) Native_resetDeepOceanScaler,
    (void*) Native_enableLaserSightRendering,
    (void*) Native_getWeaponComponentTypeModel,
    (void*) Native_getWeapontypeModel,
    (void*) Native_getWeapontypeSlot,
    (void*) Native_getWeapontypeGroup,
    (void*) Native_getWeaponComponentVariantExtraCount,
    (void*) Native_getWeaponComponentVariantExtraModel,
    (void*) Native_setCurrentPedWeapon,
    (void*) Native_getCurrentPedWeapon,
    (void*) Native_getCurrentPedWeaponEntityIndex,
    (void*) Native_getBestPedWeapon,
    (void*) Native_setCurrentPedVehicleWeapon,
    (void*) Native_getCurrentPedVehicleWeapon,
    (void*) Native_setPedCycleVehicleWeaponsOnly,
    (void*) Native_isPedArmed,
    (void*) Native_isWeaponValid,
    (void*) Native_hasPedGotWeapon,
    (void*) Native_isPedWeaponReadyToShoot,
    (void*) Native_getPedWeapontypeInSlot,
    (void*) Native_getAmmoInPedWeapon,
    (void*) Native_addAmmoToPed,
    (void*) Native_setPedAmmo,
    (void*) Native_setPedInfiniteAmmo,
    (void*) Native_setPedInfiniteAmmoClip,
    (void*) Native_setPedStunGunFiniteAmmo,
    (void*) Native_giveWeaponToPed,
    (void*) Native_giveDelayedWeaponToPed,
    (void*) Native_removeAllPedWeapons,
    (void*) Native_removeWeaponFromPed,
    (void*) Native_hidePedWeaponForScriptedCutscene,
    (void*) Native_setPedCurrentWeaponVisible,
    (void*) Native_setPedDropsWeaponsWhenDead,
    (void*) Native_hasPedBeenDamagedByWeapon,
    (void*) Native_clearPedLastWeaponDamage,
    (void*) Native_hasEntityBeenDamagedByWeapon,
    (void*) Native_clearEntityLastWeaponDamage,
    (void*) Native_setPedDropsWeapon,
    (void*) Native_setPedDropsInventoryWeapon,
    (void*) Native_getMaxAmmoInClip,
    (void*) Native_getAmmoInClip,
    (void*) Native_setAmmoInClip,
    (void*) Native_getMaxAmmo,
    (void*) Native_getMaxAmmoByType,
    (void*) Native_addPedAmmoByType,
    (void*) Native_setPedAmmoByType,
    (void*) Native_getPedAmmoByType,
    (void*) Native_setPedAmmoToDrop,
    (void*) Native_setPickupAmmoAmountScaler,
    (void*) Native_getPedAmmoTypeFromWeapon,
    (void*) Native_getPedOriginalAmmoTypeFromWeapon,
    (void*) Native_getPedLastWeaponImpactCoord,
    (void*) Native_setPedGadget,
    (void*) Native_getIsPedGadgetEquipped,
    (void*) Native_getSelectedPedWeapon,
    (void*) Native_explodeProjectiles,
    (void*) Native_removeAllProjectilesOfType,
    (void*) Native_getLockonDistanceOfCurrentPedWeapon,
    (void*) Native_getMaxRangeOfCurrentPedWeapon,
    (void*) Native_hasVehicleGotProjectileAttached,
    (void*) Native_giveWeaponComponentToPed,
    (void*) Native_removeWeaponComponentFromPed,
    (void*) Native_hasPedGotWeaponComponent,
    (void*) Native_isPedWeaponComponentActive,
    (void*) Native_refillAmmoInstantly,
    (void*) Native_makePedReload,
    (void*) Native_requestWeaponAsset,
    (void*) Native_hasWeaponAssetLoaded,
    (void*) Native_removeWeaponAsset,
    (void*) Native_createWeaponObject,
    (void*) Native_giveWeaponComponentToWeaponObject,
    (void*) Native_removeWeaponComponentFromWeaponObject,
    (void*) Native_hasWeaponGotWeaponComponent,
    (void*) Native_giveWeaponObjectToPed,
    (void*) Native_doesWeaponTakeWeaponComponent,
    (void*) Native_getWeaponObjectFromPed,
    (void*) Native_giveLoadoutToPed,
    (void*) Native_setPedWeaponTintIndex,
    (void*) Native_getPedWeaponTintIndex,
    (void*) Native_setWeaponObjectTintIndex,
    (void*) Native_getWeaponObjectTintIndex,
    (void*) Native_getWeaponTintCount,
    (void*) Native_setPedWeaponComponentTintIndex,
    (void*) Native_getPedWeaponComponentTintIndex,
    (void*) Native_setWeaponObjectComponentTintIndex,
    (void*) Native_getWeaponObjectComponentTintIndex,
    (void*) Native_getPedWeaponCamoIndex,
    (void*) Native_setWeaponObjectCamoIndex,
    (void*) Native_getWeaponHudStats,
    (void*) Native_getWeaponComponentHudStats,
    (void*) Native_getWeaponDamage,
    (void*) Native_getWeaponClipSize,
    (void*) Native_getWeaponTimeBetweenShots,
    (void*) Native_setPedChanceOfFiringBlanks,
    (void*) Native_setPedShootOrdnanceWeapon,
    (void*) Native_requestWeaponHighDetailModel,
    (void*) Native_setWeaponDamageModifier,
    (void*) Native_setWeaponAoeModifier,
    (void*) Native_setWeaponEffectDurationModifier,
    (void*) Native_isPedCurrentWeaponSilenced,
    (void*) Native_isFlashLightOn,
    (void*) Native_setFlashLightFadeDistance,
    (void*) Native_setFlashLightActiveHistory,
    (void*) Native_setWeaponAnimationOverride,
    (void*) Native_getWeaponDamageType,
    (void*) Native_setEqippedWeaponStartSpinningAtFullSpeed,
    (void*) Native_canUseWeaponOnParachute,
    (void*) Native_createAirDefenceSphere,
    (void*) Native_createAirDefenceAngledArea,
    (void*) Native_removeAirDefenceSphere,
    (void*) Native_removeAllAirDefenceSpheres,
    (void*) Native_setPlayerTargettableForAirDefenceSphere,
    (void*) Native_isAirDefenceSphereInArea,
    (void*) Native_fireAirDefenceSphereWeaponAtPosition,
    (void*) Native_doesAirDefenceSphereExist,
    (void*) Native_setCanPedSelectInventoryWeapon,
    (void*) Native_setCanPedSelectAllWeapons,
    (void*) Native_getZoneAtCoords,
    (void*) Native_getZoneFromNameId,
    (void*) Native_getZonePopschedule,
    (void*) Native_getNameOfZone,
    (void*) Native_setZoneEnabled,
    (void*) Native_getZoneScumminess,
    (void*) Native_overridePopscheduleVehicleModel,
    (void*) Native_clearPopscheduleOverrideVehicleModel,
    (void*) Native_getHashOfMapAreaAtCoords,
};

void* GetNativeFuncTable() {
    static constexpr function_table_t data {
        std::extent<decltype(hashes)>::value,
        &hashes[0],
        &pointers[0]
    };
    return (void*) &data;
}
